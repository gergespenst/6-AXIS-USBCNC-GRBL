<<<<<<< HEAD

stm32grbl11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd70  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  0800be80  0800be80  0001be80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c534  0800c534  0001c534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c538  0800c538  0001c538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  20000000  0800c53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001174  200001e4  0800c720  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  20001358  0800c720  00021358  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000273bc  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006649  00000000  00000000  000475c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f750  00000000  00000000  0004dc12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010e8  00000000  00000000  0005d368  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000035e8  00000000  00000000  0005e450  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b773  00000000  00000000  00061a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000053b4  00000000  00000000  0006d1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007255f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000032fc  00000000  00000000  000725dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800be68 	.word	0x0800be68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800be68 	.word	0x0800be68

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	; 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	d1ed      	bne.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fmul>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d06f      	beq.n	8000da8 <__aeabi_fmul+0xf8>
 8000cc8:	441a      	add	r2, r3
 8000cca:	ea80 0c01 	eor.w	ip, r0, r1
 8000cce:	0240      	lsls	r0, r0, #9
 8000cd0:	bf18      	it	ne
 8000cd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cd6:	d01e      	beq.n	8000d16 <__aeabi_fmul+0x66>
 8000cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ce4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf0:	bf3e      	ittt	cc
 8000cf2:	0049      	lslcc	r1, r1, #1
 8000cf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	ea40 0001 	orr.w	r0, r0, r1
 8000cfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d02:	2afd      	cmp	r2, #253	; 0xfd
 8000d04:	d81d      	bhi.n	8000d42 <__aeabi_fmul+0x92>
 8000d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d0e:	bf08      	it	eq
 8000d10:	f020 0001 	biceq.w	r0, r0, #1
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d1e:	bf08      	it	eq
 8000d20:	0249      	lsleq	r1, r1, #9
 8000d22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d2a:	3a7f      	subs	r2, #127	; 0x7f
 8000d2c:	bfc2      	ittt	gt
 8000d2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d36:	4770      	bxgt	lr
 8000d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	dc5d      	bgt.n	8000e00 <__aeabi_fmul+0x150>
 8000d44:	f112 0f19 	cmn.w	r2, #25
 8000d48:	bfdc      	itt	le
 8000d4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d4e:	4770      	bxle	lr
 8000d50:	f1c2 0200 	rsb	r2, r2, #0
 8000d54:	0041      	lsls	r1, r0, #1
 8000d56:	fa21 f102 	lsr.w	r1, r1, r2
 8000d5a:	f1c2 0220 	rsb	r2, r2, #32
 8000d5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d62:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d66:	f140 0000 	adc.w	r0, r0, #0
 8000d6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d6e:	bf08      	it	eq
 8000d70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d74:	4770      	bx	lr
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fmul+0xce>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xe6>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e78f      	b.n	8000cc8 <__aeabi_fmul+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	bf18      	it	ne
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d00a      	beq.n	8000dce <__aeabi_fmul+0x11e>
 8000db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dbc:	bf18      	it	ne
 8000dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	d1d8      	bne.n	8000d76 <__aeabi_fmul+0xc6>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	bf17      	itett	ne
 8000dd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd8:	4608      	moveq	r0, r1
 8000dda:	f091 0f00 	teqne	r1, #0
 8000dde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000de2:	d014      	beq.n	8000e0e <__aeabi_fmul+0x15e>
 8000de4:	ea92 0f0c 	teq	r2, ip
 8000de8:	d101      	bne.n	8000dee <__aeabi_fmul+0x13e>
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	d10f      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dee:	ea93 0f0c 	teq	r3, ip
 8000df2:	d103      	bne.n	8000dfc <__aeabi_fmul+0x14c>
 8000df4:	024b      	lsls	r3, r1, #9
 8000df6:	bf18      	it	ne
 8000df8:	4608      	movne	r0, r1
 8000dfa:	d108      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dfc:	ea80 0001 	eor.w	r0, r0, r1
 8000e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bx	lr
 8000e0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_fdiv>:
 8000e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e20:	bf1e      	ittt	ne
 8000e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e26:	ea92 0f0c 	teqne	r2, ip
 8000e2a:	ea93 0f0c 	teqne	r3, ip
 8000e2e:	d069      	beq.n	8000f04 <__aeabi_fdiv+0xec>
 8000e30:	eba2 0203 	sub.w	r2, r2, r3
 8000e34:	ea80 0c01 	eor.w	ip, r0, r1
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e3e:	d037      	beq.n	8000eb0 <__aeabi_fdiv+0x98>
 8000e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	428b      	cmp	r3, r1
 8000e52:	bf38      	it	cc
 8000e54:	005b      	lslcc	r3, r3, #1
 8000e56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	bf24      	itt	cs
 8000e62:	1a5b      	subcs	r3, r3, r1
 8000e64:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e7a:	bf24      	itt	cs
 8000e7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e88:	bf24      	itt	cs
 8000e8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	bf18      	it	ne
 8000e96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e9a:	d1e0      	bne.n	8000e5e <__aeabi_fdiv+0x46>
 8000e9c:	2afd      	cmp	r2, #253	; 0xfd
 8000e9e:	f63f af50 	bhi.w	8000d42 <__aeabi_fmul+0x92>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea8:	bf08      	it	eq
 8000eaa:	f020 0001 	biceq.w	r0, r0, #1
 8000eae:	4770      	bx	lr
 8000eb0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eb4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb8:	327f      	adds	r2, #127	; 0x7f
 8000eba:	bfc2      	ittt	gt
 8000ebc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ec4:	4770      	bxgt	lr
 8000ec6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	3a01      	subs	r2, #1
 8000ed0:	e737      	b.n	8000d42 <__aeabi_fmul+0x92>
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0040      	lsleq	r0, r0, #1
 8000ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee2:	3a01      	subeq	r2, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fdiv+0xc2>
 8000ee6:	ea40 000c 	orr.w	r0, r0, ip
 8000eea:	f093 0f00 	teq	r3, #0
 8000eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0049      	lsleq	r1, r1, #1
 8000ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efa:	3b01      	subeq	r3, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xda>
 8000efe:	ea41 010c 	orr.w	r1, r1, ip
 8000f02:	e795      	b.n	8000e30 <__aeabi_fdiv+0x18>
 8000f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f08:	ea92 0f0c 	teq	r2, ip
 8000f0c:	d108      	bne.n	8000f20 <__aeabi_fdiv+0x108>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	f47f af7d 	bne.w	8000e0e <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	f47f af70 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e776      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f20:	ea93 0f0c 	teq	r3, ip
 8000f24:	d104      	bne.n	8000f30 <__aeabi_fdiv+0x118>
 8000f26:	024b      	lsls	r3, r1, #9
 8000f28:	f43f af4c 	beq.w	8000dc4 <__aeabi_fmul+0x114>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e76e      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f34:	bf18      	it	ne
 8000f36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	d1ca      	bne.n	8000ed2 <__aeabi_fdiv+0xba>
 8000f3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f40:	f47f af5c 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f48:	f47f af3c 	bne.w	8000dc4 <__aeabi_fmul+0x114>
 8000f4c:	e75f      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f4e:	bf00      	nop

08000f50 <__gesf2>:
 8000f50:	f04f 3cff 	mov.w	ip, #4294967295
 8000f54:	e006      	b.n	8000f64 <__cmpsf2+0x4>
 8000f56:	bf00      	nop

08000f58 <__lesf2>:
 8000f58:	f04f 0c01 	mov.w	ip, #1
 8000f5c:	e002      	b.n	8000f64 <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__cmpsf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	bf18      	it	ne
 8000f76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f7a:	d011      	beq.n	8000fa0 <__cmpsf2+0x40>
 8000f7c:	b001      	add	sp, #4
 8000f7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f82:	bf18      	it	ne
 8000f84:	ea90 0f01 	teqne	r0, r1
 8000f88:	bf58      	it	pl
 8000f8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f8e:	bf88      	it	hi
 8000f90:	17c8      	asrhi	r0, r1, #31
 8000f92:	bf38      	it	cc
 8000f94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f98:	bf18      	it	ne
 8000f9a:	f040 0001 	orrne.w	r0, r0, #1
 8000f9e:	4770      	bx	lr
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	d102      	bne.n	8000fac <__cmpsf2+0x4c>
 8000fa6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000faa:	d105      	bne.n	8000fb8 <__cmpsf2+0x58>
 8000fac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb0:	d1e4      	bne.n	8000f7c <__cmpsf2+0x1c>
 8000fb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fb6:	d0e1      	beq.n	8000f7c <__cmpsf2+0x1c>
 8000fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_cfrcmple>:
 8000fc0:	4684      	mov	ip, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4661      	mov	r1, ip
 8000fc6:	e7ff      	b.n	8000fc8 <__aeabi_cfcmpeq>

08000fc8 <__aeabi_cfcmpeq>:
 8000fc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fca:	f7ff ffc9 	bl	8000f60 <__cmpsf2>
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	bf48      	it	mi
 8000fd2:	f110 0f00 	cmnmi.w	r0, #0
 8000fd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fd8 <__aeabi_fcmpeq>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff fff4 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2001      	moveq	r0, #1
 8000fe4:	2000      	movne	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmplt>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffea 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000ff4:	bf34      	ite	cc
 8000ff6:	2001      	movcc	r0, #1
 8000ff8:	2000      	movcs	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmple>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffe0 	bl	8000fc8 <__aeabi_cfcmpeq>
 8001008:	bf94      	ite	ls
 800100a:	2001      	movls	r0, #1
 800100c:	2000      	movhi	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmpge>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffd2 	bl	8000fc0 <__aeabi_cfrcmple>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpgt>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffc8 	bl	8000fc0 <__aeabi_cfrcmple>
 8001030:	bf34      	ite	cc
 8001032:	2001      	movcc	r0, #1
 8001034:	2000      	movcs	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpun>:
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x14>
 800104a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800104e:	d108      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 8001050:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001054:	d102      	bne.n	800105c <__aeabi_fcmpun+0x20>
 8001056:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105a:	d102      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	f04f 0001 	mov.w	r0, #1
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2iz>:
 8001068:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30f      	bcc.n	8001092 <__aeabi_f2iz+0x2a>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d90d      	bls.n	8001098 <__aeabi_f2iz+0x30>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	bf18      	it	ne
 800108e:	4240      	negne	r0, r0
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2iz+0x3a>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d105      	bne.n	80010ae <__aeabi_f2iz+0x46>
 80010a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010a6:	bf08      	it	eq
 80010a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr

080010b4 <__aeabi_f2uiz>:
 80010b4:	0042      	lsls	r2, r0, #1
 80010b6:	d20e      	bcs.n	80010d6 <__aeabi_f2uiz+0x22>
 80010b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010bc:	d30b      	bcc.n	80010d6 <__aeabi_f2uiz+0x22>
 80010be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c6:	d409      	bmi.n	80010dc <__aeabi_f2uiz+0x28>
 80010c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d0:	fa23 f002 	lsr.w	r0, r3, r2
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2uiz+0x32>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d102      	bne.n	80010ec <__aeabi_f2uiz+0x38>
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ea:	4770      	bx	lr
 80010ec:	f04f 0000 	mov.w	r0, #0
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010f4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <NVIC_PriorityGroupConfig+0x10>)
 80010fa:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80010fe:	60d8      	str	r0, [r3, #12]
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001108:	78c3      	ldrb	r3, [r0, #3]
 800110a:	b95b      	cbnz	r3, 8001124 <NVIC_Init+0x1c>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800110c:	2101      	movs	r1, #1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800110e:	7803      	ldrb	r3, [r0, #0]
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <NVIC_Init+0x5c>)
 8001112:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001114:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001118:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800111e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }
}
 8001122:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <NVIC_Init+0x60>)
    tmpsub = tmpsub >> tmppriority;
 8001126:	210f      	movs	r1, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001128:	68da      	ldr	r2, [r3, #12]
{
 800112a:	b470      	push	{r4, r5, r6}
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800112c:	43d2      	mvns	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800112e:	2401      	movs	r4, #1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001130:	7885      	ldrb	r5, [r0, #2]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001132:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001134:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8001138:	f1c2 0604 	rsb	r6, r2, #4
    tmpsub = tmpsub >> tmppriority;
 800113c:	fa21 f202 	lsr.w	r2, r1, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001140:	402a      	ands	r2, r5
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001142:	40b3      	lsls	r3, r6
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001144:	7801      	ldrb	r1, [r0, #0]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001146:	4313      	orrs	r3, r2
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <NVIC_Init+0x5c>)
    tmppriority = tmppriority << 0x04;
 800114a:	011b      	lsls	r3, r3, #4
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800114c:	f001 051f 	and.w	r5, r1, #31
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001150:	1850      	adds	r0, r2, r1
 8001152:	b2db      	uxtb	r3, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001154:	40ac      	lsls	r4, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001156:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800115a:	0949      	lsrs	r1, r1, #5
 800115c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
}
 8001160:	bc70      	pop	{r4, r5, r6}
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800116c:	7983      	ldrb	r3, [r0, #6]
 800116e:	b333      	cbz	r3, 80011be <EXTI_Init+0x52>
{
 8001170:	b430      	push	{r4, r5}
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001172:	6804      	ldr	r4, [r0, #0]
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <EXTI_Init+0x78>)
 8001176:	43e1      	mvns	r1, r4
 8001178:	681d      	ldr	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800117a:	7902      	ldrb	r2, [r0, #4]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800117c:	400d      	ands	r5, r1
 800117e:	601d      	str	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001180:	685d      	ldr	r5, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001182:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001186:	4029      	ands	r1, r5
 8001188:	6059      	str	r1, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 800118a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800118e:	6815      	ldr	r5, [r2, #0]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001190:	7941      	ldrb	r1, [r0, #5]
    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001192:	432c      	orrs	r4, r5
 8001194:	6014      	str	r4, [r2, #0]
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001196:	6802      	ldr	r2, [r0, #0]
 8001198:	689c      	ldr	r4, [r3, #8]
 800119a:	43d0      	mvns	r0, r2
 800119c:	4004      	ands	r4, r0
 800119e:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a0:	68dc      	ldr	r4, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011a2:	2910      	cmp	r1, #16
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a4:	ea00 0004 	and.w	r0, r0, r4
 80011a8:	60d8      	str	r0, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011aa:	d013      	beq.n	80011d4 <EXTI_Init+0x68>
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80011ac:	bc30      	pop	{r4, r5}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80011ae:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80011b2:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	4770      	bx	lr
    tmp += EXTI_InitStruct->EXTI_Mode;
 80011be:	7903      	ldrb	r3, [r0, #4]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011c0:	6801      	ldr	r1, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 80011c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011c6:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	ea22 0201 	bic.w	r2, r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d4:	6899      	ldr	r1, [r3, #8]
}
 80011d6:	bc30      	pop	{r4, r5}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d8:	4311      	orrs	r1, r2
 80011da:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
}
 80011e2:	4770      	bx	lr
 80011e4:	40010400 	.word	0x40010400

080011e8 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <EXTI_GetITStatus+0x18>)
 80011ea:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4003      	ands	r3, r0
 80011f0:	d004      	beq.n	80011fc <EXTI_GetITStatus+0x14>
 80011f2:	4202      	tst	r2, r0
 80011f4:	bf14      	ite	ne
 80011f6:	2001      	movne	r0, #1
 80011f8:	2000      	moveq	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	4618      	mov	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80011fe:	4770      	bx	lr
 8001200:	40010400 	.word	0x40010400

08001204 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001204:	4b01      	ldr	r3, [pc, #4]	; (800120c <EXTI_ClearITPendingBit+0x8>)
 8001206:	6158      	str	r0, [r3, #20]
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40010400 	.word	0x40010400

08001210 <FLASH_Unlock>:
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <FLASH_Unlock+0xc>)
 8001212:	4903      	ldr	r1, [pc, #12]	; (8001220 <FLASH_Unlock+0x10>)
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <FLASH_Unlock+0x14>)
 8001216:	6059      	str	r1, [r3, #4]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	4770      	bx	lr
 800121c:	40022000 	.word	0x40022000
 8001220:	45670123 	.word	0x45670123
 8001224:	cdef89ab 	.word	0xcdef89ab

08001228 <FLASH_ErasePage>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001228:	4938      	ldr	r1, [pc, #224]	; (800130c <FLASH_ErasePage+0xe4>)
 800122a:	68cb      	ldr	r3, [r1, #12]
 800122c:	f013 0f01 	tst.w	r3, #1
 8001230:	68cb      	ldr	r3, [r1, #12]
 8001232:	d103      	bne.n	800123c <FLASH_ErasePage+0x14>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001234:	075b      	lsls	r3, r3, #29
 8001236:	d538      	bpl.n	80012aa <FLASH_ErasePage+0x82>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001238:	2002      	movs	r0, #2
 800123a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800123c:	07db      	lsls	r3, r3, #31
 800123e:	d42c      	bmi.n	800129a <FLASH_ErasePage+0x72>
 8001240:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <FLASH_ErasePage+0xe4>)
 8001246:	68d1      	ldr	r1, [r2, #12]
 8001248:	0749      	lsls	r1, r1, #29
 800124a:	d505      	bpl.n	8001258 <FLASH_ErasePage+0x30>
      flashstatus = FLASH_ERROR_PG;
 800124c:	2002      	movs	r0, #2
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
  {
    status = FLASH_GetBank1Status();
    Timeout--;
 800124e:	3b01      	subs	r3, #1
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf08      	it	eq
 8001254:	2005      	moveq	r0, #5
 8001256:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001258:	68d2      	ldr	r2, [r2, #12]
 800125a:	06d2      	lsls	r2, r2, #27
 800125c:	d41a      	bmi.n	8001294 <FLASH_ErasePage+0x6c>
  if(Timeout == 0x00 )
 800125e:	2b01      	cmp	r3, #1
 8001260:	d021      	beq.n	80012a6 <FLASH_ErasePage+0x7e>
    FLASH->CR|= CR_PER_Set;
 8001262:	4a2a      	ldr	r2, [pc, #168]	; (800130c <FLASH_ErasePage+0xe4>)
 8001264:	6913      	ldr	r3, [r2, #16]
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 800126c:	6150      	str	r0, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 800126e:	6913      	ldr	r3, [r2, #16]
 8001270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001274:	6113      	str	r3, [r2, #16]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001276:	68d3      	ldr	r3, [r2, #12]
 8001278:	f013 0f01 	tst.w	r3, #1
 800127c:	68d3      	ldr	r3, [r2, #12]
 800127e:	d119      	bne.n	80012b4 <FLASH_ErasePage+0x8c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001280:	075b      	lsls	r3, r3, #29
 8001282:	d53b      	bpl.n	80012fc <FLASH_ErasePage+0xd4>
      flashstatus = FLASH_ERROR_PG;
 8001284:	2002      	movs	r0, #2
    FLASH->CR &= CR_PER_Reset;
 8001286:	f641 71fd 	movw	r1, #8189	; 0x1ffd
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <FLASH_ErasePage+0xe4>)
 800128c:	6913      	ldr	r3, [r2, #16]
 800128e:	400b      	ands	r3, r1
 8001290:	6113      	str	r3, [r2, #16]
 8001292:	4770      	bx	lr
        flashstatus = FLASH_ERROR_WRP;
 8001294:	2003      	movs	r0, #3
    Timeout--;
 8001296:	3b01      	subs	r3, #1
 8001298:	e7da      	b.n	8001250 <FLASH_ErasePage+0x28>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <FLASH_ErasePage+0xe8>)
 800129c:	68ca      	ldr	r2, [r1, #12]
 800129e:	07d2      	lsls	r2, r2, #31
 80012a0:	d5d0      	bpl.n	8001244 <FLASH_ErasePage+0x1c>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80012a2:	3b01      	subs	r3, #1
 80012a4:	d1fa      	bne.n	800129c <FLASH_ErasePage+0x74>
    status = FLASH_TIMEOUT;
 80012a6:	2005      	movs	r0, #5
 80012a8:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012aa:	68cb      	ldr	r3, [r1, #12]
 80012ac:	06d9      	lsls	r1, r3, #27
 80012ae:	d5d8      	bpl.n	8001262 <FLASH_ErasePage+0x3a>
        flashstatus = FLASH_ERROR_WRP;
 80012b0:	2003      	movs	r0, #3
 80012b2:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012b4:	07d9      	lsls	r1, r3, #31
 80012b6:	d409      	bmi.n	80012cc <FLASH_ErasePage+0xa4>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012b8:	68d3      	ldr	r3, [r2, #12]
 80012ba:	075b      	lsls	r3, r3, #29
 80012bc:	d4e2      	bmi.n	8001284 <FLASH_ErasePage+0x5c>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012be:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80012c0:	f013 0f10 	tst.w	r3, #16
 80012c4:	bf14      	ite	ne
 80012c6:	2003      	movne	r0, #3
 80012c8:	2004      	moveq	r0, #4
 80012ca:	e7dc      	b.n	8001286 <FLASH_ErasePage+0x5e>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <FLASH_ErasePage+0xe8>)
 80012ce:	68d1      	ldr	r1, [r2, #12]
 80012d0:	07c9      	lsls	r1, r1, #31
 80012d2:	d408      	bmi.n	80012e6 <FLASH_ErasePage+0xbe>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012d4:	68d1      	ldr	r1, [r2, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	0749      	lsls	r1, r1, #29
 80012da:	d508      	bpl.n	80012ee <FLASH_ErasePage+0xc6>
      flashstatus = FLASH_ERROR_PG;
 80012dc:	2002      	movs	r0, #2
    status = FLASH_TIMEOUT;
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf08      	it	eq
 80012e2:	2005      	moveq	r0, #5
 80012e4:	e7cf      	b.n	8001286 <FLASH_ErasePage+0x5e>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80012e6:	3b01      	subs	r3, #1
 80012e8:	d1f1      	bne.n	80012ce <FLASH_ErasePage+0xa6>
    status = FLASH_TIMEOUT;
 80012ea:	2005      	movs	r0, #5
 80012ec:	e7cb      	b.n	8001286 <FLASH_ErasePage+0x5e>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012ee:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80012f0:	f012 0f10 	tst.w	r2, #16
 80012f4:	bf14      	ite	ne
 80012f6:	2003      	movne	r0, #3
 80012f8:	2004      	moveq	r0, #4
 80012fa:	e7f0      	b.n	80012de <FLASH_ErasePage+0xb6>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012fc:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 80012fe:	f013 0f10 	tst.w	r3, #16
 8001302:	bf0c      	ite	eq
 8001304:	2004      	moveq	r0, #4
 8001306:	2003      	movne	r0, #3
 8001308:	e7bd      	b.n	8001286 <FLASH_ErasePage+0x5e>
 800130a:	bf00      	nop
 800130c:	40022000 	.word	0x40022000
 8001310:	000affff 	.word	0x000affff

08001314 <FLASH_ProgramHalfWord>:
{
 8001314:	b410      	push	{r4}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001316:	4c39      	ldr	r4, [pc, #228]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001318:	68e3      	ldr	r3, [r4, #12]
 800131a:	f013 0f01 	tst.w	r3, #1
 800131e:	68e3      	ldr	r3, [r4, #12]
 8001320:	d104      	bne.n	800132c <FLASH_ProgramHalfWord+0x18>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001322:	075b      	lsls	r3, r3, #29
 8001324:	d538      	bpl.n	8001398 <FLASH_ProgramHalfWord+0x84>
      flashstatus = FLASH_ERROR_PG;
 8001326:	2002      	movs	r0, #2
}
 8001328:	bc10      	pop	{r4}
 800132a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800132c:	07db      	lsls	r3, r3, #31
 800132e:	d429      	bmi.n	8001384 <FLASH_ProgramHalfWord+0x70>
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001334:	4a31      	ldr	r2, [pc, #196]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001336:	68d4      	ldr	r4, [r2, #12]
 8001338:	0764      	lsls	r4, r4, #29
 800133a:	d505      	bpl.n	8001348 <FLASH_ProgramHalfWord+0x34>
      flashstatus = FLASH_ERROR_PG;
 800133c:	2002      	movs	r0, #2
    Timeout--;
 800133e:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf08      	it	eq
 8001344:	2005      	moveq	r0, #5
 8001346:	e7ef      	b.n	8001328 <FLASH_ProgramHalfWord+0x14>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	06d2      	lsls	r2, r2, #27
 800134c:	d417      	bmi.n	800137e <FLASH_ProgramHalfWord+0x6a>
  if(Timeout == 0x00 )
 800134e:	2b01      	cmp	r3, #1
 8001350:	d01f      	beq.n	8001392 <FLASH_ProgramHalfWord+0x7e>
    FLASH->CR |= CR_PG_Set;
 8001352:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001354:	6913      	ldr	r3, [r2, #16]
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 800135c:	8001      	strh	r1, [r0, #0]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800135e:	68d3      	ldr	r3, [r2, #12]
 8001360:	f013 0f01 	tst.w	r3, #1
 8001364:	68d3      	ldr	r3, [r2, #12]
 8001366:	d11c      	bne.n	80013a2 <FLASH_ProgramHalfWord+0x8e>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001368:	075b      	lsls	r3, r3, #29
 800136a:	d53f      	bpl.n	80013ec <FLASH_ProgramHalfWord+0xd8>
      flashstatus = FLASH_ERROR_PG;
 800136c:	2002      	movs	r0, #2
    FLASH->CR &= CR_PG_Reset;
 800136e:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8001372:	4a22      	ldr	r2, [pc, #136]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
}
 8001374:	bc10      	pop	{r4}
    FLASH->CR &= CR_PG_Reset;
 8001376:	6913      	ldr	r3, [r2, #16]
 8001378:	400b      	ands	r3, r1
 800137a:	6113      	str	r3, [r2, #16]
}
 800137c:	4770      	bx	lr
        flashstatus = FLASH_ERROR_WRP;
 800137e:	2003      	movs	r0, #3
    Timeout--;
 8001380:	3b01      	subs	r3, #1
 8001382:	e7dd      	b.n	8001340 <FLASH_ProgramHalfWord+0x2c>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001384:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001388:	68e2      	ldr	r2, [r4, #12]
 800138a:	07d2      	lsls	r2, r2, #31
 800138c:	d5d2      	bpl.n	8001334 <FLASH_ProgramHalfWord+0x20>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 800138e:	3b01      	subs	r3, #1
 8001390:	d1fa      	bne.n	8001388 <FLASH_ProgramHalfWord+0x74>
    status = FLASH_TIMEOUT;
 8001392:	2005      	movs	r0, #5
}
 8001394:	bc10      	pop	{r4}
 8001396:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001398:	68e3      	ldr	r3, [r4, #12]
 800139a:	06dc      	lsls	r4, r3, #27
 800139c:	d5d9      	bpl.n	8001352 <FLASH_ProgramHalfWord+0x3e>
        flashstatus = FLASH_ERROR_WRP;
 800139e:	2003      	movs	r0, #3
 80013a0:	e7c2      	b.n	8001328 <FLASH_ProgramHalfWord+0x14>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80013a2:	07d9      	lsls	r1, r3, #31
 80013a4:	d409      	bmi.n	80013ba <FLASH_ProgramHalfWord+0xa6>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80013a6:	68d3      	ldr	r3, [r2, #12]
 80013a8:	075b      	lsls	r3, r3, #29
 80013aa:	d4df      	bmi.n	800136c <FLASH_ProgramHalfWord+0x58>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013ac:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80013ae:	f013 0f10 	tst.w	r3, #16
 80013b2:	bf14      	ite	ne
 80013b4:	2003      	movne	r0, #3
 80013b6:	2004      	moveq	r0, #4
 80013b8:	e7d9      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80013ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013be:	68d1      	ldr	r1, [r2, #12]
 80013c0:	07cc      	lsls	r4, r1, #31
 80013c2:	d408      	bmi.n	80013d6 <FLASH_ProgramHalfWord+0xc2>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80013c4:	68d1      	ldr	r1, [r2, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	0749      	lsls	r1, r1, #29
 80013ca:	d508      	bpl.n	80013de <FLASH_ProgramHalfWord+0xca>
      flashstatus = FLASH_ERROR_PG;
 80013cc:	2002      	movs	r0, #2
    status = FLASH_TIMEOUT;
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf08      	it	eq
 80013d2:	2005      	moveq	r0, #5
 80013d4:	e7cb      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80013d6:	3b01      	subs	r3, #1
 80013d8:	d1f1      	bne.n	80013be <FLASH_ProgramHalfWord+0xaa>
    status = FLASH_TIMEOUT;
 80013da:	2005      	movs	r0, #5
 80013dc:	e7c7      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013de:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80013e0:	f012 0f10 	tst.w	r2, #16
 80013e4:	bf14      	ite	ne
 80013e6:	2003      	movne	r0, #3
 80013e8:	2004      	moveq	r0, #4
 80013ea:	e7f0      	b.n	80013ce <FLASH_ProgramHalfWord+0xba>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013ec:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 80013ee:	f013 0f10 	tst.w	r3, #16
 80013f2:	bf0c      	ite	eq
 80013f4:	2004      	moveq	r0, #4
 80013f6:	2003      	movne	r0, #3
 80013f8:	e7b9      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
 80013fa:	bf00      	nop
 80013fc:	40022000 	.word	0x40022000

08001400 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001400:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001402:	78cd      	ldrb	r5, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001404:	06eb      	lsls	r3, r5, #27
 8001406:	bf48      	it	mi
 8001408:	788b      	ldrbmi	r3, [r1, #2]
 800140a:	f005 040f 	and.w	r4, r5, #15
 800140e:	bf48      	it	mi
 8001410:	431c      	orrmi	r4, r3
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001412:	880b      	ldrh	r3, [r1, #0]
 8001414:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001418:	d032      	beq.n	8001480 <GPIO_Init+0x80>
 800141a:	2d48      	cmp	r5, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 800141c:	6802      	ldr	r2, [r0, #0]
 800141e:	f000 8081 	beq.w	8001524 <GPIO_Init+0x124>
 8001422:	2d28      	cmp	r5, #40	; 0x28
 8001424:	f000 80b6 	beq.w	8001594 <GPIO_Init+0x194>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8001428:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800142a:	bf44      	itt	mi
 800142c:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001430:	4322      	orrmi	r2, r4
      if (currentpin == pos)
 8001432:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 8001434:	bf44      	itt	mi
 8001436:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800143a:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
      if (currentpin == pos)
 800143e:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 8001440:	bf44      	itt	mi
 8001442:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001446:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
      if (currentpin == pos)
 800144a:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 800144c:	bf44      	itt	mi
 800144e:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001452:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
      if (currentpin == pos)
 8001456:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 8001458:	bf44      	itt	mi
 800145a:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800145e:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
      if (currentpin == pos)
 8001462:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 8001464:	bf44      	itt	mi
 8001466:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800146a:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
      if (currentpin == pos)
 800146e:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 8001470:	bf44      	itt	mi
 8001472:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001476:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
      if (currentpin == pos)
 800147a:	0619      	lsls	r1, r3, #24
 800147c:	d471      	bmi.n	8001562 <GPIO_Init+0x162>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800147e:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001480:	2bff      	cmp	r3, #255	; 0xff
 8001482:	d930      	bls.n	80014e6 <GPIO_Init+0xe6>
 8001484:	2d28      	cmp	r5, #40	; 0x28
  {
    tmpreg = GPIOx->CRH;
 8001486:	6842      	ldr	r2, [r0, #4]
 8001488:	d02f      	beq.n	80014ea <GPIO_Init+0xea>
 800148a:	2d48      	cmp	r5, #72	; 0x48
 800148c:	d06c      	beq.n	8001568 <GPIO_Init+0x168>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800148e:	05d9      	lsls	r1, r3, #23
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8001490:	bf44      	itt	mi
 8001492:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001496:	4322      	orrmi	r2, r4
      if (currentpin == pos)
 8001498:	059d      	lsls	r5, r3, #22
        tmpreg &= ~pinmask;
 800149a:	bf44      	itt	mi
 800149c:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80014a0:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
      if (currentpin == pos)
 80014a4:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 80014a6:	bf44      	itt	mi
 80014a8:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80014ac:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
      if (currentpin == pos)
 80014b0:	051d      	lsls	r5, r3, #20
        tmpreg &= ~pinmask;
 80014b2:	bf44      	itt	mi
 80014b4:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80014b8:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
      if (currentpin == pos)
 80014bc:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 80014be:	bf44      	itt	mi
 80014c0:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80014c4:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
      if (currentpin == pos)
 80014c8:	049d      	lsls	r5, r3, #18
        tmpreg &= ~pinmask;
 80014ca:	bf44      	itt	mi
 80014cc:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80014d0:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
      if (currentpin == pos)
 80014d4:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 80014d6:	bf44      	itt	mi
 80014d8:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80014dc:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
      if (currentpin == pos)
 80014e0:	041d      	lsls	r5, r3, #16
 80014e2:	d43b      	bmi.n	800155c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80014e4:	6042      	str	r2, [r0, #4]
  }
}
 80014e6:	bc30      	pop	{r4, r5}
 80014e8:	4770      	bx	lr
      if (currentpin == pos)
 80014ea:	05d9      	lsls	r1, r3, #23
 80014ec:	f100 80d6 	bmi.w	800169c <GPIO_Init+0x29c>
 80014f0:	059d      	lsls	r5, r3, #22
 80014f2:	f100 80cb 	bmi.w	800168c <GPIO_Init+0x28c>
 80014f6:	0559      	lsls	r1, r3, #21
 80014f8:	f100 80c0 	bmi.w	800167c <GPIO_Init+0x27c>
 80014fc:	051d      	lsls	r5, r3, #20
 80014fe:	f100 80b5 	bmi.w	800166c <GPIO_Init+0x26c>
 8001502:	04d9      	lsls	r1, r3, #19
 8001504:	f100 80aa 	bmi.w	800165c <GPIO_Init+0x25c>
 8001508:	049d      	lsls	r5, r3, #18
 800150a:	f100 809f 	bmi.w	800164c <GPIO_Init+0x24c>
 800150e:	0459      	lsls	r1, r3, #17
 8001510:	f100 8094 	bmi.w	800163c <GPIO_Init+0x23c>
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	d5e5      	bpl.n	80014e4 <GPIO_Init+0xe4>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800151c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001520:	6143      	str	r3, [r0, #20]
 8001522:	e7df      	b.n	80014e4 <GPIO_Init+0xe4>
      if (currentpin == pos)
 8001524:	07d9      	lsls	r1, r3, #31
 8001526:	f100 80e3 	bmi.w	80016f0 <GPIO_Init+0x2f0>
 800152a:	0799      	lsls	r1, r3, #30
 800152c:	f100 80d9 	bmi.w	80016e2 <GPIO_Init+0x2e2>
 8001530:	0759      	lsls	r1, r3, #29
 8001532:	f100 80cf 	bmi.w	80016d4 <GPIO_Init+0x2d4>
 8001536:	0719      	lsls	r1, r3, #28
 8001538:	f100 80c5 	bmi.w	80016c6 <GPIO_Init+0x2c6>
 800153c:	06d9      	lsls	r1, r3, #27
 800153e:	f100 80bb 	bmi.w	80016b8 <GPIO_Init+0x2b8>
 8001542:	0699      	lsls	r1, r3, #26
 8001544:	f100 80b1 	bmi.w	80016aa <GPIO_Init+0x2aa>
 8001548:	0659      	lsls	r1, r3, #25
 800154a:	f100 80d7 	bmi.w	80016fc <GPIO_Init+0x2fc>
 800154e:	0619      	lsls	r1, r3, #24
 8001550:	d595      	bpl.n	800147e <GPIO_Init+0x7e>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001552:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 8001554:	f364 721f 	bfi	r2, r4, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001558:	6101      	str	r1, [r0, #16]
 800155a:	e790      	b.n	800147e <GPIO_Init+0x7e>
        tmpreg |= (currentmode << pos);
 800155c:	f364 721f 	bfi	r2, r4, #28, #4
 8001560:	e7c0      	b.n	80014e4 <GPIO_Init+0xe4>
        tmpreg |= (currentmode << pos);
 8001562:	f364 721f 	bfi	r2, r4, #28, #4
 8001566:	e78a      	b.n	800147e <GPIO_Init+0x7e>
      if (currentpin == pos)
 8001568:	05d9      	lsls	r1, r3, #23
 800156a:	d448      	bmi.n	80015fe <GPIO_Init+0x1fe>
 800156c:	059d      	lsls	r5, r3, #22
 800156e:	d43e      	bmi.n	80015ee <GPIO_Init+0x1ee>
 8001570:	0559      	lsls	r1, r3, #21
 8001572:	d434      	bmi.n	80015de <GPIO_Init+0x1de>
 8001574:	051d      	lsls	r5, r3, #20
 8001576:	d42a      	bmi.n	80015ce <GPIO_Init+0x1ce>
 8001578:	04d9      	lsls	r1, r3, #19
 800157a:	d44f      	bmi.n	800161c <GPIO_Init+0x21c>
 800157c:	049d      	lsls	r5, r3, #18
 800157e:	d445      	bmi.n	800160c <GPIO_Init+0x20c>
 8001580:	0459      	lsls	r1, r3, #17
 8001582:	d453      	bmi.n	800162c <GPIO_Init+0x22c>
 8001584:	041d      	lsls	r5, r3, #16
 8001586:	d5ad      	bpl.n	80014e4 <GPIO_Init+0xe4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800158c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001590:	6103      	str	r3, [r0, #16]
 8001592:	e7a7      	b.n	80014e4 <GPIO_Init+0xe4>
      if (currentpin == pos)
 8001594:	07d9      	lsls	r1, r3, #31
 8001596:	f100 80e2 	bmi.w	800175e <GPIO_Init+0x35e>
 800159a:	0799      	lsls	r1, r3, #30
 800159c:	f100 80d8 	bmi.w	8001750 <GPIO_Init+0x350>
 80015a0:	0759      	lsls	r1, r3, #29
 80015a2:	f100 80ce 	bmi.w	8001742 <GPIO_Init+0x342>
 80015a6:	0719      	lsls	r1, r3, #28
 80015a8:	f100 80c4 	bmi.w	8001734 <GPIO_Init+0x334>
 80015ac:	06d9      	lsls	r1, r3, #27
 80015ae:	f100 80ba 	bmi.w	8001726 <GPIO_Init+0x326>
 80015b2:	0699      	lsls	r1, r3, #26
 80015b4:	f100 80b0 	bmi.w	8001718 <GPIO_Init+0x318>
 80015b8:	0659      	lsls	r1, r3, #25
 80015ba:	f100 80a6 	bmi.w	800170a <GPIO_Init+0x30a>
 80015be:	0619      	lsls	r1, r3, #24
 80015c0:	f57f af5d 	bpl.w	800147e <GPIO_Init+0x7e>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015c4:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80015c6:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015ca:	6141      	str	r1, [r0, #20]
 80015cc:	e757      	b.n	800147e <GPIO_Init+0x7e>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 80015d2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80015d6:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015da:	6101      	str	r1, [r0, #16]
 80015dc:	e7cc      	b.n	8001578 <GPIO_Init+0x178>
 80015de:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 80015e2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80015e6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ea:	6101      	str	r1, [r0, #16]
 80015ec:	e7c2      	b.n	8001574 <GPIO_Init+0x174>
 80015ee:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80015f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80015f6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015fa:	6101      	str	r1, [r0, #16]
 80015fc:	e7b8      	b.n	8001570 <GPIO_Init+0x170>
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 8001602:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001606:	4322      	orrs	r2, r4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001608:	6101      	str	r1, [r0, #16]
 800160a:	e7af      	b.n	800156c <GPIO_Init+0x16c>
 800160c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001610:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001614:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001618:	6101      	str	r1, [r0, #16]
 800161a:	e7b1      	b.n	8001580 <GPIO_Init+0x180>
 800161c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001620:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001624:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001628:	6101      	str	r1, [r0, #16]
 800162a:	e7a7      	b.n	800157c <GPIO_Init+0x17c>
 800162c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001634:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001638:	6101      	str	r1, [r0, #16]
 800163a:	e7a3      	b.n	8001584 <GPIO_Init+0x184>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800163c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001644:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001648:	6141      	str	r1, [r0, #20]
 800164a:	e763      	b.n	8001514 <GPIO_Init+0x114>
 800164c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001650:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001654:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001658:	6141      	str	r1, [r0, #20]
 800165a:	e758      	b.n	800150e <GPIO_Init+0x10e>
 800165c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001660:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001664:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001668:	6141      	str	r1, [r0, #20]
 800166a:	e74d      	b.n	8001508 <GPIO_Init+0x108>
 800166c:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 8001670:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001674:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001678:	6141      	str	r1, [r0, #20]
 800167a:	e742      	b.n	8001502 <GPIO_Init+0x102>
 800167c:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8001680:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001684:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001688:	6141      	str	r1, [r0, #20]
 800168a:	e737      	b.n	80014fc <GPIO_Init+0xfc>
 800168c:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8001690:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001694:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001698:	6141      	str	r1, [r0, #20]
 800169a:	e72c      	b.n	80014f6 <GPIO_Init+0xf6>
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80016a0:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80016a4:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80016a6:	6141      	str	r1, [r0, #20]
 80016a8:	e722      	b.n	80014f0 <GPIO_Init+0xf0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016aa:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 80016ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80016b0:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016b4:	6101      	str	r1, [r0, #16]
 80016b6:	e747      	b.n	8001548 <GPIO_Init+0x148>
 80016b8:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 80016ba:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80016be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016c2:	6101      	str	r1, [r0, #16]
 80016c4:	e73d      	b.n	8001542 <GPIO_Init+0x142>
 80016c6:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 80016c8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80016cc:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016d0:	6101      	str	r1, [r0, #16]
 80016d2:	e733      	b.n	800153c <GPIO_Init+0x13c>
 80016d4:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 80016d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80016da:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016de:	6101      	str	r1, [r0, #16]
 80016e0:	e729      	b.n	8001536 <GPIO_Init+0x136>
 80016e2:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 80016e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80016e8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016ec:	6101      	str	r1, [r0, #16]
 80016ee:	e71f      	b.n	8001530 <GPIO_Init+0x130>
 80016f0:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 80016f2:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80016f6:	4322      	orrs	r2, r4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016f8:	6101      	str	r1, [r0, #16]
 80016fa:	e716      	b.n	800152a <GPIO_Init+0x12a>
 80016fc:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80016fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001702:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001706:	6101      	str	r1, [r0, #16]
 8001708:	e721      	b.n	800154e <GPIO_Init+0x14e>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800170a:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800170c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001710:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001714:	6141      	str	r1, [r0, #20]
 8001716:	e752      	b.n	80015be <GPIO_Init+0x1be>
 8001718:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800171a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800171e:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001722:	6141      	str	r1, [r0, #20]
 8001724:	e748      	b.n	80015b8 <GPIO_Init+0x1b8>
 8001726:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 8001728:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800172c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001730:	6141      	str	r1, [r0, #20]
 8001732:	e73e      	b.n	80015b2 <GPIO_Init+0x1b2>
 8001734:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 8001736:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800173a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800173e:	6141      	str	r1, [r0, #20]
 8001740:	e734      	b.n	80015ac <GPIO_Init+0x1ac>
 8001742:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 8001744:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001748:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800174c:	6141      	str	r1, [r0, #20]
 800174e:	e72a      	b.n	80015a6 <GPIO_Init+0x1a6>
 8001750:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 8001752:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001756:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800175a:	6141      	str	r1, [r0, #20]
 800175c:	e720      	b.n	80015a0 <GPIO_Init+0x1a0>
 800175e:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 8001760:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001764:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001766:	6141      	str	r1, [r0, #20]
 8001768:	e717      	b.n	800159a <GPIO_Init+0x19a>
 800176a:	bf00      	nop

0800176c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800176c:	6880      	ldr	r0, [r0, #8]
}
 800176e:	b280      	uxth	r0, r0
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8001774:	68c0      	ldr	r0, [r0, #12]
}
 8001776:	b280      	uxth	r0, r0
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800177c:	6101      	str	r1, [r0, #16]
 800177e:	4770      	bx	lr

08001780 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001780:	6141      	str	r1, [r0, #20]
 8001782:	4770      	bx	lr

08001784 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001784:	b90a      	cbnz	r2, 800178a <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8001786:	6141      	str	r1, [r0, #20]
 8001788:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800178a:	6101      	str	r1, [r0, #16]
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001790:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001794:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 8001798:	bfb4      	ite	lt
 800179a:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 800179c:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800179e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80017a2:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 80017a4:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80017a6:	d01e      	beq.n	80017e6 <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80017a8:	02c2      	lsls	r2, r0, #11
 80017aa:	d513      	bpl.n	80017d4 <GPIO_PinRemapConfig+0x44>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017ac:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80017ae:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017b2:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 80017b4:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017b8:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 80017bc:	b119      	cbz	r1, 80017c6 <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017be:	0d42      	lsrs	r2, r0, #21
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	4094      	lsls	r4, r2
 80017c4:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80017c8:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 80017ca:	bfb4      	ite	lt
 80017cc:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 80017ce:	6053      	strge	r3, [r2, #4]
  }  
}
 80017d0:	bc30      	pop	{r4, r5}
 80017d2:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017d4:	0d42      	lsrs	r2, r0, #21
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	fa04 f202 	lsl.w	r2, r4, r2
 80017dc:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017e0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80017e4:	e7ea      	b.n	80017bc <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80017e6:	4d04      	ldr	r5, [pc, #16]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80017e8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80017ec:	686a      	ldr	r2, [r5, #4]
 80017ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f2:	606a      	str	r2, [r5, #4]
 80017f4:	e7e2      	b.n	80017bc <GPIO_PinRemapConfig+0x2c>
 80017f6:	bf00      	nop
 80017f8:	40010000 	.word	0x40010000

080017fc <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80017fc:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80017fe:	240f      	movs	r4, #15
 8001800:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8001804:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001808:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800180c:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001810:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001812:	0089      	lsls	r1, r1, #2
 8001814:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001816:	ea22 0204 	bic.w	r2, r2, r4
 800181a:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	fa00 f101 	lsl.w	r1, r0, r1
 8001822:	4311      	orrs	r1, r2
 8001824:	6099      	str	r1, [r3, #8]
}
 8001826:	bc10      	pop	{r4}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800182c:	4b01      	ldr	r3, [pc, #4]	; (8001834 <RCC_USBCLKConfig+0x8>)
 800182e:	6018      	str	r0, [r3, #0]
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	424200d8 	.word	0x424200d8

08001838 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <RCC_APB2PeriphClockCmd+0x14>)
 800183a:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 800183c:	b919      	cbnz	r1, 8001846 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800183e:	ea23 0000 	bic.w	r0, r3, r0
 8001842:	6190      	str	r0, [r2, #24]
 8001844:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8001846:	4318      	orrs	r0, r3
 8001848:	6190      	str	r0, [r2, #24]
 800184a:	4770      	bx	lr
 800184c:	40021000 	.word	0x40021000

08001850 <RCC_APB1PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <RCC_APB1PeriphClockCmd+0x14>)
 8001852:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 8001854:	b919      	cbnz	r1, 800185e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001856:	ea23 0000 	bic.w	r0, r3, r0
 800185a:	61d0      	str	r0, [r2, #28]
 800185c:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 800185e:	4318      	orrs	r0, r3
 8001860:	61d0      	str	r0, [r2, #28]
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000

08001868 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <TIM_TimeBaseInit+0xa0>)
  tmpcr1 = TIMx->CR1;  
 800186a:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800186c:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 800186e:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001870:	d012      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 8001872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001876:	4290      	cmp	r0, r2
 8001878:	d00e      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 800187a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800187e:	d00b      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 8001880:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001884:	4290      	cmp	r0, r2
 8001886:	d007      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 8001888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800188c:	4290      	cmp	r0, r2
 800188e:	d003      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001894:	4290      	cmp	r0, r2
 8001896:	d103      	bne.n	80018a0 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001898:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800189a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800189e:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <TIM_TimeBaseInit+0xa4>)
 80018a2:	4290      	cmp	r0, r2
 80018a4:	d027      	beq.n	80018f6 <TIM_TimeBaseInit+0x8e>
 80018a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018aa:	4290      	cmp	r0, r2
 80018ac:	d023      	beq.n	80018f6 <TIM_TimeBaseInit+0x8e>
{
 80018ae:	b470      	push	{r4, r5, r6}
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80018b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80018b4:	88ce      	ldrh	r6, [r1, #6]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018b6:	888d      	ldrh	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018b8:	880c      	ldrh	r4, [r1, #0]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80018ba:	b29b      	uxth	r3, r3
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018bc:	f502 328c 	add.w	r2, r2, #71680	; 0x11800
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80018c0:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018c2:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 80018c4:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018c6:	8585      	strh	r5, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018c8:	8504      	strh	r4, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018ca:	d00e      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <TIM_TimeBaseInit+0xa8>)
 80018ce:	4298      	cmp	r0, r3
 80018d0:	d00b      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018d2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80018d6:	4298      	cmp	r0, r3
 80018d8:	d007      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018de:	4298      	cmp	r0, r3
 80018e0:	d003      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018e6:	4298      	cmp	r0, r3
 80018e8:	d101      	bne.n	80018ee <TIM_TimeBaseInit+0x86>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80018ea:	7a0b      	ldrb	r3, [r1, #8]
 80018ec:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018f2:	8283      	strh	r3, [r0, #20]
}
 80018f4:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 80018f6:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018f8:	888b      	ldrh	r3, [r1, #4]
 80018fa:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018fc:	880b      	ldrh	r3, [r1, #0]
 80018fe:	8503      	strh	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001900:	2301      	movs	r3, #1
 8001902:	8283      	strh	r3, [r0, #20]
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40001000 	.word	0x40001000
 8001910:	40013400 	.word	0x40013400

08001914 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001914:	8c02      	ldrh	r2, [r0, #32]
{
 8001916:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001918:	f022 0201 	bic.w	r2, r2, #1
 800191c:	0412      	lsls	r2, r2, #16
 800191e:	0c12      	lsrs	r2, r2, #16
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001920:	890d      	ldrh	r5, [r1, #8]
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001922:	8402      	strh	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 8001924:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001926:	884e      	ldrh	r6, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 8001928:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800192a:	8b02      	ldrh	r2, [r0, #24]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800192c:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001930:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001932:	041b      	lsls	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001934:	f022 0273 	bic.w	r2, r2, #115	; 0x73
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001938:	4e18      	ldr	r6, [pc, #96]	; (800199c <TIM_OC1Init+0x88>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800193a:	0c1b      	lsrs	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800193c:	0412      	lsls	r2, r2, #16
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800193e:	880f      	ldrh	r7, [r1, #0]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001940:	432b      	orrs	r3, r5
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001942:	0c12      	lsrs	r2, r2, #16
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001944:	42b0      	cmp	r0, r6
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001946:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8001948:	b2a4      	uxth	r4, r4
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800194a:	ea42 0207 	orr.w	r2, r2, r7
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800194e:	d015      	beq.n	800197c <TIM_OC1Init+0x68>
 8001950:	4d13      	ldr	r5, [pc, #76]	; (80019a0 <TIM_OC1Init+0x8c>)
 8001952:	42a8      	cmp	r0, r5
 8001954:	d012      	beq.n	800197c <TIM_OC1Init+0x68>
 8001956:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800195a:	42a8      	cmp	r0, r5
 800195c:	d00e      	beq.n	800197c <TIM_OC1Init+0x68>
 800195e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001962:	42a8      	cmp	r0, r5
 8001964:	d00a      	beq.n	800197c <TIM_OC1Init+0x68>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800196a:	42a8      	cmp	r0, r5
 800196c:	d006      	beq.n	800197c <TIM_OC1Init+0x68>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800196e:	88c9      	ldrh	r1, [r1, #6]
  TIMx->CR2 = tmpcr2;
 8001970:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001972:	8302      	strh	r2, [r0, #24]
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001974:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001976:	8681      	strh	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001978:	8403      	strh	r3, [r0, #32]
}
 800197a:	4770      	bx	lr
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800197c:	894e      	ldrh	r6, [r1, #10]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800197e:	898d      	ldrh	r5, [r1, #12]
 8001980:	89cf      	ldrh	r7, [r1, #14]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001982:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001986:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001988:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800198c:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800198e:	433d      	orrs	r5, r7
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001990:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001994:	432c      	orrs	r4, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001996:	4333      	orrs	r3, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001998:	b2a4      	uxth	r4, r4
 800199a:	e7e8      	b.n	800196e <TIM_OC1Init+0x5a>
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40013400 	.word	0x40013400

080019a4 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019aa:	6003      	str	r3, [r0, #0]
 80019ac:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80019ae:	7203      	strb	r3, [r0, #8]
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80019b4:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 80019b6:	b929      	cbnz	r1, 80019c4 <TIM_Cmd+0x10>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	0c1b      	lsrs	r3, r3, #16
 80019c0:	8003      	strh	r3, [r0, #0]
 80019c2:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	8003      	strh	r3, [r0, #0]
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80019d0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 80019d4:	b921      	cbnz	r1, 80019e0 <TIM_CtrlPWMOutputs+0x10>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 80019d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019da:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80019de:	4770      	bx	lr
    TIMx->BDTR |= TIM_BDTR_MOE;
 80019e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80019ee:	4770      	bx	lr

080019f0 <TIM_ITConfig>:
 80019f0:	8983      	ldrh	r3, [r0, #12]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b91a      	cbnz	r2, 80019fe <TIM_ITConfig+0xe>
 80019f6:	ea23 0101 	bic.w	r1, r3, r1
 80019fa:	8181      	strh	r1, [r0, #12]
 80019fc:	4770      	bx	lr
 80019fe:	4319      	orrs	r1, r3
 8001a00:	8181      	strh	r1, [r0, #12]
 8001a02:	4770      	bx	lr

08001a04 <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001a04:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001a06:	f023 0308 	bic.w	r3, r3, #8
 8001a0a:	041b      	lsls	r3, r3, #16
 8001a0c:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001a0e:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001a10:	8301      	strh	r1, [r0, #24]
 8001a12:	4770      	bx	lr

08001a14 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001a14:	43c9      	mvns	r1, r1
 8001a16:	b289      	uxth	r1, r1
 8001a18:	8201      	strh	r1, [r0, #16]
 8001a1a:	4770      	bx	lr

08001a1c <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001a20:	2708      	movs	r7, #8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a22:	2510      	movs	r5, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a24:	f04f 0803 	mov.w	r8, #3
{
 8001a28:	b082      	sub	sp, #8
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001a2a:	4c14      	ldr	r4, [pc, #80]	; (8001a7c <coolant_init+0x60>)
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001a2c:	ae02      	add	r6, sp, #8
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 8001a2e:	4638      	mov	r0, r7
 8001a30:	2101      	movs	r1, #1
 8001a32:	f7ff ff01 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001a36:	f826 5d04 	strh.w	r5, [r6, #-4]!
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001a3a:	4631      	mov	r1, r6
 8001a3c:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a3e:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a42:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001a46:	f7ff fcdb 	bl	8001400 <GPIO_Init>
	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 8001a4a:	4638      	mov	r0, r7
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	f7ff fef3 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001a52:	4631      	mov	r1, r6
 8001a54:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a56:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a5a:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001a5e:	f8ad 7004 	strh.w	r7, [sp, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001a62:	f7ff fccd 	bl	8001400 <GPIO_Init>
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001a66:	4629      	mov	r1, r5
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f7ff fe89 	bl	8001780 <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001a6e:	4639      	mov	r1, r7
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fe85 	bl	8001780 <GPIO_ResetBits>
}
 8001a76:	b002      	add	sp, #8
 8001a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a7c:	40010c00 	.word	0x40010c00

08001a80 <coolant_get_state>:
{
 8001a80:	b510      	push	{r4, lr}
    if (bit_istrue(
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <coolant_get_state+0x20>)
 8001a84:	f7ff fe76 	bl	8001774 <GPIO_ReadOutputData>
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 8001a88:	f3c0 1400 	ubfx	r4, r0, #4, #1
      if (bit_istrue(
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <coolant_get_state+0x20>)
 8001a8e:	f7ff fe71 	bl	8001774 <GPIO_ReadOutputData>
 8001a92:	0703      	lsls	r3, r0, #28
      cl_state |= COOLANT_STATE_MIST;
 8001a94:	bf48      	it	mi
 8001a96:	f044 0402 	orrmi.w	r4, r4, #2
}
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	bd10      	pop	{r4, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40010c00 	.word	0x40010c00

08001aa4 <coolant_stop>:
{
 8001aa4:	b510      	push	{r4, lr}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001aa6:	4c05      	ldr	r4, [pc, #20]	; (8001abc <coolant_stop+0x18>)
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff fe68 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001ab0:	4620      	mov	r0, r4
#endif
    #endif
  #endif
#endif
}
 8001ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001ab6:	2108      	movs	r1, #8
 8001ab8:	f7ff be62 	b.w	8001780 <GPIO_ResetBits>
 8001abc:	40010c00 	.word	0x40010c00

08001ac0 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8001ac0:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 8001ac2:	4d0f      	ldr	r5, [pc, #60]	; (8001b00 <coolant_set_state+0x40>)
 8001ac4:	786b      	ldrb	r3, [r5, #1]
 8001ac6:	b93b      	cbnz	r3, 8001ad8 <coolant_set_state+0x18>
 8001ac8:	4604      	mov	r4, r0
  
  if (mode == COOLANT_DISABLE) {
 8001aca:	b130      	cbz	r0, 8001ada <coolant_set_state+0x1a>
    coolant_stop(); 
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001acc:	0642      	lsls	r2, r0, #25
 8001ace:	d40d      	bmi.n	8001aec <coolant_set_state+0x2c>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 8001ad0:	0623      	lsls	r3, r4, #24
 8001ad2:	d410      	bmi.n	8001af6 <coolant_set_state+0x36>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	732b      	strb	r3, [r5, #12]
 8001ad8:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001ada:	2110      	movs	r1, #16
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <coolant_set_state+0x44>)
 8001ade:	f7ff fe4f 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001ae2:	2108      	movs	r1, #8
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <coolant_set_state+0x44>)
 8001ae6:	f7ff fe4b 	bl	8001780 <GPIO_ResetBits>
 8001aea:	e7f3      	b.n	8001ad4 <coolant_set_state+0x14>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001aec:	2110      	movs	r1, #16
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <coolant_set_state+0x44>)
 8001af0:	f7ff fe44 	bl	800177c <GPIO_SetBits>
 8001af4:	e7ec      	b.n	8001ad0 <coolant_set_state+0x10>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001af6:	2108      	movs	r1, #8
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <coolant_set_state+0x44>)
 8001afa:	f7ff fe3f 	bl	800177c <GPIO_SetBits>
 8001afe:	e7e9      	b.n	8001ad4 <coolant_set_state+0x14>
 8001b00:	200010b0 	.word	0x200010b0
 8001b04:	40010c00 	.word	0x40010c00

08001b08 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8001b08:	b538      	push	{r3, r4, r5, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8001b0a:	4c12      	ldr	r4, [pc, #72]	; (8001b54 <coolant_sync+0x4c>)
 8001b0c:	7823      	ldrb	r3, [r4, #0]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d004      	beq.n	8001b1c <coolant_sync+0x14>
 8001b12:	4605      	mov	r5, r0
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8001b14:	f004 f94c 	bl	8005db0 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.  
 8001b18:	7863      	ldrb	r3, [r4, #1]
 8001b1a:	b103      	cbz	r3, 8001b1e <coolant_sync+0x16>
 8001b1c:	bd38      	pop	{r3, r4, r5, pc}
  if (mode == COOLANT_DISABLE) {
 8001b1e:	b135      	cbz	r5, 8001b2e <coolant_sync+0x26>
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001b20:	066a      	lsls	r2, r5, #25
 8001b22:	d40d      	bmi.n	8001b40 <coolant_sync+0x38>
      if (mode & COOLANT_MIST_ENABLE) {
 8001b24:	062b      	lsls	r3, r5, #24
 8001b26:	d410      	bmi.n	8001b4a <coolant_sync+0x42>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001b28:	2300      	movs	r3, #0
 8001b2a:	7323      	strb	r3, [r4, #12]
 8001b2c:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001b2e:	2110      	movs	r1, #16
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <coolant_sync+0x50>)
 8001b32:	f7ff fe25 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001b36:	2108      	movs	r1, #8
 8001b38:	4807      	ldr	r0, [pc, #28]	; (8001b58 <coolant_sync+0x50>)
 8001b3a:	f7ff fe21 	bl	8001780 <GPIO_ResetBits>
 8001b3e:	e7f3      	b.n	8001b28 <coolant_sync+0x20>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001b40:	2110      	movs	r1, #16
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <coolant_sync+0x50>)
 8001b44:	f7ff fe1a 	bl	800177c <GPIO_SetBits>
 8001b48:	e7ec      	b.n	8001b24 <coolant_sync+0x1c>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <coolant_sync+0x50>)
 8001b4e:	f7ff fe15 	bl	800177c <GPIO_SetBits>
 8001b52:	e7e9      	b.n	8001b28 <coolant_sync+0x20>
 8001b54:	200010b0 	.word	0x200010b0
 8001b58:	40010c00 	.word	0x40010c00

08001b5c <eeprom_init>:
		nSize -= 4;
		nAddress += 4;
	}
}
void eeprom_init()
{
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <eeprom_init+0x30>)
 8001b5e:	490c      	ldr	r1, [pc, #48]	; (8001b90 <eeprom_init+0x34>)
 8001b60:	b410      	push	{r4}
 8001b62:	1c5c      	adds	r4, r3, #1
 8001b64:	1b09      	subs	r1, r1, r4
 8001b66:	f503 6080 	add.w	r0, r3, #1024	; 0x400
	uint16_t VarIdx = 0;
	uint8_t *pTmp = EE_Buffer;

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8001b6a:	5cca      	ldrb	r2, [r1, r3]
 8001b6c:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8001b70:	4298      	cmp	r0, r3
 8001b72:	d1fa      	bne.n	8001b6a <eeprom_init+0xe>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 8001b74:	7823      	ldrb	r3, [r4, #0]
 8001b76:	2b0a      	cmp	r3, #10
 8001b78:	d006      	beq.n	8001b88 <eeprom_init+0x2c>
 8001b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7e:	21ff      	movs	r1, #255	; 0xff
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <eeprom_init+0x38>)
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
		{
			*pTmp++ = 0xFF;
		}
	}
}
 8001b82:	bc10      	pop	{r4}
 8001b84:	f009 b8c5 	b.w	800ad12 <memset>
 8001b88:	bc10      	pop	{r4}
 8001b8a:	4770      	bx	lr
 8001b8c:	20000c13 	.word	0x20000c13
 8001b90:	0801fc01 	.word	0x0801fc01
 8001b94:	20000c14 	.word	0x20000c14

08001b98 <eeprom_get_char>:
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 8001b98:	4b01      	ldr	r3, [pc, #4]	; (8001ba0 <eeprom_get_char+0x8>)
#endif
}
 8001b9a:	5c18      	ldrb	r0, [r3, r0]
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000c14 	.word	0x20000c14

08001ba4 <eeprom_put_char>:
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 8001ba4:	4b01      	ldr	r3, [pc, #4]	; (8001bac <eeprom_put_char+0x8>)
 8001ba6:	5419      	strb	r1, [r3, r0]
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000c14 	.word	0x20000c14

08001bb0 <memcpy_to_eeprom_with_checksum>:
}

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8001bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb4:	4606      	mov	r6, r0
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	d040      	beq.n	8001c3c <memcpy_to_eeprom_with_checksum+0x8c>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	4f21      	ldr	r7, [pc, #132]	; (8001c44 <memcpy_to_eeprom_with_checksum+0x94>)
 8001bbe:	1e44      	subs	r4, r0, #1
 8001bc0:	443c      	add	r4, r7
 8001bc2:	188d      	adds	r5, r1, r2
 8001bc4:	2b00      	cmp	r3, #0
    checksum = (checksum << 1) || (checksum >> 7);
 8001bc6:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001bca:	bf18      	it	ne
 8001bcc:	2301      	movne	r3, #1
    checksum += *source;
 8001bce:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001bd2:	4403      	add	r3, r0
  for(; size > 0; size--) { 
 8001bd4:	42a9      	cmp	r1, r5
    checksum += *source;
 8001bd6:	b2db      	uxtb	r3, r3
	EE_Buffer[addr] = new_value;
 8001bd8:	f804 0f01 	strb.w	r0, [r4, #1]!
  for(; size > 0; size--) { 
 8001bdc:	d1f2      	bne.n	8001bc4 <memcpy_to_eeprom_with_checksum+0x14>
 8001bde:	4416      	add	r6, r2
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <memcpy_to_eeprom_with_checksum+0x98>)
	EE_Buffer[addr] = new_value;
 8001be2:	55bb      	strb	r3, [r7, r6]
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001be4:	f7ff fb20 	bl	8001228 <FLASH_ErasePage>
	if (FlashStatus != FLASH_COMPLETE)
 8001be8:	2804      	cmp	r0, #4
 8001bea:	d001      	beq.n	8001bf0 <memcpy_to_eeprom_with_checksum+0x40>
 8001bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*pBuffer != 0xffff)
 8001bf0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8001bf4:	4d15      	ldr	r5, [pc, #84]	; (8001c4c <memcpy_to_eeprom_with_checksum+0x9c>)
	if (FlashStatus != FLASH_COMPLETE)
 8001bf6:	4c14      	ldr	r4, [pc, #80]	; (8001c48 <memcpy_to_eeprom_with_checksum+0x98>)
	while (nSize > 0)
 8001bf8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001c50 <memcpy_to_eeprom_with_checksum+0xa0>
 8001bfc:	1eae      	subs	r6, r5, #2
		if (*pBuffer != 0xffff)
 8001bfe:	f835 1c04 	ldrh.w	r1, [r5, #-4]
 8001c02:	42b9      	cmp	r1, r7
 8001c04:	d002      	beq.n	8001c0c <memcpy_to_eeprom_with_checksum+0x5c>
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 8001c06:	4620      	mov	r0, r4
 8001c08:	f7ff fb84 	bl	8001314 <FLASH_ProgramHalfWord>
		if (*pBuffer != 0xffff)
 8001c0c:	8831      	ldrh	r1, [r6, #0]
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001c0e:	1ca0      	adds	r0, r4, #2
		if (*pBuffer != 0xffff)
 8001c10:	42b9      	cmp	r1, r7
		nAddress += 4;
 8001c12:	f104 0404 	add.w	r4, r4, #4
		if (*pBuffer != 0xffff)
 8001c16:	d009      	beq.n	8001c2c <memcpy_to_eeprom_with_checksum+0x7c>
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001c18:	f7ff fb7c 	bl	8001314 <FLASH_ProgramHalfWord>
	while (nSize > 0)
 8001c1c:	4544      	cmp	r4, r8
 8001c1e:	f105 0504 	add.w	r5, r5, #4
 8001c22:	f106 0604 	add.w	r6, r6, #4
 8001c26:	d1ea      	bne.n	8001bfe <memcpy_to_eeprom_with_checksum+0x4e>
 8001c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c2c:	4544      	cmp	r4, r8
 8001c2e:	f105 0504 	add.w	r5, r5, #4
 8001c32:	f106 0604 	add.w	r6, r6, #4
 8001c36:	d1e2      	bne.n	8001bfe <memcpy_to_eeprom_with_checksum+0x4e>
 8001c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  unsigned char checksum = 0;
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	4f01      	ldr	r7, [pc, #4]	; (8001c44 <memcpy_to_eeprom_with_checksum+0x94>)
 8001c40:	e7ce      	b.n	8001be0 <memcpy_to_eeprom_with_checksum+0x30>
 8001c42:	bf00      	nop
 8001c44:	20000c14 	.word	0x20000c14
 8001c48:	0801fc00 	.word	0x0801fc00
 8001c4c:	20000c18 	.word	0x20000c18
 8001c50:	08020000 	.word	0x08020000

08001c54 <memcpy_from_eeprom_with_checksum>:
  eeprom_flush();
#endif
#endif
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8001c54:	b4f0      	push	{r4, r5, r6, r7}
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
 8001c56:	b1ca      	cbz	r2, 8001c8c <memcpy_from_eeprom_with_checksum+0x38>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	4f0e      	ldr	r7, [pc, #56]	; (8001c94 <memcpy_from_eeprom_with_checksum+0x40>)
 8001c5c:	1e4d      	subs	r5, r1, #1
 8001c5e:	443d      	add	r5, r7
 8001c60:	1886      	adds	r6, r0, r2
 8001c62:	2b00      	cmp	r3, #0
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
 8001c64:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001c68:	bf18      	it	ne
 8001c6a:	2301      	movne	r3, #1
	return EE_Buffer[addr];
 8001c6c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    checksum += data;    
    *(destination++) = data; 
 8001c70:	f800 4b01 	strb.w	r4, [r0], #1
    checksum += data;    
 8001c74:	4423      	add	r3, r4
  for(; size > 0; size--) { 
 8001c76:	42b0      	cmp	r0, r6
    checksum += data;    
 8001c78:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 8001c7a:	d1f2      	bne.n	8001c62 <memcpy_from_eeprom_with_checksum+0xe>
 8001c7c:	4411      	add	r1, r2
  }
  return(checksum == eeprom_get_char(source));
 8001c7e:	5c78      	ldrb	r0, [r7, r1]
}
 8001c80:	bcf0      	pop	{r4, r5, r6, r7}
 8001c82:	1ac0      	subs	r0, r0, r3
 8001c84:	fab0 f080 	clz	r0, r0
 8001c88:	0940      	lsrs	r0, r0, #5
 8001c8a:	4770      	bx	lr
  unsigned char data, checksum = 0;
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	4f01      	ldr	r7, [pc, #4]	; (8001c94 <memcpy_from_eeprom_with_checksum+0x40>)
 8001c90:	e7f5      	b.n	8001c7e <memcpy_from_eeprom_with_checksum+0x2a>
 8001c92:	bf00      	nop
 8001c94:	20000c14 	.word	0x20000c14

08001c98 <gc_init>:

#define FAIL(status) return(status);


void gc_init()
{
 8001c98:	b508      	push	{r3, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2250      	movs	r2, #80	; 0x50
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <gc_init+0x24>)
 8001ca0:	f009 f837 	bl	800ad12 <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 8001ca4:	4906      	ldr	r1, [pc, #24]	; (8001cc0 <gc_init+0x28>)
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f005 fd3a 	bl	8007720 <settings_read_coord_data>
 8001cac:	b100      	cbz	r0, 8001cb0 <gc_init+0x18>
 8001cae:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001cb0:	2007      	movs	r0, #7
  }
}
 8001cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001cb6:	f004 bb71 	b.w	800639c <report_status_message>
 8001cba:	bf00      	nop
 8001cbc:	20001014 	.word	0x20001014
 8001cc0:	20001040 	.word	0x20001040

08001cc4 <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8001cc4:	4901      	ldr	r1, [pc, #4]	; (8001ccc <gc_sync_position+0x8>)
 8001cc6:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <gc_sync_position+0xc>)
 8001cc8:	f007 bcf0 	b.w	80096ac <system_convert_array_steps_to_mpos>
 8001ccc:	200010d8 	.word	0x200010d8
 8001cd0:	20001030 	.word	0x20001030

08001cd4 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8001cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd8:	4607      	mov	r7, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001cda:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8001f84 <gc_execute_line+0x2b0>
 8001cde:	2248      	movs	r2, #72	; 0x48
 8001ce0:	2100      	movs	r1, #0
{
 8001ce2:	b0a1      	sub	sp, #132	; 0x84
  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001ce4:	4648      	mov	r0, r9
 8001ce6:	f009 f814 	bl	800ad12 <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 8001cea:	4ba2      	ldr	r3, [pc, #648]	; (8001f74 <gc_execute_line+0x2a0>)
 8001cec:	cb03      	ldmia	r3!, {r0, r1}
 8001cee:	881c      	ldrh	r4, [r3, #0]
 8001cf0:	789a      	ldrb	r2, [r3, #2]
 8001cf2:	f8c9 0001 	str.w	r0, [r9, #1]
 8001cf6:	f8c9 1005 	str.w	r1, [r9, #5]
 8001cfa:	f8a9 4009 	strh.w	r4, [r9, #9]
 8001cfe:	f889 200b 	strb.w	r2, [r9, #11]
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  uint16_t value_words = 0; // Tracks value words.
  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8001d02:	783b      	ldrb	r3, [r7, #0]
 8001d04:	2b24      	cmp	r3, #36	; 0x24
 8001d06:	f000 8124 	beq.w	8001f52 <gc_execute_line+0x27e>
 8001d0a:	2310      	movs	r3, #16
  char letter;
  float value;
  uint8_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d10:	2304      	movs	r3, #4
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 8001d12:	9209      	str	r2, [sp, #36]	; 0x24
 8001d14:	930a      	str	r3, [sp, #40]	; 0x28
            word_bit = MODAL_GROUP_M8;
            switch(int_value) {
              #ifdef ENABLE_M7
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
              #endif
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8001d16:	f04f 0800 	mov.w	r8, #0
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001d1a:	5cbd      	ldrb	r5, [r7, r2]
 8001d1c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8001d20:	4644      	mov	r4, r8
 8001d22:	f8cd 8020 	str.w	r8, [sp, #32]
 8001d26:	f8cd 8018 	str.w	r8, [sp, #24]
 8001d2a:	f8cd 801c 	str.w	r8, [sp, #28]
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	f000 80ec 	beq.w	8001f0c <gc_execute_line+0x238>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8001d34:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 8001d38:	b2f3      	uxtb	r3, r6
 8001d3a:	2b19      	cmp	r3, #25
 8001d3c:	f200 82ad 	bhi.w	800229a <gc_execute_line+0x5c6>
    char_counter++;
 8001d40:	1c53      	adds	r3, r2, #1
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001d42:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 8001d46:	aa18      	add	r2, sp, #96	; 0x60
 8001d48:	4638      	mov	r0, r7
    char_counter++;
 8001d4a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001d4e:	f001 fffb 	bl	8003d48 <read_float>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	f000 82a6 	beq.w	80022a4 <gc_execute_line+0x5d0>
    int_value = truncf(value);
 8001d58:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8001d5c:	4658      	mov	r0, fp
 8001d5e:	f7ff f9a9 	bl	80010b4 <__aeabi_f2uiz>
 8001d62:	fa5f fa80 	uxtb.w	sl, r0
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001d66:	4650      	mov	r0, sl
 8001d68:	f7fe ff4e 	bl	8000c08 <__aeabi_i2f>
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	4658      	mov	r0, fp
 8001d70:	f7fe fe94 	bl	8000a9c <__aeabi_fsub>
 8001d74:	4980      	ldr	r1, [pc, #512]	; (8001f78 <gc_execute_line+0x2a4>)
 8001d76:	f7fe ff9b 	bl	8000cb0 <__aeabi_fmul>
 8001d7a:	f009 f887 	bl	800ae8c <lroundf>
    switch(letter) {
 8001d7e:	2d47      	cmp	r5, #71	; 0x47
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001d80:	b282      	uxth	r2, r0
    switch(letter) {
 8001d82:	d028      	beq.n	8001dd6 <gc_execute_line+0x102>
 8001d84:	2d4d      	cmp	r5, #77	; 0x4d
 8001d86:	f040 808b 	bne.w	8001ea0 <gc_execute_line+0x1cc>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	f040 82c9 	bne.w	8002322 <gc_execute_line+0x64e>
 8001d90:	f1ba 0f1e 	cmp.w	sl, #30
 8001d94:	f200 810d 	bhi.w	8001fb2 <gc_execute_line+0x2de>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	4a78      	ldr	r2, [pc, #480]	; (8001f7c <gc_execute_line+0x2a8>)
 8001d9c:	fa03 f30a 	lsl.w	r3, r3, sl
 8001da0:	4213      	tst	r3, r2
 8001da2:	f040 809c 	bne.w	8001ede <gc_execute_line+0x20a>
 8001da6:	f413 7f60 	tst.w	r3, #896	; 0x380
 8001daa:	f040 80c2 	bne.w	8001f32 <gc_execute_line+0x25e>
 8001dae:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001db2:	f000 80fe 	beq.w	8001fb2 <gc_execute_line+0x2de>
            switch(int_value) {
 8001db6:	f1ba 0f04 	cmp.w	sl, #4
 8001dba:	f000 8206 	beq.w	80021ca <gc_execute_line+0x4f6>
 8001dbe:	f1ba 0f05 	cmp.w	sl, #5
 8001dc2:	f000 828e 	beq.w	80022e2 <gc_execute_line+0x60e>
 8001dc6:	f1ba 0f03 	cmp.w	sl, #3
 8001dca:	f000 820c 	beq.w	80021e6 <gc_execute_line+0x512>
 8001dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	e08e      	b.n	8001ef4 <gc_execute_line+0x220>
        switch(int_value) {
 8001dd6:	f1ba 0f5e 	cmp.w	sl, #94	; 0x5e
 8001dda:	f200 80ea 	bhi.w	8001fb2 <gc_execute_line+0x2de>
 8001dde:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8001de2:	00d3      	.short	0x00d3
 8001de4:	00d300d3 	.word	0x00d300d3
 8001de8:	015100d3 	.word	0x015100d3
 8001dec:	00e800e8 	.word	0x00e800e8
 8001df0:	00e800e8 	.word	0x00e800e8
 8001df4:	013700e8 	.word	0x013700e8
 8001df8:	00e800e8 	.word	0x00e800e8
 8001dfc:	00e800e8 	.word	0x00e800e8
 8001e00:	00e800e8 	.word	0x00e800e8
 8001e04:	014b014b 	.word	0x014b014b
 8001e08:	0116014b 	.word	0x0116014b
 8001e0c:	00e80116 	.word	0x00e80116
 8001e10:	00e800e8 	.word	0x00e800e8
 8001e14:	00e800e8 	.word	0x00e800e8
 8001e18:	013700e8 	.word	0x013700e8
 8001e1c:	013700e8 	.word	0x013700e8
 8001e20:	00e800e8 	.word	0x00e800e8
 8001e24:	00e800e8 	.word	0x00e800e8
 8001e28:	00e800e8 	.word	0x00e800e8
 8001e2c:	00d300e8 	.word	0x00d300e8
 8001e30:	00f400e8 	.word	0x00f400e8
 8001e34:	00e800e8 	.word	0x00e800e8
 8001e38:	00e80126 	.word	0x00e80126
 8001e3c:	00e800e8 	.word	0x00e800e8
 8001e40:	00e800e8 	.word	0x00e800e8
 8001e44:	00e80126 	.word	0x00e80126
 8001e48:	00e800e8 	.word	0x00e800e8
 8001e4c:	011c0151 	.word	0x011c0151
 8001e50:	011c011c 	.word	0x011c011c
 8001e54:	011c011c 	.word	0x011c011c
 8001e58:	00e8011c 	.word	0x00e8011c
 8001e5c:	00e80122 	.word	0x00e80122
 8001e60:	00e800e8 	.word	0x00e800e8
 8001e64:	00e800e8 	.word	0x00e800e8
 8001e68:	00e800e8 	.word	0x00e800e8
 8001e6c:	00e800e8 	.word	0x00e800e8
 8001e70:	00e800e8 	.word	0x00e800e8
 8001e74:	00e800e8 	.word	0x00e800e8
 8001e78:	00e800e8 	.word	0x00e800e8
 8001e7c:	00e800e8 	.word	0x00e800e8
 8001e80:	010200e8 	.word	0x010200e8
 8001e84:	00e800e8 	.word	0x00e800e8
 8001e88:	00e800e8 	.word	0x00e800e8
 8001e8c:	00e800e8 	.word	0x00e800e8
 8001e90:	00e800e8 	.word	0x00e800e8
 8001e94:	010700e8 	.word	0x010700e8
 8001e98:	01370107 	.word	0x01370107
 8001e9c:	01100110 	.word	0x01100110
      default:

        /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
           legal g-code words and stores their value. Error-checking is performed later since some
           words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
        switch(letter){
 8001ea0:	2e19      	cmp	r6, #25
 8001ea2:	f200 8086 	bhi.w	8001fb2 <gc_execute_line+0x2de>
 8001ea6:	e8df f016 	tbh	[pc, r6, lsl #1]
 8001eaa:	017f      	.short	0x017f
 8001eac:	00840084 	.word	0x00840084
 8001eb0:	00840084 	.word	0x00840084
 8001eb4:	0084010d 	.word	0x0084010d
 8001eb8:	01380084 	.word	0x01380084
 8001ebc:	012f011d 	.word	0x012f011d
 8001ec0:	00840141 	.word	0x00840141
 8001ec4:	00840146 	.word	0x00840146
 8001ec8:	0084014e 	.word	0x0084014e
 8001ecc:	01580153 	.word	0x01580153
 8001ed0:	0084015e 	.word	0x0084015e
 8001ed4:	00840084 	.word	0x00840084
 8001ed8:	0175016b 	.word	0x0175016b
 8001edc:	00fd      	.short	0x00fd
            switch(int_value) {
 8001ede:	f1ba 0f00 	cmp.w	sl, #0
 8001ee2:	d06b      	beq.n	8001fbc <gc_execute_line+0x2e8>
 8001ee4:	f1ba 0f01 	cmp.w	sl, #1
 8001ee8:	d040      	beq.n	8001f6c <gc_execute_line+0x298>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 8001eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eee:	230b      	movs	r3, #11
 8001ef0:	f889 a008 	strb.w	sl, [r9, #8]
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001ef4:	fa44 f303 	asr.w	r3, r4, r3
 8001ef8:	07d9      	lsls	r1, r3, #31
 8001efa:	f100 820c 	bmi.w	8002316 <gc_execute_line+0x642>
        command_words |= bit(word_bit);
 8001efe:	4314      	orrs	r4, r2
 8001f00:	f89d 205f 	ldrb.w	r2, [sp, #95]	; 0x5f
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001f04:	5cbd      	ldrb	r5, [r7, r2]
 8001f06:	2d00      	cmp	r5, #0
 8001f08:	f47f af14 	bne.w	8001d34 <gc_execute_line+0x60>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

  // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
  // command has been sent. If so, set axis command to current motion mode.
  if (axis_words) {
 8001f0c:	9b06      	ldr	r3, [sp, #24]
 8001f0e:	b123      	cbz	r3, 8001f1a <gc_execute_line+0x246>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8001f10:	9b07      	ldr	r3, [sp, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf08      	it	eq
 8001f16:	2302      	moveq	r3, #2
 8001f18:	9307      	str	r3, [sp, #28]
  }

  // Check for valid line number N value.
  if (bit_istrue(value_words,bit(WORD_N))) {
 8001f1a:	f018 0f20 	tst.w	r8, #32
 8001f1e:	f000 8174 	beq.w	800220a <gc_execute_line+0x536>
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <gc_execute_line+0x2ac>)
 8001f24:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f340 816e 	ble.w	800220a <gc_execute_line+0x536>
 8001f2e:	241b      	movs	r4, #27
 8001f30:	e040      	b.n	8001fb4 <gc_execute_line+0x2e0>
            switch(int_value) {
 8001f32:	f1ba 0f08 	cmp.w	sl, #8
 8001f36:	f000 8141 	beq.w	80021bc <gc_execute_line+0x4e8>
 8001f3a:	f1ba 0f09 	cmp.w	sl, #9
 8001f3e:	f000 81b6 	beq.w	80022ae <gc_execute_line+0x5da>
 8001f42:	f1ba 0f07 	cmp.w	sl, #7
 8001f46:	f000 8147 	beq.w	80021d8 <gc_execute_line+0x504>
 8001f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4e:	230d      	movs	r3, #13
 8001f50:	e7d0      	b.n	8001ef4 <gc_execute_line+0x220>
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f889 3001 	strb.w	r3, [r9, #1]
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8001f58:	9309      	str	r3, [sp, #36]	; 0x24
 8001f5a:	2311      	movs	r3, #17
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f60:	2305      	movs	r3, #5
 8001f62:	f889 2002 	strb.w	r2, [r9, #2]
 8001f66:	930a      	str	r3, [sp, #40]	; 0x28
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 8001f68:	2203      	movs	r2, #3
 8001f6a:	e6d4      	b.n	8001d16 <gc_execute_line+0x42>
            switch(int_value) {
 8001f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f70:	230b      	movs	r3, #11
 8001f72:	e7bf      	b.n	8001ef4 <gc_execute_line+0x220>
 8001f74:	20001014 	.word	0x20001014
 8001f78:	42c80000 	.word	0x42c80000
 8001f7c:	40000007 	.word	0x40000007
 8001f80:	00989680 	.word	0x00989680
 8001f84:	20001064 	.word	0x20001064
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8001f88:	9b07      	ldr	r3, [sp, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 8300 	bne.w	8002590 <gc_execute_line+0x8bc>
            if (int_value == 38){
 8001f90:	f1ba 0f26 	cmp.w	sl, #38	; 0x26
            gc_block.modal.motion = int_value;
 8001f94:	f889 a001 	strb.w	sl, [r9, #1]
            if (int_value == 38){
 8001f98:	f040 81bf 	bne.w	800231a <gc_execute_line+0x646>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8001f9c:	f1a2 0314 	sub.w	r3, r2, #20
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b1e      	cmp	r3, #30
 8001fa4:	d805      	bhi.n	8001fb2 <gc_execute_line+0x2de>
 8001fa6:	49c5      	ldr	r1, [pc, #788]	; (80022bc <gc_execute_line+0x5e8>)
 8001fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8001fac:	07dd      	lsls	r5, r3, #31
 8001fae:	f100 8121 	bmi.w	80021f4 <gc_execute_line+0x520>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
      if (gc_block.values.l != 20) {
        if (gc_block.values.l == 2) {
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8001fb2:	2414      	movs	r4, #20
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
}
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	b021      	add	sp, #132	; 0x84
 8001fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc2:	f889 3008 	strb.w	r3, [r9, #8]
 8001fc6:	230b      	movs	r3, #11
 8001fc8:	e794      	b.n	8001ef4 <gc_execute_line+0x220>
        switch(int_value) {
 8001fca:	2107      	movs	r1, #7
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	f040 81a8 	bne.w	8002322 <gc_execute_line+0x64e>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001fd2:	fa44 f301 	asr.w	r3, r4, r1
 8001fd6:	07d8      	lsls	r0, r3, #31
 8001fd8:	f100 819d 	bmi.w	8002316 <gc_execute_line+0x642>
        command_words |= bit(word_bit);
 8001fdc:	2301      	movs	r3, #1
 8001fde:	408b      	lsls	r3, r1
 8001fe0:	431c      	orrs	r4, r3
 8001fe2:	b2a4      	uxth	r4, r4
        break;
 8001fe4:	e78c      	b.n	8001f00 <gc_execute_line+0x22c>
            gc_block.modal.motion = int_value;
 8001fe6:	2350      	movs	r3, #80	; 0x50
 8001fe8:	2101      	movs	r1, #1
 8001fea:	f889 3001 	strb.w	r3, [r9, #1]
 8001fee:	e7ed      	b.n	8001fcc <gc_execute_line+0x2f8>
            if (mantissa == 0) {
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	f040 8187 	bne.w	8002304 <gc_execute_line+0x630>
              gc_block.modal.distance = int_value - 90;
 8001ff6:	f1aa 0a5a 	sub.w	sl, sl, #90	; 0x5a
 8001ffa:	f889 a004 	strb.w	sl, [r9, #4]
 8001ffe:	2103      	movs	r1, #3
 8002000:	e7e7      	b.n	8001fd2 <gc_execute_line+0x2fe>
            gc_block.modal.feed_rate = 94 - int_value;
 8002002:	f1ca 0a5e 	rsb	sl, sl, #94	; 0x5e
 8002006:	f889 a002 	strb.w	sl, [r9, #2]
            break;
 800200a:	2105      	movs	r1, #5
 800200c:	e7de      	b.n	8001fcc <gc_execute_line+0x2f8>
            gc_block.modal.units = 21 - int_value;
 800200e:	f1ca 0a15 	rsb	sl, sl, #21
 8002012:	f889 a003 	strb.w	sl, [r9, #3]
            break;
 8002016:	2106      	movs	r1, #6
 8002018:	e7d8      	b.n	8001fcc <gc_execute_line+0x2f8>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 800201a:	f1aa 0a36 	sub.w	sl, sl, #54	; 0x36
 800201e:	f889 a007 	strb.w	sl, [r9, #7]
            break;
 8002022:	2109      	movs	r1, #9
 8002024:	e7d2      	b.n	8001fcc <gc_execute_line+0x2f8>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 8002026:	2a00      	cmp	r2, #0
 8002028:	d1c3      	bne.n	8001fb2 <gc_execute_line+0x2de>
 800202a:	210a      	movs	r1, #10
 800202c:	e7d1      	b.n	8001fd2 <gc_execute_line+0x2fe>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 800202e:	9b07      	ldr	r3, [sp, #28]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f040 82ad 	bne.w	8002590 <gc_execute_line+0x8bc>
            if (int_value == 49) { // G49
 8002036:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800203a:	f000 817c 	beq.w	8002336 <gc_execute_line+0x662>
            } else if (mantissa == 10) { // G43.1
 800203e:	2a0a      	cmp	r2, #10
 8002040:	d1b7      	bne.n	8001fb2 <gc_execute_line+0x2de>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8002042:	2301      	movs	r3, #1
 8002044:	f889 3006 	strb.w	r3, [r9, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8002048:	2303      	movs	r3, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 800204a:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 800204c:	9307      	str	r3, [sp, #28]
 800204e:	e7c0      	b.n	8001fd2 <gc_execute_line+0x2fe>
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 8002050:	2a00      	cmp	r2, #0
 8002052:	f040 814d 	bne.w	80022f0 <gc_execute_line+0x61c>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8002056:	9b07      	ldr	r3, [sp, #28]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 8299 	bne.w	8002590 <gc_execute_line+0x8bc>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800205e:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 8002062:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002066:	f000 8163 	beq.w	8002330 <gc_execute_line+0x65c>
 800206a:	f1ba 0f1e 	cmp.w	sl, #30
 800206e:	f000 815f 	beq.w	8002330 <gc_execute_line+0x65c>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8002072:	2301      	movs	r3, #1
 8002074:	9307      	str	r3, [sp, #28]
 8002076:	e00f      	b.n	8002098 <gc_execute_line+0x3c4>
            gc_block.modal.plane_select = int_value - 17;
 8002078:	f1aa 0a11 	sub.w	sl, sl, #17
 800207c:	f889 a005 	strb.w	sl, [r9, #5]
            break;
 8002080:	2102      	movs	r1, #2
 8002082:	e7a3      	b.n	8001fcc <gc_execute_line+0x2f8>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002084:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 8002088:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800208c:	f000 8120 	beq.w	80022d0 <gc_execute_line+0x5fc>
 8002090:	f1ba 0f1e 	cmp.w	sl, #30
 8002094:	f000 811c 	beq.w	80022d0 <gc_execute_line+0x5fc>
 8002098:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
 800209c:	f000 8118 	beq.w	80022d0 <gc_execute_line+0x5fc>
 80020a0:	2100      	movs	r1, #0
 80020a2:	e793      	b.n	8001fcc <gc_execute_line+0x2f8>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 80020a4:	9b06      	ldr	r3, [sp, #24]
 80020a6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	9306      	str	r3, [sp, #24]
 80020b0:	230c      	movs	r3, #12
 80020b2:	f8c9 b040 	str.w	fp, [r9, #64]	; 0x40
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80020b6:	fa48 f303 	asr.w	r3, r8, r3
 80020ba:	07db      	lsls	r3, r3, #31
 80020bc:	d41f      	bmi.n	80020fe <gc_execute_line+0x42a>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 80020be:	ea45 0808 	orr.w	r8, r5, r8
 80020c2:	e71d      	b.n	8001f00 <gc_execute_line+0x22c>
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 80020c4:	2501      	movs	r5, #1
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c9 b00c 	str.w	fp, [r9, #12]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80020cc:	fa48 f303 	asr.w	r3, r8, r3
 80020d0:	07da      	lsls	r2, r3, #31
 80020d2:	d414      	bmi.n	80020fe <gc_execute_line+0x42a>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 80020d4:	4658      	mov	r0, fp
 80020d6:	2100      	movs	r1, #0
 80020d8:	f7fe ff88 	bl	8000fec <__aeabi_fcmplt>
 80020dc:	2800      	cmp	r0, #0
 80020de:	d0ee      	beq.n	80020be <gc_execute_line+0x3ea>
 80020e0:	2404      	movs	r4, #4
 80020e2:	e767      	b.n	8001fb4 <gc_execute_line+0x2e0>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 80020e4:	9b08      	ldr	r3, [sp, #32]
 80020e6:	f8c9 b014 	str.w	fp, [r9, #20]
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	9308      	str	r3, [sp, #32]
 80020f0:	2302      	movs	r3, #2
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80020f2:	fa48 f303 	asr.w	r3, r8, r3
 80020f6:	07db      	lsls	r3, r3, #31
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 80020f8:	f04f 0504 	mov.w	r5, #4
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80020fc:	d5df      	bpl.n	80020be <gc_execute_line+0x3ea>
 80020fe:	2419      	movs	r4, #25
}
 8002100:	4620      	mov	r0, r4
 8002102:	b021      	add	sp, #132	; 0x84
 8002104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8002108:	9b08      	ldr	r3, [sp, #32]
 800210a:	f8c9 b018 	str.w	fp, [r9, #24]
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	9308      	str	r3, [sp, #32]
 8002114:	2508      	movs	r5, #8
 8002116:	2303      	movs	r3, #3
 8002118:	e7cd      	b.n	80020b6 <gc_execute_line+0x3e2>
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 800211a:	9b08      	ldr	r3, [sp, #32]
 800211c:	f8c9 b010 	str.w	fp, [r9, #16]
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	9308      	str	r3, [sp, #32]
 8002126:	2502      	movs	r5, #2
 8002128:	2301      	movs	r3, #1
 800212a:	e7c4      	b.n	80020b6 <gc_execute_line+0x3e2>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 800212c:	f889 a020 	strb.w	sl, [r9, #32]
 8002130:	2510      	movs	r5, #16
 8002132:	2304      	movs	r3, #4
 8002134:	e7bf      	b.n	80020b6 <gc_execute_line+0x3e2>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 8002136:	4658      	mov	r0, fp
 8002138:	f7fe ff96 	bl	8001068 <__aeabi_f2iz>
 800213c:	2520      	movs	r5, #32
 800213e:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 8002142:	2305      	movs	r3, #5
 8002144:	e7c2      	b.n	80020cc <gc_execute_line+0x3f8>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 8002146:	f8c9 b028 	str.w	fp, [r9, #40]	; 0x28
 800214a:	2540      	movs	r5, #64	; 0x40
 800214c:	2306      	movs	r3, #6
 800214e:	e7bd      	b.n	80020cc <gc_execute_line+0x3f8>
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 8002150:	f8c9 b02c 	str.w	fp, [r9, #44]	; 0x2c
 8002154:	2580      	movs	r5, #128	; 0x80
 8002156:	2307      	movs	r3, #7
 8002158:	e7ad      	b.n	80020b6 <gc_execute_line+0x3e2>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 800215a:	f8c9 b030 	str.w	fp, [r9, #48]	; 0x30
 800215e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002162:	2308      	movs	r3, #8
 8002164:	e7b2      	b.n	80020cc <gc_execute_line+0x3f8>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8002166:	4956      	ldr	r1, [pc, #344]	; (80022c0 <gc_execute_line+0x5ec>)
 8002168:	4658      	mov	r0, fp
 800216a:	f7fe ff5d 	bl	8001028 <__aeabi_fcmpgt>
 800216e:	2800      	cmp	r0, #0
 8002170:	f040 8215 	bne.w	800259e <gc_execute_line+0x8ca>
					gc_block.values.t = int_value;
 8002174:	f889 a034 	strb.w	sl, [r9, #52]	; 0x34
				break;
 8002178:	f44f 7500 	mov.w	r5, #512	; 0x200
 800217c:	2309      	movs	r3, #9
 800217e:	e7a5      	b.n	80020cc <gc_execute_line+0x3f8>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 8002180:	9b06      	ldr	r3, [sp, #24]
 8002182:	f8c9 b038 	str.w	fp, [r9, #56]	; 0x38
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	9306      	str	r3, [sp, #24]
 800218c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002190:	230a      	movs	r3, #10
 8002192:	e790      	b.n	80020b6 <gc_execute_line+0x3e2>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 8002194:	9b06      	ldr	r3, [sp, #24]
 8002196:	f8c9 b03c 	str.w	fp, [r9, #60]	; 0x3c
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	9306      	str	r3, [sp, #24]
 80021a0:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80021a4:	230b      	movs	r3, #11
 80021a6:	e786      	b.n	80020b6 <gc_execute_line+0x3e2>
		  case 'A': word_bit = WORD_A; gc_block.values.xyz[A_AXIS] = value; axis_words |= (1<<A_AXIS); break;
 80021a8:	9b06      	ldr	r3, [sp, #24]
 80021aa:	f8c9 b044 	str.w	fp, [r9, #68]	; 0x44
 80021ae:	f043 0308 	orr.w	r3, r3, #8
 80021b2:	9306      	str	r3, [sp, #24]
 80021b4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 80021b8:	230d      	movs	r3, #13
 80021ba:	e77c      	b.n	80020b6 <gc_execute_line+0x3e2>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 80021bc:	2340      	movs	r3, #64	; 0x40
 80021be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c2:	f889 3009 	strb.w	r3, [r9, #9]
 80021c6:	230d      	movs	r3, #13
 80021c8:	e694      	b.n	8001ef4 <gc_execute_line+0x220>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 80021ca:	2320      	movs	r3, #32
 80021cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021d0:	f889 300a 	strb.w	r3, [r9, #10]
 80021d4:	230c      	movs	r3, #12
 80021d6:	e68d      	b.n	8001ef4 <gc_execute_line+0x220>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021de:	f889 3009 	strb.w	r3, [r9, #9]
 80021e2:	230d      	movs	r3, #13
 80021e4:	e686      	b.n	8001ef4 <gc_execute_line+0x220>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 80021e6:	2310      	movs	r3, #16
 80021e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ec:	f889 300a 	strb.w	r3, [r9, #10]
 80021f0:	230c      	movs	r3, #12
 80021f2:	e67f      	b.n	8001ef4 <gc_execute_line+0x220>
              gc_block.modal.motion += (mantissa/10)+100;
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <gc_execute_line+0x5f0>)
 80021f6:	2101      	movs	r1, #1
 80021f8:	fba3 2302 	umull	r2, r3, r3, r2
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	3b76      	subs	r3, #118	; 0x76
 8002200:	f889 3001 	strb.w	r3, [r9, #1]
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8002204:	2302      	movs	r3, #2
 8002206:	9307      	str	r3, [sp, #28]
 8002208:	e6e3      	b.n	8001fd2 <gc_execute_line+0x2fe>
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 800220a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	f040 808a 	bne.w	8002326 <gc_execute_line+0x652>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 8002212:	f899 3002 	ldrb.w	r3, [r9, #2]
 8002216:	2b01      	cmp	r3, #1
 8002218:	f000 8106 	beq.w	8002428 <gc_execute_line+0x754>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <gc_execute_line+0x5f4>)
 800221e:	785b      	ldrb	r3, [r3, #1]
 8002220:	b93b      	cbnz	r3, 8002232 <gc_execute_line+0x55e>
        if (bit_istrue(value_words,bit(WORD_F))) {
 8002222:	f018 0f01 	tst.w	r8, #1
 8002226:	f040 80a5 	bne.w	8002374 <gc_execute_line+0x6a0>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 800222a:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <gc_execute_line+0x5f4>)
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f8c9 300c 	str.w	r3, [r9, #12]
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 8002232:	f418 7f80 	tst.w	r8, #256	; 0x100
 8002236:	d103      	bne.n	8002240 <gc_execute_line+0x56c>
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <gc_execute_line+0x5f4>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 8002240:	f899 5000 	ldrb.w	r5, [r9]
 8002244:	2d04      	cmp	r5, #4
 8002246:	f000 80b4 	beq.w	80023b2 <gc_execute_line+0x6de>
  switch (gc_block.modal.plane_select) {
 800224a:	f899 3005 	ldrb.w	r3, [r9, #5]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80a6 	beq.w	80023a0 <gc_execute_line+0x6cc>
 8002254:	2b01      	cmp	r3, #1
 8002256:	f040 809a 	bne.w	800238e <gc_execute_line+0x6ba>
 800225a:	2600      	movs	r6, #0
 800225c:	2702      	movs	r7, #2
      axis_linear = Y_AXIS;
 800225e:	9310      	str	r3, [sp, #64]	; 0x40
  switch (gc_block.modal.plane_select) {
 8002260:	2305      	movs	r3, #5
      axis_1 = X_AXIS;
 8002262:	960f      	str	r6, [sp, #60]	; 0x3c
      axis_0 = Z_AXIS;
 8002264:	970e      	str	r7, [sp, #56]	; 0x38
  switch (gc_block.modal.plane_select) {
 8002266:	930d      	str	r3, [sp, #52]	; 0x34
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002268:	f899 3003 	ldrb.w	r3, [r9, #3]
 800226c:	2b01      	cmp	r3, #1
 800226e:	f000 80a6 	beq.w	80023be <gc_execute_line+0x6ea>
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 8002272:	9b07      	ldr	r3, [sp, #28]
 8002274:	2b03      	cmp	r3, #3
 8002276:	f000 80cc 	beq.w	8002412 <gc_execute_line+0x73e>
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 800227a:	f8df b050 	ldr.w	fp, [pc, #80]	; 80022cc <gc_execute_line+0x5f8>
 800227e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 8002282:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8002286:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 800228a:	05a3      	lsls	r3, r4, #22
 800228c:	d567      	bpl.n	800235e <gc_execute_line+0x68a>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 800228e:	f899 0007 	ldrb.w	r0, [r9, #7]
 8002292:	2806      	cmp	r0, #6
 8002294:	d957      	bls.n	8002346 <gc_execute_line+0x672>
 8002296:	241d      	movs	r4, #29
 8002298:	e68c      	b.n	8001fb4 <gc_execute_line+0x2e0>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 800229a:	2401      	movs	r4, #1
}
 800229c:	4620      	mov	r0, r4
 800229e:	b021      	add	sp, #132	; 0x84
 80022a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 80022a4:	2402      	movs	r4, #2
}
 80022a6:	4620      	mov	r0, r4
 80022a8:	b021      	add	sp, #132	; 0x84
 80022aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b4:	f889 3009 	strb.w	r3, [r9, #9]
 80022b8:	230d      	movs	r3, #13
 80022ba:	e61b      	b.n	8001ef4 <gc_execute_line+0x220>
 80022bc:	40100401 	.word	0x40100401
 80022c0:	437f0000 	.word	0x437f0000
 80022c4:	cccccccd 	.word	0xcccccccd
 80022c8:	20001014 	.word	0x20001014
 80022cc:	20001040 	.word	0x20001040
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 80022d0:	b112      	cbz	r2, 80022d8 <gc_execute_line+0x604>
 80022d2:	2a0a      	cmp	r2, #10
 80022d4:	f47f ae6d 	bne.w	8001fb2 <gc_execute_line+0x2de>
              gc_block.non_modal_command += mantissa;
 80022d8:	4450      	add	r0, sl
 80022da:	f889 0000 	strb.w	r0, [r9]
 80022de:	2100      	movs	r1, #0
 80022e0:	e677      	b.n	8001fd2 <gc_execute_line+0x2fe>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e8:	f889 300a 	strb.w	r3, [r9, #10]
 80022ec:	230c      	movs	r3, #12
 80022ee:	e601      	b.n	8001ef4 <gc_execute_line+0x220>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80022f0:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 80022f4:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80022f8:	d0eb      	beq.n	80022d2 <gc_execute_line+0x5fe>
 80022fa:	f1ba 0f1e 	cmp.w	sl, #30
 80022fe:	f47f aecb 	bne.w	8002098 <gc_execute_line+0x3c4>
 8002302:	e7e6      	b.n	80022d2 <gc_execute_line+0x5fe>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 8002304:	2a0a      	cmp	r2, #10
 8002306:	f47f ae54 	bne.w	8001fb2 <gc_execute_line+0x2de>
 800230a:	f1ba 0f5a 	cmp.w	sl, #90	; 0x5a
 800230e:	f43f ae50 	beq.w	8001fb2 <gc_execute_line+0x2de>
 8002312:	2104      	movs	r1, #4
 8002314:	e65d      	b.n	8001fd2 <gc_execute_line+0x2fe>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8002316:	2415      	movs	r4, #21
 8002318:	e64c      	b.n	8001fb4 <gc_execute_line+0x2e0>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 800231a:	2302      	movs	r3, #2
 800231c:	2101      	movs	r1, #1
 800231e:	9307      	str	r3, [sp, #28]
 8002320:	e654      	b.n	8001fcc <gc_execute_line+0x2f8>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8002322:	2417      	movs	r4, #23
 8002324:	e646      	b.n	8001fb4 <gc_execute_line+0x2e0>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8002326:	f018 0f01 	tst.w	r8, #1
 800232a:	d123      	bne.n	8002374 <gc_execute_line+0x6a0>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 800232c:	2416      	movs	r4, #22
 800232e:	e641      	b.n	8001fb4 <gc_execute_line+0x2e0>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8002330:	2301      	movs	r3, #1
 8002332:	9307      	str	r3, [sp, #28]
 8002334:	e7d0      	b.n	80022d8 <gc_execute_line+0x604>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 8002336:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800233a:	2108      	movs	r1, #8
 800233c:	f889 3006 	strb.w	r3, [r9, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8002340:	2303      	movs	r3, #3
 8002342:	9307      	str	r3, [sp, #28]
 8002344:	e645      	b.n	8001fd2 <gc_execute_line+0x2fe>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002346:	4ba9      	ldr	r3, [pc, #676]	; (80025ec <gc_execute_line+0x918>)
 8002348:	799b      	ldrb	r3, [r3, #6]
 800234a:	4283      	cmp	r3, r0
 800234c:	d007      	beq.n	800235e <gc_execute_line+0x68a>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 800234e:	4651      	mov	r1, sl
 8002350:	f005 f9e6 	bl	8007720 <settings_read_coord_data>
 8002354:	2800      	cmp	r0, #0
 8002356:	f000 8119 	beq.w	800258c <gc_execute_line+0x8b8>
 800235a:	f899 5000 	ldrb.w	r5, [r9]
  switch (gc_block.non_modal_command) {
 800235e:	2d0a      	cmp	r5, #10
 8002360:	f000 80e8 	beq.w	8002534 <gc_execute_line+0x860>
 8002364:	2d5c      	cmp	r5, #92	; 0x5c
 8002366:	d170      	bne.n	800244a <gc_execute_line+0x776>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002368:	9b06      	ldr	r3, [sp, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 8146 	bne.w	80025fc <gc_execute_line+0x928>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002370:	241a      	movs	r4, #26
 8002372:	e61f      	b.n	8001fb4 <gc_execute_line+0x2e0>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 8002374:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002378:	2b01      	cmp	r3, #1
 800237a:	f47f af5a 	bne.w	8002232 <gc_execute_line+0x55e>
 800237e:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002382:	499b      	ldr	r1, [pc, #620]	; (80025f0 <gc_execute_line+0x91c>)
 8002384:	f7fe fc94 	bl	8000cb0 <__aeabi_fmul>
 8002388:	f8c9 000c 	str.w	r0, [r9, #12]
 800238c:	e751      	b.n	8002232 <gc_execute_line+0x55e>
 800238e:	2306      	movs	r3, #6
 8002390:	2602      	movs	r6, #2
 8002392:	2701      	movs	r7, #1
 8002394:	930d      	str	r3, [sp, #52]	; 0x34
      axis_linear = X_AXIS;
 8002396:	2300      	movs	r3, #0
      axis_1 = Z_AXIS;
 8002398:	960f      	str	r6, [sp, #60]	; 0x3c
      axis_0 = Y_AXIS;
 800239a:	970e      	str	r7, [sp, #56]	; 0x38
      axis_linear = X_AXIS;
 800239c:	9310      	str	r3, [sp, #64]	; 0x40
 800239e:	e763      	b.n	8002268 <gc_execute_line+0x594>
  switch (gc_block.modal.plane_select) {
 80023a0:	461f      	mov	r7, r3
      axis_0 = X_AXIS;
 80023a2:	930e      	str	r3, [sp, #56]	; 0x38
  switch (gc_block.modal.plane_select) {
 80023a4:	2303      	movs	r3, #3
 80023a6:	2601      	movs	r6, #1
 80023a8:	930d      	str	r3, [sp, #52]	; 0x34
      axis_linear = Z_AXIS;
 80023aa:	2302      	movs	r3, #2
      axis_1 = Y_AXIS;
 80023ac:	960f      	str	r6, [sp, #60]	; 0x3c
      axis_linear = Z_AXIS;
 80023ae:	9310      	str	r3, [sp, #64]	; 0x40
 80023b0:	e75a      	b.n	8002268 <gc_execute_line+0x594>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 80023b2:	f018 0f40 	tst.w	r8, #64	; 0x40
 80023b6:	f040 80ed 	bne.w	8002594 <gc_execute_line+0x8c0>
 80023ba:	241c      	movs	r4, #28
 80023bc:	e5fa      	b.n	8001fb4 <gc_execute_line+0x2e0>
      if (bit_istrue(axis_words,bit(idx)) ) {
 80023be:	9b06      	ldr	r3, [sp, #24]
 80023c0:	07da      	lsls	r2, r3, #31
 80023c2:	d507      	bpl.n	80023d4 <gc_execute_line+0x700>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 80023c4:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 80023c8:	4989      	ldr	r1, [pc, #548]	; (80025f0 <gc_execute_line+0x91c>)
 80023ca:	f7fe fc71 	bl	8000cb0 <__aeabi_fmul>
 80023ce:	9b06      	ldr	r3, [sp, #24]
 80023d0:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
      if (bit_istrue(axis_words,bit(idx)) ) {
 80023d4:	0798      	lsls	r0, r3, #30
 80023d6:	d507      	bpl.n	80023e8 <gc_execute_line+0x714>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 80023d8:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 80023dc:	4984      	ldr	r1, [pc, #528]	; (80025f0 <gc_execute_line+0x91c>)
 80023de:	f7fe fc67 	bl	8000cb0 <__aeabi_fmul>
 80023e2:	9b06      	ldr	r3, [sp, #24]
 80023e4:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
      if (bit_istrue(axis_words,bit(idx)) ) {
 80023e8:	0759      	lsls	r1, r3, #29
 80023ea:	d507      	bpl.n	80023fc <gc_execute_line+0x728>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 80023ec:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 80023f0:	497f      	ldr	r1, [pc, #508]	; (80025f0 <gc_execute_line+0x91c>)
 80023f2:	f7fe fc5d 	bl	8000cb0 <__aeabi_fmul>
 80023f6:	9b06      	ldr	r3, [sp, #24]
 80023f8:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
      if (bit_istrue(axis_words,bit(idx)) ) {
 80023fc:	071a      	lsls	r2, r3, #28
 80023fe:	f57f af38 	bpl.w	8002272 <gc_execute_line+0x59e>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002402:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 8002406:	497a      	ldr	r1, [pc, #488]	; (80025f0 <gc_execute_line+0x91c>)
 8002408:	f7fe fc52 	bl	8000cb0 <__aeabi_fmul>
 800240c:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 8002410:	e72f      	b.n	8002272 <gc_execute_line+0x59e>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 8002412:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002416:	2b01      	cmp	r3, #1
 8002418:	f47f af2f 	bne.w	800227a <gc_execute_line+0x5a6>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 800241c:	9b06      	ldr	r3, [sp, #24]
 800241e:	2b04      	cmp	r3, #4
 8002420:	f43f af2b 	beq.w	800227a <gc_execute_line+0x5a6>
 8002424:	2425      	movs	r4, #37	; 0x25
 8002426:	e5c5      	b.n	8001fb4 <gc_execute_line+0x2e0>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002428:	9b07      	ldr	r3, [sp, #28]
 800242a:	2b02      	cmp	r3, #2
 800242c:	f47f af01 	bne.w	8002232 <gc_execute_line+0x55e>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 8002430:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002434:	2b50      	cmp	r3, #80	; 0x50
 8002436:	f43f aefc 	beq.w	8002232 <gc_execute_line+0x55e>
 800243a:	2b00      	cmp	r3, #0
 800243c:	f43f aef9 	beq.w	8002232 <gc_execute_line+0x55e>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 8002440:	f018 0f01 	tst.w	r8, #1
 8002444:	f43f af72 	beq.w	800232c <gc_execute_line+0x658>
 8002448:	e6f3      	b.n	8002232 <gc_execute_line+0x55e>
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 800244a:	9b07      	ldr	r3, [sp, #28]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d04c      	beq.n	80024ea <gc_execute_line+0x816>
        if (axis_words) {
 8002450:	9a06      	ldr	r2, [sp, #24]
 8002452:	2a00      	cmp	r2, #0
 8002454:	d049      	beq.n	80024ea <gc_execute_line+0x816>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 8002456:	4965      	ldr	r1, [pc, #404]	; (80025ec <gc_execute_line+0x918>)
 8002458:	f899 3004 	ldrb.w	r3, [r9, #4]
 800245c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800245e:	910c      	str	r1, [sp, #48]	; 0x30
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 8117 	bne.w	8002694 <gc_execute_line+0x9c0>
 8002466:	2d35      	cmp	r5, #53	; 0x35
 8002468:	4613      	mov	r3, r2
 800246a:	f000 809e 	beq.w	80025aa <gc_execute_line+0x8d6>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800246e:	07d0      	lsls	r0, r2, #31
 8002470:	f140 81c2 	bpl.w	80027f8 <gc_execute_line+0xb24>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002474:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002478:	981c      	ldr	r0, [sp, #112]	; 0x70
 800247a:	f7fe fb11 	bl	8000aa0 <__addsf3>
 800247e:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <gc_execute_line+0x918>)
 8002480:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002482:	f7fe fb0d 	bl	8000aa0 <__addsf3>
 8002486:	9b06      	ldr	r3, [sp, #24]
 8002488:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800248c:	0799      	lsls	r1, r3, #30
 800248e:	f140 81ae 	bpl.w	80027ee <gc_execute_line+0xb1a>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002492:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002496:	981d      	ldr	r0, [sp, #116]	; 0x74
 8002498:	f7fe fb02 	bl	8000aa0 <__addsf3>
 800249c:	4b53      	ldr	r3, [pc, #332]	; (80025ec <gc_execute_line+0x918>)
 800249e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80024a0:	f7fe fafe 	bl	8000aa0 <__addsf3>
 80024a4:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80024a8:	9b06      	ldr	r3, [sp, #24]
 80024aa:	075a      	lsls	r2, r3, #29
 80024ac:	f140 8129 	bpl.w	8002702 <gc_execute_line+0xa2e>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80024b0:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 80024b4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80024b6:	f7fe faf3 	bl	8000aa0 <__addsf3>
 80024ba:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <gc_execute_line+0x918>)
 80024bc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024be:	f7fe faef 	bl	8000aa0 <__addsf3>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80024c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80024c4:	f7fe faec 	bl	8000aa0 <__addsf3>
 80024c8:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80024cc:	9b06      	ldr	r3, [sp, #24]
 80024ce:	071b      	lsls	r3, r3, #28
 80024d0:	f140 8112 	bpl.w	80026f8 <gc_execute_line+0xa24>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80024d4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80024d6:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 80024da:	f7fe fae1 	bl	8000aa0 <__addsf3>
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <gc_execute_line+0x918>)
 80024e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80024e2:	f7fe fadd 	bl	8000aa0 <__addsf3>
 80024e6:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
      switch (gc_block.non_modal_command) {
 80024ea:	2d1e      	cmp	r5, #30
 80024ec:	f000 813c 	beq.w	8002768 <gc_execute_line+0xa94>
 80024f0:	2d35      	cmp	r5, #53	; 0x35
 80024f2:	d075      	beq.n	80025e0 <gc_execute_line+0x90c>
 80024f4:	2d1c      	cmp	r5, #28
 80024f6:	f000 814b 	beq.w	8002790 <gc_execute_line+0xabc>
 80024fa:	f899 5001 	ldrb.w	r5, [r9, #1]
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 80024fe:	2d50      	cmp	r5, #80	; 0x50
 8002500:	f000 813f 	beq.w	8002782 <gc_execute_line+0xaae>
 8002504:	2300      	movs	r3, #0
 8002506:	930c      	str	r3, [sp, #48]	; 0x30
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 8002508:	9b07      	ldr	r3, [sp, #28]
 800250a:	2b02      	cmp	r3, #2
 800250c:	f000 810d 	beq.w	800272a <gc_execute_line+0xa56>
      switch (gc_block.modal.motion) {
 8002510:	9a09      	ldr	r2, [sp, #36]	; 0x24
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002512:	2a00      	cmp	r2, #0
 8002514:	d045      	beq.n	80025a2 <gc_execute_line+0x8ce>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 8002516:	f028 0821 	bic.w	r8, r8, #33	; 0x21
 800251a:	fa1f f388 	uxth.w	r3, r8
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A))); } // Remove axis words.
 800251e:	9907      	ldr	r1, [sp, #28]
 8002520:	b119      	cbz	r1, 800252a <gc_execute_line+0x856>
 8002522:	f423 5870 	bic.w	r8, r3, #15360	; 0x3c00
 8002526:	fa1f f388 	uxth.w	r3, r8
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 816f 	beq.w	800280e <gc_execute_line+0xb3a>
 8002530:	2424      	movs	r4, #36	; 0x24
 8002532:	e53f      	b.n	8001fb4 <gc_execute_line+0x2e0>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002534:	9b06      	ldr	r3, [sp, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f43f af1a 	beq.w	8002370 <gc_execute_line+0x69c>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 800253c:	f018 0f50 	tst.w	r8, #80	; 0x50
 8002540:	f43f af3b 	beq.w	80023ba <gc_execute_line+0x6e6>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 8002544:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002548:	f7fe fdb4 	bl	80010b4 <__aeabi_f2uiz>
 800254c:	b2c0      	uxtb	r0, r0
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 800254e:	2806      	cmp	r0, #6
 8002550:	f63f aea1 	bhi.w	8002296 <gc_execute_line+0x5c2>
      if (gc_block.values.l != 20) {
 8002554:	f899 3020 	ldrb.w	r3, [r9, #32]
 8002558:	2b14      	cmp	r3, #20
 800255a:	d006      	beq.n	800256a <gc_execute_line+0x896>
        if (gc_block.values.l == 2) {
 800255c:	2b02      	cmp	r3, #2
 800255e:	f47f ad28 	bne.w	8001fb2 <gc_execute_line+0x2de>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 8002562:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002566:	f47f ad24 	bne.w	8001fb2 <gc_execute_line+0x2de>
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 800256a:	f028 0850 	bic.w	r8, r8, #80	; 0x50
 800256e:	fa1f f888 	uxth.w	r8, r8
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 8002572:	2800      	cmp	r0, #0
 8002574:	f000 84b0 	beq.w	8002ed8 <gc_execute_line+0x1204>
 8002578:	3801      	subs	r0, #1
 800257a:	b2c3      	uxtb	r3, r0
 800257c:	930c      	str	r3, [sp, #48]	; 0x30
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 800257e:	491d      	ldr	r1, [pc, #116]	; (80025f4 <gc_execute_line+0x920>)
 8002580:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002582:	f005 f8cd 	bl	8007720 <settings_read_coord_data>
 8002586:	2800      	cmp	r0, #0
 8002588:	f040 843e 	bne.w	8002e08 <gc_execute_line+0x1134>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 800258c:	2407      	movs	r4, #7
 800258e:	e511      	b.n	8001fb4 <gc_execute_line+0x2e0>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8002590:	2418      	movs	r4, #24
 8002592:	e50f      	b.n	8001fb4 <gc_execute_line+0x2e0>
    bit_false(value_words,bit(WORD_P));
 8002594:	f028 0840 	bic.w	r8, r8, #64	; 0x40
 8002598:	fa1f f888 	uxth.w	r8, r8
 800259c:	e655      	b.n	800224a <gc_execute_line+0x576>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 800259e:	2426      	movs	r4, #38	; 0x26
 80025a0:	e508      	b.n	8001fb4 <gc_execute_line+0x2e0>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <gc_execute_line+0x924>)
 80025a4:	ea08 0303 	and.w	r3, r8, r3
 80025a8:	e7b9      	b.n	800251e <gc_execute_line+0x84a>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80025aa:	07d8      	lsls	r0, r3, #31
 80025ac:	d404      	bmi.n	80025b8 <gc_execute_line+0x8e4>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <gc_execute_line+0x918>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 80025b6:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80025b8:	0799      	lsls	r1, r3, #30
 80025ba:	d404      	bmi.n	80025c6 <gc_execute_line+0x8f2>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <gc_execute_line+0x918>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80025c4:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80025c6:	075a      	lsls	r2, r3, #29
 80025c8:	d404      	bmi.n	80025d4 <gc_execute_line+0x900>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <gc_execute_line+0x918>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 80025d2:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80025d4:	071d      	lsls	r5, r3, #28
 80025d6:	d403      	bmi.n	80025e0 <gc_execute_line+0x90c>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <gc_execute_line+0x918>)
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 80025e0:	f899 5001 	ldrb.w	r5, [r9, #1]
 80025e4:	2d01      	cmp	r5, #1
 80025e6:	d98d      	bls.n	8002504 <gc_execute_line+0x830>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 80025e8:	241e      	movs	r4, #30
 80025ea:	e4e3      	b.n	8001fb4 <gc_execute_line+0x2e0>
 80025ec:	20001014 	.word	0x20001014
 80025f0:	41cb3333 	.word	0x41cb3333
 80025f4:	20001074 	.word	0x20001074
 80025f8:	fffffcde 	.word	0xfffffcde
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 80025fc:	4b8a      	ldr	r3, [pc, #552]	; (8002828 <gc_execute_line+0xb54>)
 80025fe:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002600:	9b06      	ldr	r3, [sp, #24]
 8002602:	07d9      	lsls	r1, r3, #31
 8002604:	f140 8087 	bpl.w	8002716 <gc_execute_line+0xa42>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002608:	4b87      	ldr	r3, [pc, #540]	; (8002828 <gc_execute_line+0xb54>)
 800260a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800260c:	69d8      	ldr	r0, [r3, #28]
 800260e:	f7fe fa45 	bl	8000a9c <__aeabi_fsub>
 8002612:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002616:	f7fe fa41 	bl	8000a9c <__aeabi_fsub>
 800261a:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
        if (bit_istrue(axis_words,bit(idx)) ) {
 800261e:	9b06      	ldr	r3, [sp, #24]
 8002620:	079a      	lsls	r2, r3, #30
 8002622:	d573      	bpl.n	800270c <gc_execute_line+0xa38>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002624:	4b80      	ldr	r3, [pc, #512]	; (8002828 <gc_execute_line+0xb54>)
 8002626:	991d      	ldr	r1, [sp, #116]	; 0x74
 8002628:	6a18      	ldr	r0, [r3, #32]
 800262a:	f7fe fa37 	bl	8000a9c <__aeabi_fsub>
 800262e:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002632:	f7fe fa33 	bl	8000a9c <__aeabi_fsub>
 8002636:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
        if (bit_istrue(axis_words,bit(idx)) ) {
 800263a:	9b06      	ldr	r3, [sp, #24]
 800263c:	075b      	lsls	r3, r3, #29
 800263e:	d524      	bpl.n	800268a <gc_execute_line+0x9b6>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002640:	4b79      	ldr	r3, [pc, #484]	; (8002828 <gc_execute_line+0xb54>)
 8002642:	991e      	ldr	r1, [sp, #120]	; 0x78
 8002644:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002646:	f7fe fa29 	bl	8000a9c <__aeabi_fsub>
 800264a:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 800264e:	f7fe fa25 	bl	8000a9c <__aeabi_fsub>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002652:	4629      	mov	r1, r5
 8002654:	f7fe fa22 	bl	8000a9c <__aeabi_fsub>
 8002658:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
        if (bit_istrue(axis_words,bit(idx)) ) {
 800265c:	9b06      	ldr	r3, [sp, #24]
 800265e:	071d      	lsls	r5, r3, #28
 8002660:	d55e      	bpl.n	8002720 <gc_execute_line+0xa4c>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002662:	4b71      	ldr	r3, [pc, #452]	; (8002828 <gc_execute_line+0xb54>)
 8002664:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8002666:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002668:	f7fe fa18 	bl	8000a9c <__aeabi_fsub>
 800266c:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8002670:	f7fe fa14 	bl	8000a9c <__aeabi_fsub>
 8002674:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8002678:	2300      	movs	r3, #0
 800267a:	930c      	str	r3, [sp, #48]	; 0x30
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 800267c:	f899 5001 	ldrb.w	r5, [r9, #1]
 8002680:	2d50      	cmp	r5, #80	; 0x50
 8002682:	f47f af41 	bne.w	8002508 <gc_execute_line+0x834>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002686:	241f      	movs	r4, #31
 8002688:	e494      	b.n	8001fb4 <gc_execute_line+0x2e0>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800268a:	4b67      	ldr	r3, [pc, #412]	; (8002828 <gc_execute_line+0xb54>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002692:	e7e3      	b.n	800265c <gc_execute_line+0x988>
 8002694:	2d35      	cmp	r5, #53	; 0x35
 8002696:	4613      	mov	r3, r2
 8002698:	d087      	beq.n	80025aa <gc_execute_line+0x8d6>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800269a:	07d0      	lsls	r0, r2, #31
 800269c:	f140 80a2 	bpl.w	80027e4 <gc_execute_line+0xb10>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026a0:	4b61      	ldr	r3, [pc, #388]	; (8002828 <gc_execute_line+0xb54>)
 80026a2:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 80026a6:	69d8      	ldr	r0, [r3, #28]
 80026a8:	f7fe f9fa 	bl	8000aa0 <__addsf3>
 80026ac:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026b0:	9b06      	ldr	r3, [sp, #24]
 80026b2:	0799      	lsls	r1, r3, #30
 80026b4:	f140 8091 	bpl.w	80027da <gc_execute_line+0xb06>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026b8:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <gc_execute_line+0xb54>)
 80026ba:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 80026be:	6a18      	ldr	r0, [r3, #32]
 80026c0:	f7fe f9ee 	bl	8000aa0 <__addsf3>
 80026c4:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026c8:	9b06      	ldr	r3, [sp, #24]
 80026ca:	075a      	lsls	r2, r3, #29
 80026cc:	f140 809a 	bpl.w	8002804 <gc_execute_line+0xb30>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026d0:	4b55      	ldr	r3, [pc, #340]	; (8002828 <gc_execute_line+0xb54>)
 80026d2:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 80026d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026d8:	f7fe f9e2 	bl	8000aa0 <__addsf3>
 80026dc:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026e0:	9b06      	ldr	r3, [sp, #24]
 80026e2:	071b      	lsls	r3, r3, #28
 80026e4:	d508      	bpl.n	80026f8 <gc_execute_line+0xa24>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026e6:	4b50      	ldr	r3, [pc, #320]	; (8002828 <gc_execute_line+0xb54>)
 80026e8:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 80026ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026ee:	f7fe f9d7 	bl	8000aa0 <__addsf3>
 80026f2:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 80026f6:	e6f8      	b.n	80024ea <gc_execute_line+0x816>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80026f8:	4b4b      	ldr	r3, [pc, #300]	; (8002828 <gc_execute_line+0xb54>)
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 8002700:	e6f3      	b.n	80024ea <gc_execute_line+0x816>
 8002702:	4b49      	ldr	r3, [pc, #292]	; (8002828 <gc_execute_line+0xb54>)
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800270a:	e6df      	b.n	80024cc <gc_execute_line+0x7f8>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800270c:	4b46      	ldr	r3, [pc, #280]	; (8002828 <gc_execute_line+0xb54>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8002714:	e791      	b.n	800263a <gc_execute_line+0x966>
 8002716:	4b44      	ldr	r3, [pc, #272]	; (8002828 <gc_execute_line+0xb54>)
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 800271e:	e77e      	b.n	800261e <gc_execute_line+0x94a>
 8002720:	4b41      	ldr	r3, [pc, #260]	; (8002828 <gc_execute_line+0xb54>)
 8002722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002724:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 8002728:	e7a6      	b.n	8002678 <gc_execute_line+0x9a4>
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 800272a:	b1ad      	cbz	r5, 8002758 <gc_execute_line+0xa84>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 800272c:	2100      	movs	r1, #0
 800272e:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002732:	f7fe fc51 	bl	8000fd8 <__aeabi_fcmpeq>
 8002736:	2800      	cmp	r0, #0
 8002738:	f47f adf8 	bne.w	800232c <gc_execute_line+0x658>
      switch (gc_block.modal.motion) {
 800273c:	2d8c      	cmp	r5, #140	; 0x8c
 800273e:	f000 827d 	beq.w	8002c3c <gc_execute_line+0xf68>
 8002742:	f200 8273 	bhi.w	8002c2c <gc_execute_line+0xf58>
 8002746:	2d02      	cmp	r5, #2
 8002748:	f000 8240 	beq.w	8002bcc <gc_execute_line+0xef8>
 800274c:	2d03      	cmp	r5, #3
 800274e:	f000 823f 	beq.w	8002bd0 <gc_execute_line+0xefc>
 8002752:	2d01      	cmp	r5, #1
 8002754:	f47f aedc 	bne.w	8002510 <gc_execute_line+0x83c>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8002758:	9b06      	ldr	r3, [sp, #24]
 800275a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800275c:	2b00      	cmp	r3, #0
 800275e:	9b07      	ldr	r3, [sp, #28]
 8002760:	bf08      	it	eq
 8002762:	2300      	moveq	r3, #0
 8002764:	9307      	str	r3, [sp, #28]
 8002766:	e6d4      	b.n	8002512 <gc_execute_line+0x83e>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002768:	4930      	ldr	r1, [pc, #192]	; (800282c <gc_execute_line+0xb58>)
 800276a:	2007      	movs	r0, #7
 800276c:	f004 ffd8 	bl	8007720 <settings_read_coord_data>
 8002770:	2800      	cmp	r0, #0
 8002772:	f43f af0b 	beq.w	800258c <gc_execute_line+0x8b8>
          if (axis_words) {
 8002776:	9b06      	ldr	r3, [sp, #24]
 8002778:	b993      	cbnz	r3, 80027a0 <gc_execute_line+0xacc>
 800277a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 800277c:	930c      	str	r3, [sp, #48]	; 0x30
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 800277e:	9307      	str	r3, [sp, #28]
 8002780:	e6c7      	b.n	8002512 <gc_execute_line+0x83e>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002782:	9b06      	ldr	r3, [sp, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f47f af7e 	bne.w	8002686 <gc_execute_line+0x9b2>
 800278a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800278c:	930c      	str	r3, [sp, #48]	; 0x30
 800278e:	e6c0      	b.n	8002512 <gc_execute_line+0x83e>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002790:	4926      	ldr	r1, [pc, #152]	; (800282c <gc_execute_line+0xb58>)
 8002792:	2006      	movs	r0, #6
 8002794:	f004 ffc4 	bl	8007720 <settings_read_coord_data>
 8002798:	2800      	cmp	r0, #0
 800279a:	f43f aef7 	beq.w	800258c <gc_execute_line+0x8b8>
 800279e:	e7ea      	b.n	8002776 <gc_execute_line+0xaa2>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 80027a0:	07d8      	lsls	r0, r3, #31
 80027a2:	d404      	bmi.n	80027ae <gc_execute_line+0xada>
 80027a4:	4b20      	ldr	r3, [pc, #128]	; (8002828 <gc_execute_line+0xb54>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f8c9 3010 	str.w	r3, [r9, #16]
 80027ac:	9b06      	ldr	r3, [sp, #24]
 80027ae:	0799      	lsls	r1, r3, #30
 80027b0:	d404      	bmi.n	80027bc <gc_execute_line+0xae8>
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <gc_execute_line+0xb54>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f8c9 3014 	str.w	r3, [r9, #20]
 80027ba:	9b06      	ldr	r3, [sp, #24]
 80027bc:	075a      	lsls	r2, r3, #29
 80027be:	d404      	bmi.n	80027ca <gc_execute_line+0xaf6>
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <gc_execute_line+0xb54>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f8c9 3018 	str.w	r3, [r9, #24]
 80027c8:	9b06      	ldr	r3, [sp, #24]
 80027ca:	071d      	lsls	r5, r3, #28
 80027cc:	f53f af54 	bmi.w	8002678 <gc_execute_line+0x9a4>
 80027d0:	4b15      	ldr	r3, [pc, #84]	; (8002828 <gc_execute_line+0xb54>)
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f8c9 301c 	str.w	r3, [r9, #28]
 80027d8:	e74e      	b.n	8002678 <gc_execute_line+0x9a4>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <gc_execute_line+0xb54>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80027e2:	e771      	b.n	80026c8 <gc_execute_line+0x9f4>
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <gc_execute_line+0xb54>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 80027ec:	e760      	b.n	80026b0 <gc_execute_line+0x9dc>
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <gc_execute_line+0xb54>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80027f6:	e657      	b.n	80024a8 <gc_execute_line+0x7d4>
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <gc_execute_line+0xb54>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8002800:	4613      	mov	r3, r2
 8002802:	e643      	b.n	800248c <gc_execute_line+0x7b8>
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <gc_execute_line+0xb54>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800280c:	e768      	b.n	80026e0 <gc_execute_line+0xa0c>
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 800280e:	9319      	str	r3, [sp, #100]	; 0x64
 8002810:	931a      	str	r3, [sp, #104]	; 0x68
 8002812:	931b      	str	r3, [sp, #108]	; 0x6c
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002814:	b162      	cbz	r2, 8002830 <gc_execute_line+0xb5c>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 8002816:	f024 0449 	bic.w	r4, r4, #73	; 0x49
 800281a:	2c00      	cmp	r4, #0
 800281c:	f000 832b 	beq.w	8002e76 <gc_execute_line+0x11a2>
 8002820:	2410      	movs	r4, #16
 8002822:	f7ff bbc7 	b.w	8001fb4 <gc_execute_line+0x2e0>
 8002826:	bf00      	nop
 8002828:	20001014 	.word	0x20001014
 800282c:	20001074 	.word	0x20001074
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8002830:	4bb3      	ldr	r3, [pc, #716]	; (8002b00 <gc_execute_line+0xe2c>)
 8002832:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002836:	079c      	lsls	r4, r3, #30
 8002838:	d514      	bpl.n	8002864 <gc_execute_line+0xb90>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 800283a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800283e:	3b01      	subs	r3, #1
 8002840:	2b02      	cmp	r3, #2
 8002842:	d904      	bls.n	800284e <gc_execute_line+0xb7a>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 8002844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284a:	b2db      	uxtb	r3, r3
 800284c:	9309      	str	r3, [sp, #36]	; 0x24
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 800284e:	9b06      	ldr	r3, [sp, #24]
 8002850:	b11b      	cbz	r3, 800285a <gc_execute_line+0xb86>
 8002852:	9b07      	ldr	r3, [sp, #28]
 8002854:	2b02      	cmp	r3, #2
 8002856:	f000 81b1 	beq.w	8002bbc <gc_execute_line+0xee8>
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 800285a:	4baa      	ldr	r3, [pc, #680]	; (8002b04 <gc_execute_line+0xe30>)
 800285c:	7a5b      	ldrb	r3, [r3, #9]
 800285e:	2b10      	cmp	r3, #16
 8002860:	f000 8328 	beq.w	8002eb4 <gc_execute_line+0x11e0>
 8002864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002866:	f003 0440 	and.w	r4, r3, #64	; 0x40
  gc_state.line_number = gc_block.values.n;
 800286a:	49a6      	ldr	r1, [pc, #664]	; (8002b04 <gc_execute_line+0xe30>)
 800286c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002870:	f899 3002 	ldrb.w	r3, [r9, #2]
  gc_state.line_number = gc_block.values.n;
 8002874:	618a      	str	r2, [r1, #24]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002876:	704b      	strb	r3, [r1, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 8002878:	b113      	cbz	r3, 8002880 <gc_execute_line+0xbac>
 800287a:	2308      	movs	r3, #8
 800287c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002880:	f8d9 300c 	ldr.w	r3, [r9, #12]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002884:	4a9f      	ldr	r2, [pc, #636]	; (8002b04 <gc_execute_line+0xe30>)
 8002886:	f8d9 5030 	ldr.w	r5, [r9, #48]	; 0x30
 800288a:	68d0      	ldr	r0, [r2, #12]
 800288c:	4629      	mov	r1, r5
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 800288e:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 8002890:	9319      	str	r3, [sp, #100]	; 0x64
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002892:	f7fe fba1 	bl	8000fd8 <__aeabi_fcmpeq>
 8002896:	2800      	cmp	r0, #0
 8002898:	f000 80a6 	beq.w	80029e8 <gc_execute_line+0xd14>
 800289c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800289e:	0698      	lsls	r0, r3, #26
 80028a0:	f100 80a2 	bmi.w	80029e8 <gc_execute_line+0xd14>
 80028a4:	4b97      	ldr	r3, [pc, #604]	; (8002b04 <gc_execute_line+0xe30>)
 80028a6:	7a58      	ldrb	r0, [r3, #9]
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80028a8:	b904      	cbnz	r4, 80028ac <gc_execute_line+0xbd8>
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 80028aa:	951a      	str	r5, [sp, #104]	; 0x68
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80028ac:	f899 300a 	ldrb.w	r3, [r9, #10]
  gc_state.tool = gc_block.values.t;
 80028b0:	f899 2034 	ldrb.w	r2, [r9, #52]	; 0x34
 80028b4:	4993      	ldr	r1, [pc, #588]	; (8002b04 <gc_execute_line+0xe30>)
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80028b6:	4283      	cmp	r3, r0
  gc_state.tool = gc_block.values.t;
 80028b8:	750a      	strb	r2, [r1, #20]
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80028ba:	d007      	beq.n	80028cc <gc_execute_line+0xbf8>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 80028bc:	4618      	mov	r0, r3
 80028be:	991a      	ldr	r1, [sp, #104]	; 0x68
 80028c0:	f005 fad4 	bl	8007e6c <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 80028c4:	f899 300a 	ldrb.w	r3, [r9, #10]
 80028c8:	4a8e      	ldr	r2, [pc, #568]	; (8002b04 <gc_execute_line+0xe30>)
 80028ca:	7253      	strb	r3, [r2, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80028cc:	4a8d      	ldr	r2, [pc, #564]	; (8002b04 <gc_execute_line+0xe30>)
 80028ce:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 80028d2:	7a52      	ldrb	r2, [r2, #9]
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80028d4:	f899 0009 	ldrb.w	r0, [r9, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80028d8:	4313      	orrs	r3, r2
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80028da:	4a8a      	ldr	r2, [pc, #552]	; (8002b04 <gc_execute_line+0xe30>)
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80028dc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80028e0:	7a12      	ldrb	r2, [r2, #8]
 80028e2:	4282      	cmp	r2, r0
 80028e4:	d009      	beq.n	80028fa <gc_execute_line+0xc26>
    coolant_sync(gc_block.modal.coolant);
 80028e6:	f7ff f90f 	bl	8001b08 <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 80028ea:	f899 3009 	ldrb.w	r3, [r9, #9]
 80028ee:	4a85      	ldr	r2, [pc, #532]	; (8002b04 <gc_execute_line+0xe30>)
 80028f0:	b113      	cbz	r3, 80028f8 <gc_execute_line+0xc24>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 80028f2:	7a12      	ldrb	r2, [r2, #8]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	4a83      	ldr	r2, [pc, #524]	; (8002b04 <gc_execute_line+0xe30>)
 80028f8:	7213      	strb	r3, [r2, #8]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80028fa:	4a82      	ldr	r2, [pc, #520]	; (8002b04 <gc_execute_line+0xe30>)
 80028fc:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8002900:	7a11      	ldrb	r1, [r2, #8]
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002902:	f899 2000 	ldrb.w	r2, [r9]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002906:	430b      	orrs	r3, r1
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002908:	2a04      	cmp	r2, #4
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 800290a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 800290e:	f000 8148 	beq.w	8002ba2 <gc_execute_line+0xece>
  gc_state.modal.units = gc_block.modal.units;
 8002912:	f899 3003 	ldrb.w	r3, [r9, #3]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002916:	497b      	ldr	r1, [pc, #492]	; (8002b04 <gc_execute_line+0xe30>)
 8002918:	f899 2005 	ldrb.w	r2, [r9, #5]
  gc_state.modal.units = gc_block.modal.units;
 800291c:	708b      	strb	r3, [r1, #2]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 800291e:	9b07      	ldr	r3, [sp, #28]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002920:	710a      	strb	r2, [r1, #4]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002922:	2b03      	cmp	r3, #3
 8002924:	f000 8127 	beq.w	8002b76 <gc_execute_line+0xea2>
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002928:	4b76      	ldr	r3, [pc, #472]	; (8002b04 <gc_execute_line+0xe30>)
 800292a:	f899 4007 	ldrb.w	r4, [r9, #7]
 800292e:	799b      	ldrb	r3, [r3, #6]
 8002930:	42a3      	cmp	r3, r4
 8002932:	d007      	beq.n	8002944 <gc_execute_line+0xc70>
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 8002934:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 8002938:	4d72      	ldr	r5, [pc, #456]	; (8002b04 <gc_execute_line+0xe30>)
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 800293a:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 800293e:	71ac      	strb	r4, [r5, #6]
    system_flag_wco_change();
 8002940:	f006 feaa 	bl	8009698 <system_flag_wco_change>
  switch(gc_block.non_modal_command) {
 8002944:	f899 3000 	ldrb.w	r3, [r9]
  gc_state.modal.distance = gc_block.modal.distance;
 8002948:	f899 2004 	ldrb.w	r2, [r9, #4]
 800294c:	496d      	ldr	r1, [pc, #436]	; (8002b04 <gc_execute_line+0xe30>)
  switch(gc_block.non_modal_command) {
 800294e:	2b26      	cmp	r3, #38	; 0x26
  gc_state.modal.distance = gc_block.modal.distance;
 8002950:	70ca      	strb	r2, [r1, #3]
  switch(gc_block.non_modal_command) {
 8002952:	f000 8096 	beq.w	8002a82 <gc_execute_line+0xdae>
 8002956:	d97c      	bls.n	8002a52 <gc_execute_line+0xd7e>
 8002958:	2b5c      	cmp	r3, #92	; 0x5c
 800295a:	d072      	beq.n	8002a42 <gc_execute_line+0xd6e>
 800295c:	2b66      	cmp	r3, #102	; 0x66
 800295e:	d065      	beq.n	8002a2c <gc_execute_line+0xd58>
 8002960:	2b28      	cmp	r3, #40	; 0x28
 8002962:	d05e      	beq.n	8002a22 <gc_execute_line+0xd4e>
  gc_state.modal.motion = gc_block.modal.motion;
 8002964:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002968:	4a66      	ldr	r2, [pc, #408]	; (8002b04 <gc_execute_line+0xe30>)
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 800296a:	2b50      	cmp	r3, #80	; 0x50
  gc_state.modal.motion = gc_block.modal.motion;
 800296c:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 800296e:	d003      	beq.n	8002978 <gc_execute_line+0xca4>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002970:	9a07      	ldr	r2, [sp, #28]
 8002972:	2a02      	cmp	r2, #2
 8002974:	f000 808a 	beq.w	8002a8c <gc_execute_line+0xdb8>
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 8002978:	f899 4008 	ldrb.w	r4, [r9, #8]
 800297c:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <gc_execute_line+0xe30>)
 800297e:	71dc      	strb	r4, [r3, #7]
  if (gc_state.modal.program_flow) {
 8002980:	2c00      	cmp	r4, #0
 8002982:	f43f ab17 	beq.w	8001fb4 <gc_execute_line+0x2e0>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8002986:	f003 fa13 	bl	8005db0 <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 800298a:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <gc_execute_line+0xe30>)
 800298c:	79db      	ldrb	r3, [r3, #7]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d03d      	beq.n	8002a0e <gc_execute_line+0xd3a>
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002992:	2101      	movs	r1, #1
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002994:	2400      	movs	r4, #0
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002996:	2264      	movs	r2, #100	; 0x64
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002998:	485a      	ldr	r0, [pc, #360]	; (8002b04 <gc_execute_line+0xe30>)
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 800299a:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <gc_execute_line+0xe34>)
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 800299c:	7001      	strb	r1, [r0, #0]
      if (sys.state != STATE_CHECK_MODE) {
 800299e:	7819      	ldrb	r1, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 80029a0:	7104      	strb	r4, [r0, #4]
      if (sys.state != STATE_CHECK_MODE) {
 80029a2:	2902      	cmp	r1, #2
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 80029a4:	70c4      	strb	r4, [r0, #3]
      gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 80029a6:	7044      	strb	r4, [r0, #1]
      gc_state.modal.coord_select = 0; // G54
 80029a8:	7184      	strb	r4, [r0, #6]
      gc_state.modal.spindle = SPINDLE_DISABLE;
 80029aa:	7244      	strb	r4, [r0, #9]
      gc_state.modal.coolant = COOLANT_DISABLE;
 80029ac:	7204      	strb	r4, [r0, #8]
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 80029ae:	721a      	strb	r2, [r3, #8]
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 80029b0:	725a      	strb	r2, [r3, #9]
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 80029b2:	729a      	strb	r2, [r3, #10]
      if (sys.state != STATE_CHECK_MODE) {
 80029b4:	d010      	beq.n	80029d8 <gc_execute_line+0xd04>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80029b6:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 80029ba:	4620      	mov	r0, r4
 80029bc:	f004 feb0 	bl	8007720 <settings_read_coord_data>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	f43f ade3 	beq.w	800258c <gc_execute_line+0x8b8>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 80029c6:	f006 fe67 	bl	8009698 <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 80029ca:	4620      	mov	r0, r4
 80029cc:	2100      	movs	r1, #0
 80029ce:	f005 f9c3 	bl	8007d58 <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7ff f874 	bl	8001ac0 <coolant_set_state>
      report_feedback_message(MESSAGE_PROGRAM_END);
 80029d8:	2008      	movs	r0, #8
 80029da:	f003 fd0d 	bl	80063f8 <report_feedback_message>
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 80029de:	2400      	movs	r4, #0
 80029e0:	4b48      	ldr	r3, [pc, #288]	; (8002b04 <gc_execute_line+0xe30>)
 80029e2:	71dc      	strb	r4, [r3, #7]
 80029e4:	f7ff bae6 	b.w	8001fb4 <gc_execute_line+0x2e0>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80029e8:	4b46      	ldr	r3, [pc, #280]	; (8002b04 <gc_execute_line+0xe30>)
 80029ea:	7a58      	ldrb	r0, [r3, #9]
 80029ec:	b160      	cbz	r0, 8002a08 <gc_execute_line+0xd34>
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 80029ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029f0:	0619      	lsls	r1, r3, #24
 80029f2:	d409      	bmi.n	8002a08 <gc_execute_line+0xd34>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80029f4:	2c00      	cmp	r4, #0
 80029f6:	f000 80d9 	beq.w	8002bac <gc_execute_line+0xed8>
            spindle_sync(gc_state.modal.spindle, 0.0);
 80029fa:	2100      	movs	r1, #0
 80029fc:	f005 fa36 	bl	8007e6c <spindle_sync>
 8002a00:	4b40      	ldr	r3, [pc, #256]	; (8002b04 <gc_execute_line+0xe30>)
 8002a02:	f8d9 5030 	ldr.w	r5, [r9, #48]	; 0x30
 8002a06:	7a58      	ldrb	r0, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 8002a08:	4b3e      	ldr	r3, [pc, #248]	; (8002b04 <gc_execute_line+0xe30>)
 8002a0a:	60dd      	str	r5, [r3, #12]
 8002a0c:	e74c      	b.n	80028a8 <gc_execute_line+0xbd4>
      if (sys.state != STATE_CHECK_MODE) {
 8002a0e:	4b3e      	ldr	r3, [pc, #248]	; (8002b08 <gc_execute_line+0xe34>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d0e3      	beq.n	80029de <gc_execute_line+0xd0a>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8002a16:	2008      	movs	r0, #8
 8002a18:	f006 feea 	bl	80097f0 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8002a1c:	f002 ffd6 	bl	80059cc <protocol_execute_realtime>
 8002a20:	e7dd      	b.n	80029de <gc_execute_line+0xd0a>
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 8002a22:	493a      	ldr	r1, [pc, #232]	; (8002b0c <gc_execute_line+0xe38>)
 8002a24:	2007      	movs	r0, #7
 8002a26:	f004 fda3 	bl	8007570 <settings_write_coord_data>
      break;
 8002a2a:	e79b      	b.n	8002964 <gc_execute_line+0xc90>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <gc_execute_line+0xe3c>)
 8002a30:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 8002a34:	63cb      	str	r3, [r1, #60]	; 0x3c
 8002a36:	6053      	str	r3, [r2, #4]
 8002a38:	6093      	str	r3, [r2, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
      system_flag_wco_change();
 8002a3c:	f006 fe2c 	bl	8009698 <system_flag_wco_change>
      break;
 8002a40:	e790      	b.n	8002964 <gc_execute_line+0xc90>
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8002a42:	4c33      	ldr	r4, [pc, #204]	; (8002b10 <gc_execute_line+0xe3c>)
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <gc_execute_line+0xe40>)
 8002a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      system_flag_wco_change();
 8002a4c:	f006 fe24 	bl	8009698 <system_flag_wco_change>
      break;
 8002a50:	e788      	b.n	8002964 <gc_execute_line+0xc90>
  switch(gc_block.non_modal_command) {
 8002a52:	2b1c      	cmp	r3, #28
 8002a54:	d034      	beq.n	8002ac0 <gc_execute_line+0xdec>
 8002a56:	2b1e      	cmp	r3, #30
 8002a58:	d032      	beq.n	8002ac0 <gc_execute_line+0xdec>
 8002a5a:	2b0a      	cmp	r3, #10
 8002a5c:	d182      	bne.n	8002964 <gc_execute_line+0xc90>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8002a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a60:	4c2d      	ldr	r4, [pc, #180]	; (8002b18 <gc_execute_line+0xe44>)
 8002a62:	4628      	mov	r0, r5
 8002a64:	4621      	mov	r1, r4
 8002a66:	f004 fd83 	bl	8007570 <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <gc_execute_line+0xe30>)
 8002a6c:	799b      	ldrb	r3, [r3, #6]
 8002a6e:	42ab      	cmp	r3, r5
 8002a70:	f47f af78 	bne.w	8002964 <gc_execute_line+0xc90>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 8002a74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a78:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
        system_flag_wco_change();
 8002a7c:	f006 fe0c 	bl	8009698 <system_flag_wco_change>
 8002a80:	e770      	b.n	8002964 <gc_execute_line+0xc90>
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8002a82:	4922      	ldr	r1, [pc, #136]	; (8002b0c <gc_execute_line+0xe38>)
 8002a84:	2006      	movs	r0, #6
 8002a86:	f004 fd73 	bl	8007570 <settings_write_coord_data>
      break;
 8002a8a:	e76b      	b.n	8002964 <gc_execute_line+0xc90>
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d06b      	beq.n	8002b68 <gc_execute_line+0xe94>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d05c      	beq.n	8002b4e <gc_execute_line+0xe7a>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002a94:	3b02      	subs	r3, #2
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d942      	bls.n	8002b20 <gc_execute_line+0xe4c>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002a9a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002a9e:	4d1d      	ldr	r5, [pc, #116]	; (8002b14 <gc_execute_line+0xe40>)
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002aa6:	a919      	add	r1, sp, #100	; 0x64
 8002aa8:	4628      	mov	r0, r5
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002aaa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002aae:	f001 f889 	bl	8003bc4 <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002ab2:	b9e0      	cbnz	r0, 8002aee <gc_execute_line+0xe1a>
 8002ab4:	4c15      	ldr	r4, [pc, #84]	; (8002b0c <gc_execute_line+0xe38>)
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8002ab6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002abe:	e75b      	b.n	8002978 <gc_execute_line+0xca4>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002ac0:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002acc:	9b07      	ldr	r3, [sp, #28]
 8002ace:	b11b      	cbz	r3, 8002ad8 <gc_execute_line+0xe04>
 8002ad0:	a919      	add	r1, sp, #100	; 0x64
 8002ad2:	4810      	ldr	r0, [pc, #64]	; (8002b14 <gc_execute_line+0xe40>)
 8002ad4:	f000 fe04 	bl	80036e0 <mc_line>
      mc_line(gc_block.values.ijk, pl_data);
 8002ad8:	4d0f      	ldr	r5, [pc, #60]	; (8002b18 <gc_execute_line+0xe44>)
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002ada:	4c0c      	ldr	r4, [pc, #48]	; (8002b0c <gc_execute_line+0xe38>)
      mc_line(gc_block.values.ijk, pl_data);
 8002adc:	4628      	mov	r0, r5
 8002ade:	a919      	add	r1, sp, #100	; 0x64
 8002ae0:	f000 fdfe 	bl	80036e0 <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002ae4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8002aec:	e73a      	b.n	8002964 <gc_execute_line+0xc90>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8002aee:	2801      	cmp	r0, #1
 8002af0:	f47f af42 	bne.w	8002978 <gc_execute_line+0xca4>
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8002af4:	4909      	ldr	r1, [pc, #36]	; (8002b1c <gc_execute_line+0xe48>)
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <gc_execute_line+0xe38>)
 8002af8:	f006 fdd8 	bl	80096ac <system_convert_array_steps_to_mpos>
 8002afc:	e73c      	b.n	8002978 <gc_execute_line+0xca4>
 8002afe:	bf00      	nop
 8002b00:	2000126c 	.word	0x2000126c
 8002b04:	20001014 	.word	0x20001014
 8002b08:	200010b0 	.word	0x200010b0
 8002b0c:	20001030 	.word	0x20001030
 8002b10:	20001050 	.word	0x20001050
 8002b14:	2000109c 	.word	0x2000109c
 8002b18:	20001074 	.word	0x20001074
 8002b1c:	200010d8 	.word	0x200010d8
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8002b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b22:	4db3      	ldr	r5, [pc, #716]	; (8002df0 <gc_execute_line+0x111c>)
 8002b24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b28:	9304      	str	r3, [sp, #16]
 8002b2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b2c:	4cb1      	ldr	r4, [pc, #708]	; (8002df4 <gc_execute_line+0x1120>)
 8002b2e:	9303      	str	r3, [sp, #12]
 8002b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b32:	f8d9 602c 	ldr.w	r6, [r9, #44]	; 0x2c
 8002b36:	9302      	str	r3, [sp, #8]
 8002b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b3a:	a919      	add	r1, sp, #100	; 0x64
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	4622      	mov	r2, r4
 8002b40:	f1a5 0328 	sub.w	r3, r5, #40	; 0x28
 8002b44:	4628      	mov	r0, r5
 8002b46:	9600      	str	r6, [sp, #0]
 8002b48:	f000 fdfe 	bl	8003748 <mc_arc>
 8002b4c:	e7b3      	b.n	8002ab6 <gc_execute_line+0xde2>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002b4e:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
        mc_line(gc_block.values.xyz, pl_data);
 8002b52:	4da7      	ldr	r5, [pc, #668]	; (8002df0 <gc_execute_line+0x111c>)
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002b54:	f043 0301 	orr.w	r3, r3, #1
        mc_line(gc_block.values.xyz, pl_data);
 8002b58:	a919      	add	r1, sp, #100	; 0x64
 8002b5a:	4628      	mov	r0, r5
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002b5c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8002b60:	4ca4      	ldr	r4, [pc, #656]	; (8002df4 <gc_execute_line+0x1120>)
        mc_line(gc_block.values.xyz, pl_data);
 8002b62:	f000 fdbd 	bl	80036e0 <mc_line>
 8002b66:	e7a6      	b.n	8002ab6 <gc_execute_line+0xde2>
        mc_line(gc_block.values.xyz, pl_data);
 8002b68:	4da1      	ldr	r5, [pc, #644]	; (8002df0 <gc_execute_line+0x111c>)
 8002b6a:	a919      	add	r1, sp, #100	; 0x64
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	f000 fdb7 	bl	80036e0 <mc_line>
 8002b72:	4ca0      	ldr	r4, [pc, #640]	; (8002df4 <gc_execute_line+0x1120>)
 8002b74:	e79f      	b.n	8002ab6 <gc_execute_line+0xde2>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8002b76:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002b7a:	714b      	strb	r3, [r1, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 8002b7c:	b913      	cbnz	r3, 8002b84 <gc_execute_line+0xeb0>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 8002b84:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 8002b88:	4b9b      	ldr	r3, [pc, #620]	; (8002df8 <gc_execute_line+0x1124>)
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b8e:	f7fe fa23 	bl	8000fd8 <__aeabi_fcmpeq>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	f47f aec8 	bne.w	8002928 <gc_execute_line+0xc54>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 8002b98:	4b97      	ldr	r3, [pc, #604]	; (8002df8 <gc_execute_line+0x1124>)
 8002b9a:	64dc      	str	r4, [r3, #76]	; 0x4c
      system_flag_wco_change();
 8002b9c:	f006 fd7c 	bl	8009698 <system_flag_wco_change>
 8002ba0:	e6c2      	b.n	8002928 <gc_execute_line+0xc54>
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002ba2:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002ba6:	f000 ffd1 	bl	8003b4c <mc_dwell>
 8002baa:	e6b2      	b.n	8002912 <gc_execute_line+0xc3e>
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 8002bac:	4629      	mov	r1, r5
 8002bae:	f005 f95d 	bl	8007e6c <spindle_sync>
 8002bb2:	4b91      	ldr	r3, [pc, #580]	; (8002df8 <gc_execute_line+0x1124>)
 8002bb4:	f8d9 5030 	ldr.w	r5, [r9, #48]	; 0x30
 8002bb8:	7a58      	ldrb	r0, [r3, #9]
 8002bba:	e725      	b.n	8002a08 <gc_execute_line+0xd34>
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc6:	f003 0440 	and.w	r4, r3, #64	; 0x40
 8002bca:	e64e      	b.n	800286a <gc_execute_line+0xb96>
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 8002bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bce:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002bd0:	9b06      	ldr	r3, [sp, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f43f abcc 	beq.w	8002370 <gc_execute_line+0x69c>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002bda:	4213      	tst	r3, r2
 8002bdc:	d102      	bne.n	8002be4 <gc_execute_line+0xf10>
 8002bde:	2420      	movs	r4, #32
 8002be0:	f7ff b9e8 	b.w	8001fb4 <gc_execute_line+0x2e0>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002be4:	4b84      	ldr	r3, [pc, #528]	; (8002df8 <gc_execute_line+0x1124>)
 8002be6:	eb09 0287 	add.w	r2, r9, r7, lsl #2
 8002bea:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002bee:	69d9      	ldr	r1, [r3, #28]
 8002bf0:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002bf2:	f7fd ff53 	bl	8000a9c <__aeabi_fsub>
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002bf6:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <gc_execute_line+0x1124>)
 8002bf8:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8002bfc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002c00:	900a      	str	r0, [sp, #40]	; 0x28
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002c02:	69d9      	ldr	r1, [r3, #28]
 8002c04:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002c06:	f7fd ff49 	bl	8000a9c <__aeabi_fsub>
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002c0a:	f018 0580 	ands.w	r5, r8, #128	; 0x80
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002c0e:	900b      	str	r0, [sp, #44]	; 0x2c
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002c10:	d05b      	beq.n	8002cca <gc_execute_line+0xff6>
            bit_false(value_words,bit(WORD_R));
 8002c12:	f028 0880 	bic.w	r8, r8, #128	; 0x80
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002c16:	2210      	movs	r2, #16
 8002c18:	4975      	ldr	r1, [pc, #468]	; (8002df0 <gc_execute_line+0x111c>)
 8002c1a:	4876      	ldr	r0, [pc, #472]	; (8002df4 <gc_execute_line+0x1120>)
            bit_false(value_words,bit(WORD_R));
 8002c1c:	fa1f f888 	uxth.w	r8, r8
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002c20:	f008 f868 	bl	800acf4 <memcmp>
 8002c24:	bb18      	cbnz	r0, 8002c6e <gc_execute_line+0xf9a>
 8002c26:	2421      	movs	r4, #33	; 0x21
 8002c28:	f7ff b9c4 	b.w	8001fb4 <gc_execute_line+0x2e0>
      switch (gc_block.modal.motion) {
 8002c2c:	2d8e      	cmp	r5, #142	; 0x8e
 8002c2e:	d005      	beq.n	8002c3c <gc_execute_line+0xf68>
 8002c30:	d302      	bcc.n	8002c38 <gc_execute_line+0xf64>
 8002c32:	2d8f      	cmp	r5, #143	; 0x8f
 8002c34:	f47f ac6c 	bne.w	8002510 <gc_execute_line+0x83c>
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 8002c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c3a:	9309      	str	r3, [sp, #36]	; 0x24
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8002c3c:	f105 0372 	add.w	r3, r5, #114	; 0x72
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d804      	bhi.n	8002c50 <gc_execute_line+0xf7c>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 8002c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c48:	f043 0308 	orr.w	r3, r3, #8
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002c50:	9b06      	ldr	r3, [sp, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f43f ab8c 	beq.w	8002370 <gc_execute_line+0x69c>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	4965      	ldr	r1, [pc, #404]	; (8002df0 <gc_execute_line+0x111c>)
 8002c5c:	4865      	ldr	r0, [pc, #404]	; (8002df4 <gc_execute_line+0x1120>)
 8002c5e:	f008 f849 	bl	800acf4 <memcmp>
 8002c62:	2800      	cmp	r0, #0
 8002c64:	d0df      	beq.n	8002c26 <gc_execute_line+0xf52>
 8002c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c68:	f003 0201 	and.w	r2, r3, #1
 8002c6c:	e451      	b.n	8002512 <gc_execute_line+0x83e>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 8002c6e:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d106      	bne.n	8002c84 <gc_execute_line+0xfb0>
 8002c76:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002c7a:	4960      	ldr	r1, [pc, #384]	; (8002dfc <gc_execute_line+0x1128>)
 8002c7c:	f7fe f818 	bl	8000cb0 <__aeabi_fmul>
 8002c80:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002c84:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8002c88:	4608      	mov	r0, r1
 8002c8a:	f7fe f811 	bl	8000cb0 <__aeabi_fmul>
 8002c8e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002c92:	f7fe f80d 	bl	8000cb0 <__aeabi_fmul>
 8002c96:	4605      	mov	r5, r0
 8002c98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	f7fe f808 	bl	8000cb0 <__aeabi_fmul>
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f7fd fefa 	bl	8000a9c <__aeabi_fsub>
 8002ca8:	4605      	mov	r5, r0
 8002caa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002cac:	4601      	mov	r1, r0
 8002cae:	f7fd ffff 	bl	8000cb0 <__aeabi_fmul>
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	f7fd fef1 	bl	8000a9c <__aeabi_fsub>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002cba:	2100      	movs	r1, #0
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002cbc:	4605      	mov	r5, r0
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002cbe:	f7fe f995 	bl	8000fec <__aeabi_fcmplt>
 8002cc2:	b148      	cbz	r0, 8002cd8 <gc_execute_line+0x1004>
 8002cc4:	2422      	movs	r4, #34	; 0x22
 8002cc6:	f7ff b975 	b.w	8001fb4 <gc_execute_line+0x2e0>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002cca:	9b08      	ldr	r3, [sp, #32]
 8002ccc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002cce:	4213      	tst	r3, r2
 8002cd0:	d14a      	bne.n	8002d68 <gc_execute_line+0x1094>
 8002cd2:	2423      	movs	r4, #35	; 0x23
 8002cd4:	f7ff b96e 	b.w	8001fb4 <gc_execute_line+0x2e0>
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f008 f93b 	bl	800af54 <sqrtf>
 8002cde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002ce4:	f001 f900 	bl	8003ee8 <hypot_f>
 8002ce8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002cec:	4601      	mov	r1, r0
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f7fe f892 	bl	8000e18 <__aeabi_fdiv>
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002cf4:	f899 3001 	ldrb.w	r3, [r9, #1]
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002cf8:	4605      	mov	r5, r0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002cfa:	2b03      	cmp	r3, #3
            if (gc_block.values.r < 0) {
 8002cfc:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002d00:	bf08      	it	eq
 8002d02:	f100 4500 	addeq.w	r5, r0, #2147483648	; 0x80000000
            if (gc_block.values.r < 0) {
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	9308      	str	r3, [sp, #32]
 8002d0c:	f7fe f96e 	bl	8000fec <__aeabi_fcmplt>
 8002d10:	9b08      	ldr	r3, [sp, #32]
 8002d12:	b128      	cbz	r0, 8002d20 <gc_execute_line+0x104c>
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002d14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
                h_x2_div_d = -h_x2_div_d;
 8002d18:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002d1c:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 8002d20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d22:	4628      	mov	r0, r5
 8002d24:	f7fd ffc4 	bl	8000cb0 <__aeabi_fmul>
 8002d28:	4601      	mov	r1, r0
 8002d2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d2c:	f7fd feb6 	bl	8000a9c <__aeabi_fsub>
 8002d30:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002d34:	f7fd ffbc 	bl	8000cb0 <__aeabi_fmul>
 8002d38:	3702      	adds	r7, #2
 8002d3a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8002d3e:	60b8      	str	r0, [r7, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 8002d40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d42:	4628      	mov	r0, r5
 8002d44:	f7fd ffb4 	bl	8000cb0 <__aeabi_fmul>
 8002d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d4a:	f7fd fea9 	bl	8000aa0 <__addsf3>
 8002d4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002d52:	f7fd ffad 	bl	8000cb0 <__aeabi_fmul>
 8002d56:	3602      	adds	r6, #2
 8002d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d5a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8002d5e:	f003 0201 	and.w	r2, r3, #1
 8002d62:	60b0      	str	r0, [r6, #8]
 8002d64:	f7ff bbd5 	b.w	8002512 <gc_execute_line+0x83e>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002d68:	f899 3003 	ldrb.w	r3, [r9, #3]
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002d6c:	f028 080e 	bic.w	r8, r8, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002d70:	2b01      	cmp	r3, #1
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002d72:	fa1f f888 	uxth.w	r8, r8
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002d76:	f000 80b4 	beq.w	8002ee2 <gc_execute_line+0x120e>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8002d7a:	1cb5      	adds	r5, r6, #2
 8002d7c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8002d80:	68a9      	ldr	r1, [r5, #8]
 8002d82:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002d84:	f7fd fe8a 	bl	8000a9c <__aeabi_fsub>
 8002d88:	4606      	mov	r6, r0
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8002d8a:	3702      	adds	r7, #2
 8002d8c:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d94:	f7fd fe82 	bl	8000a9c <__aeabi_fsub>
            float target_r = hypot_f(x,y);
 8002d98:	4631      	mov	r1, r6
 8002d9a:	f001 f8a5 	bl	8003ee8 <hypot_f>
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002d9e:	68a9      	ldr	r1, [r5, #8]
            float target_r = hypot_f(x,y);
 8002da0:	4606      	mov	r6, r0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002da2:	68b8      	ldr	r0, [r7, #8]
 8002da4:	f001 f8a0 	bl	8003ee8 <hypot_f>
 8002da8:	4607      	mov	r7, r0
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002daa:	4630      	mov	r0, r6
 8002dac:	4639      	mov	r1, r7
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002dae:	f8c9 702c 	str.w	r7, [r9, #44]	; 0x2c
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002db2:	f7fd fe73 	bl	8000a9c <__aeabi_fsub>
 8002db6:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
            if (delta_r > 0.005f) {
 8002dba:	4628      	mov	r0, r5
 8002dbc:	4910      	ldr	r1, [pc, #64]	; (8002e00 <gc_execute_line+0x112c>)
 8002dbe:	f7fe f933 	bl	8001028 <__aeabi_fcmpgt>
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	f43f af4f 	beq.w	8002c66 <gc_execute_line+0xf92>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8002dc8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f7fe f92b 	bl	8001028 <__aeabi_fcmpgt>
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	f47f af27 	bne.w	8002c26 <gc_execute_line+0xf52>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8002dd8:	490a      	ldr	r1, [pc, #40]	; (8002e04 <gc_execute_line+0x1130>)
 8002dda:	4638      	mov	r0, r7
 8002ddc:	f7fd ff68 	bl	8000cb0 <__aeabi_fmul>
 8002de0:	4601      	mov	r1, r0
 8002de2:	4628      	mov	r0, r5
 8002de4:	f7fe f920 	bl	8001028 <__aeabi_fcmpgt>
 8002de8:	2800      	cmp	r0, #0
 8002dea:	f47f af1c 	bne.w	8002c26 <gc_execute_line+0xf52>
 8002dee:	e73a      	b.n	8002c66 <gc_execute_line+0xf92>
 8002df0:	2000109c 	.word	0x2000109c
 8002df4:	20001030 	.word	0x20001030
 8002df8:	20001014 	.word	0x20001014
 8002dfc:	41cb3333 	.word	0x41cb3333
 8002e00:	3ba3d70a 	.word	0x3ba3d70a
 8002e04:	3a83126f 	.word	0x3a83126f
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e08:	2201      	movs	r2, #1
 8002e0a:	9211      	str	r2, [sp, #68]	; 0x44
 8002e0c:	2200      	movs	r2, #0
          if (gc_block.values.l == 20) {
 8002e0e:	f899 3020 	ldrb.w	r3, [r9, #32]
 8002e12:	9414      	str	r4, [sp, #80]	; 0x50
 8002e14:	9312      	str	r3, [sp, #72]	; 0x48
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e16:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <gc_execute_line+0x1250>)
 8002e18:	9615      	str	r6, [sp, #84]	; 0x54
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e20:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <gc_execute_line+0x1254>)
 8002e22:	4d42      	ldr	r5, [pc, #264]	; (8002f2c <gc_execute_line+0x1258>)
 8002e24:	461e      	mov	r6, r3
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002e26:	9b06      	ldr	r3, [sp, #24]
 8002e28:	fa43 f104 	asr.w	r1, r3, r4
 8002e2c:	07c8      	lsls	r0, r1, #31
 8002e2e:	d504      	bpl.n	8002e3a <gc_execute_line+0x1166>
          if (gc_block.values.l == 20) {
 8002e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e32:	2b14      	cmp	r3, #20
 8002e34:	d00c      	beq.n	8002e50 <gc_execute_line+0x117c>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002e36:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002e38:	6029      	str	r1, [r5, #0]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d017      	beq.n	8002e70 <gc_execute_line+0x119c>
 8002e40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002e42:	3401      	adds	r4, #1
 8002e44:	3101      	adds	r1, #1
 8002e46:	b2cb      	uxtb	r3, r1
 8002e48:	9311      	str	r3, [sp, #68]	; 0x44
 8002e4a:	3604      	adds	r6, #4
 8002e4c:	3504      	adds	r5, #4
 8002e4e:	e7ea      	b.n	8002e26 <gc_execute_line+0x1152>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002e50:	6a31      	ldr	r1, [r6, #32]
 8002e52:	6830      	ldr	r0, [r6, #0]
 8002e54:	f7fd fe22 	bl	8000a9c <__aeabi_fsub>
 8002e58:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002e5a:	f7fd fe1f 	bl	8000a9c <__aeabi_fsub>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e5e:	2c02      	cmp	r4, #2
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002e60:	6028      	str	r0, [r5, #0]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e62:	d1ea      	bne.n	8002e3a <gc_execute_line+0x1166>
 8002e64:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002e66:	f7fd fe19 	bl	8000a9c <__aeabi_fsub>
 8002e6a:	f8c9 0018 	str.w	r0, [r9, #24]
 8002e6e:	e7e7      	b.n	8002e40 <gc_execute_line+0x116c>
 8002e70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8002e72:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8002e74:	e402      	b.n	800267c <gc_execute_line+0x9a8>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 8002e76:	f899 3000 	ldrb.w	r3, [r9]
 8002e7a:	2b35      	cmp	r3, #53	; 0x35
 8002e7c:	d002      	beq.n	8002e84 <gc_execute_line+0x11b0>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f47f acce 	bne.w	8002820 <gc_execute_line+0xb4c>
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <gc_execute_line+0x1250>)
 8002e86:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <gc_execute_line+0x1250>)
 8002e88:	7a11      	ldrb	r1, [r2, #8]
 8002e8a:	7a5b      	ldrb	r3, [r3, #9]
      pl_data->spindle_speed = gc_state.spindle_speed;
 8002e8c:	68d2      	ldr	r2, [r2, #12]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002e8e:	430b      	orrs	r3, r1
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8002e90:	a819      	add	r0, sp, #100	; 0x64
 8002e92:	4927      	ldr	r1, [pc, #156]	; (8002f30 <gc_execute_line+0x125c>)
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002e94:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
      pl_data->spindle_speed = gc_state.spindle_speed;
 8002e98:	921a      	str	r2, [sp, #104]	; 0x68
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8002e9a:	f000 f84f 	bl	8002f3c <jog_execute>
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	f47f a887 	bne.w	8001fb4 <gc_execute_line+0x2e0>
 8002ea6:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <gc_execute_line+0x1260>)
 8002ea8:	4d1f      	ldr	r5, [pc, #124]	; (8002f28 <gc_execute_line+0x1254>)
 8002eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002eb0:	f7ff b880 	b.w	8001fb4 <gc_execute_line+0x2e0>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <gc_execute_line+0x1250>)
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002eb8:	781b      	ldrb	r3, [r3, #0]
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	2b02      	cmp	r3, #2
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002ebe:	4613      	mov	r3, r2
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002ec0:	d82a      	bhi.n	8002f18 <gc_execute_line+0x1244>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002ec2:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8002ec6:	f43f acd0 	beq.w	800286a <gc_execute_line+0xb96>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8002eca:	f043 0320 	orr.w	r3, r3, #32
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed2:	f003 0440 	and.w	r4, r3, #64	; 0x40
 8002ed6:	e4c8      	b.n	800286a <gc_execute_line+0xb96>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002ed8:	f899 3007 	ldrb.w	r3, [r9, #7]
 8002edc:	930c      	str	r3, [sp, #48]	; 0x30
 8002ede:	f7ff bb4e 	b.w	800257e <gc_execute_line+0x8aa>
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <gc_execute_line+0x1258>)
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 8002ee4:	960d      	str	r6, [sp, #52]	; 0x34
 8002ee6:	4626      	mov	r6, r4
 8002ee8:	461c      	mov	r4, r3
 8002eea:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <gc_execute_line+0x1264>)
 8002eec:	9b08      	ldr	r3, [sp, #32]
 8002eee:	fa43 f105 	asr.w	r1, r3, r5
 8002ef2:	f011 0f01 	tst.w	r1, #1
 8002ef6:	f105 0501 	add.w	r5, r5, #1
 8002efa:	d006      	beq.n	8002f0a <gc_execute_line+0x1236>
 8002efc:	4611      	mov	r1, r2
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	9211      	str	r2, [sp, #68]	; 0x44
 8002f02:	f7fd fed5 	bl	8000cb0 <__aeabi_fmul>
 8002f06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002f08:	6020      	str	r0, [r4, #0]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8002f0a:	2d04      	cmp	r5, #4
 8002f0c:	f104 0404 	add.w	r4, r4, #4
 8002f10:	d1ec      	bne.n	8002eec <gc_execute_line+0x1218>
 8002f12:	4634      	mov	r4, r6
 8002f14:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002f16:	e730      	b.n	8002d7a <gc_execute_line+0x10a6>
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002f18:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8002f1c:	f47f aca5 	bne.w	800286a <gc_execute_line+0xb96>
 8002f20:	e7d3      	b.n	8002eca <gc_execute_line+0x11f6>
 8002f22:	bf00      	nop
 8002f24:	20001014 	.word	0x20001014
 8002f28:	20001030 	.word	0x20001030
 8002f2c:	20001074 	.word	0x20001074
 8002f30:	20001064 	.word	0x20001064
 8002f34:	2000109c 	.word	0x2000109c
 8002f38:	41cb3333 	.word	0x41cb3333

08002f3c <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	4605      	mov	r5, r0
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f40:	7a03      	ldrb	r3, [r0, #8]
  pl_data->feed_rate = gc_block->values.f;
 8002f42:	68c8      	ldr	r0, [r1, #12]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f44:	f043 0304 	orr.w	r3, r3, #4
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <jog_execute+0x58>)
  pl_data->feed_rate = gc_block->values.f;
 8002f4a:	6028      	str	r0, [r5, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f4c:	722b      	strb	r3, [r5, #8]
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f4e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002f52:	f101 0438 	add.w	r4, r1, #56	; 0x38
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f56:	069b      	lsls	r3, r3, #26
 8002f58:	d506      	bpl.n	8002f68 <jog_execute+0x2c>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f006 fbca 	bl	80096f4 <system_check_travel_limits>
 8002f60:	b110      	cbz	r0, 8002f68 <jog_execute+0x2c>
 8002f62:	240f      	movs	r4, #15
      st_wake_up();  // NOTE: Manual start. No state machine required.
    }
  }

  return(STATUS_OK);
}
 8002f64:	4620      	mov	r0, r4
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
  if (sys.state == STATE_IDLE) {
 8002f68:	4e0b      	ldr	r6, [pc, #44]	; (8002f98 <jog_execute+0x5c>)
  mc_line(gc_block->values.xyz, pl_data);
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f000 fbb7 	bl	80036e0 <mc_line>
  if (sys.state == STATE_IDLE) {
 8002f72:	7834      	ldrb	r4, [r6, #0]
 8002f74:	b114      	cbz	r4, 8002f7c <jog_execute+0x40>
  return(STATUS_OK);
 8002f76:	2400      	movs	r4, #0
}
 8002f78:	4620      	mov	r0, r4
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8002f7c:	f001 f9c2 	bl	8004304 <plan_get_current_block>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d0f8      	beq.n	8002f76 <jog_execute+0x3a>
      sys.state = STATE_JOG;
 8002f84:	2320      	movs	r3, #32
 8002f86:	7033      	strb	r3, [r6, #0]
      st_prep_buffer();
 8002f88:	f005 fbc2 	bl	8008710 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8002f8c:	f005 f824 	bl	8007fd8 <st_wake_up>
}
 8002f90:	4620      	mov	r0, r4
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	2000126c 	.word	0x2000126c
 8002f98:	200010b0 	.word	0x200010b0

08002f9c <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 8002f9c:	b530      	push	{r4, r5, lr}
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002f9e:	2101      	movs	r1, #1
{
 8002fa0:	b085      	sub	sp, #20
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002fa2:	2009      	movs	r0, #9
#ifdef DISABLE_LIMIT_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002fa4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002fa8:	f7fe fc46 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8002fac:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002fae:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002fb0:	a904      	add	r1, sp, #16
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002fb2:	4d21      	ldr	r5, [pc, #132]	; (8003038 <limits_init+0x9c>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002fb4:	f821 4d10 	strh.w	r4, [r1, #-16]!
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002fb8:	4820      	ldr	r0, [pc, #128]	; (800303c <limits_init+0xa0>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8002fba:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002fbe:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002fc2:	f7fe fa1d 	bl	8001400 <GPIO_Init>
	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002fc6:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8002fca:	071b      	lsls	r3, r3, #28
 8002fcc:	d406      	bmi.n	8002fdc <limits_init+0x40>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8002fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <limits_init+0xa4>)
 8002fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	else
	{
		limits_disable();
	}
#endif
}
 8002fd8:	b005      	add	sp, #20
 8002fda:	bd30      	pop	{r4, r5, pc}
		delay_ms(100); // added by MS for debug (issue#14)
 8002fdc:	2064      	movs	r0, #100	; 0x64
 8002fde:	f000 ff73 	bl	8003ec8 <delay_ms>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8002fe2:	210c      	movs	r1, #12
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f7fe fc09 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 8002fea:	210d      	movs	r1, #13
 8002fec:	2001      	movs	r0, #1
 8002fee:	f7fe fc05 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8002ff2:	210e      	movs	r1, #14
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f7fe fc01 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, A_LIMIT_BIT);
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f7fe fbfd 	bl	80017fc <GPIO_EXTILineConfig>
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003002:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8003006:	2200      	movs	r2, #0
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003008:	f013 0f40 	tst.w	r3, #64	; 0x40
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 800300c:	bf14      	ite	ne
 800300e:	2108      	movne	r1, #8
 8003010:	210c      	moveq	r1, #12
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003012:	2301      	movs	r3, #1
		EXTI_Init(&EXTI_InitStructure);
 8003014:	a802      	add	r0, sp, #8
 8003016:	f88d 100d 	strb.w	r1, [sp, #13]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 800301a:	f88d 200c 	strb.w	r2, [sp, #12]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800301e:	f88d 300e 	strb.w	r3, [sp, #14]
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8003022:	9402      	str	r4, [sp, #8]
		EXTI_Init(&EXTI_InitStructure);
 8003024:	f7fe f8a2 	bl	800116c <EXTI_Init>
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <limits_init+0xa8>)
 800302a:	a804      	add	r0, sp, #16
 800302c:	f840 3d0c 	str.w	r3, [r0, #-12]!
		NVIC_Init(&NVIC_InitStructure);
 8003030:	f7fe f86a 	bl	8001108 <NVIC_Init>
}
 8003034:	b005      	add	sp, #20
 8003036:	bd30      	pop	{r4, r5, pc}
 8003038:	2000126c 	.word	0x2000126c
 800303c:	40010c00 	.word	0x40010c00
 8003040:	e000e100 	.word	0xe000e100
 8003044:	01020228 	.word	0x01020228

08003048 <limits_disable>:
 8003048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800304c:	4b01      	ldr	r3, [pc, #4]	; (8003054 <limits_disable+0xc>)
 800304e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003052:	4770      	bx	lr
 8003054:	e000e100 	.word	0xe000e100

08003058 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8003058:	b510      	push	{r4, lr}
#if defined(AVRTARGET) || defined(STM32F103C8)
#if defined(AVRTARGET)
  uint8_t pin = (LIMIT_PIN & LIMIT_MASK);
#endif
#if defined(STM32F103C8)
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 800305a:	4813      	ldr	r0, [pc, #76]	; (80030a8 <limits_get_state+0x50>)
 800305c:	f7fe fb86 	bl	800176c <GPIO_ReadInputData>
#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <limits_get_state+0x54>)
 8003062:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003066:	065b      	lsls	r3, r3, #25
 8003068:	bf5c      	itt	pl
 800306a:	f480 4070 	eorpl.w	r0, r0, #61440	; 0xf000
 800306e:	b280      	uxthpl	r0, r0
  if (pin) {
 8003070:	b1c8      	cbz	r0, 80030a6 <limits_get_state+0x4e>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003072:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <limits_get_state+0x58>)
 8003074:	8813      	ldrh	r3, [r2, #0]
 8003076:	8854      	ldrh	r4, [r2, #2]
 8003078:	4218      	tst	r0, r3
 800307a:	bf07      	ittee	eq
 800307c:	2300      	moveq	r3, #0
 800307e:	2102      	moveq	r1, #2
 8003080:	2301      	movne	r3, #1
 8003082:	2103      	movne	r1, #3
 8003084:	4220      	tst	r0, r4
 8003086:	bf08      	it	eq
 8003088:	4619      	moveq	r1, r3
 800308a:	8894      	ldrh	r4, [r2, #4]
 800308c:	f041 0304 	orr.w	r3, r1, #4
 8003090:	4220      	tst	r0, r4
 8003092:	bf08      	it	eq
 8003094:	460b      	moveq	r3, r1
 8003096:	88d2      	ldrh	r2, [r2, #6]
 8003098:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800309c:	4210      	tst	r0, r2
 800309e:	f043 0008 	orr.w	r0, r3, #8
 80030a2:	bf08      	it	eq
 80030a4:	4618      	moveq	r0, r3
    }
  }
#endif
  return(limit_state);
}
 80030a6:	bd10      	pop	{r4, pc}
 80030a8:	40010c00 	.word	0x40010c00
 80030ac:	2000126c 	.word	0x2000126c
 80030b0:	0800c0a0 	.word	0x0800c0a0

080030b4 <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 80030b4:	b508      	push	{r3, lr}
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 80030b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030ba:	f7fe f895 	bl	80011e8 <EXTI_GetITStatus>
 80030be:	bb88      	cbnz	r0, 8003124 <EXTI15_10_IRQHandler+0x70>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 80030c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030c4:	f7fe f890 	bl	80011e8 <EXTI_GetITStatus>
 80030c8:	bb38      	cbnz	r0, 800311a <EXTI15_10_IRQHandler+0x66>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 80030ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030ce:	f7fe f88b 	bl	80011e8 <EXTI_GetITStatus>
 80030d2:	b9e8      	cbnz	r0, 8003110 <EXTI15_10_IRQHandler+0x5c>
	{
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
	}
// --- YSV 22-06-2018
	#if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
	if (EXTI_GetITStatus(1 << A_LIMIT_BIT) != RESET)
 80030d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030d8:	f7fe f886 	bl	80011e8 <EXTI_GetITStatus>
 80030dc:	b998      	cbnz	r0, 8003106 <EXTI15_10_IRQHandler+0x52>

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 80030de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030e2:	4a13      	ldr	r2, [pc, #76]	; (8003130 <EXTI15_10_IRQHandler+0x7c>)
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <EXTI15_10_IRQHandler+0x80>)
 80030e6:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d002      	beq.n	80030f6 <EXTI15_10_IRQHandler+0x42>
    if (!(sys_rt_exec_alarm)) {
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <EXTI15_10_IRQHandler+0x84>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b103      	cbz	r3, 80030f8 <EXTI15_10_IRQHandler+0x44>
 80030f6:	bd08      	pop	{r3, pc}
      if (limits_get_state()) {
        mc_reset(); // Initiate system kill.
        system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
      }
#else
      mc_reset(); // Initiate system kill.
 80030f8:	f000 fdf6 	bl	8003ce8 <mc_reset>
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif
    }
  }
}
 80030fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8003100:	2001      	movs	r0, #1
 8003102:	f006 bb89 	b.w	8009818 <system_set_exec_alarm>
		EXTI_ClearITPendingBit(1 << A_LIMIT_BIT);
 8003106:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800310a:	f7fe f87b 	bl	8001204 <EXTI_ClearITPendingBit>
 800310e:	e7e6      	b.n	80030de <EXTI15_10_IRQHandler+0x2a>
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 8003110:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003114:	f7fe f876 	bl	8001204 <EXTI_ClearITPendingBit>
 8003118:	e7dc      	b.n	80030d4 <EXTI15_10_IRQHandler+0x20>
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 800311a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800311e:	f7fe f871 	bl	8001204 <EXTI_ClearITPendingBit>
 8003122:	e7d2      	b.n	80030ca <EXTI15_10_IRQHandler+0x16>
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 8003124:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003128:	f7fe f86c 	bl	8001204 <EXTI_ClearITPendingBit>
 800312c:	e7c8      	b.n	80030c0 <EXTI15_10_IRQHandler+0xc>
 800312e:	bf00      	nop
 8003130:	e000e100 	.word	0xe000e100
 8003134:	200010b0 	.word	0x200010b0
 8003138:	200010e8 	.word	0x200010e8

0800313c <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 800313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003140:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80033a4 <limits_go_home+0x268>
{
 8003144:	b093      	sub	sp, #76	; 0x4c
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003146:	f898 3001 	ldrb.w	r3, [r8, #1]
 800314a:	b113      	cbz	r3, 8003152 <limits_go_home+0x16>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 800314c:	b013      	add	sp, #76	; 0x4c
 800314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003152:	4604      	mov	r4, r0
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003154:	2506      	movs	r5, #6
 8003156:	498c      	ldr	r1, [pc, #560]	; (8003388 <limits_go_home+0x24c>)
 8003158:	9006      	str	r0, [sp, #24]
    if (bit_istrue(cycle_mask,bit(idx))) {
 800315a:	f004 0401 	and.w	r4, r4, #1
 800315e:	6808      	ldr	r0, [r1, #0]
 8003160:	6849      	ldr	r1, [r1, #4]
  memset(pl_data,0,sizeof(plan_line_data_t));
 8003162:	930d      	str	r3, [sp, #52]	; 0x34
 8003164:	aa09      	add	r2, sp, #36	; 0x24
 8003166:	930b      	str	r3, [sp, #44]	; 0x2c
 8003168:	930c      	str	r3, [sp, #48]	; 0x30
    if (bit_istrue(cycle_mask,bit(idx))) {
 800316a:	f004 03ff 	and.w	r3, r4, #255	; 0xff
 800316e:	c203      	stmia	r2!, {r0, r1}
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003170:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003174:	9307      	str	r3, [sp, #28]
 8003176:	2c00      	cmp	r4, #0
 8003178:	f040 80d3 	bne.w	8003322 <limits_go_home+0x1e6>
  float max_travel = 0.0f;
 800317c:	f04f 0900 	mov.w	r9, #0
 8003180:	4e82      	ldr	r6, [pc, #520]	; (800338c <limits_go_home+0x250>)
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003182:	9b06      	ldr	r3, [sp, #24]
 8003184:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003188:	9305      	str	r3, [sp, #20]
 800318a:	b153      	cbz	r3, 80031a2 <limits_go_home+0x66>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 800318c:	4980      	ldr	r1, [pc, #512]	; (8003390 <limits_go_home+0x254>)
 800318e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8003190:	f7fd fd8e 	bl	8000cb0 <__aeabi_fmul>
 8003194:	4605      	mov	r5, r0
 8003196:	4601      	mov	r1, r0
 8003198:	4648      	mov	r0, r9
 800319a:	f7fd ff3b 	bl	8001014 <__aeabi_fcmpge>
 800319e:	b900      	cbnz	r0, 80031a2 <limits_go_home+0x66>
 80031a0:	46a9      	mov	r9, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 80031a2:	9b06      	ldr	r3, [sp, #24]
 80031a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031a8:	9304      	str	r3, [sp, #16]
 80031aa:	b153      	cbz	r3, 80031c2 <limits_go_home+0x86>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80031ac:	4978      	ldr	r1, [pc, #480]	; (8003390 <limits_go_home+0x254>)
 80031ae:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80031b0:	f7fd fd7e 	bl	8000cb0 <__aeabi_fmul>
 80031b4:	4605      	mov	r5, r0
 80031b6:	4601      	mov	r1, r0
 80031b8:	4648      	mov	r0, r9
 80031ba:	f7fd ff2b 	bl	8001014 <__aeabi_fcmpge>
 80031be:	b900      	cbnz	r0, 80031c2 <limits_go_home+0x86>
 80031c0:	46a9      	mov	r9, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 80031c2:	9b06      	ldr	r3, [sp, #24]
 80031c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80031c8:	9303      	str	r3, [sp, #12]
 80031ca:	b153      	cbz	r3, 80031e2 <limits_go_home+0xa6>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80031cc:	4970      	ldr	r1, [pc, #448]	; (8003390 <limits_go_home+0x254>)
 80031ce:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80031d0:	f7fd fd6e 	bl	8000cb0 <__aeabi_fmul>
 80031d4:	4605      	mov	r5, r0
 80031d6:	4601      	mov	r1, r0
 80031d8:	4648      	mov	r0, r9
 80031da:	f7fd ff1b 	bl	8001014 <__aeabi_fcmpge>
 80031de:	b900      	cbnz	r0, 80031e2 <limits_go_home+0xa6>
 80031e0:	46a9      	mov	r9, r5
 80031e2:	b2e3      	uxtb	r3, r4
 80031e4:	9302      	str	r3, [sp, #8]
  float homing_rate = settings.homing_seek_rate;
 80031e6:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80031e8:	464a      	mov	r2, r9
 80031ea:	4619      	mov	r1, r3
 80031ec:	2304      	movs	r3, #4
  bool approach = true;
 80031ee:	2401      	movs	r4, #1
 80031f0:	4689      	mov	r9, r1
 80031f2:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 800339c <limits_go_home+0x260>
 80031f6:	4d67      	ldr	r5, [pc, #412]	; (8003394 <limits_go_home+0x258>)
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80031f8:	4f67      	ldr	r7, [pc, #412]	; (8003398 <limits_go_home+0x25c>)
  float homing_rate = settings.homing_seek_rate;
 80031fa:	9300      	str	r3, [sp, #0]
    system_convert_array_steps_to_mpos(target,sys_position);
 80031fc:	4967      	ldr	r1, [pc, #412]	; (800339c <limits_go_home+0x260>)
 80031fe:	a80e      	add	r0, sp, #56	; 0x38
 8003200:	9201      	str	r2, [sp, #4]
 8003202:	f006 fa53 	bl	80096ac <system_convert_array_steps_to_mpos>
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	9a01      	ldr	r2, [sp, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 815d 	beq.w	80034ca <limits_go_home+0x38e>
          sys_position[idx] = 0;
 8003210:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003212:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
          sys_position[idx] = 0;
 8003216:	f8ca 1000 	str.w	r1, [sl]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800321a:	07db      	lsls	r3, r3, #31
 800321c:	f140 8164 	bpl.w	80034e8 <limits_go_home+0x3ac>
          if (approach) { target[idx] = -max_travel; }
 8003220:	2c00      	cmp	r4, #0
 8003222:	f040 8164 	bne.w	80034ee <limits_go_home+0x3b2>
          else { target[idx] = max_travel; }
 8003226:	920e      	str	r2, [sp, #56]	; 0x38
        axislock |= step_pin[idx];
 8003228:	2102      	movs	r1, #2
        n_active_axis++;
 800322a:	2001      	movs	r0, #1
        axislock |= step_pin[idx];
 800322c:	f8bd b024 	ldrh.w	fp, [sp, #36]	; 0x24
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003230:	9b05      	ldr	r3, [sp, #20]
 8003232:	b183      	cbz	r3, 8003256 <limits_go_home+0x11a>
          sys_position[idx] = 0;
 8003234:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003236:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
          sys_position[idx] = 0;
 800323a:	f8ca 3004 	str.w	r3, [sl, #4]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800323e:	0780      	lsls	r0, r0, #30
 8003240:	f140 8147 	bpl.w	80034d2 <limits_go_home+0x396>
          if (approach) { target[idx] = -max_travel; }
 8003244:	2c00      	cmp	r4, #0
 8003246:	f040 8147 	bne.w	80034d8 <limits_go_home+0x39c>
          else { target[idx] = max_travel; }
 800324a:	920f      	str	r2, [sp, #60]	; 0x3c
        n_active_axis++;
 800324c:	4608      	mov	r0, r1
        axislock |= step_pin[idx];
 800324e:	f8bd e026 	ldrh.w	lr, [sp, #38]	; 0x26
 8003252:	ea4b 0b0e 	orr.w	fp, fp, lr
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003256:	9b04      	ldr	r3, [sp, #16]
 8003258:	b18b      	cbz	r3, 800327e <limits_go_home+0x142>
          sys_position[idx] = 0;
 800325a:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800325c:	f8b6 105a 	ldrh.w	r1, [r6, #90]	; 0x5a
        n_active_axis++;
 8003260:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 8003262:	f8ca 3008 	str.w	r3, [sl, #8]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003266:	074b      	lsls	r3, r1, #29
        n_active_axis++;
 8003268:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800326a:	f140 8144 	bpl.w	80034f6 <limits_go_home+0x3ba>
          if (approach) { target[idx] = -max_travel; }
 800326e:	2c00      	cmp	r4, #0
 8003270:	f040 8144 	bne.w	80034fc <limits_go_home+0x3c0>
          else { target[idx] = max_travel; }
 8003274:	9210      	str	r2, [sp, #64]	; 0x40
        axislock |= step_pin[idx];
 8003276:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800327a:	ea4b 0b01 	orr.w	fp, fp, r1
      if (bit_istrue(cycle_mask,bit(idx))) {
 800327e:	9b03      	ldr	r3, [sp, #12]
 8003280:	b18b      	cbz	r3, 80032a6 <limits_go_home+0x16a>
          sys_position[idx] = 0;
 8003282:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003284:	f8b6 105a 	ldrh.w	r1, [r6, #90]	; 0x5a
        n_active_axis++;
 8003288:	3001      	adds	r0, #1
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800328a:	0709      	lsls	r1, r1, #28
        n_active_axis++;
 800328c:	b2c0      	uxtb	r0, r0
          sys_position[idx] = 0;
 800328e:	f8ca 300c 	str.w	r3, [sl, #12]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003292:	f100 8125 	bmi.w	80034e0 <limits_go_home+0x3a4>
          if (approach) { target[idx] = max_travel; }
 8003296:	b90c      	cbnz	r4, 800329c <limits_go_home+0x160>
          if (approach) { target[idx] = -max_travel; }
 8003298:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800329c:	9211      	str	r2, [sp, #68]	; 0x44
        axislock |= step_pin[idx];
 800329e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80032a2:	ea4b 0b02 	orr.w	fp, fp, r2
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 80032a6:	f7fd fcab 	bl	8000c00 <__aeabi_ui2f>
 80032aa:	f007 fe53 	bl	800af54 <sqrtf>
    sys.homing_axis_lock = axislock;
 80032ae:	f8a8 b006 	strh.w	fp, [r8, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 80032b2:	4601      	mov	r1, r0
 80032b4:	4648      	mov	r0, r9
 80032b6:	f7fd fcfb 	bl	8000cb0 <__aeabi_fmul>
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 80032ba:	a90b      	add	r1, sp, #44	; 0x2c
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 80032bc:	900b      	str	r0, [sp, #44]	; 0x2c
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 80032be:	a80e      	add	r0, sp, #56	; 0x38
 80032c0:	f001 f90e 	bl	80044e0 <plan_buffer_line>
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 80032c4:	2204      	movs	r2, #4
 80032c6:	f888 2004 	strb.w	r2, [r8, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 80032ca:	f005 fa21 	bl	8008710 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 80032ce:	f004 fe83 	bl	8007fd8 <st_wake_up>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 80032d2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80033a8 <limits_go_home+0x26c>
      if (approach) {
 80032d6:	2c00      	cmp	r4, #0
 80032d8:	d168      	bne.n	80033ac <limits_go_home+0x270>
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 80032da:	f005 fa19 	bl	8008710 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 80032de:	782b      	ldrb	r3, [r5, #0]
 80032e0:	f013 0f34 	tst.w	r3, #52	; 0x34
 80032e4:	f040 80af 	bne.w	8003446 <limits_go_home+0x30a>
    } while (STEP_MASK & axislock);
 80032e8:	f01b 0f0f 	tst.w	fp, #15
 80032ec:	d1f3      	bne.n	80032d6 <limits_go_home+0x19a>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 80032ee:	f005 f897 	bl	8008420 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 80032f2:	f8b6 0064 	ldrh.w	r0, [r6, #100]	; 0x64
 80032f6:	f000 fde7 	bl	8003ec8 <delay_ms>
 80032fa:	f084 0301 	eor.w	r3, r4, #1
    if (approach) {
 80032fe:	b9fc      	cbnz	r4, 8003340 <limits_go_home+0x204>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8003300:	4927      	ldr	r1, [pc, #156]	; (80033a0 <limits_go_home+0x264>)
 8003302:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	f7fd fcd3 	bl	8000cb0 <__aeabi_fmul>
 800330a:	9b00      	ldr	r3, [sp, #0]
 800330c:	4602      	mov	r2, r0
 800330e:	1e59      	subs	r1, r3, #1
  } while (n_cycle-- > 0);
 8003310:	f011 03ff 	ands.w	r3, r1, #255	; 0xff
 8003314:	9300      	str	r3, [sp, #0]
      homing_rate = settings.homing_feed_rate;
 8003316:	f8d6 905c 	ldr.w	r9, [r6, #92]	; 0x5c
  } while (n_cycle-- > 0);
 800331a:	9b01      	ldr	r3, [sp, #4]
 800331c:	d019      	beq.n	8003352 <limits_go_home+0x216>
  float max_travel = 0.0f;
 800331e:	461c      	mov	r4, r3
 8003320:	e76c      	b.n	80031fc <limits_go_home+0xc0>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003322:	4e1a      	ldr	r6, [pc, #104]	; (800338c <limits_go_home+0x250>)
 8003324:	491a      	ldr	r1, [pc, #104]	; (8003390 <limits_go_home+0x254>)
 8003326:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003328:	f7fd fcc2 	bl	8000cb0 <__aeabi_fmul>
 800332c:	2100      	movs	r1, #0
 800332e:	4681      	mov	r9, r0
 8003330:	f7fd fe70 	bl	8001014 <__aeabi_fcmpge>
 8003334:	2800      	cmp	r0, #0
 8003336:	f47f af24 	bne.w	8003182 <limits_go_home+0x46>
 800333a:	f04f 0900 	mov.w	r9, #0
 800333e:	e720      	b.n	8003182 <limits_go_home+0x46>
 8003340:	9a00      	ldr	r2, [sp, #0]
      homing_rate = settings.homing_seek_rate;
 8003342:	f8d6 9060 	ldr.w	r9, [r6, #96]	; 0x60
 8003346:	1e51      	subs	r1, r2, #1
  } while (n_cycle-- > 0);
 8003348:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
      max_travel = settings.homing_pulloff;
 800334c:	6eb2      	ldr	r2, [r6, #104]	; 0x68
  } while (n_cycle-- > 0);
 800334e:	9100      	str	r1, [sp, #0]
 8003350:	d1e5      	bne.n	800331e <limits_go_home+0x1e2>
    if (cycle_mask & bit(idx)) {
 8003352:	9b07      	ldr	r3, [sp, #28]
 8003354:	b113      	cbz	r3, 800335c <limits_go_home+0x220>
        sys_position[idx] = set_axis_position;
 8003356:	2300      	movs	r3, #0
 8003358:	f8ca 3000 	str.w	r3, [sl]
    if (cycle_mask & bit(idx)) {
 800335c:	9b05      	ldr	r3, [sp, #20]
 800335e:	b113      	cbz	r3, 8003366 <limits_go_home+0x22a>
        sys_position[idx] = set_axis_position;
 8003360:	2300      	movs	r3, #0
 8003362:	f8ca 3004 	str.w	r3, [sl, #4]
    if (cycle_mask & bit(idx)) {
 8003366:	9b04      	ldr	r3, [sp, #16]
 8003368:	b113      	cbz	r3, 8003370 <limits_go_home+0x234>
        sys_position[idx] = set_axis_position;
 800336a:	2300      	movs	r3, #0
 800336c:	f8ca 3008 	str.w	r3, [sl, #8]
    if (cycle_mask & bit(idx)) {
 8003370:	9b03      	ldr	r3, [sp, #12]
 8003372:	b113      	cbz	r3, 800337a <limits_go_home+0x23e>
        sys_position[idx] = set_axis_position;
 8003374:	2300      	movs	r3, #0
 8003376:	f8ca 300c 	str.w	r3, [sl, #12]
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 800337a:	2300      	movs	r3, #0
 800337c:	f888 3004 	strb.w	r3, [r8, #4]
}
 8003380:	b013      	add	sp, #76	; 0x4c
 8003382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	0800c0a8 	.word	0x0800c0a8
 800338c:	2000126c 	.word	0x2000126c
 8003390:	bfc00000 	.word	0xbfc00000
 8003394:	200010c5 	.word	0x200010c5
 8003398:	0800c0a0 	.word	0x0800c0a0
 800339c:	200010d8 	.word	0x200010d8
 80033a0:	40a00000 	.word	0x40a00000
 80033a4:	200010b0 	.word	0x200010b0
 80033a8:	40010c00 	.word	0x40010c00
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 80033ac:	4648      	mov	r0, r9
 80033ae:	f7fe f9dd 	bl	800176c <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 80033b2:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80033b6:	065b      	lsls	r3, r3, #25
 80033b8:	bf5c      	itt	pl
 80033ba:	f480 4070 	eorpl.w	r0, r0, #61440	; 0xf000
 80033be:	b280      	uxthpl	r0, r0
  if (pin) {
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d037      	beq.n	8003434 <limits_go_home+0x2f8>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80033c4:	883b      	ldrh	r3, [r7, #0]
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	4218      	tst	r0, r3
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	4210      	tst	r0, r2
 80033d2:	88ba      	ldrh	r2, [r7, #4]
 80033d4:	bf18      	it	ne
 80033d6:	f043 0302 	orrne.w	r3, r3, #2
 80033da:	4210      	tst	r0, r2
 80033dc:	88fa      	ldrh	r2, [r7, #6]
 80033de:	bf18      	it	ne
 80033e0:	f043 0304 	orrne.w	r3, r3, #4
 80033e4:	4210      	tst	r0, r2
          if (axislock & step_pin[idx]) {
 80033e6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80033ea:	bf18      	it	ne
 80033ec:	f043 0308 	orrne.w	r3, r3, #8
          if (axislock & step_pin[idx]) {
 80033f0:	ea1b 0f02 	tst.w	fp, r2
 80033f4:	d003      	beq.n	80033fe <limits_go_home+0x2c2>
            if (limit_state & (1 << idx)) {
 80033f6:	07d9      	lsls	r1, r3, #31
                axislock &= ~(step_pin[idx]);
 80033f8:	bf48      	it	mi
 80033fa:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 80033fe:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8003402:	ea1b 0f02 	tst.w	fp, r2
 8003406:	d003      	beq.n	8003410 <limits_go_home+0x2d4>
            if (limit_state & (1 << idx)) {
 8003408:	0798      	lsls	r0, r3, #30
                axislock &= ~(step_pin[idx]);
 800340a:	bf48      	it	mi
 800340c:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 8003410:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8003414:	ea1b 0f02 	tst.w	fp, r2
 8003418:	d003      	beq.n	8003422 <limits_go_home+0x2e6>
            if (limit_state & (1 << idx)) {
 800341a:	0759      	lsls	r1, r3, #29
                axislock &= ~(step_pin[idx]);
 800341c:	bf48      	it	mi
 800341e:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 8003422:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8003426:	ea1b 0f02 	tst.w	fp, r2
 800342a:	d003      	beq.n	8003434 <limits_go_home+0x2f8>
            if (limit_state & (1 << idx)) {
 800342c:	08db      	lsrs	r3, r3, #3
                axislock &= ~(step_pin[idx]);
 800342e:	bf18      	it	ne
 8003430:	ea2b 0b02 	bicne.w	fp, fp, r2
        sys.homing_axis_lock = axislock;
 8003434:	f8a8 b006 	strh.w	fp, [r8, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8003438:	f005 f96a 	bl	8008710 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 800343c:	782b      	ldrb	r3, [r5, #0]
 800343e:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003442:	f43f af51 	beq.w	80032e8 <limits_go_home+0x1ac>
        uint8_t rt_exec = sys_rt_exec_state;
 8003446:	f895 9000 	ldrb.w	r9, [r5]
 800344a:	fa5f f989 	uxtb.w	r9, r9
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 800344e:	f019 0f10 	tst.w	r9, #16
 8003452:	d157      	bne.n	8003504 <limits_go_home+0x3c8>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8003454:	f019 0f20 	tst.w	r9, #32
 8003458:	d10b      	bne.n	8003472 <limits_go_home+0x336>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 800345a:	b17c      	cbz	r4, 800347c <limits_go_home+0x340>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 800345c:	f019 0f04 	tst.w	r9, #4
 8003460:	d154      	bne.n	800350c <limits_go_home+0x3d0>
        if (sys_rt_exec_alarm) {
 8003462:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <limits_go_home+0x3e4>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d154      	bne.n	8003514 <limits_go_home+0x3d8>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800346a:	2004      	movs	r0, #4
 800346c:	f006 f9ca 	bl	8009804 <system_clear_exec_state_flag>
          break;
 8003470:	e73d      	b.n	80032ee <limits_go_home+0x1b2>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8003472:	2007      	movs	r0, #7
 8003474:	f006 f9d0 	bl	8009818 <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003478:	2c00      	cmp	r4, #0
 800347a:	d1ef      	bne.n	800345c <limits_go_home+0x320>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 800347c:	4829      	ldr	r0, [pc, #164]	; (8003524 <limits_go_home+0x3e8>)
 800347e:	f7fe f975 	bl	800176c <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003482:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8003486:	065b      	lsls	r3, r3, #25
 8003488:	bf5c      	itt	pl
 800348a:	f480 4070 	eorpl.w	r0, r0, #61440	; 0xf000
 800348e:	b280      	uxthpl	r0, r0
  if (pin) {
 8003490:	2800      	cmp	r0, #0
 8003492:	d0e6      	beq.n	8003462 <limits_go_home+0x326>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003494:	883b      	ldrh	r3, [r7, #0]
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	4218      	tst	r0, r3
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	4210      	tst	r0, r2
 80034a2:	88ba      	ldrh	r2, [r7, #4]
 80034a4:	bf18      	it	ne
 80034a6:	f043 0302 	orrne.w	r3, r3, #2
 80034aa:	4210      	tst	r0, r2
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	bf18      	it	ne
 80034b0:	f043 0304 	orrne.w	r3, r3, #4
 80034b4:	4210      	tst	r0, r2
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80034b6:	9a06      	ldr	r2, [sp, #24]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80034b8:	bf18      	it	ne
 80034ba:	f043 0308 	orrne.w	r3, r3, #8
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80034be:	421a      	tst	r2, r3
 80034c0:	d0cf      	beq.n	8003462 <limits_go_home+0x326>
 80034c2:	2008      	movs	r0, #8
 80034c4:	f006 f9a8 	bl	8009818 <system_set_exec_alarm>
 80034c8:	e7cb      	b.n	8003462 <limits_go_home+0x326>
 80034ca:	469b      	mov	fp, r3
    n_active_axis = 0;
 80034cc:	4618      	mov	r0, r3
      if (bit_istrue(cycle_mask,bit(idx))) {
 80034ce:	2101      	movs	r1, #1
 80034d0:	e6ae      	b.n	8003230 <limits_go_home+0xf4>
          if (approach) { target[idx] = max_travel; }
 80034d2:	2c00      	cmp	r4, #0
 80034d4:	f47f aeb9 	bne.w	800324a <limits_go_home+0x10e>
          if (approach) { target[idx] = -max_travel; }
 80034d8:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
 80034dc:	900f      	str	r0, [sp, #60]	; 0x3c
 80034de:	e6b5      	b.n	800324c <limits_go_home+0x110>
 80034e0:	2c00      	cmp	r4, #0
 80034e2:	f43f aedb 	beq.w	800329c <limits_go_home+0x160>
 80034e6:	e6d7      	b.n	8003298 <limits_go_home+0x15c>
          if (approach) { target[idx] = max_travel; }
 80034e8:	2c00      	cmp	r4, #0
 80034ea:	f47f ae9c 	bne.w	8003226 <limits_go_home+0xea>
          if (approach) { target[idx] = -max_travel; }
 80034ee:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80034f2:	930e      	str	r3, [sp, #56]	; 0x38
 80034f4:	e698      	b.n	8003228 <limits_go_home+0xec>
          if (approach) { target[idx] = max_travel; }
 80034f6:	2c00      	cmp	r4, #0
 80034f8:	f47f aebc 	bne.w	8003274 <limits_go_home+0x138>
          if (approach) { target[idx] = -max_travel; }
 80034fc:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8003500:	9110      	str	r1, [sp, #64]	; 0x40
 8003502:	e6b8      	b.n	8003276 <limits_go_home+0x13a>
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003504:	2006      	movs	r0, #6
 8003506:	f006 f987 	bl	8009818 <system_set_exec_alarm>
 800350a:	e7a3      	b.n	8003454 <limits_go_home+0x318>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 800350c:	2009      	movs	r0, #9
 800350e:	f006 f983 	bl	8009818 <system_set_exec_alarm>
 8003512:	e7a6      	b.n	8003462 <limits_go_home+0x326>
          mc_reset(); // Stop motors, if they are running.
 8003514:	f000 fbe8 	bl	8003ce8 <mc_reset>
          protocol_execute_realtime();
 8003518:	f002 fa58 	bl	80059cc <protocol_execute_realtime>
          return;
 800351c:	e616      	b.n	800314c <limits_go_home+0x10>
 800351e:	bf00      	nop
 8003520:	200010e8 	.word	0x200010e8
 8003524:	40010c00 	.word	0x40010c00

08003528 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 8003528:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 800352a:	f006 f8e3 	bl	80096f4 <system_check_travel_limits>
 800352e:	b1c8      	cbz	r0, 8003564 <limits_soft_check+0x3c>
    sys.soft_limit = true;
 8003530:	2301      	movs	r3, #1
 8003532:	4c0d      	ldr	r4, [pc, #52]	; (8003568 <limits_soft_check+0x40>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8003534:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 8003536:	70e3      	strb	r3, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 8003538:	2808      	cmp	r0, #8
 800353a:	d008      	beq.n	800354e <limits_soft_check+0x26>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 800353c:	f000 fbd4 	bl	8003ce8 <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 8003540:	2002      	movs	r0, #2
 8003542:	f006 f969 	bl	8009818 <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 8003546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 800354a:	f002 ba3f 	b.w	80059cc <protocol_execute_realtime>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 800354e:	f006 f94f 	bl	80097f0 <system_set_exec_state_flag>
 8003552:	e002      	b.n	800355a <limits_soft_check+0x32>
      } while ( sys.state != STATE_IDLE );
 8003554:	7823      	ldrb	r3, [r4, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <limits_soft_check+0x14>
        protocol_execute_realtime();
 800355a:	f002 fa37 	bl	80059cc <protocol_execute_realtime>
        if (sys.abort) { return; }
 800355e:	7863      	ldrb	r3, [r4, #1]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f7      	beq.n	8003554 <limits_soft_check+0x2c>
 8003564:	bd10      	pop	{r4, pc}
 8003566:	bf00      	nop
 8003568:	200010b0 	.word	0x200010b0

0800356c <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 800356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined (STM32F103C8)
    //GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003570:	2101      	movs	r1, #1
{
 8003572:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003574:	2010      	movs	r0, #16
 8003576:	f7fe f95f 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800357a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800357e:	2310      	movs	r3, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8003580:	2202      	movs	r2, #2
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8003582:	a902      	add	r1, sp, #8
 8003584:	f821 0d04 	strh.w	r0, [r1, #-4]!
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003588:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800358c:	f500 4070 	add.w	r0, r0, #61440	; 0xf000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003590:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8003594:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003598:	f7fd ff32 	bl	8001400 <GPIO_Init>
#endif
	//Set_System();
#ifndef USEUSB
	USART1_Configuration(115200);
#else
	Set_USBClock();
 800359c:	f007 f8d6 	bl	800a74c <Set_USBClock>
	USB_Interrupts_Config();
 80035a0:	f007 f8e0 	bl	800a764 <USB_Interrupts_Config>
	USB_Init();
 80035a4:	f006 fe86 	bl	800a2b4 <USB_Init>
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 80035a8:	f7fd fe32 	bl	8001210 <FLASH_Unlock>
	eeprom_init();
 80035ac:	f7fe fad6 	bl	8001b5c <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 80035b0:	492b      	ldr	r1, [pc, #172]	; (8003660 <main+0xf4>)

    // Reset system variables.
    uint8_t prior_state = sys.state;
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
    sys.state = prior_state;
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 80035b2:	f04f 0864 	mov.w	r8, #100	; 0x64
	SysTick->CTRL &= 0xfffffffb;
 80035b6:	680a      	ldr	r2, [r1, #0]
    sys.state = STATE_IDLE;
 80035b8:	4d2a      	ldr	r5, [pc, #168]	; (8003664 <main+0xf8>)
	SysTick->CTRL &= 0xfffffffb;
 80035ba:	f022 0204 	bic.w	r2, r2, #4
 80035be:	600a      	str	r2, [r1, #0]
  serial_init();   // Setup serial baud rate and interrupts
 80035c0:	f003 fe9e 	bl	8007300 <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 80035c4:	f004 fa24 	bl	8007a10 <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 80035c8:	f004 ffce 	bl	8008568 <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 80035cc:	f005 fe04 	bl	80091d8 <system_init>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 80035d0:	2100      	movs	r1, #0
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80035d2:	460c      	mov	r4, r1
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 80035d4:	4a24      	ldr	r2, [pc, #144]	; (8003668 <main+0xfc>)
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 80035d6:	4825      	ldr	r0, [pc, #148]	; (800366c <main+0x100>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 80035d8:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 80035dc:	4e24      	ldr	r6, [pc, #144]	; (8003670 <main+0x104>)
 80035de:	f8df b09c 	ldr.w	fp, [pc, #156]	; 800367c <main+0x110>
 80035e2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8003680 <main+0x114>
 80035e6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8003684 <main+0x118>
 80035ea:	4f22      	ldr	r7, [pc, #136]	; (8003674 <main+0x108>)
 80035ec:	f3c2 1200 	ubfx	r2, r2, #4, #1
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 80035f0:	6001      	str	r1, [r0, #0]
 80035f2:	6041      	str	r1, [r0, #4]
 80035f4:	6081      	str	r1, [r0, #8]
 80035f6:	60c1      	str	r1, [r0, #12]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
    sys_probe_state = 0;
    sys_rt_exec_state = 0;
    sys_rt_exec_alarm = 0;
    sys_rt_exec_motion_override = 0;
 80035f8:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <main+0x10c>)
    sys_probe_state = 0;
 80035fa:	f88b 4000 	strb.w	r4, [fp]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80035fe:	60ac      	str	r4, [r5, #8]
    sys_rt_exec_state = 0;
 8003600:	f88a 4000 	strb.w	r4, [sl]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003604:	602c      	str	r4, [r5, #0]
    sys_rt_exec_alarm = 0;
 8003606:	f889 4000 	strb.w	r4, [r9]
    sys.state = prior_state;
 800360a:	702a      	strb	r2, [r5, #0]
    sys_rt_exec_motion_override = 0;
 800360c:	701c      	strb	r4, [r3, #0]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800360e:	606c      	str	r4, [r5, #4]
 8003610:	60ec      	str	r4, [r5, #12]
 8003612:	612c      	str	r4, [r5, #16]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8003614:	f885 8008 	strb.w	r8, [r5, #8]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 8003618:	f885 8009 	strb.w	r8, [r5, #9]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 800361c:	f885 800a 	strb.w	r8, [r5, #10]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8003620:	6034      	str	r4, [r6, #0]
 8003622:	6074      	str	r4, [r6, #4]
 8003624:	60b4      	str	r4, [r6, #8]
 8003626:	60f4      	str	r4, [r6, #12]
    sys_rt_exec_accessory_override = 0;
 8003628:	703c      	strb	r4, [r7, #0]

    // Reset Grbl primary systems.
    serial_reset_read_buffer(); // Clear serial read buffer
 800362a:	f003 ff7f 	bl	800752c <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 800362e:	f7fe fb33 	bl	8001c98 <gc_init>
    spindle_init();
 8003632:	f004 fa89 	bl	8007b48 <spindle_init>
    coolant_init();
 8003636:	f7fe f9f1 	bl	8001a1c <coolant_init>
    limits_init();
 800363a:	f7ff fcaf 	bl	8002f9c <limits_init>
    probe_init();
 800363e:	f001 fc2b 	bl	8004e98 <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 8003642:	f000 fe1d 	bl	8004280 <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 8003646:	f004 feeb 	bl	8008420 <st_reset>

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 800364a:	f001 f9ab 	bl	80049a4 <plan_sync_position>
    gc_sync_position();
 800364e:	f7fe fb39 	bl	8001cc4 <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 8003652:	f002 ff2f 	bl	80064b4 <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 8003656:	f002 fde7 	bl	8006228 <protocol_main_loop>
 800365a:	782a      	ldrb	r2, [r5, #0]
 800365c:	e7cc      	b.n	80035f8 <main+0x8c>
 800365e:	bf00      	nop
 8003660:	e000e010 	.word	0xe000e010
 8003664:	200010b0 	.word	0x200010b0
 8003668:	2000126c 	.word	0x2000126c
 800366c:	200010d8 	.word	0x200010d8
 8003670:	200010c8 	.word	0x200010c8
 8003674:	200010c4 	.word	0x200010c4
 8003678:	200010ac 	.word	0x200010ac
 800367c:	200010c6 	.word	0x200010c6
 8003680:	200010c5 	.word	0x200010c5
 8003684:	200010e8 	.word	0x200010e8

08003688 <_delay_ms>:
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x)
{
	u32 temp;
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 8003688:	f242 3128 	movw	r1, #9000	; 0x2328
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <_delay_ms+0x2c>)
{
 800368e:	b430      	push	{r4, r5}
	SysTick->VAL = 0x00;                                            // Empty the counter
 8003690:	2500      	movs	r5, #0
	SysTick->CTRL = 0x01;                                           // Start from bottom
 8003692:	2401      	movs	r4, #1
	do
	{
		temp = SysTick->CTRL;
 8003694:	461a      	mov	r2, r3
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 8003696:	fb01 f000 	mul.w	r0, r1, r0
 800369a:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0x00;                                            // Empty the counter
 800369c:	609d      	str	r5, [r3, #8]
	SysTick->CTRL = 0x01;                                           // Start from bottom
 800369e:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL;
 80036a0:	6813      	ldr	r3, [r2, #0]
	} while ((temp & 0x01) && !(temp&(1 << 16)));                             // Wait time arrive
 80036a2:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d0fa      	beq.n	80036a0 <_delay_ms+0x18>
	SysTick->CTRL = 0x00;                                            // Close the counter
 80036aa:	2300      	movs	r3, #0
	SysTick->VAL = 0X00;                                            // Empty the counter
}
 80036ac:	bc30      	pop	{r4, r5}
	SysTick->CTRL = 0x00;                                            // Close the counter
 80036ae:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0X00;                                            // Empty the counter
 80036b0:	6093      	str	r3, [r2, #8]
}
 80036b2:	4770      	bx	lr
 80036b4:	e000e010 	.word	0xe000e010

080036b8 <LedBlink>:
void LedBlink(void)
{
 80036b8:	b510      	push	{r4, lr}
	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 80036ba:	4c07      	ldr	r4, [pc, #28]	; (80036d8 <LedBlink+0x20>)
 80036bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036c0:	7822      	ldrb	r2, [r4, #0]
 80036c2:	4806      	ldr	r0, [pc, #24]	; (80036dc <LedBlink+0x24>)
 80036c4:	f7fe f85e 	bl	8001784 <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 80036c8:	7823      	ldrb	r3, [r4, #0]
 80036ca:	f113 33ff 	adds.w	r3, r3, #4294967295
 80036ce:	bf18      	it	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	7023      	strb	r3, [r4, #0]
 80036d4:	bd10      	pop	{r4, pc}
 80036d6:	bf00      	nop
 80036d8:	20000000 	.word	0x20000000
 80036dc:	40011000 	.word	0x40011000

080036e0 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80036e2:	4d17      	ldr	r5, [pc, #92]	; (8003740 <mc_line+0x60>)
{
 80036e4:	460e      	mov	r6, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80036e6:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
{
 80036ea:	4607      	mov	r7, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80036ec:	0699      	lsls	r1, r3, #26
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80036ee:	4c15      	ldr	r4, [pc, #84]	; (8003744 <mc_line+0x64>)
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80036f0:	d504      	bpl.n	80036fc <mc_line+0x1c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80036f2:	7823      	ldrb	r3, [r4, #0]
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d00a      	beq.n	800370e <mc_line+0x2e>
 80036f8:	f7ff ff16 	bl	8003528 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 80036fc:	7823      	ldrb	r3, [r4, #0]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d105      	bne.n	800370e <mc_line+0x2e>
 8003702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
    if (sys.abort) { return; } // Bail, if system abort.
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003704:	f000 fe2c 	bl	8004360 <plan_check_full_buffer>
 8003708:	b138      	cbz	r0, 800371a <mc_line+0x3a>
 800370a:	f001 fc33 	bl	8004f74 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 800370e:	f002 f95d 	bl	80059cc <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003712:	7863      	ldrb	r3, [r4, #1]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f5      	beq.n	8003704 <mc_line+0x24>
 8003718:	e7f3      	b.n	8003702 <mc_line+0x22>
    else { break; }
  } while (1);

  // Plan and queue motion into planner buffer
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 800371a:	4638      	mov	r0, r7
 800371c:	4631      	mov	r1, r6
 800371e:	f000 fedf 	bl	80044e0 <plan_buffer_line>
 8003722:	2800      	cmp	r0, #0
 8003724:	d1ed      	bne.n	8003702 <mc_line+0x22>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003726:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 800372a:	079a      	lsls	r2, r3, #30
 800372c:	d5e9      	bpl.n	8003702 <mc_line+0x22>
			// Correctly set spindle state, if there is a coincident position passed. Forces a buffer
			// sync while in M3 laser mode only.
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 800372e:	7a33      	ldrb	r3, [r6, #8]
 8003730:	06db      	lsls	r3, r3, #27
 8003732:	d5e6      	bpl.n	8003702 <mc_line+0x22>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003734:	6871      	ldr	r1, [r6, #4]
 8003736:	2010      	movs	r0, #16
			}
		}
	}
}
 8003738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 800373c:	f004 bb96 	b.w	8007e6c <spindle_sync>
 8003740:	2000126c 	.word	0x2000126c
 8003744:	200010b0 	.word	0x200010b0

08003748 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8003748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800374c:	461f      	mov	r7, r3
 800374e:	b091      	sub	sp, #68	; 0x44
 8003750:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8003754:	4683      	mov	fp, r0
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003756:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800375a:	00a3      	lsls	r3, r4, #2
 800375c:	18d6      	adds	r6, r2, r3
{
 800375e:	900f      	str	r0, [sp, #60]	; 0x3c
 8003760:	910b      	str	r1, [sp, #44]	; 0x2c
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003762:	4628      	mov	r0, r5
 8003764:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8003768:	9602      	str	r6, [sp, #8]
 800376a:	18fe      	adds	r6, r7, r3
 800376c:	9207      	str	r2, [sp, #28]
 800376e:	960c      	str	r6, [sp, #48]	; 0x30
 8003770:	f7fd f996 	bl	8000aa0 <__addsf3>
{
 8003774:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003778:	9a07      	ldr	r2, [sp, #28]
 800377a:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
 800377e:	00b3      	lsls	r3, r6, #2
 8003780:	441f      	add	r7, r3
 8003782:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003786:	4682      	mov	sl, r0
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003788:	441a      	add	r2, r3
  float center_axis0 = position[axis_0] + offset[axis_0];
 800378a:	9003      	str	r0, [sp, #12]
  float center_axis1 = position[axis_1] + offset[axis_1];
 800378c:	4640      	mov	r0, r8
 800378e:	9204      	str	r2, [sp, #16]
 8003790:	970d      	str	r7, [sp, #52]	; 0x34
 8003792:	f7fd f985 	bl	8000aa0 <__addsf3>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
 8003796:	4651      	mov	r1, sl
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003798:	4681      	mov	r9, r0
 800379a:	9005      	str	r0, [sp, #20]
  float rt_axis0 = target[axis_0] - center_axis0;
 800379c:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 80037a0:	f7fd f97c 	bl	8000a9c <__aeabi_fsub>
  float rt_axis1 = target[axis_1] - center_axis1;
 80037a4:	4649      	mov	r1, r9
  float rt_axis0 = target[axis_0] - center_axis0;
 80037a6:	4604      	mov	r4, r0
  float rt_axis1 = target[axis_1] - center_axis1;
 80037a8:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 80037ac:	f7fd f976 	bl	8000a9c <__aeabi_fsub>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 80037b0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  float rt_axis1 = target[axis_1] - center_axis1;
 80037b4:	4606      	mov	r6, r0

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 80037b6:	4621      	mov	r1, r4
 80037b8:	4628      	mov	r0, r5
 80037ba:	f7fd fa79 	bl	8000cb0 <__aeabi_fmul>
  float r_axis1 = -offset[axis_1];
 80037be:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 80037c2:	4607      	mov	r7, r0
 80037c4:	4631      	mov	r1, r6
 80037c6:	4640      	mov	r0, r8
 80037c8:	f7fd fa72 	bl	8000cb0 <__aeabi_fmul>
 80037cc:	4601      	mov	r1, r0
 80037ce:	4638      	mov	r0, r7
 80037d0:	f7fd f966 	bl	8000aa0 <__addsf3>
 80037d4:	4631      	mov	r1, r6
 80037d6:	4681      	mov	r9, r0
 80037d8:	4628      	mov	r0, r5
 80037da:	f7fd fa69 	bl	8000cb0 <__aeabi_fmul>
 80037de:	4621      	mov	r1, r4
 80037e0:	4606      	mov	r6, r0
 80037e2:	4640      	mov	r0, r8
 80037e4:	f7fd fa64 	bl	8000cb0 <__aeabi_fmul>
 80037e8:	4601      	mov	r1, r0
 80037ea:	4630      	mov	r0, r6
 80037ec:	f7fd f956 	bl	8000a9c <__aeabi_fsub>
 80037f0:	4649      	mov	r1, r9
 80037f2:	f007 fbad 	bl	800af50 <atan2f>
{
 80037f6:	f89d 7078 	ldrb.w	r7, [sp, #120]	; 0x78
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 80037fa:	4606      	mov	r6, r0
{
 80037fc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80037fe:	f89d 9074 	ldrb.w	r9, [sp, #116]	; 0x74
  if (is_clockwise_arc) { // Correct atan2 output per direction
 8003802:	2f00      	cmp	r7, #0
 8003804:	f000 80d0 	beq.w	80039a8 <mc_arc+0x260>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003808:	f7fc fe06 	bl	8000418 <__aeabi_f2d>
 800380c:	a3a8      	add	r3, pc, #672	; (adr r3, 8003ab0 <mc_arc+0x368>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	4682      	mov	sl, r0
 8003814:	468b      	mov	fp, r1
 8003816:	f7fd f8d9 	bl	80009cc <__aeabi_dcmpge>
 800381a:	2800      	cmp	r0, #0
 800381c:	f040 80e9 	bne.w	80039f2 <mc_arc+0x2aa>
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003820:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8003ad4 <mc_arc+0x38c>
 8003824:	4621      	mov	r1, r4
 8003826:	f8db 704c 	ldr.w	r7, [fp, #76]	; 0x4c
 800382a:	4620      	mov	r0, r4
 800382c:	f7fd f938 	bl	8000aa0 <__addsf3>
 8003830:	4639      	mov	r1, r7
 8003832:	f7fd f933 	bl	8000a9c <__aeabi_fsub>
 8003836:	4639      	mov	r1, r7
 8003838:	f7fd fa3a 	bl	8000cb0 <__aeabi_fmul>
 800383c:	f007 fb8a 	bl	800af54 <sqrtf>
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003840:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003844:	4607      	mov	r7, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003846:	4620      	mov	r0, r4
 8003848:	f7fd fa32 	bl	8000cb0 <__aeabi_fmul>
 800384c:	4631      	mov	r1, r6
 800384e:	f7fd fa2f 	bl	8000cb0 <__aeabi_fmul>
 8003852:	4639      	mov	r1, r7
 8003854:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003858:	f7fd fade 	bl	8000e18 <__aeabi_fdiv>
 800385c:	f007 fad6 	bl	800ae0c <floorf>
 8003860:	f7fd fc28 	bl	80010b4 <__aeabi_f2uiz>
 8003864:	b283      	uxth	r3, r0
 8003866:	9301      	str	r3, [sp, #4]

  if (segments) {
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 816b 	beq.w	8003b44 <mc_arc+0x3fc>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 800386e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      pl_data->feed_rate *= segments; 
 8003870:	9801      	ldr	r0, [sp, #4]
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003872:	7a1c      	ldrb	r4, [r3, #8]
 8003874:	0722      	lsls	r2, r4, #28
 8003876:	f100 80ae 	bmi.w	80039d6 <mc_arc+0x28e>
 800387a:	f7fd f9c5 	bl	8000c08 <__aeabi_i2f>
 800387e:	4607      	mov	r7, r0
 8003880:	4639      	mov	r1, r7
 8003882:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003886:	f7fd fac7 	bl	8000e18 <__aeabi_fdiv>
 800388a:	4604      	mov	r4, r0
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
    }
    
    float theta_per_segment = angular_travel/segments;
 800388c:	4601      	mov	r1, r0
 800388e:	4630      	mov	r0, r6
 8003890:	f7fd fa0e 	bl	8000cb0 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003894:	9b07      	ldr	r3, [sp, #28]
 8003896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003898:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    float theta_per_segment = angular_travel/segments;
 800389c:	4607      	mov	r7, r0
 800389e:	900e      	str	r0, [sp, #56]	; 0x38
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80038a0:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80038a4:	f7fd f8fa 	bl	8000a9c <__aeabi_fsub>
 80038a8:	4621      	mov	r1, r4
 80038aa:	f7fd fa01 	bl	8000cb0 <__aeabi_fmul>
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80038ae:	4639      	mov	r1, r7
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80038b0:	9006      	str	r0, [sp, #24]
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80038b2:	4638      	mov	r0, r7
 80038b4:	f7fd f9fc 	bl	8000cb0 <__aeabi_fmul>
 80038b8:	4601      	mov	r1, r0
 80038ba:	4604      	mov	r4, r0
 80038bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038c0:	f7fd f8ec 	bl	8000a9c <__aeabi_fsub>
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80038c4:	4980      	ldr	r1, [pc, #512]	; (8003ac8 <mc_arc+0x380>)
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80038c6:	4606      	mov	r6, r0
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80038c8:	4638      	mov	r0, r7
 80038ca:	f7fd f9f1 	bl	8000cb0 <__aeabi_fmul>
 80038ce:	4621      	mov	r1, r4
 80038d0:	4607      	mov	r7, r0
 80038d2:	487e      	ldr	r0, [pc, #504]	; (8003acc <mc_arc+0x384>)
 80038d4:	f7fd f8e2 	bl	8000a9c <__aeabi_fsub>
 80038d8:	4601      	mov	r1, r0
 80038da:	4638      	mov	r0, r7
 80038dc:	f7fd f9e8 	bl	8000cb0 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80038e0:	9b07      	ldr	r3, [sp, #28]
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80038e2:	9008      	str	r0, [sp, #32]
    cos_T *= 0.5;
 80038e4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80038e8:	4630      	mov	r0, r6
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80038ea:	eb03 0789 	add.w	r7, r3, r9, lsl #2
    cos_T *= 0.5;
 80038ee:	f7fd f9df 	bl	8000cb0 <__aeabi_fmul>
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80038f2:	9b01      	ldr	r3, [sp, #4]
    cos_T *= 0.5;
 80038f4:	9009      	str	r0, [sp, #36]	; 0x24
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	f000 8124 	beq.w	8003b44 <mc_arc+0x3fc>
 80038fc:	2601      	movs	r6, #1
 80038fe:	f04f 0900 	mov.w	r9, #0
 8003902:	4c73      	ldr	r4, [pc, #460]	; (8003ad0 <mc_arc+0x388>)

      if (count < N_ARC_CORRECTION) {
 8003904:	f1b9 0f0b 	cmp.w	r9, #11
 8003908:	f200 80e6 	bhi.w	8003ad8 <mc_arc+0x390>
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 800390c:	4629      	mov	r1, r5
 800390e:	9808      	ldr	r0, [sp, #32]
 8003910:	f7fd f9ce 	bl	8000cb0 <__aeabi_fmul>
 8003914:	4641      	mov	r1, r8
 8003916:	4682      	mov	sl, r0
 8003918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800391a:	f7fd f9c9 	bl	8000cb0 <__aeabi_fmul>
 800391e:	4601      	mov	r1, r0
 8003920:	4650      	mov	r0, sl
 8003922:	f7fd f8bd 	bl	8000aa0 <__addsf3>
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003926:	4629      	mov	r1, r5
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003928:	4682      	mov	sl, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 800392a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800392c:	f7fd f9c0 	bl	8000cb0 <__aeabi_fmul>
 8003930:	4641      	mov	r1, r8
 8003932:	4605      	mov	r5, r0
 8003934:	9808      	ldr	r0, [sp, #32]
 8003936:	f7fd f9bb 	bl	8000cb0 <__aeabi_fmul>
 800393a:	4601      	mov	r1, r0
 800393c:	4628      	mov	r0, r5
 800393e:	f7fd f8ad 	bl	8000a9c <__aeabi_fsub>
        r_axis1 = r_axisi;
 8003942:	46d0      	mov	r8, sl
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003944:	4605      	mov	r5, r0
        count++;
 8003946:	f109 0901 	add.w	r9, r9, #1
 800394a:	fa5f f989 	uxtb.w	r9, r9
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
        count = 0;
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 800394e:	9903      	ldr	r1, [sp, #12]
 8003950:	4628      	mov	r0, r5
 8003952:	f7fd f8a5 	bl	8000aa0 <__addsf3>
 8003956:	9b02      	ldr	r3, [sp, #8]
      position[axis_1] = center_axis1 + r_axis1;
 8003958:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 800395a:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 800395c:	4640      	mov	r0, r8
 800395e:	f7fd f89f 	bl	8000aa0 <__addsf3>
 8003962:	9b04      	ldr	r3, [sp, #16]
      position[axis_linear] += linear_per_segment;
 8003964:	9906      	ldr	r1, [sp, #24]
      position[axis_1] = center_axis1 + r_axis1;
 8003966:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 8003968:	6838      	ldr	r0, [r7, #0]
 800396a:	f7fd f899 	bl	8000aa0 <__addsf3>
 800396e:	6038      	str	r0, [r7, #0]
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003970:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003974:	069b      	lsls	r3, r3, #26
 8003976:	d505      	bpl.n	8003984 <mc_arc+0x23c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003978:	7823      	ldrb	r3, [r4, #0]
 800397a:	2b20      	cmp	r3, #32
 800397c:	d00c      	beq.n	8003998 <mc_arc+0x250>
 800397e:	9807      	ldr	r0, [sp, #28]
 8003980:	f7ff fdd2 	bl	8003528 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003984:	7823      	ldrb	r3, [r4, #0]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d106      	bne.n	8003998 <mc_arc+0x250>
 800398a:	e051      	b.n	8003a30 <mc_arc+0x2e8>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 800398c:	f000 fce8 	bl	8004360 <plan_check_full_buffer>
 8003990:	2800      	cmp	r0, #0
 8003992:	d039      	beq.n	8003a08 <mc_arc+0x2c0>
 8003994:	f001 faee 	bl	8004f74 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003998:	f002 f818 	bl	80059cc <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 800399c:	7863      	ldrb	r3, [r4, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f4      	beq.n	800398c <mc_arc+0x244>
      if (sys.abort) { return; }
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
}
 80039a2:	b011      	add	sp, #68	; 0x44
 80039a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 80039a8:	f7fc fd36 	bl	8000418 <__aeabi_f2d>
 80039ac:	a342      	add	r3, pc, #264	; (adr r3, 8003ab8 <mc_arc+0x370>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	4682      	mov	sl, r0
 80039b4:	468b      	mov	fp, r1
 80039b6:	f7fc ffff 	bl	80009b8 <__aeabi_dcmple>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	f43f af30 	beq.w	8003820 <mc_arc+0xd8>
 80039c0:	a33f      	add	r3, pc, #252	; (adr r3, 8003ac0 <mc_arc+0x378>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	4650      	mov	r0, sl
 80039c8:	4659      	mov	r1, fp
 80039ca:	f7fc fbc7 	bl	800015c <__adddf3>
 80039ce:	f7fd f811 	bl	80009f4 <__aeabi_d2f>
 80039d2:	4606      	mov	r6, r0
 80039d4:	e724      	b.n	8003820 <mc_arc+0xd8>
      pl_data->feed_rate *= segments; 
 80039d6:	f7fd f917 	bl	8000c08 <__aeabi_i2f>
 80039da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039dc:	4601      	mov	r1, r0
 80039de:	4607      	mov	r7, r0
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	f7fd f965 	bl	8000cb0 <__aeabi_fmul>
 80039e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 80039e8:	f024 0408 	bic.w	r4, r4, #8
      pl_data->feed_rate *= segments; 
 80039ec:	6018      	str	r0, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 80039ee:	721c      	strb	r4, [r3, #8]
 80039f0:	e746      	b.n	8003880 <mc_arc+0x138>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 80039f2:	a333      	add	r3, pc, #204	; (adr r3, 8003ac0 <mc_arc+0x378>)
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	4650      	mov	r0, sl
 80039fa:	4659      	mov	r1, fp
 80039fc:	f7fc fbac 	bl	8000158 <__aeabi_dsub>
 8003a00:	f7fc fff8 	bl	80009f4 <__aeabi_d2f>
 8003a04:	4606      	mov	r6, r0
 8003a06:	e70b      	b.n	8003820 <mc_arc+0xd8>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003a08:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003a0c:	9807      	ldr	r0, [sp, #28]
 8003a0e:	4651      	mov	r1, sl
 8003a10:	f000 fd66 	bl	80044e0 <plan_buffer_line>
 8003a14:	b960      	cbnz	r0, 8003a30 <mc_arc+0x2e8>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003a16:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003a1a:	0798      	lsls	r0, r3, #30
 8003a1c:	d508      	bpl.n	8003a30 <mc_arc+0x2e8>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003a1e:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8003a22:	06d9      	lsls	r1, r3, #27
 8003a24:	d504      	bpl.n	8003a30 <mc_arc+0x2e8>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a28:	2010      	movs	r0, #16
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	f004 fa1e 	bl	8007e6c <spindle_sync>
      if (sys.abort) { return; }
 8003a30:	7863      	ldrb	r3, [r4, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1b5      	bne.n	80039a2 <mc_arc+0x25a>
 8003a36:	3601      	adds	r6, #1
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003a38:	9a01      	ldr	r2, [sp, #4]
 8003a3a:	b2b3      	uxth	r3, r6
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	f63f af61 	bhi.w	8003904 <mc_arc+0x1bc>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a42:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003a46:	0699      	lsls	r1, r3, #26
 8003a48:	d505      	bpl.n	8003a56 <mc_arc+0x30e>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003a4a:	7823      	ldrb	r3, [r4, #0]
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d00f      	beq.n	8003a70 <mc_arc+0x328>
 8003a50:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a52:	f7ff fd69 	bl	8003528 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003a56:	7823      	ldrb	r3, [r4, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d0a2      	beq.n	80039a2 <mc_arc+0x25a>
    protocol_execute_realtime(); // Check for any run-time commands
 8003a5c:	f001 ffb6 	bl	80059cc <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003a60:	7863      	ldrb	r3, [r4, #1]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d19d      	bne.n	80039a2 <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003a66:	f000 fc7b 	bl	8004360 <plan_check_full_buffer>
 8003a6a:	b150      	cbz	r0, 8003a82 <mc_arc+0x33a>
 8003a6c:	f001 fa82 	bl	8004f74 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003a70:	f001 ffac 	bl	80059cc <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003a74:	7863      	ldrb	r3, [r4, #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d193      	bne.n	80039a2 <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003a7a:	f000 fc71 	bl	8004360 <plan_check_full_buffer>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d1f4      	bne.n	8003a6c <mc_arc+0x324>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003a82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003a84:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a86:	4621      	mov	r1, r4
 8003a88:	f000 fd2a 	bl	80044e0 <plan_buffer_line>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d188      	bne.n	80039a2 <mc_arc+0x25a>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003a90:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003a94:	079a      	lsls	r2, r3, #30
 8003a96:	d584      	bpl.n	80039a2 <mc_arc+0x25a>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003a98:	7a23      	ldrb	r3, [r4, #8]
 8003a9a:	06db      	lsls	r3, r3, #27
 8003a9c:	d581      	bpl.n	80039a2 <mc_arc+0x25a>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003a9e:	2010      	movs	r0, #16
 8003aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003aa2:	6859      	ldr	r1, [r3, #4]
}
 8003aa4:	b011      	add	sp, #68	; 0x44
 8003aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003aaa:	f004 b9df 	b.w	8007e6c <spindle_sync>
 8003aae:	bf00      	nop
 8003ab0:	a0b5ed8d 	.word	0xa0b5ed8d
 8003ab4:	bea0c6f7 	.word	0xbea0c6f7
 8003ab8:	a0b5ed8d 	.word	0xa0b5ed8d
 8003abc:	3ea0c6f7 	.word	0x3ea0c6f7
 8003ac0:	54442d18 	.word	0x54442d18
 8003ac4:	401921fb 	.word	0x401921fb
 8003ac8:	3e2aaaab 	.word	0x3e2aaaab
 8003acc:	40c00000 	.word	0x40c00000
 8003ad0:	200010b0 	.word	0x200010b0
 8003ad4:	2000126c 	.word	0x2000126c
        cos_Ti = cosf(i*theta_per_segment);
 8003ad8:	4630      	mov	r0, r6
 8003ada:	f7fd f895 	bl	8000c08 <__aeabi_i2f>
 8003ade:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003ae0:	f7fd f8e6 	bl	8000cb0 <__aeabi_fmul>
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	f007 f95d 	bl	800ada4 <cosf>
 8003aea:	4680      	mov	r8, r0
        sin_Ti = sinf(i*theta_per_segment);
 8003aec:	4628      	mov	r0, r5
 8003aee:	f007 f9f9 	bl	800aee4 <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        sin_Ti = sinf(i*theta_per_segment);
 8003af4:	4682      	mov	sl, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4640      	mov	r0, r8
 8003afa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003afe:	4619      	mov	r1, r3
 8003b00:	930a      	str	r3, [sp, #40]	; 0x28
 8003b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b04:	f8d3 9000 	ldr.w	r9, [r3]
 8003b08:	f7fd f8d2 	bl	8000cb0 <__aeabi_fmul>
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	4605      	mov	r5, r0
 8003b10:	4650      	mov	r0, sl
 8003b12:	f7fd f8cd 	bl	8000cb0 <__aeabi_fmul>
 8003b16:	4601      	mov	r1, r0
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f7fc ffc1 	bl	8000aa0 <__addsf3>
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003b20:	4605      	mov	r5, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003b22:	4619      	mov	r1, r3
 8003b24:	4650      	mov	r0, sl
 8003b26:	f7fd f8c3 	bl	8000cb0 <__aeabi_fmul>
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	4682      	mov	sl, r0
 8003b2e:	4640      	mov	r0, r8
 8003b30:	f7fd f8be 	bl	8000cb0 <__aeabi_fmul>
 8003b34:	4601      	mov	r1, r0
 8003b36:	4650      	mov	r0, sl
 8003b38:	f7fc ffb0 	bl	8000a9c <__aeabi_fsub>
        count = 0;
 8003b3c:	f04f 0900 	mov.w	r9, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003b40:	4680      	mov	r8, r0
 8003b42:	e704      	b.n	800394e <mc_arc+0x206>
 8003b44:	4c00      	ldr	r4, [pc, #0]	; (8003b48 <mc_arc+0x400>)
 8003b46:	e77c      	b.n	8003a42 <mc_arc+0x2fa>
 8003b48:	200010b0 	.word	0x200010b0

08003b4c <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003b4c:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <mc_dwell+0x20>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d009      	beq.n	8003b68 <mc_dwell+0x1c>
{
 8003b54:	b510      	push	{r4, lr}
 8003b56:	4604      	mov	r4, r0
  protocol_buffer_synchronize();
 8003b58:	f002 f92a 	bl	8005db0 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003b5c:	4620      	mov	r0, r4
}
 8003b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003b62:	2100      	movs	r1, #0
 8003b64:	f000 b978 	b.w	8003e58 <delay_sec>
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	200010b0 	.word	0x200010b0

08003b70 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8003b70:	b510      	push	{r4, lr}
 8003b72:	4604      	mov	r4, r0
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8003b74:	f7ff fa68 	bl	8003048 <limits_disable>

  // -------------------------------------------------------------------------------------
  // Perform homing routine. NOTE: Special motion case. Only system reset works.
  
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
 8003b78:	b1b4      	cbz	r4, 8003ba8 <mc_homing_cycle+0x38>
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f7ff fade 	bl	800313c <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 8003b80:	f001 ff24 	bl	80059cc <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <mc_homing_cycle+0x4c>)
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	b96b      	cbnz	r3, 8003ba6 <mc_homing_cycle+0x36>

  // Homing cycle complete! Setup system for normal operation.
  // -------------------------------------------------------------------------------------

  // Sync gcode parser and planner positions to homed position.
  gc_sync_position();
 8003b8a:	f7fe f89b 	bl	8001cc4 <gc_sync_position>
  plan_sync_position();
 8003b8e:	f000 ff09 	bl	80049a4 <plan_sync_position>

  // If hard limits feature enabled, re-enable hard limits pin change register after homing cycle.
#ifdef STM32F103C8
// --- YSV 22-06-2018
	#if defined AA_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT));
 8003b92:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003b96:	f7fd fb35 	bl	8001204 <EXTI_ClearITPendingBit>
 8003b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <mc_homing_cycle+0x50>)
 8003ba0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	bd10      	pop	{r4, pc}
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8003ba8:	2004      	movs	r0, #4
 8003baa:	f7ff fac7 	bl	800313c <limits_go_home>
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8003bae:	2003      	movs	r0, #3
 8003bb0:	f7ff fac4 	bl	800313c <limits_go_home>
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
 8003bb4:	2008      	movs	r0, #8
 8003bb6:	f7ff fac1 	bl	800313c <limits_go_home>
 8003bba:	e7e1      	b.n	8003b80 <mc_homing_cycle+0x10>
 8003bbc:	200010b0 	.word	0x200010b0
 8003bc0:	e000e100 	.word	0xe000e100

08003bc4 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8003bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003bc8:	4c42      	ldr	r4, [pc, #264]	; (8003cd4 <mc_probe_cycle+0x110>)
 8003bca:	7823      	ldrb	r3, [r4, #0]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d00c      	beq.n	8003bea <mc_probe_cycle+0x26>
 8003bd0:	4617      	mov	r7, r2
 8003bd2:	460e      	mov	r6, r1
 8003bd4:	4605      	mov	r5, r0

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8003bd6:	f002 f8eb 	bl	8005db0 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8003bda:	f894 8001 	ldrb.w	r8, [r4, #1]
 8003bde:	f1b8 0f00 	cmp.w	r8, #0
 8003be2:	d005      	beq.n	8003bf0 <mc_probe_cycle+0x2c>
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
    protocol_execute_realtime();
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8003be4:	2002      	movs	r0, #2
 8003be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003bea:	2000      	movs	r0, #0
    report_probe_parameters();
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 8003bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  probe_configure_invert_mask(is_probe_away);
 8003bf0:	f3c7 00c0 	ubfx	r0, r7, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8003bf4:	f884 8005 	strb.w	r8, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 8003bf8:	f001 f974 	bl	8004ee4 <probe_configure_invert_mask>
  if ( probe_get_state() ) { // Check probe pin state.
 8003bfc:	f001 f986 	bl	8004f0c <probe_get_state>
 8003c00:	b140      	cbz	r0, 8003c14 <mc_probe_cycle+0x50>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8003c02:	2004      	movs	r0, #4
 8003c04:	f005 fe08 	bl	8009818 <system_set_exec_alarm>
    protocol_execute_realtime();
 8003c08:	f001 fee0 	bl	80059cc <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8003c0c:	4640      	mov	r0, r8
 8003c0e:	f001 f969 	bl	8004ee4 <probe_configure_invert_mask>
 8003c12:	e7e7      	b.n	8003be4 <mc_probe_cycle+0x20>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003c14:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8003ce4 <mc_probe_cycle+0x120>
 8003c18:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
 8003c1c:	0698      	lsls	r0, r3, #26
 8003c1e:	d505      	bpl.n	8003c2c <mc_probe_cycle+0x68>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003c20:	7823      	ldrb	r3, [r4, #0]
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d00b      	beq.n	8003c3e <mc_probe_cycle+0x7a>
 8003c26:	4628      	mov	r0, r5
 8003c28:	f7ff fc7e 	bl	8003528 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003c2c:	7823      	ldrb	r3, [r4, #0]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d105      	bne.n	8003c3e <mc_probe_cycle+0x7a>
 8003c32:	e009      	b.n	8003c48 <mc_probe_cycle+0x84>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003c34:	f000 fb94 	bl	8004360 <plan_check_full_buffer>
 8003c38:	b370      	cbz	r0, 8003c98 <mc_probe_cycle+0xd4>
 8003c3a:	f001 f99b 	bl	8004f74 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003c3e:	f001 fec5 	bl	80059cc <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003c42:	7863      	ldrb	r3, [r4, #1]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f5      	beq.n	8003c34 <mc_probe_cycle+0x70>
  sys_probe_state = PROBE_ACTIVE;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4d23      	ldr	r5, [pc, #140]	; (8003cd8 <mc_probe_cycle+0x114>)
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003c4c:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8003c4e:	702b      	strb	r3, [r5, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003c50:	f005 fdce 	bl	80097f0 <system_set_exec_state_flag>
    protocol_execute_realtime();
 8003c54:	f001 feba 	bl	80059cc <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8003c58:	7863      	ldrb	r3, [r4, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1c2      	bne.n	8003be4 <mc_probe_cycle+0x20>
  } while (sys.state != STATE_IDLE);
 8003c5e:	7823      	ldrb	r3, [r4, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f7      	bne.n	8003c54 <mc_probe_cycle+0x90>
  if (sys_probe_state == PROBE_ACTIVE) {
 8003c64:	782b      	ldrb	r3, [r5, #0]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d028      	beq.n	8003cbc <mc_probe_cycle+0xf8>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	7163      	strb	r3, [r4, #5]
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003c6e:	2300      	movs	r3, #0
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003c70:	4618      	mov	r0, r3
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003c72:	702b      	strb	r3, [r5, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003c74:	f001 f936 	bl	8004ee4 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 8003c78:	f001 fea8 	bl	80059cc <protocol_execute_realtime>
  st_reset(); // Reset step segment buffer.
 8003c7c:	f004 fbd0 	bl	8008420 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8003c80:	f000 fafe 	bl	8004280 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8003c84:	f000 fe8e 	bl	80049a4 <plan_sync_position>
    report_probe_parameters();
 8003c88:	f002 ff16 	bl	8006ab8 <report_probe_parameters>
  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8003c8c:	7960      	ldrb	r0, [r4, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003c8e:	3000      	adds	r0, #0
 8003c90:	bf18      	it	ne
 8003c92:	2001      	movne	r0, #1
 8003c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003c98:	4628      	mov	r0, r5
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	f000 fc20 	bl	80044e0 <plan_buffer_line>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d1d1      	bne.n	8003c48 <mc_probe_cycle+0x84>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003ca4:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
 8003ca8:	0799      	lsls	r1, r3, #30
 8003caa:	d5cd      	bpl.n	8003c48 <mc_probe_cycle+0x84>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003cac:	7a33      	ldrb	r3, [r6, #8]
 8003cae:	06da      	lsls	r2, r3, #27
 8003cb0:	d5ca      	bpl.n	8003c48 <mc_probe_cycle+0x84>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003cb2:	6871      	ldr	r1, [r6, #4]
 8003cb4:	2010      	movs	r0, #16
 8003cb6:	f004 f8d9 	bl	8007e6c <spindle_sync>
 8003cba:	e7c5      	b.n	8003c48 <mc_probe_cycle+0x84>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8003cbc:	06fb      	lsls	r3, r7, #27
 8003cbe:	d505      	bpl.n	8003ccc <mc_probe_cycle+0x108>
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <mc_probe_cycle+0x118>)
 8003cc2:	4e07      	ldr	r6, [pc, #28]	; (8003ce0 <mc_probe_cycle+0x11c>)
 8003cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cc6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8003cca:	e7d0      	b.n	8003c6e <mc_probe_cycle+0xaa>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8003ccc:	2005      	movs	r0, #5
 8003cce:	f005 fda3 	bl	8009818 <system_set_exec_alarm>
 8003cd2:	e7cc      	b.n	8003c6e <mc_probe_cycle+0xaa>
 8003cd4:	200010b0 	.word	0x200010b0
 8003cd8:	200010c6 	.word	0x200010c6
 8003cdc:	200010d8 	.word	0x200010d8
 8003ce0:	200010c8 	.word	0x200010c8
 8003ce4:	2000126c 	.word	0x2000126c

08003ce8 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8003ce8:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <mc_reset+0x54>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	06db      	lsls	r3, r3, #27
 8003cf0:	d500      	bpl.n	8003cf4 <mc_reset+0xc>
 8003cf2:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 8003cf4:	2010      	movs	r0, #16
 8003cf6:	f005 fd7b 	bl	80097f0 <system_set_exec_state_flag>

    // Kill spindle and coolant.
    spindle_stop();
 8003cfa:	f003 ffcd 	bl	8007c98 <spindle_stop>
    coolant_stop();
 8003cfe:	f7fd fed1 	bl	8001aa4 <coolant_stop>
    // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
    // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
    // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
    // violated, by which, all bets are off.
#ifndef  USE_RESET_BTN_AS_ESTOP
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003d02:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <mc_reset+0x58>)
 8003d04:	7813      	ldrb	r3, [r2, #0]
 8003d06:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 8003d0a:	d008      	beq.n	8003d1e <mc_reset+0x36>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION)))
#endif
    {
      if (sys.state == STATE_HOMING) {
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d00c      	beq.n	8003d2a <mc_reset+0x42>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8003d10:	2003      	movs	r0, #3
 8003d12:	f005 fd81 	bl	8009818 <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 8003d16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003d1a:	f004 b99d 	b.w	8008058 <st_go_idle>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003d1e:	7912      	ldrb	r2, [r2, #4]
 8003d20:	f012 0f06 	tst.w	r2, #6
 8003d24:	d0e5      	beq.n	8003cf2 <mc_reset+0xa>
      if (sys.state == STATE_HOMING) {
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d1f2      	bne.n	8003d10 <mc_reset+0x28>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <mc_reset+0x5c>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f1      	bne.n	8003d16 <mc_reset+0x2e>
 8003d32:	2006      	movs	r0, #6
 8003d34:	f005 fd70 	bl	8009818 <system_set_exec_alarm>
 8003d38:	e7ed      	b.n	8003d16 <mc_reset+0x2e>
 8003d3a:	bf00      	nop
 8003d3c:	200010c5 	.word	0x200010c5
 8003d40:	200010b0 	.word	0x200010b0
 8003d44:	200010e8 	.word	0x200010e8

08003d48 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *ptr = line + *char_counter;
 8003d4c:	780c      	ldrb	r4, [r1, #0]
{
 8003d4e:	b083      	sub	sp, #12
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8003d50:	5d03      	ldrb	r3, [r0, r4]
  char *ptr = line + *char_counter;
 8003d52:	4404      	add	r4, r0

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 8003d54:	2b2d      	cmp	r3, #45	; 0x2d
 8003d56:	d065      	beq.n	8003e24 <read_float+0xdc>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 8003d58:	2b2b      	cmp	r3, #43	; 0x2b
 8003d5a:	d068      	beq.n	8003e2e <read_float+0xe6>
  bool isnegative = false;
 8003d5c:	f04f 0800 	mov.w	r8, #0
  c = *ptr++;
 8003d60:	1c65      	adds	r5, r4, #1

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 8003d62:	2600      	movs	r6, #0
  uint8_t ndigit = 0;
 8003d64:	4634      	mov	r4, r6
  int8_t exp = 0;
 8003d66:	4637      	mov	r7, r6
  uint32_t intval = 0;
 8003d68:	46b6      	mov	lr, r6
 8003d6a:	e00c      	b.n	8003d86 <read_float+0x3e>
  while(1) {
    c -= '0';
    if (c <= 9) {
      ndigit++;
 8003d6c:	3401      	adds	r4, #1
 8003d6e:	b2e4      	uxtb	r4, r4
      if (ndigit <= MAX_INT_DIGITS) {
 8003d70:	2c08      	cmp	r4, #8
 8003d72:	d811      	bhi.n	8003d98 <read_float+0x50>
        if (isdecimal) { exp--; }
 8003d74:	b10e      	cbz	r6, 8003d7a <read_float+0x32>
 8003d76:	3f01      	subs	r7, #1
 8003d78:	b27f      	sxtb	r7, r7
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8003d7a:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8003d7e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 8003d82:	f815 3b01 	ldrb.w	r3, [r5], #1
    c -= '0';
 8003d86:	3b30      	subs	r3, #48	; 0x30
 8003d88:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8003d8a:	2b09      	cmp	r3, #9
 8003d8c:	d9ee      	bls.n	8003d6c <read_float+0x24>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8003d8e:	2bfe      	cmp	r3, #254	; 0xfe
 8003d90:	d107      	bne.n	8003da2 <read_float+0x5a>
 8003d92:	b936      	cbnz	r6, 8003da2 <read_float+0x5a>
      isdecimal = true;
 8003d94:	2601      	movs	r6, #1
 8003d96:	e7f4      	b.n	8003d82 <read_float+0x3a>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8003d98:	2e00      	cmp	r6, #0
 8003d9a:	d1f2      	bne.n	8003d82 <read_float+0x3a>
 8003d9c:	3701      	adds	r7, #1
 8003d9e:	b27f      	sxtb	r7, r7
 8003da0:	e7ef      	b.n	8003d82 <read_float+0x3a>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 8003da2:	2c00      	cmp	r4, #0
 8003da4:	d037      	beq.n	8003e16 <read_float+0xce>
 8003da6:	4682      	mov	sl, r0

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 8003da8:	4670      	mov	r0, lr
 8003daa:	9101      	str	r1, [sp, #4]
 8003dac:	4691      	mov	r9, r2
 8003dae:	f7fc ff27 	bl	8000c00 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 8003db2:	2100      	movs	r1, #0
  fval = (float)intval;
 8003db4:	4683      	mov	fp, r0
  if (fval != 0) {
 8003db6:	f7fd f90f 	bl	8000fd8 <__aeabi_fcmpeq>
 8003dba:	bb08      	cbnz	r0, 8003e00 <read_float+0xb8>
    while (exp <= -2) {
 8003dbc:	1c79      	adds	r1, r7, #1
 8003dbe:	da12      	bge.n	8003de6 <read_float+0x9e>
 8003dc0:	463e      	mov	r6, r7
      fval *= 0.01f;
 8003dc2:	4c22      	ldr	r4, [pc, #136]	; (8003e4c <read_float+0x104>)
 8003dc4:	4658      	mov	r0, fp
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	f7fc ff72 	bl	8000cb0 <__aeabi_fmul>
 8003dcc:	1cb3      	adds	r3, r6, #2
 8003dce:	b25e      	sxtb	r6, r3
    while (exp <= -2) {
 8003dd0:	1c72      	adds	r2, r6, #1
      fval *= 0.01f;
 8003dd2:	4683      	mov	fp, r0
    while (exp <= -2) {
 8003dd4:	dbf6      	blt.n	8003dc4 <read_float+0x7c>
 8003dd6:	b2ff      	uxtb	r7, r7
 8003dd8:	f1c7 03fe 	rsb	r3, r7, #254	; 0xfe
 8003ddc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003de0:	441f      	add	r7, r3
 8003de2:	3702      	adds	r7, #2
 8003de4:	b27f      	sxtb	r7, r7
      exp += 2;
    }
    if (exp < 0) {
 8003de6:	1c7b      	adds	r3, r7, #1
 8003de8:	d026      	beq.n	8003e38 <read_float+0xf0>
      fval *= 0.1f;
    } else if (exp > 0) {
 8003dea:	b14f      	cbz	r7, 8003e00 <read_float+0xb8>
      do {
        fval *= 10.0f;
 8003dec:	4c18      	ldr	r4, [pc, #96]	; (8003e50 <read_float+0x108>)
 8003dee:	4658      	mov	r0, fp
 8003df0:	4621      	mov	r1, r4
 8003df2:	f7fc ff5d 	bl	8000cb0 <__aeabi_fmul>
 8003df6:	3f01      	subs	r7, #1
 8003df8:	b27f      	sxtb	r7, r7
 8003dfa:	4683      	mov	fp, r0
      } while (--exp > 0);
 8003dfc:	2f00      	cmp	r7, #0
 8003dfe:	d1f6      	bne.n	8003dee <read_float+0xa6>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 8003e00:	f1b8 0f00 	cmp.w	r8, #0
 8003e04:	d10b      	bne.n	8003e1e <read_float+0xd6>
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 8003e06:	2401      	movs	r4, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 8003e08:	eba5 050a 	sub.w	r5, r5, sl
 8003e0c:	9b01      	ldr	r3, [sp, #4]
 8003e0e:	3d01      	subs	r5, #1
 8003e10:	f8c9 b000 	str.w	fp, [r9]
 8003e14:	701d      	strb	r5, [r3, #0]
}
 8003e16:	4620      	mov	r0, r4
 8003e18:	b003      	add	sp, #12
 8003e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *float_ptr = -fval;
 8003e1e:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
 8003e22:	e7f0      	b.n	8003e06 <read_float+0xbe>
    c = *ptr++;
 8003e24:	1ca5      	adds	r5, r4, #2
 8003e26:	7863      	ldrb	r3, [r4, #1]
    isnegative = true;
 8003e28:	f04f 0801 	mov.w	r8, #1
 8003e2c:	e799      	b.n	8003d62 <read_float+0x1a>
  bool isnegative = false;
 8003e2e:	f04f 0800 	mov.w	r8, #0
    c = *ptr++;
 8003e32:	7863      	ldrb	r3, [r4, #1]
 8003e34:	1ca5      	adds	r5, r4, #2
 8003e36:	e794      	b.n	8003d62 <read_float+0x1a>
      fval *= 0.1f;
 8003e38:	4658      	mov	r0, fp
 8003e3a:	4906      	ldr	r1, [pc, #24]	; (8003e54 <read_float+0x10c>)
 8003e3c:	f7fc ff38 	bl	8000cb0 <__aeabi_fmul>
 8003e40:	4683      	mov	fp, r0
  if (isnegative) {
 8003e42:	f1b8 0f00 	cmp.w	r8, #0
 8003e46:	d0de      	beq.n	8003e06 <read_float+0xbe>
 8003e48:	e7e9      	b.n	8003e1e <read_float+0xd6>
 8003e4a:	bf00      	nop
 8003e4c:	3c23d70a 	.word	0x3c23d70a
 8003e50:	41200000 	.word	0x41200000
 8003e54:	3dcccccd 	.word	0x3dcccccd

08003e58 <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	460e      	mov	r6, r1
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 8003e5c:	4918      	ldr	r1, [pc, #96]	; (8003ec0 <delay_sec+0x68>)
 8003e5e:	f7fc ff27 	bl	8000cb0 <__aeabi_fmul>
 8003e62:	f006 ff5f 	bl	800ad24 <ceilf>
 8003e66:	f7fd f925 	bl	80010b4 <__aeabi_f2uiz>
 8003e6a:	b280      	uxth	r0, r0
	while (i-- > 0) {
 8003e6c:	b1b0      	cbz	r0, 8003e9c <delay_sec+0x44>
		if (sys.abort) { return; }
 8003e6e:	4d15      	ldr	r5, [pc, #84]	; (8003ec4 <delay_sec+0x6c>)
 8003e70:	786b      	ldrb	r3, [r5, #1]
 8003e72:	b99b      	cbnz	r3, 8003e9c <delay_sec+0x44>
 8003e74:	1e44      	subs	r4, r0, #1
 8003e76:	b2a4      	uxth	r4, r4
 8003e78:	b18e      	cbz	r6, 8003e9e <delay_sec+0x46>
	while (i-- > 0) {
 8003e7a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003e7e:	e008      	b.n	8003e92 <delay_sec+0x3a>
 8003e80:	3c01      	subs	r4, #1
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003e82:	2032      	movs	r0, #50	; 0x32
	while (i-- > 0) {
 8003e84:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003e86:	f7ff fbff 	bl	8003688 <_delay_ms>
	while (i-- > 0) {
 8003e8a:	42b4      	cmp	r4, r6
 8003e8c:	d006      	beq.n	8003e9c <delay_sec+0x44>
		if (sys.abort) { return; }
 8003e8e:	786b      	ldrb	r3, [r5, #1]
 8003e90:	b9ab      	cbnz	r3, 8003ebe <delay_sec+0x66>
		  protocol_exec_rt_system();
 8003e92:	f001 f879 	bl	8004f88 <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8003e96:	78ab      	ldrb	r3, [r5, #2]
 8003e98:	079b      	lsls	r3, r3, #30
 8003e9a:	d5f1      	bpl.n	8003e80 <delay_sec+0x28>
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
	while (i-- > 0) {
 8003e9e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003ea2:	e001      	b.n	8003ea8 <delay_sec+0x50>
		if (sys.abort) { return; }
 8003ea4:	786b      	ldrb	r3, [r5, #1]
 8003ea6:	b94b      	cbnz	r3, 8003ebc <delay_sec+0x64>
	while (i-- > 0) {
 8003ea8:	3c01      	subs	r4, #1
			protocol_execute_realtime();
 8003eaa:	f001 fd8f 	bl	80059cc <protocol_execute_realtime>
	while (i-- > 0) {
 8003eae:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003eb0:	2032      	movs	r0, #50	; 0x32
 8003eb2:	f7ff fbe9 	bl	8003688 <_delay_ms>
	while (i-- > 0) {
 8003eb6:	42b4      	cmp	r4, r6
 8003eb8:	d1f4      	bne.n	8003ea4 <delay_sec+0x4c>
 8003eba:	e7ef      	b.n	8003e9c <delay_sec+0x44>
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	41a00000 	.word	0x41a00000
 8003ec4:	200010b0 	.word	0x200010b0

08003ec8 <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
  while ( ms-- ) { _delay_ms(1); }
 8003ec8:	b160      	cbz	r0, 8003ee4 <delay_ms+0x1c>
{
 8003eca:	b538      	push	{r3, r4, r5, lr}
  while ( ms-- ) { _delay_ms(1); }
 8003ecc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003ed0:	1e44      	subs	r4, r0, #1
 8003ed2:	b2a4      	uxth	r4, r4
 8003ed4:	3c01      	subs	r4, #1
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	b2a4      	uxth	r4, r4
 8003eda:	f7ff fbd5 	bl	8003688 <_delay_ms>
 8003ede:	42ac      	cmp	r4, r5
 8003ee0:	d1f8      	bne.n	8003ed4 <delay_ms+0xc>
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop

08003ee8 <hypot_f>:
}


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	460d      	mov	r5, r1
 8003eec:	4601      	mov	r1, r0
 8003eee:	f7fc fedf 	bl	8000cb0 <__aeabi_fmul>
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7fc feda 	bl	8000cb0 <__aeabi_fmul>
 8003efc:	4601      	mov	r1, r0
 8003efe:	4620      	mov	r0, r4
 8003f00:	f7fc fdce 	bl	8000aa0 <__addsf3>
 8003f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f08:	f007 b824 	b.w	800af54 <sqrtf>

08003f0c <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	4604      	mov	r4, r0
  uint8_t idx;
  float magnitude = 0.0f;
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0f) {
 8003f10:	6847      	ldr	r7, [r0, #4]
 8003f12:	2100      	movs	r1, #0
 8003f14:	4638      	mov	r0, r7
 8003f16:	6826      	ldr	r6, [r4, #0]
 8003f18:	68a5      	ldr	r5, [r4, #8]
 8003f1a:	f7fd f85d 	bl	8000fd8 <__aeabi_fcmpeq>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d14e      	bne.n	8003fc0 <convert_delta_vector_to_unit_vector+0xb4>
      magnitude += vector[idx]*vector[idx];
 8003f22:	4639      	mov	r1, r7
 8003f24:	4638      	mov	r0, r7
 8003f26:	f7fc fec3 	bl	8000cb0 <__aeabi_fmul>
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f7fd f852 	bl	8000fd8 <__aeabi_fcmpeq>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d14a      	bne.n	8003fce <convert_delta_vector_to_unit_vector+0xc2>
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f7fc feb8 	bl	8000cb0 <__aeabi_fmul>
 8003f40:	4601      	mov	r1, r0
 8003f42:	4638      	mov	r0, r7
 8003f44:	f7fc fdac 	bl	8000aa0 <__addsf3>
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f7fd f843 	bl	8000fd8 <__aeabi_fcmpeq>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d13f      	bne.n	8003fd6 <convert_delta_vector_to_unit_vector+0xca>
 8003f56:	4631      	mov	r1, r6
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7fc fea9 	bl	8000cb0 <__aeabi_fmul>
 8003f5e:	4601      	mov	r1, r0
 8003f60:	4628      	mov	r0, r5
 8003f62:	f7fc fd9d 	bl	8000aa0 <__addsf3>
    if (vector[idx] != 0.0f) {
 8003f66:	68e5      	ldr	r5, [r4, #12]
 8003f68:	4607      	mov	r7, r0
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f7fd f833 	bl	8000fd8 <__aeabi_fcmpeq>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d12d      	bne.n	8003fd2 <convert_delta_vector_to_unit_vector+0xc6>
      magnitude += vector[idx]*vector[idx];
 8003f76:	4629      	mov	r1, r5
 8003f78:	4628      	mov	r0, r5
 8003f7a:	f7fc fe99 	bl	8000cb0 <__aeabi_fmul>
 8003f7e:	4639      	mov	r1, r7
 8003f80:	f7fc fd8e 	bl	8000aa0 <__addsf3>
    }
  }
  magnitude = sqrtf(magnitude);
 8003f84:	f006 ffe6 	bl	800af54 <sqrtf>
 8003f88:	4607      	mov	r7, r0
  float inv_magnitude = 1.0f/magnitude;
 8003f8a:	4601      	mov	r1, r0
 8003f8c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f90:	f7fc ff42 	bl	8000e18 <__aeabi_fdiv>
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8003f94:	4631      	mov	r1, r6
  float inv_magnitude = 1.0f/magnitude;
 8003f96:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8003f98:	f7fc fe8a 	bl	8000cb0 <__aeabi_fmul>
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	6020      	str	r0, [r4, #0]
 8003fa0:	6860      	ldr	r0, [r4, #4]
 8003fa2:	f7fc fe85 	bl	8000cb0 <__aeabi_fmul>
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	6060      	str	r0, [r4, #4]
 8003faa:	68a0      	ldr	r0, [r4, #8]
 8003fac:	f7fc fe80 	bl	8000cb0 <__aeabi_fmul>
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	60a0      	str	r0, [r4, #8]
 8003fb4:	68e0      	ldr	r0, [r4, #12]
 8003fb6:	f7fc fe7b 	bl	8000cb0 <__aeabi_fmul>
 8003fba:	60e0      	str	r0, [r4, #12]
  return(magnitude);
}
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	2700      	movs	r7, #0
 8003fc6:	f7fd f807 	bl	8000fd8 <__aeabi_fcmpeq>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d0b4      	beq.n	8003f38 <convert_delta_vector_to_unit_vector+0x2c>
 8003fce:	2100      	movs	r1, #0
 8003fd0:	e7b7      	b.n	8003f42 <convert_delta_vector_to_unit_vector+0x36>
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e7d3      	b.n	8003f7e <convert_delta_vector_to_unit_vector+0x72>
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	e7c2      	b.n	8003f60 <convert_delta_vector_to_unit_vector+0x54>
 8003fda:	bf00      	nop

08003fdc <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003fde:	680c      	ldr	r4, [r1, #0]
{
 8003fe0:	460d      	mov	r5, r1
 8003fe2:	4606      	mov	r6, r0
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f7fc fff6 	bl	8000fd8 <__aeabi_fcmpeq>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d140      	bne.n	8004072 <limit_value_by_axis_maximum+0x96>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	6830      	ldr	r0, [r6, #0]
 8003ff4:	f7fc ff10 	bl	8000e18 <__aeabi_fdiv>
 8003ff8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	4921      	ldr	r1, [pc, #132]	; (8004084 <limit_value_by_axis_maximum+0xa8>)
 8004000:	f7fc fffe 	bl	8001000 <__aeabi_fcmple>
 8004004:	2800      	cmp	r0, #0
 8004006:	d034      	beq.n	8004072 <limit_value_by_axis_maximum+0x96>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004008:	686f      	ldr	r7, [r5, #4]
 800400a:	2100      	movs	r1, #0
 800400c:	4638      	mov	r0, r7
 800400e:	f7fc ffe3 	bl	8000fd8 <__aeabi_fcmpeq>
 8004012:	b950      	cbnz	r0, 800402a <limit_value_by_axis_maximum+0x4e>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004014:	4639      	mov	r1, r7
 8004016:	6870      	ldr	r0, [r6, #4]
 8004018:	f7fc fefe 	bl	8000e18 <__aeabi_fdiv>
 800401c:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 8004020:	4639      	mov	r1, r7
 8004022:	4620      	mov	r0, r4
 8004024:	f7fc ffec 	bl	8001000 <__aeabi_fcmple>
 8004028:	b350      	cbz	r0, 8004080 <limit_value_by_axis_maximum+0xa4>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 800402a:	68af      	ldr	r7, [r5, #8]
 800402c:	2100      	movs	r1, #0
 800402e:	4638      	mov	r0, r7
 8004030:	f7fc ffd2 	bl	8000fd8 <__aeabi_fcmpeq>
 8004034:	b950      	cbnz	r0, 800404c <limit_value_by_axis_maximum+0x70>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004036:	4639      	mov	r1, r7
 8004038:	68b0      	ldr	r0, [r6, #8]
 800403a:	f7fc feed 	bl	8000e18 <__aeabi_fdiv>
 800403e:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 8004042:	4639      	mov	r1, r7
 8004044:	4620      	mov	r0, r4
 8004046:	f7fc ffdb 	bl	8001000 <__aeabi_fcmple>
 800404a:	b1b8      	cbz	r0, 800407c <limit_value_by_axis_maximum+0xa0>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 800404c:	68ed      	ldr	r5, [r5, #12]
 800404e:	2100      	movs	r1, #0
 8004050:	4628      	mov	r0, r5
 8004052:	f7fc ffc1 	bl	8000fd8 <__aeabi_fcmpeq>
 8004056:	b950      	cbnz	r0, 800406e <limit_value_by_axis_maximum+0x92>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004058:	4629      	mov	r1, r5
 800405a:	68f0      	ldr	r0, [r6, #12]
 800405c:	f7fc fedc 	bl	8000e18 <__aeabi_fdiv>
 8004060:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004064:	4629      	mov	r1, r5
 8004066:	4620      	mov	r0, r4
 8004068:	f7fc ffca 	bl	8001000 <__aeabi_fcmple>
 800406c:	b118      	cbz	r0, 8004076 <limit_value_by_axis_maximum+0x9a>
    }
  }
  return(limit_value);
}
 800406e:	4620      	mov	r0, r4
 8004070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float limit_value = SOME_LARGE_VALUE;
 8004072:	4c04      	ldr	r4, [pc, #16]	; (8004084 <limit_value_by_axis_maximum+0xa8>)
 8004074:	e7c8      	b.n	8004008 <limit_value_by_axis_maximum+0x2c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004076:	462c      	mov	r4, r5
}
 8004078:	4620      	mov	r0, r4
 800407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800407c:	463c      	mov	r4, r7
 800407e:	e7e5      	b.n	800404c <limit_value_by_axis_maximum+0x70>
 8004080:	463c      	mov	r4, r7
 8004082:	e7d2      	b.n	800402a <limit_value_by_axis_maximum+0x4e>
 8004084:	7f7fffff 	.word	0x7f7fffff

08004088 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 800408c:	4b77      	ldr	r3, [pc, #476]	; (800426c <planner_recalculate+0x1e4>)
{
 800408e:	b083      	sub	sp, #12
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	9300      	str	r3, [sp, #0]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004094:	2b00      	cmp	r3, #0
 8004096:	d075      	beq.n	8004184 <planner_recalculate+0xfc>

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 8004098:	4a75      	ldr	r2, [pc, #468]	; (8004270 <planner_recalculate+0x1e8>)
  block_index--;
 800409a:	1e5c      	subs	r4, r3, #1
  if (block_index == block_buffer_planned) { return; }
 800409c:	f892 8000 	ldrb.w	r8, [r2]
  block_index--;
 80040a0:	b2e4      	uxtb	r4, r4
  if (block_index == block_buffer_planned) { return; }
 80040a2:	45a0      	cmp	r8, r4
 80040a4:	9201      	str	r2, [sp, #4]
 80040a6:	d06a      	beq.n	800417e <planner_recalculate+0xf6>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 80040a8:	4d72      	ldr	r5, [pc, #456]	; (8004274 <planner_recalculate+0x1ec>)
 80040aa:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
 80040ae:	eb05 07c7 	add.w	r7, r5, r7, lsl #3

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 80040b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040b4:	6a38      	ldr	r0, [r7, #32]
 80040b6:	f7fc fdfb 	bl	8000cb0 <__aeabi_fmul>
 80040ba:	4601      	mov	r1, r0
 80040bc:	f7fc fcf0 	bl	8000aa0 <__addsf3>
 80040c0:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 80040c4:	4681      	mov	r9, r0
 80040c6:	4659      	mov	r1, fp
 80040c8:	f107 0a18 	add.w	sl, r7, #24
 80040cc:	f7fc ff98 	bl	8001000 <__aeabi_fcmple>
 80040d0:	b900      	cbnz	r0, 80040d4 <planner_recalculate+0x4c>
 80040d2:	46d9      	mov	r9, fp
 80040d4:	f8ca 9000 	str.w	r9, [sl]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80040d8:	f04f 0b23 	mov.w	fp, #35	; 0x23
 80040dc:	2c00      	cmp	r4, #0
 80040de:	d06f      	beq.n	80041c0 <planner_recalculate+0x138>
 80040e0:	9b00      	ldr	r3, [sp, #0]
 80040e2:	3b02      	subs	r3, #2
 80040e4:	fa5f fb83 	uxtb.w	fp, r3
 80040e8:	e06a      	b.n	80041c0 <planner_recalculate+0x138>
 80040ea:	4b60      	ldr	r3, [pc, #384]	; (800426c <planner_recalculate+0x1e4>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	9300      	str	r3, [sp, #0]
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80040f0:	ebcb 03cb 	rsb	r3, fp, fp, lsl #3
  block_index++;
 80040f4:	f10b 0401 	add.w	r4, fp, #1
 80040f8:	b2e4      	uxtb	r4, r4
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80040fa:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
 80040fe:	9b01      	ldr	r3, [sp, #4]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004100:	2c24      	cmp	r4, #36	; 0x24
 8004102:	bf08      	it	eq
 8004104:	2400      	moveq	r4, #0
 8004106:	f893 b000 	ldrb.w	fp, [r3]
 800410a:	e02e      	b.n	800416a <planner_recalculate+0xe2>
    next = &block_buffer[block_index];

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 800410c:	f8da 9018 	ldr.w	r9, [sl, #24]
 8004110:	f8d7 8018 	ldr.w	r8, [r7, #24]
 8004114:	4648      	mov	r0, r9
 8004116:	4641      	mov	r1, r8
 8004118:	f7fc ff68 	bl	8000fec <__aeabi_fcmplt>
 800411c:	b1a8      	cbz	r0, 800414a <planner_recalculate+0xc2>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 800411e:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8004122:	f8da 0020 	ldr.w	r0, [sl, #32]
 8004126:	f7fc fdc3 	bl	8000cb0 <__aeabi_fmul>
 800412a:	4601      	mov	r1, r0
 800412c:	f7fc fcb8 	bl	8000aa0 <__addsf3>
 8004130:	4649      	mov	r1, r9
 8004132:	f7fc fcb5 	bl	8000aa0 <__addsf3>
 8004136:	4681      	mov	r9, r0
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8004138:	4601      	mov	r1, r0
 800413a:	4640      	mov	r0, r8
 800413c:	f7fc ff74 	bl	8001028 <__aeabi_fcmpgt>
 8004140:	b118      	cbz	r0, 800414a <planner_recalculate+0xc2>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 8004142:	46c8      	mov	r8, r9
 8004144:	46a3      	mov	fp, r4
 8004146:	f8c7 9018 	str.w	r9, [r7, #24]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 800414a:	1b32      	subs	r2, r6, r4
 800414c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004150:	69d0      	ldr	r0, [r2, #28]
 8004152:	4641      	mov	r1, r8
 8004154:	f7fc ff40 	bl	8000fd8 <__aeabi_fcmpeq>
  block_index++;
 8004158:	1c63      	adds	r3, r4, #1
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 800415a:	2800      	cmp	r0, #0
 800415c:	bf18      	it	ne
 800415e:	46a3      	movne	fp, r4
  block_index++;
 8004160:	b2dc      	uxtb	r4, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004162:	2c24      	cmp	r4, #36	; 0x24
 8004164:	bf08      	it	eq
 8004166:	2400      	moveq	r4, #0
 8004168:	46ba      	mov	sl, r7
  while (block_index != block_buffer_head) {
 800416a:	9b00      	ldr	r3, [sp, #0]
    next = &block_buffer[block_index];
 800416c:	00e6      	lsls	r6, r4, #3
 800416e:	1b37      	subs	r7, r6, r4
  while (block_index != block_buffer_head) {
 8004170:	429c      	cmp	r4, r3
    next = &block_buffer[block_index];
 8004172:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
  while (block_index != block_buffer_head) {
 8004176:	d1c9      	bne.n	800410c <planner_recalculate+0x84>
 8004178:	9b01      	ldr	r3, [sp, #4]
 800417a:	f883 b000 	strb.w	fp, [r3]
    block_index = plan_next_block_index( block_index );
  }
}
 800417e:	b003      	add	sp, #12
 8004180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == block_buffer_planned) { return; }
 8004184:	4b3a      	ldr	r3, [pc, #232]	; (8004270 <planner_recalculate+0x1e8>)
 8004186:	f893 8000 	ldrb.w	r8, [r3]
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
 8004190:	d0f5      	beq.n	800417e <planner_recalculate+0xf6>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004192:	4d38      	ldr	r5, [pc, #224]	; (8004274 <planner_recalculate+0x1ec>)
 8004194:	f8d5 17c8 	ldr.w	r1, [r5, #1992]	; 0x7c8
 8004198:	f8d5 07cc 	ldr.w	r0, [r5, #1996]	; 0x7cc
 800419c:	f7fc fd88 	bl	8000cb0 <__aeabi_fmul>
 80041a0:	4601      	mov	r1, r0
 80041a2:	f7fc fc7d 	bl	8000aa0 <__addsf3>
 80041a6:	f8d5 77c4 	ldr.w	r7, [r5, #1988]	; 0x7c4
 80041aa:	4604      	mov	r4, r0
 80041ac:	4639      	mov	r1, r7
 80041ae:	f7fc ff27 	bl	8001000 <__aeabi_fcmple>
 80041b2:	b900      	cbnz	r0, 80041b6 <planner_recalculate+0x12e>
 80041b4:	463c      	mov	r4, r7
 80041b6:	f04f 0b22 	mov.w	fp, #34	; 0x22
  plan_block_t *current = &block_buffer[block_index];
 80041ba:	4f2f      	ldr	r7, [pc, #188]	; (8004278 <planner_recalculate+0x1f0>)
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 80041bc:	f8c5 47c0 	str.w	r4, [r5, #1984]	; 0x7c0
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 80041c0:	45d8      	cmp	r8, fp
 80041c2:	d045      	beq.n	8004250 <planner_recalculate+0x1c8>
 80041c4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800427c <planner_recalculate+0x1f4>
 80041c8:	e029      	b.n	800421e <planner_recalculate+0x196>
 80041ca:	fa5f fb82 	uxtb.w	fp, r2
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80041ce:	f899 2000 	ldrb.w	r2, [r9]
 80041d2:	455a      	cmp	r2, fp
 80041d4:	d033      	beq.n	800423e <planner_recalculate+0x1b6>
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 80041d6:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80041da:	eb05 0ac6 	add.w	sl, r5, r6, lsl #3
 80041de:	f8da 601c 	ldr.w	r6, [sl, #28]
 80041e2:	f8da 0018 	ldr.w	r0, [sl, #24]
 80041e6:	4631      	mov	r1, r6
 80041e8:	f7fc fef6 	bl	8000fd8 <__aeabi_fcmpeq>
 80041ec:	b998      	cbnz	r0, 8004216 <planner_recalculate+0x18e>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80041ee:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 80041f2:	f8da 0020 	ldr.w	r0, [sl, #32]
 80041f6:	f7fc fd5b 	bl	8000cb0 <__aeabi_fmul>
 80041fa:	4601      	mov	r1, r0
 80041fc:	f7fc fc50 	bl	8000aa0 <__addsf3>
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	f7fc fc4d 	bl	8000aa0 <__addsf3>
 8004206:	4607      	mov	r7, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 8004208:	4601      	mov	r1, r0
 800420a:	4630      	mov	r0, r6
 800420c:	f7fc ff0c 	bl	8001028 <__aeabi_fcmpgt>
 8004210:	b1d8      	cbz	r0, 800424a <planner_recalculate+0x1c2>
          current->entry_speed_sqr = entry_speed_sqr;
 8004212:	f8ca 7018 	str.w	r7, [sl, #24]
    while (block_index != block_buffer_planned) {
 8004216:	45c3      	cmp	fp, r8
 8004218:	4627      	mov	r7, r4
 800421a:	f43f af66 	beq.w	80040ea <planner_recalculate+0x62>
      current = &block_buffer[block_index];
 800421e:	ebcb 04cb 	rsb	r4, fp, fp, lsl #3
 8004222:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004226:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 800422a:	465e      	mov	r6, fp
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 800422c:	f1bb 0f00 	cmp.w	fp, #0
 8004230:	d1cb      	bne.n	80041ca <planner_recalculate+0x142>
 8004232:	f04f 0b23 	mov.w	fp, #35	; 0x23
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004236:	f899 2000 	ldrb.w	r2, [r9]
 800423a:	455a      	cmp	r2, fp
 800423c:	d1cb      	bne.n	80041d6 <planner_recalculate+0x14e>
 800423e:	f004 fa51 	bl	80086e4 <st_update_plan_block_parameters>
 8004242:	9b01      	ldr	r3, [sp, #4]
 8004244:	f893 8000 	ldrb.w	r8, [r3]
 8004248:	e7c5      	b.n	80041d6 <planner_recalculate+0x14e>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 800424a:	f8ca 6018 	str.w	r6, [sl, #24]
 800424e:	e7e2      	b.n	8004216 <planner_recalculate+0x18e>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004250:	4a0a      	ldr	r2, [pc, #40]	; (800427c <planner_recalculate+0x1f4>)
 8004252:	7812      	ldrb	r2, [r2, #0]
 8004254:	455a      	cmp	r2, fp
 8004256:	f47f af4b 	bne.w	80040f0 <planner_recalculate+0x68>
 800425a:	f004 fa43 	bl	80086e4 <st_update_plan_block_parameters>
 800425e:	4b03      	ldr	r3, [pc, #12]	; (800426c <planner_recalculate+0x1e4>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	9b01      	ldr	r3, [sp, #4]
 8004266:	f893 b000 	ldrb.w	fp, [r3]
 800426a:	e741      	b.n	80040f0 <planner_recalculate+0x68>
 800426c:	200009e0 	.word	0x200009e0
 8004270:	200009e1 	.word	0x200009e1
 8004274:	20000200 	.word	0x20000200
 8004278:	200009a8 	.word	0x200009a8
 800427c:	200009e2 	.word	0x200009e2

08004280 <plan_reset>:


void plan_reset()
{
 8004280:	b538      	push	{r3, r4, r5, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	2100      	movs	r1, #0
 8004286:	4807      	ldr	r0, [pc, #28]	; (80042a4 <plan_reset+0x24>)
 8004288:	f006 fd43 	bl	800ad12 <memset>
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 800428c:	2300      	movs	r3, #0
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 800428e:	2101      	movs	r1, #1
  block_buffer_tail = 0;
 8004290:	4d05      	ldr	r5, [pc, #20]	; (80042a8 <plan_reset+0x28>)
  block_buffer_head = 0; // Empty = tail
 8004292:	4c06      	ldr	r4, [pc, #24]	; (80042ac <plan_reset+0x2c>)
  block_buffer_planned = 0; // = block_buffer_tail;
 8004294:	4806      	ldr	r0, [pc, #24]	; (80042b0 <plan_reset+0x30>)
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004296:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <plan_reset+0x34>)
  block_buffer_tail = 0;
 8004298:	702b      	strb	r3, [r5, #0]
  block_buffer_head = 0; // Empty = tail
 800429a:	7023      	strb	r3, [r4, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 800429c:	7003      	strb	r3, [r0, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 800429e:	7011      	strb	r1, [r2, #0]
 80042a0:	bd38      	pop	{r3, r4, r5, pc}
 80042a2:	bf00      	nop
 80042a4:	200009e4 	.word	0x200009e4
 80042a8:	200009e2 	.word	0x200009e2
 80042ac:	200009e0 	.word	0x200009e0
 80042b0:	200009e1 	.word	0x200009e1
 80042b4:	200009e3 	.word	0x200009e3

080042b8 <plan_discard_current_block>:
}


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 80042b8:	4909      	ldr	r1, [pc, #36]	; (80042e0 <plan_discard_current_block+0x28>)
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <plan_discard_current_block+0x2c>)
 80042bc:	780a      	ldrb	r2, [r1, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00c      	beq.n	80042de <plan_discard_current_block+0x26>
  block_index++;
 80042c4:	1c53      	adds	r3, r2, #1
 80042c6:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80042c8:	2b24      	cmp	r3, #36	; 0x24
 80042ca:	bf08      	it	eq
 80042cc:	2300      	moveq	r3, #0
{
 80042ce:	b410      	push	{r4}
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 80042d0:	4805      	ldr	r0, [pc, #20]	; (80042e8 <plan_discard_current_block+0x30>)
    block_buffer_tail = block_index;
 80042d2:	700b      	strb	r3, [r1, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 80042d4:	7804      	ldrb	r4, [r0, #0]
 80042d6:	4294      	cmp	r4, r2
 80042d8:	bf08      	it	eq
 80042da:	7003      	strbeq	r3, [r0, #0]
  }
}
 80042dc:	bc10      	pop	{r4}
 80042de:	4770      	bx	lr
 80042e0:	200009e2 	.word	0x200009e2
 80042e4:	200009e0 	.word	0x200009e0
 80042e8:	200009e1 	.word	0x200009e1

080042ec <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <plan_get_system_motion_block+0x10>)
 80042ee:	4804      	ldr	r0, [pc, #16]	; (8004300 <plan_get_system_motion_block+0x14>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
}
 80042f6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80042fa:	4770      	bx	lr
 80042fc:	200009e0 	.word	0x200009e0
 8004300:	20000200 	.word	0x20000200

08004304 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <plan_get_current_block+0x1c>)
 8004306:	4a07      	ldr	r2, [pc, #28]	; (8004324 <plan_get_current_block+0x20>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	7812      	ldrb	r2, [r2, #0]
 800430c:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 800430e:	bf1d      	ittte	ne
 8004310:	4805      	ldrne	r0, [pc, #20]	; (8004328 <plan_get_current_block+0x24>)
 8004312:	ebc3 03c3 	rsbne	r3, r3, r3, lsl #3
 8004316:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 800431a:	2000      	moveq	r0, #0
}
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	200009e2 	.word	0x200009e2
 8004324:	200009e0 	.word	0x200009e0
 8004328:	20000200 	.word	0x20000200

0800432c <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800432e:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 8004330:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8004332:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 8004334:	3301      	adds	r3, #1
 8004336:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004338:	2b24      	cmp	r3, #36	; 0x24
 800433a:	bf08      	it	eq
 800433c:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800433e:	429a      	cmp	r2, r3
 8004340:	d006      	beq.n	8004350 <plan_get_exec_block_exit_speed_sqr+0x24>
  return( block_buffer[block_index].entry_speed_sqr );
 8004342:	4a06      	ldr	r2, [pc, #24]	; (800435c <plan_get_exec_block_exit_speed_sqr+0x30>)
 8004344:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004348:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800434c:	6998      	ldr	r0, [r3, #24]
 800434e:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8004350:	2000      	movs	r0, #0
}
 8004352:	4770      	bx	lr
 8004354:	200009e2 	.word	0x200009e2
 8004358:	200009e0 	.word	0x200009e0
 800435c:	20000200 	.word	0x20000200

08004360 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 8004360:	4a04      	ldr	r2, [pc, #16]	; (8004374 <plan_check_full_buffer+0x14>)
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <plan_check_full_buffer+0x18>)
 8004364:	7810      	ldrb	r0, [r2, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 8004368:	1ac0      	subs	r0, r0, r3
 800436a:	fab0 f080 	clz	r0, r0
 800436e:	0940      	lsrs	r0, r0, #5
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	200009e2 	.word	0x200009e2
 8004378:	200009e3 	.word	0x200009e3

0800437c <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 800437c:	b538      	push	{r3, r4, r5, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800437e:	7d83      	ldrb	r3, [r0, #22]
  float nominal_speed = block->programmed_rate;
 8004380:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004382:	07da      	lsls	r2, r3, #31
 8004384:	d514      	bpl.n	80043b0 <plan_compute_profile_nominal_speed+0x34>
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <plan_compute_profile_nominal_speed+0x64>)
 8004388:	7a58      	ldrb	r0, [r3, #9]
 800438a:	f7fc fc3d 	bl	8000c08 <__aeabi_i2f>
 800438e:	4915      	ldr	r1, [pc, #84]	; (80043e4 <plan_compute_profile_nominal_speed+0x68>)
 8004390:	f7fc fc8e 	bl	8000cb0 <__aeabi_fmul>
 8004394:	4629      	mov	r1, r5
 8004396:	f7fc fc8b 	bl	8000cb0 <__aeabi_fmul>
 800439a:	4604      	mov	r4, r0
 800439c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80043a0:	4620      	mov	r0, r4
 80043a2:	f7fc fe37 	bl	8001014 <__aeabi_fcmpge>
 80043a6:	b908      	cbnz	r0, 80043ac <plan_compute_profile_nominal_speed+0x30>
 80043a8:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
  return(MINIMUM_FEED_RATE);
}
 80043ac:	4620      	mov	r0, r4
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80043b0:	075b      	lsls	r3, r3, #29
 80043b2:	4604      	mov	r4, r0
 80043b4:	d40b      	bmi.n	80043ce <plan_compute_profile_nominal_speed+0x52>
 80043b6:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <plan_compute_profile_nominal_speed+0x64>)
 80043b8:	7a18      	ldrb	r0, [r3, #8]
 80043ba:	f7fc fc25 	bl	8000c08 <__aeabi_i2f>
 80043be:	4909      	ldr	r1, [pc, #36]	; (80043e4 <plan_compute_profile_nominal_speed+0x68>)
 80043c0:	f7fc fc76 	bl	8000cb0 <__aeabi_fmul>
 80043c4:	4601      	mov	r1, r0
 80043c6:	4628      	mov	r0, r5
 80043c8:	f7fc fc72 	bl	8000cb0 <__aeabi_fmul>
 80043cc:	4605      	mov	r5, r0
 80043ce:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80043d0:	4629      	mov	r1, r5
 80043d2:	4620      	mov	r0, r4
 80043d4:	f7fc fe14 	bl	8001000 <__aeabi_fcmple>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d1df      	bne.n	800439c <plan_compute_profile_nominal_speed+0x20>
 80043dc:	462c      	mov	r4, r5
 80043de:	e7dd      	b.n	800439c <plan_compute_profile_nominal_speed+0x20>
 80043e0:	200010b0 	.word	0x200010b0
 80043e4:	3c23d70a 	.word	0x3c23d70a

080043e8 <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80043ec:	4d35      	ldr	r5, [pc, #212]	; (80044c4 <plan_update_velocity_profile_parameters+0xdc>)
  uint8_t block_index = block_buffer_tail;
 80043ee:	4a36      	ldr	r2, [pc, #216]	; (80044c8 <plan_update_velocity_profile_parameters+0xe0>)
 80043f0:	4b36      	ldr	r3, [pc, #216]	; (80044cc <plan_update_velocity_profile_parameters+0xe4>)
{
 80043f2:	b083      	sub	sp, #12
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80043f4:	7a28      	ldrb	r0, [r5, #8]
  uint8_t block_index = block_buffer_tail;
 80043f6:	7814      	ldrb	r4, [r2, #0]
 80043f8:	f893 b000 	ldrb.w	fp, [r3]
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80043fc:	f7fc fc04 	bl	8000c08 <__aeabi_i2f>
 8004400:	4933      	ldr	r1, [pc, #204]	; (80044d0 <plan_update_velocity_profile_parameters+0xe8>)
 8004402:	f7fc fc55 	bl	8000cb0 <__aeabi_fmul>
 8004406:	9001      	str	r0, [sp, #4]
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004408:	7a68      	ldrb	r0, [r5, #9]
 800440a:	f7fc fbfd 	bl	8000c08 <__aeabi_i2f>
 800440e:	4930      	ldr	r1, [pc, #192]	; (80044d0 <plan_update_velocity_profile_parameters+0xe8>)
 8004410:	f7fc fc4e 	bl	8000cb0 <__aeabi_fmul>
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8004414:	4f2f      	ldr	r7, [pc, #188]	; (80044d4 <plan_update_velocity_profile_parameters+0xec>)
 8004416:	9000      	str	r0, [sp, #0]
  while (block_index != block_buffer_head) {
    block = &block_buffer[block_index];
 8004418:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80044dc <plan_update_velocity_profile_parameters+0xf4>
 800441c:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
  while (block_index != block_buffer_head) {
 8004420:	e023      	b.n	800446a <plan_update_velocity_profile_parameters+0x82>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004422:	4641      	mov	r1, r8
 8004424:	9800      	ldr	r0, [sp, #0]
 8004426:	f7fc fc43 	bl	8000cb0 <__aeabi_fmul>
 800442a:	4605      	mov	r5, r0
 800442c:	4649      	mov	r1, r9
 800442e:	4628      	mov	r0, r5
 8004430:	f7fc fdf0 	bl	8001014 <__aeabi_fcmpge>
 8004434:	b900      	cbnz	r0, 8004438 <plan_update_velocity_profile_parameters+0x50>
 8004436:	464d      	mov	r5, r9
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004438:	4629      	mov	r1, r5
 800443a:	4638      	mov	r0, r7
 800443c:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 8004440:	f7fc fdd4 	bl	8000fec <__aeabi_fcmplt>
 8004444:	2800      	cmp	r0, #0
 8004446:	d031      	beq.n	80044ac <plan_update_velocity_profile_parameters+0xc4>
 8004448:	4639      	mov	r1, r7
 800444a:	4638      	mov	r0, r7
 800444c:	f7fc fc30 	bl	8000cb0 <__aeabi_fmul>
 8004450:	4607      	mov	r7, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004452:	4641      	mov	r1, r8
 8004454:	4638      	mov	r0, r7
 8004456:	f7fc fde7 	bl	8001028 <__aeabi_fcmpgt>
 800445a:	bb20      	cbnz	r0, 80044a6 <plan_update_velocity_profile_parameters+0xbe>
 800445c:	61f7      	str	r7, [r6, #28]
  block_index++;
 800445e:	3401      	adds	r4, #1
 8004460:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004462:	2c24      	cmp	r4, #36	; 0x24
 8004464:	bf08      	it	eq
 8004466:	2400      	moveq	r4, #0
 8004468:	462f      	mov	r7, r5
  while (block_index != block_buffer_head) {
 800446a:	455c      	cmp	r4, fp
 800446c:	d024      	beq.n	80044b8 <plan_update_velocity_profile_parameters+0xd0>
    block = &block_buffer[block_index];
 800446e:	00e5      	lsls	r5, r4, #3
 8004470:	1b2e      	subs	r6, r5, r4
 8004472:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004476:	7db3      	ldrb	r3, [r6, #22]
  float nominal_speed = block->programmed_rate;
 8004478:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800447c:	07da      	lsls	r2, r3, #31
 800447e:	d4d0      	bmi.n	8004422 <plan_update_velocity_profile_parameters+0x3a>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004480:	075b      	lsls	r3, r3, #29
 8004482:	d404      	bmi.n	800448e <plan_update_velocity_profile_parameters+0xa6>
 8004484:	4640      	mov	r0, r8
 8004486:	9901      	ldr	r1, [sp, #4]
 8004488:	f7fc fc12 	bl	8000cb0 <__aeabi_fmul>
 800448c:	4680      	mov	r8, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 800448e:	1b2d      	subs	r5, r5, r4
 8004490:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8004494:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8004496:	4641      	mov	r1, r8
 8004498:	4628      	mov	r0, r5
 800449a:	f7fc fdb1 	bl	8001000 <__aeabi_fcmple>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d1c4      	bne.n	800442c <plan_update_velocity_profile_parameters+0x44>
 80044a2:	4645      	mov	r5, r8
 80044a4:	e7c2      	b.n	800442c <plan_update_velocity_profile_parameters+0x44>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80044a6:	f8c6 801c 	str.w	r8, [r6, #28]
 80044aa:	e7d8      	b.n	800445e <plan_update_velocity_profile_parameters+0x76>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 80044ac:	4629      	mov	r1, r5
 80044ae:	4628      	mov	r0, r5
 80044b0:	f7fc fbfe 	bl	8000cb0 <__aeabi_fmul>
 80044b4:	4607      	mov	r7, r0
 80044b6:	e7cc      	b.n	8004452 <plan_update_velocity_profile_parameters+0x6a>
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 80044b8:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <plan_update_velocity_profile_parameters+0xf0>)
 80044ba:	621f      	str	r7, [r3, #32]
}
 80044bc:	b003      	add	sp, #12
 80044be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c2:	bf00      	nop
 80044c4:	200010b0 	.word	0x200010b0
 80044c8:	200009e2 	.word	0x200009e2
 80044cc:	200009e0 	.word	0x200009e0
 80044d0:	3c23d70a 	.word	0x3c23d70a
 80044d4:	7f7fffff 	.word	0x7f7fffff
 80044d8:	200009e4 	.word	0x200009e4
 80044dc:	20000200 	.word	0x20000200

080044e0 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 80044e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e4:	468b      	mov	fp, r1
 80044e6:	4682      	mov	sl, r0
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 80044e8:	4b66      	ldr	r3, [pc, #408]	; (8004684 <plan_buffer_line+0x1a4>)
 80044ea:	4d67      	ldr	r5, [pc, #412]	; (8004688 <plan_buffer_line+0x1a8>)
 80044ec:	781e      	ldrb	r6, [r3, #0]
{
 80044ee:	b093      	sub	sp, #76	; 0x4c
  plan_block_t *block = &block_buffer[block_buffer_head];
 80044f0:	00f7      	lsls	r7, r6, #3
 80044f2:	eba7 0806 	sub.w	r8, r7, r6
 80044f6:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 80044fa:	2238      	movs	r2, #56	; 0x38
 80044fc:	2100      	movs	r1, #0
 80044fe:	4640      	mov	r0, r8
 8004500:	f006 fc07 	bl	800ad12 <memset>
  block->condition = pl_data->condition;
 8004504:	f89b 3008 	ldrb.w	r3, [fp, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 8004508:	f8db 2004 	ldr.w	r2, [fp, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 800450c:	0798      	lsls	r0, r3, #30
  block->condition = pl_data->condition;
 800450e:	f888 3016 	strb.w	r3, [r8, #22]
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004512:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004694 <plan_buffer_line+0x1b4>
    memcpy(position_steps, sys_position, sizeof(sys_position));
 8004516:	bf4c      	ite	mi
 8004518:	4b5c      	ldrmi	r3, [pc, #368]	; (800468c <plan_buffer_line+0x1ac>)
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 800451a:	4b5d      	ldrpl	r3, [pc, #372]	; (8004690 <plan_buffer_line+0x1b0>)
    block->spindle_speed = pl_data->spindle_speed;
 800451c:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004520:	ac06      	add	r4, sp, #24
 8004522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004528:	f8d9 2000 	ldr.w	r2, [r9]
 800452c:	f8da 1000 	ldr.w	r1, [sl]
 8004530:	4610      	mov	r0, r2
 8004532:	9201      	str	r2, [sp, #4]
 8004534:	f7fc fbbc 	bl	8000cb0 <__aeabi_fmul>
 8004538:	f006 fca8 	bl	800ae8c <lroundf>
 800453c:	4686      	mov	lr, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800453e:	1bb9      	subs	r1, r7, r6
 8004540:	9806      	ldr	r0, [sp, #24]
 8004542:	00c9      	lsls	r1, r1, #3
 8004544:	186b      	adds	r3, r5, r1
 8004546:	ebae 0000 	sub.w	r0, lr, r0
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800454a:	691a      	ldr	r2, [r3, #16]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800454c:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8004550:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004554:	4294      	cmp	r4, r2
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004556:	506c      	str	r4, [r5, r1]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004558:	bf38      	it	cc
 800455a:	4614      	movcc	r4, r2
 800455c:	611c      	str	r4, [r3, #16]
 800455e:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004560:	f8cd e008 	str.w	lr, [sp, #8]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004564:	f7fc fb50 	bl	8000c08 <__aeabi_i2f>
 8004568:	9a01      	ldr	r2, [sp, #4]
 800456a:	4611      	mov	r1, r2
 800456c:	f7fc fc54 	bl	8000e18 <__aeabi_fdiv>
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004570:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004572:	900a      	str	r0, [sp, #40]	; 0x28
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004574:	f7fc fd3a 	bl	8000fec <__aeabi_fcmplt>
 8004578:	9b00      	ldr	r3, [sp, #0]
 800457a:	2800      	cmp	r0, #0
 800457c:	f040 8173 	bne.w	8004866 <plan_buffer_line+0x386>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004580:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004584:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004588:	4610      	mov	r0, r2
 800458a:	9201      	str	r2, [sp, #4]
 800458c:	f7fc fb90 	bl	8000cb0 <__aeabi_fmul>
 8004590:	f006 fc7c 	bl	800ae8c <lroundf>
 8004594:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004596:	9807      	ldr	r0, [sp, #28]
 8004598:	1bbb      	subs	r3, r7, r6
 800459a:	1a08      	subs	r0, r1, r0
 800459c:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80045a0:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80045a4:	4574      	cmp	r4, lr
 80045a6:	bf38      	it	cc
 80045a8:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80045aa:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80045ae:	f8c3 e004 	str.w	lr, [r3, #4]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80045b2:	611c      	str	r4, [r3, #16]
 80045b4:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80045b6:	9103      	str	r1, [sp, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80045b8:	f7fc fb26 	bl	8000c08 <__aeabi_i2f>
 80045bc:	9a01      	ldr	r2, [sp, #4]
 80045be:	4611      	mov	r1, r2
 80045c0:	f7fc fc2a 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80045c4:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80045c6:	900b      	str	r0, [sp, #44]	; 0x2c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80045c8:	f7fc fd10 	bl	8000fec <__aeabi_fcmplt>
 80045cc:	9b00      	ldr	r3, [sp, #0]
 80045ce:	2800      	cmp	r0, #0
 80045d0:	f040 8155 	bne.w	800487e <plan_buffer_line+0x39e>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80045d4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80045d8:	f8da 1008 	ldr.w	r1, [sl, #8]
 80045dc:	4610      	mov	r0, r2
 80045de:	9201      	str	r2, [sp, #4]
 80045e0:	f7fc fb66 	bl	8000cb0 <__aeabi_fmul>
 80045e4:	f006 fc52 	bl	800ae8c <lroundf>
 80045e8:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80045ea:	9808      	ldr	r0, [sp, #32]
 80045ec:	1bbb      	subs	r3, r7, r6
 80045ee:	1a08      	subs	r0, r1, r0
 80045f0:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80045f4:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80045f8:	4574      	cmp	r4, lr
 80045fa:	bf38      	it	cc
 80045fc:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80045fe:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004602:	f8c3 e008 	str.w	lr, [r3, #8]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004606:	611c      	str	r4, [r3, #16]
 8004608:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800460a:	9104      	str	r1, [sp, #16]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 800460c:	f7fc fafc 	bl	8000c08 <__aeabi_i2f>
 8004610:	9a01      	ldr	r2, [sp, #4]
 8004612:	4611      	mov	r1, r2
 8004614:	f7fc fc00 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004618:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 800461a:	900c      	str	r0, [sp, #48]	; 0x30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800461c:	f7fc fce6 	bl	8000fec <__aeabi_fcmplt>
 8004620:	9b00      	ldr	r3, [sp, #0]
 8004622:	2800      	cmp	r0, #0
 8004624:	f040 8125 	bne.w	8004872 <plan_buffer_line+0x392>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004628:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800462c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8004630:	4618      	mov	r0, r3
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	f7fc fb3c 	bl	8000cb0 <__aeabi_fmul>
 8004638:	f006 fc28 	bl	800ae8c <lroundf>
 800463c:	4602      	mov	r2, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800463e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004640:	eba7 0a06 	sub.w	sl, r7, r6
 8004644:	1a10      	subs	r0, r2, r0
 8004646:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 800464a:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800464e:	428c      	cmp	r4, r1
 8004650:	bf38      	it	cc
 8004652:	460c      	movcc	r4, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004654:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8004658:	f8ca 100c 	str.w	r1, [sl, #12]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800465c:	f8ca 4010 	str.w	r4, [sl, #16]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004660:	9205      	str	r2, [sp, #20]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004662:	f7fc fad1 	bl	8000c08 <__aeabi_i2f>
 8004666:	9b00      	ldr	r3, [sp, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	f7fc fbd5 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800466e:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004670:	900d      	str	r0, [sp, #52]	; 0x34
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004672:	f7fc fcbb 	bl	8000fec <__aeabi_fcmplt>
 8004676:	b978      	cbnz	r0, 8004698 <plan_buffer_line+0x1b8>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004678:	b9bc      	cbnz	r4, 80046aa <plan_buffer_line+0x1ca>
 800467a:	4620      	mov	r0, r4

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 800467c:	b013      	add	sp, #76	; 0x4c
 800467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004682:	bf00      	nop
 8004684:	200009e0 	.word	0x200009e0
 8004688:	20000200 	.word	0x20000200
 800468c:	200010d8 	.word	0x200010d8
 8004690:	200009e4 	.word	0x200009e4
 8004694:	2000126c 	.word	0x2000126c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004698:	4a99      	ldr	r2, [pc, #612]	; (8004900 <plan_buffer_line+0x420>)
 800469a:	f8ba 3014 	ldrh.w	r3, [sl, #20]
 800469e:	88d2      	ldrh	r2, [r2, #6]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8aa 3014 	strh.w	r3, [sl, #20]
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 80046a6:	2c00      	cmp	r4, #0
 80046a8:	d0e7      	beq.n	800467a <plan_buffer_line+0x19a>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 80046aa:	ac0a      	add	r4, sp, #40	; 0x28
 80046ac:	4620      	mov	r0, r4
 80046ae:	f7ff fc2d 	bl	8003f0c <convert_delta_vector_to_unit_vector>
 80046b2:	eba7 0a06 	sub.w	sl, r7, r6
 80046b6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80046ba:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 80046be:	4621      	mov	r1, r4
 80046c0:	4890      	ldr	r0, [pc, #576]	; (8004904 <plan_buffer_line+0x424>)
 80046c2:	f7ff fc8b 	bl	8003fdc <limit_value_by_axis_maximum>
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 80046c6:	4621      	mov	r1, r4
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 80046c8:	f8ca 0020 	str.w	r0, [sl, #32]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 80046cc:	488e      	ldr	r0, [pc, #568]	; (8004908 <plan_buffer_line+0x428>)
 80046ce:	f7ff fc85 	bl	8003fdc <limit_value_by_axis_maximum>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 80046d2:	f89a 3016 	ldrb.w	r3, [sl, #22]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 80046d6:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 80046da:	07d9      	lsls	r1, r3, #31
 80046dc:	f100 80d5 	bmi.w	800488a <plan_buffer_line+0x3aa>
    block->programmed_rate = pl_data->feed_rate;
 80046e0:	f8db 1000 	ldr.w	r1, [fp]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80046e4:	071a      	lsls	r2, r3, #28
    block->programmed_rate = pl_data->feed_rate;
 80046e6:	f8ca 1030 	str.w	r1, [sl, #48]	; 0x30
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80046ea:	d507      	bpl.n	80046fc <plan_buffer_line+0x21c>
 80046ec:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	f7fc fadd 	bl	8000cb0 <__aeabi_fmul>
 80046f6:	9b00      	ldr	r3, [sp, #0]
 80046f8:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80046fc:	4a83      	ldr	r2, [pc, #524]	; (800490c <plan_buffer_line+0x42c>)
 80046fe:	4984      	ldr	r1, [pc, #528]	; (8004910 <plan_buffer_line+0x430>)
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	7809      	ldrb	r1, [r1, #0]
 8004704:	4291      	cmp	r1, r2
 8004706:	f000 80c3 	beq.w	8004890 <plan_buffer_line+0x3b0>
 800470a:	079b      	lsls	r3, r3, #30
 800470c:	f100 80c0 	bmi.w	8004890 <plan_buffer_line+0x3b0>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004710:	4b80      	ldr	r3, [pc, #512]	; (8004914 <plan_buffer_line+0x434>)
 8004712:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004716:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800471a:	4650      	mov	r0, sl
 800471c:	4659      	mov	r1, fp
 800471e:	f7fc fac7 	bl	8000cb0 <__aeabi_fmul>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004722:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004724:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004728:	4650      	mov	r0, sl
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800472a:	9300      	str	r3, [sp, #0]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800472c:	f7fc f9b6 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004730:	4b78      	ldr	r3, [pc, #480]	; (8004914 <plan_buffer_line+0x434>)
 8004732:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8004736:	f8d3 b014 	ldr.w	fp, [r3, #20]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800473a:	900e      	str	r0, [sp, #56]	; 0x38
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800473c:	4659      	mov	r1, fp
 800473e:	4650      	mov	r0, sl
 8004740:	f7fc fab6 	bl	8000cb0 <__aeabi_fmul>
 8004744:	9b00      	ldr	r3, [sp, #0]
 8004746:	4601      	mov	r1, r0
 8004748:	4618      	mov	r0, r3
 800474a:	f7fc f9a7 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800474e:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004750:	9001      	str	r0, [sp, #4]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004752:	4650      	mov	r0, sl
 8004754:	f7fc f9a2 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004758:	4b6e      	ldr	r3, [pc, #440]	; (8004914 <plan_buffer_line+0x434>)
 800475a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800475e:	699b      	ldr	r3, [r3, #24]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004760:	900f      	str	r0, [sp, #60]	; 0x3c
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004762:	4619      	mov	r1, r3
 8004764:	4658      	mov	r0, fp
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	f7fc faa2 	bl	8000cb0 <__aeabi_fmul>
 800476c:	9a01      	ldr	r2, [sp, #4]
 800476e:	4601      	mov	r1, r0
 8004770:	4610      	mov	r0, r2
 8004772:	f7fc f993 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004776:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004778:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800477a:	4619      	mov	r1, r3
 800477c:	4658      	mov	r0, fp
 800477e:	f7fc f98d 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004782:	4b64      	ldr	r3, [pc, #400]	; (8004914 <plan_buffer_line+0x434>)
 8004784:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004788:	69db      	ldr	r3, [r3, #28]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800478a:	9010      	str	r0, [sp, #64]	; 0x40
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800478c:	4659      	mov	r1, fp
 800478e:	4618      	mov	r0, r3
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	f7fc fa8d 	bl	8000cb0 <__aeabi_fmul>
 8004796:	4601      	mov	r1, r0
 8004798:	4650      	mov	r0, sl
 800479a:	f7fc f97f 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800479e:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047a0:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047a2:	4619      	mov	r1, r3
 80047a4:	4658      	mov	r0, fp
 80047a6:	f7fc f979 	bl	8000a9c <__aeabi_fsub>
    if (junction_cos_theta > 0.999999f) {
 80047aa:	495b      	ldr	r1, [pc, #364]	; (8004918 <plan_buffer_line+0x438>)
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047ac:	9011      	str	r0, [sp, #68]	; 0x44
    if (junction_cos_theta > 0.999999f) {
 80047ae:	4650      	mov	r0, sl
 80047b0:	f7fc fc3a 	bl	8001028 <__aeabi_fcmpgt>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	f000 8098 	beq.w	80048ea <plan_buffer_line+0x40a>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 80047ba:	2200      	movs	r2, #0
 80047bc:	1bbb      	subs	r3, r7, r6
 80047be:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80047c4:	1bbb      	subs	r3, r7, r6
 80047c6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80047ca:	7d9a      	ldrb	r2, [r3, #22]
 80047cc:	0790      	lsls	r0, r2, #30
 80047ce:	d466      	bmi.n	800489e <plan_buffer_line+0x3be>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80047d0:	07d1      	lsls	r1, r2, #31
  float nominal_speed = block->programmed_rate;
 80047d2:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80047d6:	d566      	bpl.n	80048a6 <plan_buffer_line+0x3c6>
 80047d8:	4b50      	ldr	r3, [pc, #320]	; (800491c <plan_buffer_line+0x43c>)
 80047da:	7a58      	ldrb	r0, [r3, #9]
 80047dc:	f7fc fa14 	bl	8000c08 <__aeabi_i2f>
 80047e0:	4649      	mov	r1, r9
 80047e2:	f7fc fa65 	bl	8000cb0 <__aeabi_fmul>
 80047e6:	494e      	ldr	r1, [pc, #312]	; (8004920 <plan_buffer_line+0x440>)
 80047e8:	f7fc fa62 	bl	8000cb0 <__aeabi_fmul>
 80047ec:	4605      	mov	r5, r0
 80047ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80047f2:	4628      	mov	r0, r5
 80047f4:	f7fc fc0e 	bl	8001014 <__aeabi_fcmpge>
 80047f8:	b908      	cbnz	r0, 80047fe <plan_buffer_line+0x31e>
 80047fa:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 80047fe:	4e45      	ldr	r6, [pc, #276]	; (8004914 <plan_buffer_line+0x434>)
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004800:	4629      	mov	r1, r5
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004802:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8004806:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 800480a:	4648      	mov	r0, r9
 800480c:	f7fc fbee 	bl	8000fec <__aeabi_fcmplt>
 8004810:	2800      	cmp	r0, #0
 8004812:	d064      	beq.n	80048de <plan_buffer_line+0x3fe>
 8004814:	4649      	mov	r1, r9
 8004816:	4648      	mov	r0, r9
 8004818:	f7fc fa4a 	bl	8000cb0 <__aeabi_fmul>
 800481c:	4681      	mov	r9, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800481e:	4639      	mov	r1, r7
 8004820:	4648      	mov	r0, r9
 8004822:	f7fc fc01 	bl	8001028 <__aeabi_fcmpgt>
 8004826:	2800      	cmp	r0, #0
 8004828:	d156      	bne.n	80048d8 <plan_buffer_line+0x3f8>
 800482a:	f8c8 901c 	str.w	r9, [r8, #28]
    block_buffer_head = next_buffer_head;
 800482e:	4a3d      	ldr	r2, [pc, #244]	; (8004924 <plan_buffer_line+0x444>)
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004830:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8004930 <plan_buffer_line+0x450>
    block_buffer_head = next_buffer_head;
 8004834:	7811      	ldrb	r1, [r2, #0]
 8004836:	4836      	ldr	r0, [pc, #216]	; (8004910 <plan_buffer_line+0x430>)
  block_index++;
 8004838:	1c4b      	adds	r3, r1, #1
 800483a:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800483c:	2b24      	cmp	r3, #36	; 0x24
 800483e:	bf08      	it	eq
 8004840:	2300      	moveq	r3, #0
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004842:	af02      	add	r7, sp, #8
    pl.previous_nominal_speed = nominal_speed;
 8004844:	6235      	str	r5, [r6, #32]
    block_buffer_head = next_buffer_head;
 8004846:	7001      	strb	r1, [r0, #0]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8004848:	7013      	strb	r3, [r2, #0]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 800484a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800484e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004852:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8004856:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    planner_recalculate();
 800485a:	f7ff fc15 	bl	8004088 <planner_recalculate>
  return(PLAN_OK);
 800485e:	2001      	movs	r0, #1
}
 8004860:	b013      	add	sp, #76	; 0x4c
 8004862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004866:	4a26      	ldr	r2, [pc, #152]	; (8004900 <plan_buffer_line+0x420>)
 8004868:	8a99      	ldrh	r1, [r3, #20]
 800486a:	8812      	ldrh	r2, [r2, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	829a      	strh	r2, [r3, #20]
 8004870:	e686      	b.n	8004580 <plan_buffer_line+0xa0>
 8004872:	4923      	ldr	r1, [pc, #140]	; (8004900 <plan_buffer_line+0x420>)
 8004874:	8a9a      	ldrh	r2, [r3, #20]
 8004876:	8889      	ldrh	r1, [r1, #4]
 8004878:	430a      	orrs	r2, r1
 800487a:	829a      	strh	r2, [r3, #20]
 800487c:	e6d4      	b.n	8004628 <plan_buffer_line+0x148>
 800487e:	4a20      	ldr	r2, [pc, #128]	; (8004900 <plan_buffer_line+0x420>)
 8004880:	8a99      	ldrh	r1, [r3, #20]
 8004882:	8852      	ldrh	r2, [r2, #2]
 8004884:	430a      	orrs	r2, r1
 8004886:	829a      	strh	r2, [r3, #20]
 8004888:	e6a4      	b.n	80045d4 <plan_buffer_line+0xf4>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 800488a:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
 800488e:	e735      	b.n	80046fc <plan_buffer_line+0x21c>
    block->entry_speed_sqr = 0.0f;
 8004890:	2200      	movs	r2, #0
 8004892:	1bbb      	subs	r3, r7, r6
 8004894:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004898:	619a      	str	r2, [r3, #24]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
 800489c:	e792      	b.n	80047c4 <plan_buffer_line+0x2e4>
  return(PLAN_OK);
 800489e:	2001      	movs	r0, #1
}
 80048a0:	b013      	add	sp, #76	; 0x4c
 80048a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80048a6:	0753      	lsls	r3, r2, #29
 80048a8:	d40a      	bmi.n	80048c0 <plan_buffer_line+0x3e0>
 80048aa:	4b1c      	ldr	r3, [pc, #112]	; (800491c <plan_buffer_line+0x43c>)
 80048ac:	7a18      	ldrb	r0, [r3, #8]
 80048ae:	f7fc f9ab 	bl	8000c08 <__aeabi_i2f>
 80048b2:	4649      	mov	r1, r9
 80048b4:	f7fc f9fc 	bl	8000cb0 <__aeabi_fmul>
 80048b8:	4919      	ldr	r1, [pc, #100]	; (8004920 <plan_buffer_line+0x440>)
 80048ba:	f7fc f9f9 	bl	8000cb0 <__aeabi_fmul>
 80048be:	4681      	mov	r9, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80048c0:	1bbe      	subs	r6, r7, r6
 80048c2:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 80048c6:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 80048c8:	4649      	mov	r1, r9
 80048ca:	4628      	mov	r0, r5
 80048cc:	f7fc fb98 	bl	8001000 <__aeabi_fcmple>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d18c      	bne.n	80047ee <plan_buffer_line+0x30e>
 80048d4:	464d      	mov	r5, r9
 80048d6:	e78a      	b.n	80047ee <plan_buffer_line+0x30e>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80048d8:	f8c8 701c 	str.w	r7, [r8, #28]
 80048dc:	e7a7      	b.n	800482e <plan_buffer_line+0x34e>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 80048de:	4629      	mov	r1, r5
 80048e0:	4628      	mov	r0, r5
 80048e2:	f7fc f9e5 	bl	8000cb0 <__aeabi_fmul>
 80048e6:	4681      	mov	r9, r0
 80048e8:	e799      	b.n	800481e <plan_buffer_line+0x33e>
      if (junction_cos_theta < -0.999999f) {
 80048ea:	490f      	ldr	r1, [pc, #60]	; (8004928 <plan_buffer_line+0x448>)
 80048ec:	4650      	mov	r0, sl
 80048ee:	f7fc fb7d 	bl	8000fec <__aeabi_fcmplt>
 80048f2:	b1f8      	cbz	r0, 8004934 <plan_buffer_line+0x454>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 80048f4:	1bbb      	subs	r3, r7, r6
 80048f6:	4a0d      	ldr	r2, [pc, #52]	; (800492c <plan_buffer_line+0x44c>)
 80048f8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80048fc:	629a      	str	r2, [r3, #40]	; 0x28
 80048fe:	e761      	b.n	80047c4 <plan_buffer_line+0x2e4>
 8004900:	0800c098 	.word	0x0800c098
 8004904:	2000128c 	.word	0x2000128c
 8004908:	2000127c 	.word	0x2000127c
 800490c:	200009e2 	.word	0x200009e2
 8004910:	200009e0 	.word	0x200009e0
 8004914:	200009e4 	.word	0x200009e4
 8004918:	3f7fffef 	.word	0x3f7fffef
 800491c:	200010b0 	.word	0x200010b0
 8004920:	3c23d70a 	.word	0x3c23d70a
 8004924:	200009e3 	.word	0x200009e3
 8004928:	bf7fffef 	.word	0xbf7fffef
 800492c:	7f7fffff 	.word	0x7f7fffff
 8004930:	200009f4 	.word	0x200009f4
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 8004934:	a80e      	add	r0, sp, #56	; 0x38
 8004936:	f7ff fae9 	bl	8003f0c <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 800493a:	a90e      	add	r1, sp, #56	; 0x38
 800493c:	4818      	ldr	r0, [pc, #96]	; (80049a0 <plan_buffer_line+0x4c0>)
 800493e:	f7ff fb4d 	bl	8003fdc <limit_value_by_axis_maximum>
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004942:	4651      	mov	r1, sl
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004944:	9000      	str	r0, [sp, #0]
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004946:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800494a:	f7fc f8a7 	bl	8000a9c <__aeabi_fsub>
 800494e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004952:	f7fc f9ad 	bl	8000cb0 <__aeabi_fmul>
 8004956:	f006 fafd 	bl	800af54 <sqrtf>
 800495a:	4683      	mov	fp, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 800495c:	9b00      	ldr	r3, [sp, #0]
 800495e:	4659      	mov	r1, fp
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc f9a5 	bl	8000cb0 <__aeabi_fmul>
 8004966:	f8d9 1048 	ldr.w	r1, [r9, #72]	; 0x48
 800496a:	f7fc f9a1 	bl	8000cb0 <__aeabi_fmul>
 800496e:	4659      	mov	r1, fp
 8004970:	4681      	mov	r9, r0
 8004972:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004976:	f7fc f891 	bl	8000a9c <__aeabi_fsub>
 800497a:	4601      	mov	r1, r0
 800497c:	4648      	mov	r0, r9
 800497e:	f7fc fa4b 	bl	8000e18 <__aeabi_fdiv>
 8004982:	eba7 0a06 	sub.w	sl, r7, r6
 8004986:	2100      	movs	r1, #0
 8004988:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800498c:	4681      	mov	r9, r0
 800498e:	f7fc fb41 	bl	8001014 <__aeabi_fcmpge>
 8004992:	b908      	cbnz	r0, 8004998 <plan_buffer_line+0x4b8>
 8004994:	f04f 0900 	mov.w	r9, #0
 8004998:	f8ca 9028 	str.w	r9, [sl, #40]	; 0x28
 800499c:	e712      	b.n	80047c4 <plan_buffer_line+0x2e4>
 800499e:	bf00      	nop
 80049a0:	2000128c 	.word	0x2000128c

080049a4 <plan_sync_position>:


// Reset the planner position vectors. Called by the system abort/initialization routine.
void plan_sync_position()
{
 80049a4:	b410      	push	{r4}
 80049a6:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <plan_sync_position+0x10>)
 80049a8:	4c03      	ldr	r4, [pc, #12]	; (80049b8 <plan_sync_position+0x14>)
 80049aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
    #else
      pl.position[idx] = sys_position[idx];
    #endif
  }
}
 80049b0:	bc10      	pop	{r4}
 80049b2:	4770      	bx	lr
 80049b4:	200010d8 	.word	0x200010d8
 80049b8:	200009e4 	.word	0x200009e4

080049bc <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 80049bc:	4a06      	ldr	r2, [pc, #24]	; (80049d8 <plan_get_block_buffer_available+0x1c>)
 80049be:	4b07      	ldr	r3, [pc, #28]	; (80049dc <plan_get_block_buffer_available+0x20>)
 80049c0:	7812      	ldrb	r2, [r2, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	bf2c      	ite	cs
 80049c8:	f103 0023 	addcs.w	r0, r3, #35	; 0x23
  return((block_buffer_tail-block_buffer_head-1));
 80049cc:	f103 30ff 	addcc.w	r0, r3, #4294967295
 80049d0:	1a80      	subs	r0, r0, r2
 80049d2:	b2c0      	uxtb	r0, r0
}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	200009e0 	.word	0x200009e0
 80049dc:	200009e2 	.word	0x200009e2

080049e0 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 80049e0:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 80049e2:	f003 fe7f 	bl	80086e4 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 80049e6:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <plan_cycle_reinitialize+0x18>)
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <plan_cycle_reinitialize+0x1c>)
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 80049ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 80049f2:	f7ff bb49 	b.w	8004088 <planner_recalculate>
 80049f6:	bf00      	nop
 80049f8:	200009e2 	.word	0x200009e2
 80049fc:	200009e1 	.word	0x200009e1

08004a00 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004a00:	b510      	push	{r4, lr}
 8004a02:	4604      	mov	r4, r0
  while (*s)
 8004a04:	7800      	ldrb	r0, [r0, #0]
 8004a06:	b128      	cbz	r0, 8004a14 <printString+0x14>
    serial_write(*s++);
 8004a08:	f002 fc7c 	bl	8007304 <serial_write>
  while (*s)
 8004a0c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d1f9      	bne.n	8004a08 <printString+0x8>
 8004a14:	bd10      	pop	{r4, pc}
 8004a16:	bf00      	nop

08004a18 <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8004a18:	2863      	cmp	r0, #99	; 0x63
{
 8004a1a:	b570      	push	{r4, r5, r6, lr}
 8004a1c:	4605      	mov	r5, r0
  if (n >= 100) { // 100-255
 8004a1e:	d920      	bls.n	8004a62 <print_uint8_base10+0x4a>
    digit_a = '0' + n % 10;
    n /= 10;
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
    n /= 10;
 8004a20:	481c      	ldr	r0, [pc, #112]	; (8004a94 <print_uint8_base10+0x7c>)
 8004a22:	fba0 3005 	umull	r3, r0, r0, r5
 8004a26:	0940      	lsrs	r0, r0, #5
  }
  serial_write('0' + n);
 8004a28:	3030      	adds	r0, #48	; 0x30
 8004a2a:	f002 fc6b 	bl	8007304 <serial_write>
    n /= 10;
 8004a2e:	481a      	ldr	r0, [pc, #104]	; (8004a98 <print_uint8_base10+0x80>)
 8004a30:	fba0 3405 	umull	r3, r4, r0, r5
 8004a34:	08e4      	lsrs	r4, r4, #3
    digit_b = '0' + n % 10;
 8004a36:	b2e3      	uxtb	r3, r4
 8004a38:	fba0 2003 	umull	r2, r0, r0, r3
 8004a3c:	08c0      	lsrs	r0, r0, #3
 8004a3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a42:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 8004a46:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004a48:	b2c0      	uxtb	r0, r0
 8004a4a:	f002 fc5b 	bl	8007304 <serial_write>
    digit_a = '0' + n % 10;
 8004a4e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8004a52:	eba5 0040 	sub.w	r0, r5, r0, lsl #1
 8004a56:	3030      	adds	r0, #48	; 0x30
  if (digit_a) { serial_write(digit_a); }
 8004a58:	b2c0      	uxtb	r0, r0
}
 8004a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (digit_a) { serial_write(digit_a); }
 8004a5e:	f002 bc51 	b.w	8007304 <serial_write>
  if (n >= 10) { // 10-99
 8004a62:	2809      	cmp	r0, #9
 8004a64:	d805      	bhi.n	8004a72 <print_uint8_base10+0x5a>
}
 8004a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  serial_write('0' + n);
 8004a6a:	3030      	adds	r0, #48	; 0x30
 8004a6c:	b2c0      	uxtb	r0, r0
 8004a6e:	f002 bc49 	b.w	8007304 <serial_write>
    n /= 10;
 8004a72:	260a      	movs	r6, #10
 8004a74:	fbb0 f4f6 	udiv	r4, r0, r6
  serial_write('0' + n);
 8004a78:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004a7c:	b2c0      	uxtb	r0, r0
 8004a7e:	f002 fc41 	bl	8007304 <serial_write>
    digit_b = '0' + n % 10;
 8004a82:	fb06 5014 	mls	r0, r6, r4, r5
}
 8004a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digit_b = '0' + n % 10;
 8004a8a:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004a8c:	b2c0      	uxtb	r0, r0
 8004a8e:	f002 bc39 	b.w	8007304 <serial_write>
 8004a92:	bf00      	nop
 8004a94:	51eb851f 	.word	0x51eb851f
 8004a98:	cccccccd 	.word	0xcccccccd

08004a9c <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9e:	460d      	mov	r5, r1
 8004aa0:	b085      	sub	sp, #20
  if (n < 0) {
 8004aa2:	2100      	movs	r1, #0
{
 8004aa4:	4606      	mov	r6, r0
  if (n < 0) {
 8004aa6:	f7fc faa1 	bl	8000fec <__aeabi_fcmplt>
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	d152      	bne.n	8004b54 <printFloat+0xb8>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004aae:	2d01      	cmp	r5, #1
 8004ab0:	d956      	bls.n	8004b60 <printFloat+0xc4>
 8004ab2:	462c      	mov	r4, r5
    n *= 100;
 8004ab4:	4f2f      	ldr	r7, [pc, #188]	; (8004b74 <printFloat+0xd8>)
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	4639      	mov	r1, r7
 8004aba:	f7fc f8f9 	bl	8000cb0 <__aeabi_fmul>
    decimals -= 2;
 8004abe:	3c02      	subs	r4, #2
 8004ac0:	b2e4      	uxtb	r4, r4
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004ac2:	2c01      	cmp	r4, #1
    n *= 100;
 8004ac4:	4606      	mov	r6, r0
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004ac6:	d8f6      	bhi.n	8004ab6 <printFloat+0x1a>
 8004ac8:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 8004acc:	b123      	cbz	r3, 8004ad8 <printFloat+0x3c>
 8004ace:	4630      	mov	r0, r6
 8004ad0:	4929      	ldr	r1, [pc, #164]	; (8004b78 <printFloat+0xdc>)
 8004ad2:	f7fc f8ed 	bl	8000cb0 <__aeabi_fmul>
 8004ad6:	4606      	mov	r6, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004ad8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004adc:	4630      	mov	r0, r6
 8004ade:	f7fb ffdf 	bl	8000aa0 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004ae2:	f7fc fac1 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d03c      	beq.n	8004b64 <printFloat+0xc8>
 8004aea:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004aec:	4e23      	ldr	r6, [pc, #140]	; (8004b7c <printFloat+0xe0>)
 8004aee:	fba6 1300 	umull	r1, r3, r6, r0
 8004af2:	08db      	lsrs	r3, r3, #3
 8004af4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004af8:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004afc:	1c54      	adds	r4, r2, #1
 8004afe:	a904      	add	r1, sp, #16
 8004b00:	3030      	adds	r0, #48	; 0x30
 8004b02:	440a      	add	r2, r1
 8004b04:	b2e4      	uxtb	r4, r4
 8004b06:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004b0a:	4622      	mov	r2, r4
  while(a > 0) {
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1ed      	bne.n	8004aee <printFloat+0x52>
    a /= 10;
  }
  while (i < decimal_places) {
 8004b12:	42a5      	cmp	r5, r4
 8004b14:	d928      	bls.n	8004b68 <printFloat+0xcc>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b16:	1e6a      	subs	r2, r5, #1
 8004b18:	1b12      	subs	r2, r2, r4
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	3201      	adds	r2, #1
 8004b1e:	eb0d 0004 	add.w	r0, sp, r4
 8004b22:	2130      	movs	r1, #48	; 0x30
 8004b24:	f006 f8f5 	bl	800ad12 <memset>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
    buf[i++] = '0';
 8004b28:	2230      	movs	r2, #48	; 0x30
 8004b2a:	ab04      	add	r3, sp, #16
 8004b2c:	1c6c      	adds	r4, r5, #1
 8004b2e:	442b      	add	r3, r5
 8004b30:	f803 2c10 	strb.w	r2, [r3, #-16]
 8004b34:	b2e4      	uxtb	r4, r4
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004b36:	b15c      	cbz	r4, 8004b50 <printFloat+0xb4>
 8004b38:	eb0d 0604 	add.w	r6, sp, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004b3c:	42a5      	cmp	r5, r4
 8004b3e:	d015      	beq.n	8004b6c <printFloat+0xd0>
    serial_write(buf[i-1]);
 8004b40:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004b44:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004b46:	f002 fbdd 	bl	8007304 <serial_write>
  for (; i > 0; i--) {
 8004b4a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004b4e:	d1f5      	bne.n	8004b3c <printFloat+0xa0>
  }
}
 8004b50:	b005      	add	sp, #20
 8004b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    serial_write('-');
 8004b54:	202d      	movs	r0, #45	; 0x2d
 8004b56:	f002 fbd5 	bl	8007304 <serial_write>
    n = -n;
 8004b5a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004b5e:	e7a6      	b.n	8004aae <printFloat+0x12>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004b60:	462b      	mov	r3, r5
 8004b62:	e7b3      	b.n	8004acc <printFloat+0x30>
  uint8_t i = 0;
 8004b64:	4604      	mov	r4, r0
 8004b66:	e7d4      	b.n	8004b12 <printFloat+0x76>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004b68:	d1e5      	bne.n	8004b36 <printFloat+0x9a>
 8004b6a:	e7dd      	b.n	8004b28 <printFloat+0x8c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004b6c:	202e      	movs	r0, #46	; 0x2e
 8004b6e:	f002 fbc9 	bl	8007304 <serial_write>
 8004b72:	e7e5      	b.n	8004b40 <printFloat+0xa4>
 8004b74:	42c80000 	.word	0x42c80000
 8004b78:	41200000 	.word	0x41200000
 8004b7c:	cccccccd 	.word	0xcccccccd

08004b80 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004b80:	b530      	push	{r4, r5, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004b82:	4b6e      	ldr	r3, [pc, #440]	; (8004d3c <printFloat_CoordValue+0x1bc>)
void printFloat_CoordValue(float n) {
 8004b84:	b085      	sub	sp, #20
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004b86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004b8a:	07db      	lsls	r3, r3, #31
 8004b8c:	d452      	bmi.n	8004c34 <printFloat_CoordValue+0xb4>
  if (n < 0) {
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4604      	mov	r4, r0
 8004b92:	f7fc fa2b 	bl	8000fec <__aeabi_fcmplt>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	f040 80a8 	bne.w	8004cec <printFloat_CoordValue+0x16c>
  if (decimals) { n *= 10; }
 8004b9c:	4968      	ldr	r1, [pc, #416]	; (8004d40 <printFloat_CoordValue+0x1c0>)
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f7fc f886 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004ba4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ba8:	f7fb ff7a 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004bac:	f7fc fa5c 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	f000 80a1 	beq.w	8004cf8 <printFloat_CoordValue+0x178>
 8004bb6:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004bb8:	4d62      	ldr	r5, [pc, #392]	; (8004d44 <printFloat_CoordValue+0x1c4>)
 8004bba:	e000      	b.n	8004bbe <printFloat_CoordValue+0x3e>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	fba5 2300 	umull	r2, r3, r5, r0
 8004bc2:	08db      	lsrs	r3, r3, #3
 8004bc4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004bc8:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8004bcc:	aa04      	add	r2, sp, #16
 8004bce:	3030      	adds	r0, #48	; 0x30
 8004bd0:	1c4c      	adds	r4, r1, #1
 8004bd2:	440a      	add	r2, r1
 8004bd4:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004bd8:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 8004bda:	4618      	mov	r0, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ed      	bne.n	8004bbc <printFloat_CoordValue+0x3c>
  while (i < decimal_places) {
 8004be0:	2c02      	cmp	r4, #2
 8004be2:	d816      	bhi.n	8004c12 <printFloat_CoordValue+0x92>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004be4:	2230      	movs	r2, #48	; 0x30
 8004be6:	1c8b      	adds	r3, r1, #2
 8004be8:	a804      	add	r0, sp, #16
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4404      	add	r4, r0
  while (i < decimal_places) {
 8004bee:	2b03      	cmp	r3, #3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bf0:	f804 2c10 	strb.w	r2, [r4, #-16]
  while (i < decimal_places) {
 8004bf4:	d007      	beq.n	8004c06 <printFloat_CoordValue+0x86>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bf6:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004bf8:	29ff      	cmp	r1, #255	; 0xff
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bfa:	f803 2c10 	strb.w	r2, [r3, #-16]
  while (i < decimal_places) {
 8004bfe:	d102      	bne.n	8004c06 <printFloat_CoordValue+0x86>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c00:	2330      	movs	r3, #48	; 0x30
 8004c02:	f88d 3002 	strb.w	r3, [sp, #2]
    buf[i++] = '0';
 8004c06:	2330      	movs	r3, #48	; 0x30
 8004c08:	2404      	movs	r4, #4
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	f88d 3003 	strb.w	r3, [sp, #3]
 8004c10:	e005      	b.n	8004c1e <printFloat_CoordValue+0x9e>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004c12:	2c03      	cmp	r4, #3
 8004c14:	d0f7      	beq.n	8004c06 <printFloat_CoordValue+0x86>
 8004c16:	ab04      	add	r3, sp, #16
 8004c18:	4423      	add	r3, r4
 8004c1a:	f813 5c11 	ldrb.w	r5, [r3, #-17]
 8004c1e:	3c01      	subs	r4, #1
 8004c20:	b2e4      	uxtb	r4, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004c22:	2c02      	cmp	r4, #2
 8004c24:	d07b      	beq.n	8004d1e <printFloat_CoordValue+0x19e>
    serial_write(buf[i-1]);
 8004c26:	4628      	mov	r0, r5
 8004c28:	f002 fb6c 	bl	8007304 <serial_write>
  for (; i > 0; i--) {
 8004c2c:	2c00      	cmp	r4, #0
 8004c2e:	d1f2      	bne.n	8004c16 <printFloat_CoordValue+0x96>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8004c30:	b005      	add	sp, #20
 8004c32:	bd30      	pop	{r4, r5, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004c34:	4944      	ldr	r1, [pc, #272]	; (8004d48 <printFloat_CoordValue+0x1c8>)
 8004c36:	f7fc f83b 	bl	8000cb0 <__aeabi_fmul>
  if (n < 0) {
 8004c3a:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004c3c:	4604      	mov	r4, r0
  if (n < 0) {
 8004c3e:	f7fc f9d5 	bl	8000fec <__aeabi_fcmplt>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d15e      	bne.n	8004d04 <printFloat_CoordValue+0x184>
    n *= 100;
 8004c46:	4941      	ldr	r1, [pc, #260]	; (8004d4c <printFloat_CoordValue+0x1cc>)
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7fc f831 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004c4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004c52:	f7fb ff25 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004c56:	f7fc fa07 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d058      	beq.n	8004d10 <printFloat_CoordValue+0x190>
 8004c5e:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004c60:	4d38      	ldr	r5, [pc, #224]	; (8004d44 <printFloat_CoordValue+0x1c4>)
 8004c62:	e000      	b.n	8004c66 <printFloat_CoordValue+0xe6>
 8004c64:	4621      	mov	r1, r4
 8004c66:	fba5 2300 	umull	r2, r3, r5, r0
 8004c6a:	08db      	lsrs	r3, r3, #3
 8004c6c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004c70:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8004c74:	aa04      	add	r2, sp, #16
 8004c76:	3030      	adds	r0, #48	; 0x30
 8004c78:	1c4c      	adds	r4, r1, #1
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004c80:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 8004c82:	4618      	mov	r0, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1ed      	bne.n	8004c64 <printFloat_CoordValue+0xe4>
  while (i < decimal_places) {
 8004c88:	2c03      	cmp	r4, #3
 8004c8a:	d81e      	bhi.n	8004cca <printFloat_CoordValue+0x14a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c8c:	2230      	movs	r2, #48	; 0x30
 8004c8e:	1c8b      	adds	r3, r1, #2
 8004c90:	a804      	add	r0, sp, #16
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	4404      	add	r4, r0
  while (i < decimal_places) {
 8004c96:	2b04      	cmp	r3, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c98:	f804 2c10 	strb.w	r2, [r4, #-16]
  while (i < decimal_places) {
 8004c9c:	d00f      	beq.n	8004cbe <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c9e:	3103      	adds	r1, #3
 8004ca0:	b2c9      	uxtb	r1, r1
 8004ca2:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004ca4:	2904      	cmp	r1, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ca6:	f803 2c10 	strb.w	r2, [r3, #-16]
  while (i < decimal_places) {
 8004caa:	d008      	beq.n	8004cbe <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cac:	2330      	movs	r3, #48	; 0x30
 8004cae:	aa04      	add	r2, sp, #16
 8004cb0:	440a      	add	r2, r1
  while (i < decimal_places) {
 8004cb2:	2902      	cmp	r1, #2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cb4:	f802 3c10 	strb.w	r3, [r2, #-16]
  while (i < decimal_places) {
 8004cb8:	d101      	bne.n	8004cbe <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cba:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[i++] = '0';
 8004cbe:	2330      	movs	r3, #48	; 0x30
 8004cc0:	2405      	movs	r4, #5
 8004cc2:	461d      	mov	r5, r3
 8004cc4:	f88d 3004 	strb.w	r3, [sp, #4]
 8004cc8:	e005      	b.n	8004cd6 <printFloat_CoordValue+0x156>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004cca:	2c04      	cmp	r4, #4
 8004ccc:	d0f7      	beq.n	8004cbe <printFloat_CoordValue+0x13e>
 8004cce:	ab04      	add	r3, sp, #16
 8004cd0:	4423      	add	r3, r4
 8004cd2:	f813 5c11 	ldrb.w	r5, [r3, #-17]
 8004cd6:	3c01      	subs	r4, #1
 8004cd8:	b2e4      	uxtb	r4, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004cda:	2c03      	cmp	r4, #3
 8004cdc:	d026      	beq.n	8004d2c <printFloat_CoordValue+0x1ac>
    serial_write(buf[i-1]);
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f002 fb10 	bl	8007304 <serial_write>
  for (; i > 0; i--) {
 8004ce4:	2c00      	cmp	r4, #0
 8004ce6:	d1f2      	bne.n	8004cce <printFloat_CoordValue+0x14e>
}
 8004ce8:	b005      	add	sp, #20
 8004cea:	bd30      	pop	{r4, r5, pc}
    serial_write('-');
 8004cec:	202d      	movs	r0, #45	; 0x2d
 8004cee:	f002 fb09 	bl	8007304 <serial_write>
    n = -n;
 8004cf2:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004cf6:	e751      	b.n	8004b9c <printFloat_CoordValue+0x1c>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cf8:	2330      	movs	r3, #48	; 0x30
 8004cfa:	f88d 3000 	strb.w	r3, [sp]
 8004cfe:	f88d 3001 	strb.w	r3, [sp, #1]
 8004d02:	e77d      	b.n	8004c00 <printFloat_CoordValue+0x80>
    serial_write('-');
 8004d04:	202d      	movs	r0, #45	; 0x2d
 8004d06:	f002 fafd 	bl	8007304 <serial_write>
    n = -n;
 8004d0a:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004d0e:	e79a      	b.n	8004c46 <printFloat_CoordValue+0xc6>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d10:	2330      	movs	r3, #48	; 0x30
 8004d12:	2102      	movs	r1, #2
 8004d14:	f88d 3000 	strb.w	r3, [sp]
 8004d18:	f88d 3001 	strb.w	r3, [sp, #1]
 8004d1c:	e7c6      	b.n	8004cac <printFloat_CoordValue+0x12c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d1e:	202e      	movs	r0, #46	; 0x2e
 8004d20:	f002 faf0 	bl	8007304 <serial_write>
    serial_write(buf[i-1]);
 8004d24:	4628      	mov	r0, r5
 8004d26:	f002 faed 	bl	8007304 <serial_write>
 8004d2a:	e774      	b.n	8004c16 <printFloat_CoordValue+0x96>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d2c:	202e      	movs	r0, #46	; 0x2e
 8004d2e:	f002 fae9 	bl	8007304 <serial_write>
    serial_write(buf[i-1]);
 8004d32:	4628      	mov	r0, r5
 8004d34:	f002 fae6 	bl	8007304 <serial_write>
 8004d38:	e7c9      	b.n	8004cce <printFloat_CoordValue+0x14e>
 8004d3a:	bf00      	nop
 8004d3c:	2000126c 	.word	0x2000126c
 8004d40:	447a0000 	.word	0x447a0000
 8004d44:	cccccccd 	.word	0xcccccccd
 8004d48:	3d21428b 	.word	0x3d21428b
 8004d4c:	461c4000 	.word	0x461c4000

08004d50 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8004d50:	b570      	push	{r4, r5, r6, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004d52:	4b4d      	ldr	r3, [pc, #308]	; (8004e88 <printFloat_RateValue+0x138>)
void printFloat_RateValue(float n) {
 8004d54:	b084      	sub	sp, #16
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004d56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d5a:	07db      	lsls	r3, r3, #31
 8004d5c:	d435      	bmi.n	8004dca <printFloat_RateValue+0x7a>
  if (n < 0) {
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4604      	mov	r4, r0
 8004d62:	f7fc f943 	bl	8000fec <__aeabi_fcmplt>
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d17b      	bne.n	8004e62 <printFloat_RateValue+0x112>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004d6a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f7fb fe96 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004d74:	f7fc f978 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d06d      	beq.n	8004e58 <printFloat_RateValue+0x108>
 8004d7c:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004d7e:	4d43      	ldr	r5, [pc, #268]	; (8004e8c <printFloat_RateValue+0x13c>)
 8004d80:	fba5 1300 	umull	r1, r3, r5, r0
 8004d84:	08db      	lsrs	r3, r3, #3
 8004d86:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004d8a:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004d8e:	1c54      	adds	r4, r2, #1
 8004d90:	a904      	add	r1, sp, #16
 8004d92:	3030      	adds	r0, #48	; 0x30
 8004d94:	440a      	add	r2, r1
 8004d96:	b2e4      	uxtb	r4, r4
 8004d98:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004d9c:	4622      	mov	r2, r4
  while(a > 0) {
 8004d9e:	4618      	mov	r0, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1ed      	bne.n	8004d80 <printFloat_RateValue+0x30>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004da4:	2c00      	cmp	r4, #0
 8004da6:	d057      	beq.n	8004e58 <printFloat_RateValue+0x108>
 8004da8:	ab04      	add	r3, sp, #16
 8004daa:	441a      	add	r2, r3
 8004dac:	f812 0c11 	ldrb.w	r0, [r2, #-17]
 8004db0:	3c01      	subs	r4, #1
 8004db2:	b2e4      	uxtb	r4, r4
 8004db4:	466d      	mov	r5, sp
 8004db6:	446c      	add	r4, sp
 8004db8:	e001      	b.n	8004dbe <printFloat_RateValue+0x6e>
 8004dba:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
    serial_write(buf[i-1]);
 8004dbe:	f002 faa1 	bl	8007304 <serial_write>
  for (; i > 0; i--) {
 8004dc2:	42ac      	cmp	r4, r5
 8004dc4:	d1f9      	bne.n	8004dba <printFloat_RateValue+0x6a>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8004dc6:	b004      	add	sp, #16
 8004dc8:	bd70      	pop	{r4, r5, r6, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004dca:	4931      	ldr	r1, [pc, #196]	; (8004e90 <printFloat_RateValue+0x140>)
 8004dcc:	f7fb ff70 	bl	8000cb0 <__aeabi_fmul>
  if (n < 0) {
 8004dd0:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004dd2:	4604      	mov	r4, r0
  if (n < 0) {
 8004dd4:	f7fc f90a 	bl	8000fec <__aeabi_fcmplt>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d148      	bne.n	8004e6e <printFloat_RateValue+0x11e>
  if (decimals) { n *= 10; }
 8004ddc:	492d      	ldr	r1, [pc, #180]	; (8004e94 <printFloat_RateValue+0x144>)
 8004dde:	4620      	mov	r0, r4
 8004de0:	f7fb ff66 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004de4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004de8:	f7fb fe5a 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004dec:	f7fc f93c 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004df0:	b1a0      	cbz	r0, 8004e1c <printFloat_RateValue+0xcc>
 8004df2:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004df4:	4c25      	ldr	r4, [pc, #148]	; (8004e8c <printFloat_RateValue+0x13c>)
 8004df6:	fba4 3200 	umull	r3, r2, r4, r0
 8004dfa:	08d2      	lsrs	r2, r2, #3
 8004dfc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004e00:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8004e04:	ad04      	add	r5, sp, #16
 8004e06:	1c4b      	adds	r3, r1, #1
 8004e08:	3030      	adds	r0, #48	; 0x30
 8004e0a:	4429      	add	r1, r5
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f801 0c10 	strb.w	r0, [r1, #-16]
 8004e12:	4619      	mov	r1, r3
  while(a > 0) {
 8004e14:	4610      	mov	r0, r2
 8004e16:	2a00      	cmp	r2, #0
 8004e18:	d1ed      	bne.n	8004df6 <printFloat_RateValue+0xa6>
  while (i < decimal_places) {
 8004e1a:	bb73      	cbnz	r3, 8004e7a <printFloat_RateValue+0x12a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e1c:	2330      	movs	r3, #48	; 0x30
 8004e1e:	f88d 3000 	strb.w	r3, [sp]
    buf[i++] = '0';
 8004e22:	2230      	movs	r2, #48	; 0x30
 8004e24:	2302      	movs	r3, #2
 8004e26:	4616      	mov	r6, r2
 8004e28:	f88d 2001 	strb.w	r2, [sp, #1]
 8004e2c:	1e5c      	subs	r4, r3, #1
 8004e2e:	b2e5      	uxtb	r5, r4
 8004e30:	446d      	add	r5, sp
 8004e32:	e000      	b.n	8004e36 <printFloat_RateValue+0xe6>
 8004e34:	1e5c      	subs	r4, r3, #1
    serial_write(buf[i-1]);
 8004e36:	4630      	mov	r0, r6
 8004e38:	f002 fa64 	bl	8007304 <serial_write>
  for (; i > 0; i--) {
 8004e3c:	b2e3      	uxtb	r3, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
 8004e44:	d1f6      	bne.n	8004e34 <printFloat_RateValue+0xe4>
 8004e46:	202e      	movs	r0, #46	; 0x2e
 8004e48:	f002 fa5c 	bl	8007304 <serial_write>
    serial_write(buf[i-1]);
 8004e4c:	4630      	mov	r0, r6
}
 8004e4e:	b004      	add	sp, #16
 8004e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serial_write(buf[i-1]);
 8004e54:	f002 ba56 	b.w	8007304 <serial_write>
    buf[i++] = '0';
 8004e58:	2030      	movs	r0, #48	; 0x30
 8004e5a:	2401      	movs	r4, #1
 8004e5c:	f88d 0000 	strb.w	r0, [sp]
 8004e60:	e7a6      	b.n	8004db0 <printFloat_RateValue+0x60>
    serial_write('-');
 8004e62:	202d      	movs	r0, #45	; 0x2d
 8004e64:	f002 fa4e 	bl	8007304 <serial_write>
    n = -n;
 8004e68:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004e6c:	e77d      	b.n	8004d6a <printFloat_RateValue+0x1a>
    serial_write('-');
 8004e6e:	202d      	movs	r0, #45	; 0x2d
 8004e70:	f002 fa48 	bl	8007304 <serial_write>
    n = -n;
 8004e74:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004e78:	e7b0      	b.n	8004ddc <printFloat_RateValue+0x8c>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d0d1      	beq.n	8004e22 <printFloat_RateValue+0xd2>
 8004e7e:	4429      	add	r1, r5
 8004e80:	f811 6c11 	ldrb.w	r6, [r1, #-17]
 8004e84:	e7d2      	b.n	8004e2c <printFloat_RateValue+0xdc>
 8004e86:	bf00      	nop
 8004e88:	2000126c 	.word	0x2000126c
 8004e8c:	cccccccd 	.word	0xcccccccd
 8004e90:	3d21428b 	.word	0x3d21428b
 8004e94:	41200000 	.word	0x41200000

08004e98 <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8004e98:	b510      	push	{r4, lr}
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004e9a:	2101      	movs	r1, #1
{
 8004e9c:	b082      	sub	sp, #8
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004e9e:	f44f 7400 	mov.w	r4, #512	; 0x200
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004ea2:	2008      	movs	r0, #8
 8004ea4:	f7fc fcc8 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004ea8:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004eaa:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004eac:	a902      	add	r1, sp, #8
 8004eae:	f821 4d04 	strh.w	r4, [r1, #-4]!
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8004eb2:	4809      	ldr	r0, [pc, #36]	; (8004ed8 <probe_init+0x40>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004eb4:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004eb8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8004ebc:	f7fc faa0 	bl	8001400 <GPIO_Init>
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 8004ec0:	2100      	movs	r1, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004ec2:	4a06      	ldr	r2, [pc, #24]	; (8004edc <probe_init+0x44>)
  probe_invert_mask = 0; // Initialize as zero.
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <probe_init+0x48>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004ec6:	f992 2058 	ldrsb.w	r2, [r2, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 8004eca:	8019      	strh	r1, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004ecc:	428a      	cmp	r2, r1
 8004ece:	bfa8      	it	ge
 8004ed0:	801c      	strhge	r4, [r3, #0]
}
 8004ed2:	b002      	add	sp, #8
 8004ed4:	bd10      	pop	{r4, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40010c00 	.word	0x40010c00
 8004edc:	2000126c 	.word	0x2000126c
 8004ee0:	200010ea 	.word	0x200010ea

08004ee4 <probe_configure_invert_mask>:
  probe_invert_mask = 0; // Initialize as zero.
 8004ee4:	2300      	movs	r3, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004ee6:	4907      	ldr	r1, [pc, #28]	; (8004f04 <probe_configure_invert_mask+0x20>)
  probe_invert_mask = 0; // Initialize as zero.
 8004ee8:	4a07      	ldr	r2, [pc, #28]	; (8004f08 <probe_configure_invert_mask+0x24>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004eea:	f991 1058 	ldrsb.w	r1, [r1, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 8004eee:	8013      	strh	r3, [r2, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004ef0:	4299      	cmp	r1, r3
 8004ef2:	bfaa      	itet	ge
 8004ef4:	f44f 7100 	movge.w	r1, #512	; 0x200
 8004ef8:	f44f 7300 	movlt.w	r3, #512	; 0x200
 8004efc:	8011      	strhge	r1, [r2, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 8004efe:	b100      	cbz	r0, 8004f02 <probe_configure_invert_mask+0x1e>
 8004f00:	8013      	strh	r3, [r2, #0]
 8004f02:	4770      	bx	lr
 8004f04:	2000126c 	.word	0x2000126c
 8004f08:	200010ea 	.word	0x200010ea

08004f0c <probe_get_state>:
}


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 8004f0c:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8004f0e:	4805      	ldr	r0, [pc, #20]	; (8004f24 <probe_get_state+0x18>)
 8004f10:	f7fc fc2c 	bl	800176c <GPIO_ReadInputData>
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <probe_get_state+0x1c>)
 8004f16:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004f1a:	881b      	ldrh	r3, [r3, #0]
#endif
}
 8004f1c:	1a18      	subs	r0, r3, r0
 8004f1e:	bf18      	it	ne
 8004f20:	2001      	movne	r0, #1
 8004f22:	bd08      	pop	{r3, pc}
 8004f24:	40010c00 	.word	0x40010c00
 8004f28:	200010ea 	.word	0x200010ea

08004f2c <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8004f2c:	b538      	push	{r3, r4, r5, lr}
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8004f2e:	480b      	ldr	r0, [pc, #44]	; (8004f5c <probe_state_monitor+0x30>)
 8004f30:	f7fc fc1c 	bl	800176c <GPIO_ReadInputData>
 8004f34:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <probe_state_monitor+0x34>)
  if (probe_get_state()) {
 8004f36:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	4283      	cmp	r3, r0
 8004f3e:	d00c      	beq.n	8004f5a <probe_state_monitor+0x2e>
    sys_probe_state = PROBE_OFF;
 8004f40:	2100      	movs	r1, #0
 8004f42:	4a08      	ldr	r2, [pc, #32]	; (8004f64 <probe_state_monitor+0x38>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004f44:	4d08      	ldr	r5, [pc, #32]	; (8004f68 <probe_state_monitor+0x3c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <probe_state_monitor+0x40>)
 8004f48:	4c09      	ldr	r4, [pc, #36]	; (8004f70 <probe_state_monitor+0x44>)
    sys_probe_state = PROBE_OFF;
 8004f4a:	7011      	strb	r1, [r2, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004f52:	782b      	ldrb	r3, [r5, #0]
 8004f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f58:	702b      	strb	r3, [r5, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	40010c00 	.word	0x40010c00
 8004f60:	200010ea 	.word	0x200010ea
 8004f64:	200010c6 	.word	0x200010c6
 8004f68:	200010c5 	.word	0x200010c5
 8004f6c:	200010d8 	.word	0x200010d8
 8004f70:	200010c8 	.word	0x200010c8

08004f74 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 8004f74:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8004f76:	f7ff f9c5 	bl	8004304 <plan_get_current_block>
 8004f7a:	b120      	cbz	r0, 8004f86 <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 8004f7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8004f80:	2002      	movs	r0, #2
 8004f82:	f004 bc35 	b.w	80097f0 <system_set_exec_state_flag>
 8004f86:	bd08      	pop	{r3, pc}

08004f88 <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8004f8a:	4bac      	ldr	r3, [pc, #688]	; (800523c <protocol_exec_rt_system+0x2b4>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d14f      	bne.n	8005032 <protocol_exec_rt_system+0xaa>
 8004f92:	4cab      	ldr	r4, [pc, #684]	; (8005240 <protocol_exec_rt_system+0x2b8>)
 8004f94:	4dab      	ldr	r5, [pc, #684]	; (8005244 <protocol_exec_rt_system+0x2bc>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8004f96:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8004f98:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004f9c:	b393      	cbz	r3, 8005004 <protocol_exec_rt_system+0x7c>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 8004f9e:	06ee      	lsls	r6, r5, #27
 8004fa0:	f100 80d6 	bmi.w	8005150 <protocol_exec_rt_system+0x1c8>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 8004fa4:	07e8      	lsls	r0, r5, #31
 8004fa6:	f100 80f1 	bmi.w	800518c <protocol_exec_rt_system+0x204>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8004faa:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8004fae:	d00a      	beq.n	8004fc6 <protocol_exec_rt_system+0x3e>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8004fb0:	7823      	ldrb	r3, [r4, #0]
 8004fb2:	0799      	lsls	r1, r3, #30
 8004fb4:	f000 80f0 	beq.w	8005198 <protocol_exec_rt_system+0x210>
 8004fb8:	b26e      	sxtb	r6, r5
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 8004fba:	2e00      	cmp	r6, #0
 8004fbc:	f2c0 8161 	blt.w	8005282 <protocol_exec_rt_system+0x2fa>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8004fc0:	20e8      	movs	r0, #232	; 0xe8
 8004fc2:	f004 fc1f 	bl	8009804 <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 8004fc6:	07ab      	lsls	r3, r5, #30
 8004fc8:	d519      	bpl.n	8004ffe <protocol_exec_rt_system+0x76>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8004fca:	f015 0f68 	tst.w	r5, #104	; 0x68
 8004fce:	d113      	bne.n	8004ff8 <protocol_exec_rt_system+0x70>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8004fd0:	7823      	ldrb	r3, [r4, #0]
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	f000 816d 	beq.w	80052b2 <protocol_exec_rt_system+0x32a>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f040 813b 	bne.w	8005254 <protocol_exec_rt_system+0x2cc>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8004fde:	2300      	movs	r3, #0
 8004fe0:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8004fe2:	f7ff f98f 	bl	8004304 <plan_get_current_block>
 8004fe6:	b120      	cbz	r0, 8004ff2 <protocol_exec_rt_system+0x6a>
 8004fe8:	78a3      	ldrb	r3, [r4, #2]
 8004fea:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004fee:	f000 8198 	beq.w	8005322 <protocol_exec_rt_system+0x39a>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
              sys.state = STATE_CYCLE;
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              st_wake_up();
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8004ff6:	7023      	strb	r3, [r4, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8004ff8:	2002      	movs	r0, #2
 8004ffa:	f004 fc03 	bl	8009804 <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 8004ffe:	0769      	lsls	r1, r5, #29
 8005000:	f100 80a9 	bmi.w	8005156 <protocol_exec_rt_system+0x1ce>
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005004:	4b90      	ldr	r3, [pc, #576]	; (8005248 <protocol_exec_rt_system+0x2c0>)
 8005006:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005008:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800500c:	2b00      	cmp	r3, #0
 800500e:	d167      	bne.n	80050e0 <protocol_exec_rt_system+0x158>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 8005010:	4b8e      	ldr	r3, [pc, #568]	; (800524c <protocol_exec_rt_system+0x2c4>)
 8005012:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005014:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005018:	b9db      	cbnz	r3, 8005052 <protocol_exec_rt_system+0xca>
 800501a:	7823      	ldrb	r3, [r4, #0]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 800501c:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005020:	d103      	bne.n	800502a <protocol_exec_rt_system+0xa2>
 8005022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005024:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005028:	d147      	bne.n	80050ba <protocol_exec_rt_system+0x132>
    st_prep_buffer();
  }

}
 800502a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 800502e:	f003 bb6f 	b.w	8008710 <st_prep_buffer>
    sys.state = STATE_ALARM; // Set system alarm state
 8005032:	2601      	movs	r6, #1
 8005034:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005038:	4c81      	ldr	r4, [pc, #516]	; (8005240 <protocol_exec_rt_system+0x2b8>)
    report_alarm_message(rt_exec);
 800503a:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 800503c:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 800503e:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8005040:	f001 f9c4 	bl	80063cc <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005044:	42b5      	cmp	r5, r6
 8005046:	f240 8122 	bls.w	800528e <protocol_exec_rt_system+0x306>
 800504a:	4d7e      	ldr	r5, [pc, #504]	; (8005244 <protocol_exec_rt_system+0x2bc>)
    system_clear_exec_alarm(); // Clear alarm
 800504c:	f004 fbec 	bl	8009828 <system_clear_exec_alarm>
 8005050:	e7a1      	b.n	8004f96 <protocol_exec_rt_system+0xe>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005052:	f004 fc0d 	bl	8009870 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005056:	7aa2      	ldrb	r2, [r4, #10]
 8005058:	f015 0f01 	tst.w	r5, #1
 800505c:	bf0c      	ite	eq
 800505e:	4613      	moveq	r3, r2
 8005060:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005062:	07a8      	lsls	r0, r5, #30
 8005064:	bf44      	itt	mi
 8005066:	330a      	addmi	r3, #10
 8005068:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800506a:	0769      	lsls	r1, r5, #29
 800506c:	bf44      	itt	mi
 800506e:	3b0a      	submi	r3, #10
 8005070:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005072:	072f      	lsls	r7, r5, #28
 8005074:	bf44      	itt	mi
 8005076:	3301      	addmi	r3, #1
 8005078:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800507a:	06ee      	lsls	r6, r5, #27
 800507c:	bf44      	itt	mi
 800507e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005082:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005084:	2bc8      	cmp	r3, #200	; 0xc8
 8005086:	bf28      	it	cs
 8005088:	23c8      	movcs	r3, #200	; 0xc8
 800508a:	2b0a      	cmp	r3, #10
 800508c:	bf38      	it	cc
 800508e:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005090:	429a      	cmp	r2, r3
 8005092:	d006      	beq.n	80050a2 <protocol_exec_rt_system+0x11a>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005094:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005096:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005098:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800509a:	f042 0308 	orr.w	r3, r2, #8
 800509e:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80050a0:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80050a2:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 80050a4:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80050a6:	d502      	bpl.n	80050ae <protocol_exec_rt_system+0x126>
      if (sys.state == STATE_HOLD) {
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	f000 80bd 	beq.w	8005228 <protocol_exec_rt_system+0x2a0>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80050ae:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80050b2:	d0b3      	beq.n	800501c <protocol_exec_rt_system+0x94>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f040 80df 	bne.w	8005278 <protocol_exec_rt_system+0x2f0>
        uint8_t coolant_state = gc_state.modal.coolant;
 80050ba:	4f65      	ldr	r7, [pc, #404]	; (8005250 <protocol_exec_rt_system+0x2c8>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80050bc:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 80050be:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80050c0:	f100 80f0 	bmi.w	80052a4 <protocol_exec_rt_system+0x31c>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 80050c4:	0668      	lsls	r0, r5, #25
 80050c6:	d505      	bpl.n	80050d4 <protocol_exec_rt_system+0x14c>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80050c8:	0671      	lsls	r1, r6, #25
 80050ca:	bf4c      	ite	mi
 80050cc:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 80050d0:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80050d4:	4630      	mov	r0, r6
 80050d6:	f7fc fcf3 	bl	8001ac0 <coolant_set_state>
 80050da:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 80050dc:	723e      	strb	r6, [r7, #8]
 80050de:	e79d      	b.n	800501c <protocol_exec_rt_system+0x94>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 80050e0:	f004 fbbe 	bl	8009860 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 80050e4:	7a21      	ldrb	r1, [r4, #8]
 80050e6:	f015 0f01 	tst.w	r5, #1
 80050ea:	bf0c      	ite	eq
 80050ec:	460b      	moveq	r3, r1
 80050ee:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80050f0:	07ae      	lsls	r6, r5, #30
 80050f2:	bf44      	itt	mi
 80050f4:	330a      	addmi	r3, #10
 80050f6:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80050f8:	0768      	lsls	r0, r5, #29
 80050fa:	bf44      	itt	mi
 80050fc:	3b0a      	submi	r3, #10
 80050fe:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005100:	072f      	lsls	r7, r5, #28
 8005102:	bf44      	itt	mi
 8005104:	3301      	addmi	r3, #1
 8005106:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005108:	06ee      	lsls	r6, r5, #27
 800510a:	bf44      	itt	mi
 800510c:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005110:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005112:	2bc8      	cmp	r3, #200	; 0xc8
 8005114:	bf28      	it	cs
 8005116:	23c8      	movcs	r3, #200	; 0xc8
 8005118:	2b0a      	cmp	r3, #10
 800511a:	bf38      	it	cc
 800511c:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 800511e:	7a60      	ldrb	r0, [r4, #9]
 8005120:	f015 0f20 	tst.w	r5, #32
 8005124:	bf14      	ite	ne
 8005126:	2264      	movne	r2, #100	; 0x64
 8005128:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 800512a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800512e:	bf18      	it	ne
 8005130:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005132:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005136:	bf18      	it	ne
 8005138:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 800513a:	4299      	cmp	r1, r3
 800513c:	d023      	beq.n	8005186 <protocol_exec_rt_system+0x1fe>
      sys.report_ovr_counter = 0; // Set to report change immediately
 800513e:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8005140:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005142:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005144:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005146:	f7ff f94f 	bl	80043e8 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 800514a:	f7ff fc49 	bl	80049e0 <plan_cycle_reinitialize>
 800514e:	e75f      	b.n	8005010 <protocol_exec_rt_system+0x88>
      sys.abort = true;  // Only place this is set true.
 8005150:	2301      	movs	r3, #1
 8005152:	7063      	strb	r3, [r4, #1]
      return; // Nothing else to do but exit.
 8005154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005156:	7823      	ldrb	r3, [r4, #0]
 8005158:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 800515c:	d002      	beq.n	8005164 <protocol_exec_rt_system+0x1dc>
 800515e:	78e3      	ldrb	r3, [r4, #3]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d051      	beq.n	8005208 <protocol_exec_rt_system+0x280>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005164:	78a3      	ldrb	r3, [r4, #2]
 8005166:	061f      	lsls	r7, r3, #24
 8005168:	d452      	bmi.n	8005210 <protocol_exec_rt_system+0x288>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 800516a:	f013 0220 	ands.w	r2, r3, #32
 800516e:	d036      	beq.n	80051de <protocol_exec_rt_system+0x256>
          sys.state = STATE_SAFETY_DOOR;
 8005170:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 800517c:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800517e:	2004      	movs	r0, #4
 8005180:	f004 fb40 	bl	8009804 <system_clear_exec_state_flag>
 8005184:	e73e      	b.n	8005004 <protocol_exec_rt_system+0x7c>
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005186:	4282      	cmp	r2, r0
 8005188:	d1d9      	bne.n	800513e <protocol_exec_rt_system+0x1b6>
 800518a:	e741      	b.n	8005010 <protocol_exec_rt_system+0x88>
      report_realtime_status();
 800518c:	f001 feb4 	bl	8006ef8 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005190:	2001      	movs	r0, #1
 8005192:	f004 fb37 	bl	8009804 <system_clear_exec_state_flag>
 8005196:	e708      	b.n	8004faa <protocol_exec_rt_system+0x22>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005198:	f013 0f28 	tst.w	r3, #40	; 0x28
 800519c:	d122      	bne.n	80051e4 <protocol_exec_rt_system+0x25c>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 800519e:	bb33      	cbnz	r3, 80051ee <protocol_exec_rt_system+0x266>
 80051a0:	2201      	movs	r2, #1
 80051a2:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80051a4:	066a      	lsls	r2, r5, #25
 80051a6:	f100 809a 	bmi.w	80052de <protocol_exec_rt_system+0x356>
        if (rt_exec & EXEC_FEED_HOLD) {
 80051aa:	072f      	lsls	r7, r5, #28
 80051ac:	b26e      	sxtb	r6, r5
 80051ae:	d501      	bpl.n	80051b4 <protocol_exec_rt_system+0x22c>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80051b0:	2310      	movs	r3, #16
 80051b2:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80051b4:	06a8      	lsls	r0, r5, #26
 80051b6:	f57f af00 	bpl.w	8004fba <protocol_exec_rt_system+0x32>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 80051ba:	2006      	movs	r0, #6
 80051bc:	f001 f91c 	bl	80063f8 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80051c0:	78a3      	ldrb	r3, [r4, #2]
 80051c2:	0619      	lsls	r1, r3, #24
 80051c4:	d407      	bmi.n	80051d6 <protocol_exec_rt_system+0x24e>
            if (sys.state == STATE_SAFETY_DOOR) {
 80051c6:	7822      	ldrb	r2, [r4, #0]
 80051c8:	2a40      	cmp	r2, #64	; 0x40
 80051ca:	f000 80b9 	beq.w	8005340 <protocol_exec_rt_system+0x3b8>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 80051ce:	2a80      	cmp	r2, #128	; 0x80
 80051d0:	d001      	beq.n	80051d6 <protocol_exec_rt_system+0x24e>
 80051d2:	2240      	movs	r2, #64	; 0x40
 80051d4:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 80051d6:	f043 0320 	orr.w	r3, r3, #32
 80051da:	70a3      	strb	r3, [r4, #2]
 80051dc:	e6ed      	b.n	8004fba <protocol_exec_rt_system+0x32>
          sys.suspend = SUSPEND_DISABLE;
 80051de:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 80051e0:	7022      	strb	r2, [r4, #0]
 80051e2:	e7cc      	b.n	800517e <protocol_exec_rt_system+0x1f6>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 80051e4:	78a2      	ldrb	r2, [r4, #2]
 80051e6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80051ea:	f000 8089 	beq.w	8005300 <protocol_exec_rt_system+0x378>
 80051ee:	b26a      	sxtb	r2, r5
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80051f0:	0668      	lsls	r0, r5, #25
 80051f2:	4616      	mov	r6, r2
 80051f4:	d502      	bpl.n	80051fc <protocol_exec_rt_system+0x274>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80051f6:	0699      	lsls	r1, r3, #26
 80051f8:	f140 80aa 	bpl.w	8005350 <protocol_exec_rt_system+0x3c8>
        if (rt_exec & EXEC_FEED_HOLD) {
 80051fc:	072f      	lsls	r7, r5, #28
 80051fe:	d5d9      	bpl.n	80051b4 <protocol_exec_rt_system+0x22c>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005200:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005204:	d1d6      	bne.n	80051b4 <protocol_exec_rt_system+0x22c>
 8005206:	e7d3      	b.n	80051b0 <protocol_exec_rt_system+0x228>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005208:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800520c:	2b00      	cmp	r3, #0
 800520e:	da59      	bge.n	80052c4 <protocol_exec_rt_system+0x33c>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005210:	2300      	movs	r3, #0
 8005212:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005214:	f7ff f834 	bl	8004280 <plan_reset>
          st_reset();
 8005218:	f003 f902 	bl	8008420 <st_reset>
          gc_sync_position();
 800521c:	f7fc fd52 	bl	8001cc4 <gc_sync_position>
          plan_sync_position();
 8005220:	f7ff fbc0 	bl	80049a4 <plan_sync_position>
 8005224:	78a3      	ldrb	r3, [r4, #2]
 8005226:	e7a0      	b.n	800516a <protocol_exec_rt_system+0x1e2>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005228:	7ae3      	ldrb	r3, [r4, #11]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d15c      	bne.n	80052e8 <protocol_exec_rt_system+0x360>
 800522e:	2302      	movs	r3, #2
 8005230:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005232:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005236:	f47f af40 	bne.w	80050ba <protocol_exec_rt_system+0x132>
 800523a:	e6f6      	b.n	800502a <protocol_exec_rt_system+0xa2>
 800523c:	200010e8 	.word	0x200010e8
 8005240:	200010b0 	.word	0x200010b0
 8005244:	200010c5 	.word	0x200010c5
 8005248:	200010ac 	.word	0x200010ac
 800524c:	200010c4 	.word	0x200010c4
 8005250:	20001014 	.word	0x20001014
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005254:	06da      	lsls	r2, r3, #27
 8005256:	f57f aecf 	bpl.w	8004ff8 <protocol_exec_rt_system+0x70>
 800525a:	78a2      	ldrb	r2, [r4, #2]
 800525c:	07d0      	lsls	r0, r2, #31
 800525e:	f57f aecb 	bpl.w	8004ff8 <protocol_exec_rt_system+0x70>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005262:	2b10      	cmp	r3, #16
 8005264:	f47f aebb 	bne.w	8004fde <protocol_exec_rt_system+0x56>
 8005268:	7ae3      	ldrb	r3, [r4, #11]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f43f aeb7 	beq.w	8004fde <protocol_exec_rt_system+0x56>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005270:	f043 0308 	orr.w	r3, r3, #8
 8005274:	72e3      	strb	r3, [r4, #11]
 8005276:	e6bf      	b.n	8004ff8 <protocol_exec_rt_system+0x70>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005278:	f013 0f18 	tst.w	r3, #24
 800527c:	f43f aece 	beq.w	800501c <protocol_exec_rt_system+0x94>
 8005280:	e71b      	b.n	80050ba <protocol_exec_rt_system+0x132>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005282:	7823      	ldrb	r3, [r4, #0]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d036      	beq.n	80052f6 <protocol_exec_rt_system+0x36e>
        sys.state = STATE_SLEEP; 
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	7023      	strb	r3, [r4, #0]
 800528c:	e698      	b.n	8004fc0 <protocol_exec_rt_system+0x38>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 800528e:	4630      	mov	r0, r6
 8005290:	f001 f8b2 	bl	80063f8 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005294:	2010      	movs	r0, #16
 8005296:	f004 fab5 	bl	8009804 <system_clear_exec_state_flag>
 800529a:	4d2f      	ldr	r5, [pc, #188]	; (8005358 <protocol_exec_rt_system+0x3d0>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 800529c:	782b      	ldrb	r3, [r5, #0]
 800529e:	06df      	lsls	r7, r3, #27
 80052a0:	d5fc      	bpl.n	800529c <protocol_exec_rt_system+0x314>
 80052a2:	e6d3      	b.n	800504c <protocol_exec_rt_system+0xc4>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 80052a4:	0633      	lsls	r3, r6, #24
 80052a6:	bf4c      	ite	mi
 80052a8:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 80052ac:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
 80052b0:	e708      	b.n	80050c4 <protocol_exec_rt_system+0x13c>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80052b2:	78a3      	ldrb	r3, [r4, #2]
 80052b4:	f013 0220 	ands.w	r2, r3, #32
 80052b8:	f47f ae9e 	bne.w	8004ff8 <protocol_exec_rt_system+0x70>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 80052bc:	06df      	lsls	r7, r3, #27
 80052be:	d538      	bpl.n	8005332 <protocol_exec_rt_system+0x3aa>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 80052c0:	7022      	strb	r2, [r4, #0]
 80052c2:	e68c      	b.n	8004fde <protocol_exec_rt_system+0x56>
        plan_cycle_reinitialize();
 80052c4:	f7ff fb8c 	bl	80049e0 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 80052c8:	7923      	ldrb	r3, [r4, #4]
 80052ca:	079a      	lsls	r2, r3, #30
 80052cc:	d503      	bpl.n	80052d6 <protocol_exec_rt_system+0x34e>
 80052ce:	78a2      	ldrb	r2, [r4, #2]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 80052d6:	f023 0306 	bic.w	r3, r3, #6
 80052da:	7123      	strb	r3, [r4, #4]
 80052dc:	e74f      	b.n	800517e <protocol_exec_rt_system+0x1f6>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80052de:	2141      	movs	r1, #65	; 0x41
 80052e0:	b26a      	sxtb	r2, r5
 80052e2:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80052e4:	70a1      	strb	r1, [r4, #2]
 80052e6:	e789      	b.n	80051fc <protocol_exec_rt_system+0x274>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80052e8:	07d9      	lsls	r1, r3, #31
 80052ea:	f57f ae9b 	bpl.w	8005024 <protocol_exec_rt_system+0x9c>
 80052ee:	f043 0304 	orr.w	r3, r3, #4
 80052f2:	72e3      	strb	r3, [r4, #11]
 80052f4:	e79d      	b.n	8005232 <protocol_exec_rt_system+0x2aa>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80052f6:	78a3      	ldrb	r3, [r4, #2]
 80052f8:	f043 0305 	orr.w	r3, r3, #5
 80052fc:	70a3      	strb	r3, [r4, #2]
 80052fe:	e7c3      	b.n	8005288 <protocol_exec_rt_system+0x300>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005300:	f003 f9f0 	bl	80086e4 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005304:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005306:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005308:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800530a:	2b20      	cmp	r3, #32
 800530c:	f47f af47 	bne.w	800519e <protocol_exec_rt_system+0x216>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005310:	b26e      	sxtb	r6, r5
 8005312:	2e00      	cmp	r6, #0
 8005314:	f6ff af4e 	blt.w	80051b4 <protocol_exec_rt_system+0x22c>
 8005318:	78a3      	ldrb	r3, [r4, #2]
 800531a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800531e:	70a3      	strb	r3, [r4, #2]
 8005320:	e748      	b.n	80051b4 <protocol_exec_rt_system+0x22c>
              sys.state = STATE_CYCLE;
 8005322:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005324:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005326:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005328:	f003 f9f2 	bl	8008710 <st_prep_buffer>
              st_wake_up();
 800532c:	f002 fe54 	bl	8007fd8 <st_wake_up>
 8005330:	e662      	b.n	8004ff8 <protocol_exec_rt_system+0x70>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005332:	075e      	lsls	r6, r3, #29
 8005334:	f57f ae60 	bpl.w	8004ff8 <protocol_exec_rt_system+0x70>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005338:	f043 0308 	orr.w	r3, r3, #8
 800533c:	70a3      	strb	r3, [r4, #2]
 800533e:	e65b      	b.n	8004ff8 <protocol_exec_rt_system+0x70>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005340:	071a      	lsls	r2, r3, #28
 8005342:	f57f af46 	bpl.w	80051d2 <protocol_exec_rt_system+0x24a>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005346:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 800534a:	f043 0302 	orr.w	r3, r3, #2
 800534e:	e740      	b.n	80051d2 <protocol_exec_rt_system+0x24a>
 8005350:	78a1      	ldrb	r1, [r4, #2]
 8005352:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005356:	e7c4      	b.n	80052e2 <protocol_exec_rt_system+0x35a>
 8005358:	200010c5 	.word	0x200010c5

0800535c <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 800535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005360:	b083      	sub	sp, #12
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 8005362:	f7fe ffcf 	bl	8004304 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 8005366:	2800      	cmp	r0, #0
 8005368:	f000 82e0 	beq.w	800592c <protocol_exec_rt_suspend+0x5d0>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
      restore_spindle_speed = gc_state.spindle_speed;
    } else {
      restore_condition = block->condition;
 800536c:	7d83      	ldrb	r3, [r0, #22]
      restore_spindle_speed = block->spindle_speed;
 800536e:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
      restore_condition = block->condition;
 8005372:	9301      	str	r3, [sp, #4]
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8005374:	4eba      	ldr	r6, [pc, #744]	; (8005660 <protocol_exec_rt_suspend+0x304>)
 8005376:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800537a:	079b      	lsls	r3, r3, #30
 800537c:	f100 82a7 	bmi.w	80058ce <protocol_exec_rt_suspend+0x572>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005380:	2500      	movs	r5, #0
 8005382:	4cb8      	ldr	r4, [pc, #736]	; (8005664 <protocol_exec_rt_suspend+0x308>)
  while (sys.suspend) {
 8005384:	78a3      	ldrb	r3, [r4, #2]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 809a 	beq.w	80054c0 <protocol_exec_rt_suspend+0x164>
    if (sys.abort) { return; }
 800538c:	7862      	ldrb	r2, [r4, #1]
 800538e:	2a00      	cmp	r2, #0
 8005390:	f040 8096 	bne.w	80054c0 <protocol_exec_rt_suspend+0x164>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 8005394:	07df      	lsls	r7, r3, #31
 8005396:	d51a      	bpl.n	80053ce <protocol_exec_rt_suspend+0x72>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 8005398:	7821      	ldrb	r1, [r4, #0]
 800539a:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 800539e:	f000 8092 	beq.w	80054c6 <protocol_exec_rt_suspend+0x16a>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 80053a2:	f013 0b04 	ands.w	fp, r3, #4
 80053a6:	f000 817c 	beq.w	80056a2 <protocol_exec_rt_suspend+0x346>
          if (sys.state == STATE_SLEEP) {
 80053aa:	2980      	cmp	r1, #128	; 0x80
 80053ac:	f000 82d2 	beq.w	8005954 <protocol_exec_rt_suspend+0x5f8>
          if (sys.state == STATE_SAFETY_DOOR) {
 80053b0:	2940      	cmp	r1, #64	; 0x40
 80053b2:	f000 8268 	beq.w	8005886 <protocol_exec_rt_suspend+0x52a>
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 80053b6:	0718      	lsls	r0, r3, #28
 80053b8:	d509      	bpl.n	80053ce <protocol_exec_rt_suspend+0x72>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80053ba:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8005678 <protocol_exec_rt_suspend+0x31c>
 80053be:	f89a 1009 	ldrb.w	r1, [sl, #9]
 80053c2:	2900      	cmp	r1, #0
 80053c4:	f000 81d5 	beq.w	8005772 <protocol_exec_rt_suspend+0x416>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 80053c8:	0799      	lsls	r1, r3, #30
 80053ca:	f140 8227 	bpl.w	800581c <protocol_exec_rt_suspend+0x4c0>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80053ce:	4ba6      	ldr	r3, [pc, #664]	; (8005668 <protocol_exec_rt_suspend+0x30c>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 80053d2:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f040 808a 	bne.w	80054f0 <protocol_exec_rt_suspend+0x194>
 80053dc:	4fa3      	ldr	r7, [pc, #652]	; (800566c <protocol_exec_rt_suspend+0x310>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 80053de:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 80053e0:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d054      	beq.n	8005492 <protocol_exec_rt_suspend+0x136>
    if (rt_exec & EXEC_RESET) {
 80053e8:	f01b 0f10 	tst.w	fp, #16
 80053ec:	f040 8126 	bne.w	800563c <protocol_exec_rt_suspend+0x2e0>
    if (rt_exec & EXEC_STATUS_REPORT) {
 80053f0:	f01b 0f01 	tst.w	fp, #1
 80053f4:	f040 8175 	bne.w	80056e2 <protocol_exec_rt_suspend+0x386>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 80053f8:	f01b 0fe8 	tst.w	fp, #232	; 0xe8
 80053fc:	d00c      	beq.n	8005418 <protocol_exec_rt_suspend+0xbc>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 80053fe:	7823      	ldrb	r3, [r4, #0]
 8005400:	0798      	lsls	r0, r3, #30
 8005402:	f000 8174 	beq.w	80056ee <protocol_exec_rt_suspend+0x392>
 8005406:	fa4f f98b 	sxtb.w	r9, fp
      if (rt_exec & EXEC_SLEEP) {
 800540a:	f1b9 0f00 	cmp.w	r9, #0
 800540e:	f2c0 819d 	blt.w	800574c <protocol_exec_rt_suspend+0x3f0>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005412:	20e8      	movs	r0, #232	; 0xe8
 8005414:	f004 f9f6 	bl	8009804 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005418:	f01b 0f02 	tst.w	fp, #2
 800541c:	d019      	beq.n	8005452 <protocol_exec_rt_suspend+0xf6>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 800541e:	f01b 0f68 	tst.w	fp, #104	; 0x68
 8005422:	d113      	bne.n	800544c <protocol_exec_rt_suspend+0xf0>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005424:	7823      	ldrb	r3, [r4, #0]
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	f000 8248 	beq.w	80058bc <protocol_exec_rt_suspend+0x560>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 800542c:	2b00      	cmp	r3, #0
 800542e:	f040 8202 	bne.w	8005836 <protocol_exec_rt_suspend+0x4da>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005432:	2300      	movs	r3, #0
 8005434:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005436:	f7fe ff65 	bl	8004304 <plan_get_current_block>
 800543a:	b120      	cbz	r0, 8005446 <protocol_exec_rt_suspend+0xea>
 800543c:	78a3      	ldrb	r3, [r4, #2]
 800543e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005442:	f000 827c 	beq.w	800593e <protocol_exec_rt_suspend+0x5e2>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005446:	2300      	movs	r3, #0
 8005448:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 800544a:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 800544c:	2002      	movs	r0, #2
 800544e:	f004 f9d9 	bl	8009804 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005452:	f01b 0f04 	tst.w	fp, #4
 8005456:	d01c      	beq.n	8005492 <protocol_exec_rt_suspend+0x136>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005458:	7823      	ldrb	r3, [r4, #0]
 800545a:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 800545e:	f000 810d 	beq.w	800567c <protocol_exec_rt_suspend+0x320>
 8005462:	78e3      	ldrb	r3, [r4, #3]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f040 8109 	bne.w	800567c <protocol_exec_rt_suspend+0x320>
 800546a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f2c0 81fd 	blt.w	800586e <protocol_exec_rt_suspend+0x512>
        plan_cycle_reinitialize();
 8005474:	f7ff fab4 	bl	80049e0 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005478:	7923      	ldrb	r3, [r4, #4]
 800547a:	079f      	lsls	r7, r3, #30
 800547c:	d503      	bpl.n	8005486 <protocol_exec_rt_suspend+0x12a>
 800547e:	78a2      	ldrb	r2, [r4, #2]
 8005480:	f042 0201 	orr.w	r2, r2, #1
 8005484:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005486:	f023 0306 	bic.w	r3, r3, #6
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800548a:	2004      	movs	r0, #4
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800548c:	7123      	strb	r3, [r4, #4]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800548e:	f004 f9b9 	bl	8009804 <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005492:	4b77      	ldr	r3, [pc, #476]	; (8005670 <protocol_exec_rt_suspend+0x314>)
 8005494:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005496:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800549a:	2b00      	cmp	r3, #0
 800549c:	d136      	bne.n	800550c <protocol_exec_rt_suspend+0x1b0>
  rt_exec = sys_rt_exec_accessory_override;
 800549e:	4b75      	ldr	r3, [pc, #468]	; (8005674 <protocol_exec_rt_suspend+0x318>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 80054a2:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d174      	bne.n	8005594 <protocol_exec_rt_suspend+0x238>
 80054aa:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 80054ac:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 80054b0:	f43f af68 	beq.w	8005384 <protocol_exec_rt_suspend+0x28>
    st_prep_buffer();
 80054b4:	f003 f92c 	bl	8008710 <st_prep_buffer>
  while (sys.suspend) {
 80054b8:	78a3      	ldrb	r3, [r4, #2]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f47f af66 	bne.w	800538c <protocol_exec_rt_suspend+0x30>
    }

    protocol_exec_rt_system();

  }
}
 80054c0:	b003      	add	sp, #12
 80054c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.spindle_stop_ovr) {
 80054c6:	7ae3      	ldrb	r3, [r4, #11]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80ba 	beq.w	8005642 <protocol_exec_rt_suspend+0x2e6>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 80054ce:	079f      	lsls	r7, r3, #30
 80054d0:	f140 80f7 	bpl.w	80056c2 <protocol_exec_rt_suspend+0x366>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80054d4:	4b68      	ldr	r3, [pc, #416]	; (8005678 <protocol_exec_rt_suspend+0x31c>)
 80054d6:	7a5b      	ldrb	r3, [r3, #9]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f040 81e9 	bne.w	80058b0 <protocol_exec_rt_suspend+0x554>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 80054de:	2300      	movs	r3, #0
 80054e0:	72e3      	strb	r3, [r4, #11]
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80054e2:	4b61      	ldr	r3, [pc, #388]	; (8005668 <protocol_exec_rt_suspend+0x30c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 80054e6:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f43f af76 	beq.w	80053dc <protocol_exec_rt_suspend+0x80>
    sys.state = STATE_ALARM; // Set system alarm state
 80054f0:	2701      	movs	r7, #1
    report_alarm_message(rt_exec);
 80054f2:	4658      	mov	r0, fp
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80054f4:	f10b 3bff 	add.w	fp, fp, #4294967295
    sys.state = STATE_ALARM; // Set system alarm state
 80054f8:	7027      	strb	r7, [r4, #0]
    report_alarm_message(rt_exec);
 80054fa:	f000 ff67 	bl	80063cc <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80054fe:	45bb      	cmp	fp, r7
 8005500:	f240 8181 	bls.w	8005806 <protocol_exec_rt_suspend+0x4aa>
 8005504:	4f59      	ldr	r7, [pc, #356]	; (800566c <protocol_exec_rt_suspend+0x310>)
    system_clear_exec_alarm(); // Clear alarm
 8005506:	f004 f98f 	bl	8009828 <system_clear_exec_alarm>
 800550a:	e768      	b.n	80053de <protocol_exec_rt_suspend+0x82>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 800550c:	f004 f9a8 	bl	8009860 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005510:	f01b 0f01 	tst.w	fp, #1
 8005514:	bf18      	it	ne
 8005516:	2364      	movne	r3, #100	; 0x64
 8005518:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 800551a:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 800551c:	bf08      	it	eq
 800551e:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005520:	f01b 0f02 	tst.w	fp, #2
 8005524:	bf1c      	itt	ne
 8005526:	330a      	addne	r3, #10
 8005528:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 800552a:	f01b 0f04 	tst.w	fp, #4
 800552e:	bf1c      	itt	ne
 8005530:	3b0a      	subne	r3, #10
 8005532:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005534:	f01b 0f08 	tst.w	fp, #8
 8005538:	bf1c      	itt	ne
 800553a:	3301      	addne	r3, #1
 800553c:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 800553e:	f01b 0f10 	tst.w	fp, #16
 8005542:	bf1c      	itt	ne
 8005544:	f103 33ff 	addne.w	r3, r3, #4294967295
 8005548:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 800554a:	2bc8      	cmp	r3, #200	; 0xc8
 800554c:	bf28      	it	cs
 800554e:	23c8      	movcs	r3, #200	; 0xc8
 8005550:	2b0a      	cmp	r3, #10
 8005552:	bf38      	it	cc
 8005554:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005556:	f01b 0f20 	tst.w	fp, #32
 800555a:	bf14      	ite	ne
 800555c:	2164      	movne	r1, #100	; 0x64
 800555e:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005560:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005564:	bf18      	it	ne
 8005566:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005568:	f01b 0f80 	tst.w	fp, #128	; 0x80
 800556c:	bf18      	it	ne
 800556e:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005570:	429a      	cmp	r2, r3
 8005572:	d101      	bne.n	8005578 <protocol_exec_rt_suspend+0x21c>
 8005574:	4288      	cmp	r0, r1
 8005576:	d092      	beq.n	800549e <protocol_exec_rt_suspend+0x142>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005578:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 800557a:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 800557c:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 800557e:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005580:	f7fe ff32 	bl	80043e8 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005584:	f7ff fa2c 	bl	80049e0 <plan_cycle_reinitialize>
  rt_exec = sys_rt_exec_accessory_override;
 8005588:	4b3a      	ldr	r3, [pc, #232]	; (8005674 <protocol_exec_rt_suspend+0x318>)
 800558a:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800558c:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005590:	2b00      	cmp	r3, #0
 8005592:	d08a      	beq.n	80054aa <protocol_exec_rt_suspend+0x14e>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005594:	f004 f96c 	bl	8009870 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005598:	f01b 0f01 	tst.w	fp, #1
 800559c:	bf18      	it	ne
 800559e:	2364      	movne	r3, #100	; 0x64
 80055a0:	7aa2      	ldrb	r2, [r4, #10]
 80055a2:	bf08      	it	eq
 80055a4:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80055a6:	f01b 0f02 	tst.w	fp, #2
 80055aa:	bf1c      	itt	ne
 80055ac:	330a      	addne	r3, #10
 80055ae:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80055b0:	f01b 0f04 	tst.w	fp, #4
 80055b4:	bf1c      	itt	ne
 80055b6:	3b0a      	subne	r3, #10
 80055b8:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80055ba:	f01b 0f08 	tst.w	fp, #8
 80055be:	bf1c      	itt	ne
 80055c0:	3301      	addne	r3, #1
 80055c2:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80055c4:	f01b 0f10 	tst.w	fp, #16
 80055c8:	bf1c      	itt	ne
 80055ca:	f103 33ff 	addne.w	r3, r3, #4294967295
 80055ce:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 80055d0:	2bc8      	cmp	r3, #200	; 0xc8
 80055d2:	bf28      	it	cs
 80055d4:	23c8      	movcs	r3, #200	; 0xc8
 80055d6:	2b0a      	cmp	r3, #10
 80055d8:	bf38      	it	cc
 80055da:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 80055dc:	429a      	cmp	r2, r3
 80055de:	d006      	beq.n	80055ee <protocol_exec_rt_suspend+0x292>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80055e0:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80055e2:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 80055e4:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80055e6:	f042 0308 	orr.w	r3, r2, #8
 80055ea:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80055ec:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80055ee:	f01b 0f20 	tst.w	fp, #32
      if (sys.state == STATE_HOLD) {
 80055f2:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80055f4:	d002      	beq.n	80055fc <protocol_exec_rt_suspend+0x2a0>
      if (sys.state == STATE_HOLD) {
 80055f6:	2b10      	cmp	r3, #16
 80055f8:	f000 814f 	beq.w	800589a <protocol_exec_rt_suspend+0x53e>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80055fc:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
 8005600:	f43f af54 	beq.w	80054ac <protocol_exec_rt_suspend+0x150>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005604:	2b00      	cmp	r3, #0
 8005606:	f040 80d6 	bne.w	80057b6 <protocol_exec_rt_suspend+0x45a>
        uint8_t coolant_state = gc_state.modal.coolant;
 800560a:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8005678 <protocol_exec_rt_suspend+0x31c>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800560e:	f01b 0f80 	tst.w	fp, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 8005612:	f89a 9008 	ldrb.w	r9, [sl, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005616:	f040 80da 	bne.w	80057ce <protocol_exec_rt_suspend+0x472>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 800561a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800561e:	d006      	beq.n	800562e <protocol_exec_rt_suspend+0x2d2>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005620:	f019 0f40 	tst.w	r9, #64	; 0x40
 8005624:	bf14      	ite	ne
 8005626:	f009 09bf 	andne.w	r9, r9, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 800562a:	f049 0940 	orreq.w	r9, r9, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 800562e:	4648      	mov	r0, r9
 8005630:	f7fc fa46 	bl	8001ac0 <coolant_set_state>
 8005634:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005636:	f88a 9008 	strb.w	r9, [sl, #8]
 800563a:	e737      	b.n	80054ac <protocol_exec_rt_suspend+0x150>
      sys.abort = true;  // Only place this is set true.
 800563c:	2301      	movs	r3, #1
 800563e:	7063      	strb	r3, [r4, #1]
 8005640:	e6a0      	b.n	8005384 <protocol_exec_rt_suspend+0x28>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8005642:	7923      	ldrb	r3, [r4, #4]
 8005644:	071a      	lsls	r2, r3, #28
 8005646:	f57f aec2 	bpl.w	80053ce <protocol_exec_rt_suspend+0x72>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800564a:	9b01      	ldr	r3, [sp, #4]
 800564c:	4641      	mov	r1, r8
 800564e:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005652:	f002 fb81 	bl	8007d58 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005656:	7923      	ldrb	r3, [r4, #4]
 8005658:	f023 0308 	bic.w	r3, r3, #8
 800565c:	7123      	strb	r3, [r4, #4]
 800565e:	e6b6      	b.n	80053ce <protocol_exec_rt_suspend+0x72>
 8005660:	2000126c 	.word	0x2000126c
 8005664:	200010b0 	.word	0x200010b0
 8005668:	200010e8 	.word	0x200010e8
 800566c:	200010c5 	.word	0x200010c5
 8005670:	200010ac 	.word	0x200010ac
 8005674:	200010c4 	.word	0x200010c4
 8005678:	20001014 	.word	0x20001014
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 800567c:	78a3      	ldrb	r3, [r4, #2]
 800567e:	0618      	lsls	r0, r3, #24
 8005680:	f100 80f5 	bmi.w	800586e <protocol_exec_rt_suspend+0x512>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005684:	f013 0220 	ands.w	r2, r3, #32
 8005688:	f000 8092 	beq.w	80057b0 <protocol_exec_rt_suspend+0x454>
          sys.state = STATE_SAFETY_DOOR;
 800568c:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 800568e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005698:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800569a:	2004      	movs	r0, #4
 800569c:	f004 f8b2 	bl	8009804 <system_clear_exec_state_flag>
 80056a0:	e6f7      	b.n	8005492 <protocol_exec_rt_suspend+0x136>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80056a2:	4629      	mov	r1, r5
 80056a4:	4658      	mov	r0, fp
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 80056a6:	f884 b00b 	strb.w	fp, [r4, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80056aa:	f002 fb55 	bl	8007d58 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 80056ae:	4658      	mov	r0, fp
 80056b0:	f7fc fa06 	bl	8001ac0 <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 80056b4:	78a3      	ldrb	r3, [r4, #2]
 80056b6:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 80056ba:	f043 0304 	orr.w	r3, r3, #4
 80056be:	70a3      	strb	r3, [r4, #2]
 80056c0:	e685      	b.n	80053ce <protocol_exec_rt_suspend+0x72>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 80056c2:	f013 0f0c 	tst.w	r3, #12
 80056c6:	f43f ae82 	beq.w	80053ce <protocol_exec_rt_suspend+0x72>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80056ca:	4abe      	ldr	r2, [pc, #760]	; (80059c4 <protocol_exec_rt_suspend+0x668>)
 80056cc:	7a52      	ldrb	r2, [r2, #9]
 80056ce:	2a00      	cmp	r2, #0
 80056d0:	f040 810d 	bne.w	80058ee <protocol_exec_rt_suspend+0x592>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 80056d4:	0719      	lsls	r1, r3, #28
 80056d6:	f57f af02 	bpl.w	80054de <protocol_exec_rt_suspend+0x182>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 80056da:	2002      	movs	r0, #2
 80056dc:	f004 f888 	bl	80097f0 <system_set_exec_state_flag>
 80056e0:	e6fd      	b.n	80054de <protocol_exec_rt_suspend+0x182>
      report_realtime_status();
 80056e2:	f001 fc09 	bl	8006ef8 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80056e6:	2001      	movs	r0, #1
 80056e8:	f004 f88c 	bl	8009804 <system_clear_exec_state_flag>
 80056ec:	e684      	b.n	80053f8 <protocol_exec_rt_suspend+0x9c>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 80056ee:	f013 0f28 	tst.w	r3, #40	; 0x28
 80056f2:	d07c      	beq.n	80057ee <protocol_exec_rt_suspend+0x492>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 80056f4:	78a2      	ldrb	r2, [r4, #2]
 80056f6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80056fa:	d070      	beq.n	80057de <protocol_exec_rt_suspend+0x482>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80056fc:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005700:	fa4f f98b 	sxtb.w	r9, fp
 8005704:	d002      	beq.n	800570c <protocol_exec_rt_suspend+0x3b0>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005706:	0699      	lsls	r1, r3, #26
 8005708:	f140 8157 	bpl.w	80059ba <protocol_exec_rt_suspend+0x65e>
        if (rt_exec & EXEC_FEED_HOLD) {
 800570c:	f01b 0f08 	tst.w	fp, #8
 8005710:	d003      	beq.n	800571a <protocol_exec_rt_suspend+0x3be>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005712:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005716:	f000 80a7 	beq.w	8005868 <protocol_exec_rt_suspend+0x50c>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800571a:	f01b 0f20 	tst.w	fp, #32
 800571e:	f43f ae74 	beq.w	800540a <protocol_exec_rt_suspend+0xae>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005722:	2006      	movs	r0, #6
 8005724:	f000 fe68 	bl	80063f8 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005728:	78a3      	ldrb	r3, [r4, #2]
 800572a:	061a      	lsls	r2, r3, #24
 800572c:	d407      	bmi.n	800573e <protocol_exec_rt_suspend+0x3e2>
            if (sys.state == STATE_SAFETY_DOOR) {
 800572e:	7821      	ldrb	r1, [r4, #0]
 8005730:	2940      	cmp	r1, #64	; 0x40
 8005732:	f000 80f3 	beq.w	800591c <protocol_exec_rt_suspend+0x5c0>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005736:	2980      	cmp	r1, #128	; 0x80
 8005738:	d001      	beq.n	800573e <protocol_exec_rt_suspend+0x3e2>
 800573a:	2140      	movs	r1, #64	; 0x40
 800573c:	7021      	strb	r1, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 800573e:	f043 0320 	orr.w	r3, r3, #32
      if (rt_exec & EXEC_SLEEP) {
 8005742:	f1b9 0f00 	cmp.w	r9, #0
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005746:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 8005748:	f6bf ae63 	bge.w	8005412 <protocol_exec_rt_suspend+0xb6>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800574c:	7823      	ldrb	r3, [r4, #0]
 800574e:	2b01      	cmp	r3, #1
 8005750:	f000 80dd 	beq.w	800590e <protocol_exec_rt_suspend+0x5b2>
        sys.state = STATE_SLEEP; 
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	7023      	strb	r3, [r4, #0]
 8005758:	e65b      	b.n	8005412 <protocol_exec_rt_suspend+0xb6>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800575a:	9b01      	ldr	r3, [sp, #4]
 800575c:	4641      	mov	r1, r8
 800575e:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005762:	f002 faf9 	bl	8007d58 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005766:	2101      	movs	r1, #1
 8005768:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 800576c:	f7fe fb74 	bl	8003e58 <delay_sec>
 8005770:	78a3      	ldrb	r3, [r4, #2]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005772:	f89a 2008 	ldrb.w	r2, [sl, #8]
 8005776:	f003 0102 	and.w	r1, r3, #2
 800577a:	b17a      	cbz	r2, 800579c <protocol_exec_rt_suspend+0x440>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800577c:	2900      	cmp	r1, #0
 800577e:	f47f ae26 	bne.w	80053ce <protocol_exec_rt_suspend+0x72>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8005782:	9b01      	ldr	r3, [sp, #4]
 8005784:	f003 0040 	and.w	r0, r3, #64	; 0x40
 8005788:	f7fc f99a 	bl	8001ac0 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 800578c:	2101      	movs	r1, #1
 800578e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005792:	f7fe fb61 	bl	8003e58 <delay_sec>
 8005796:	78a3      	ldrb	r3, [r4, #2]
 8005798:	f003 0102 	and.w	r1, r3, #2
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800579c:	2900      	cmp	r1, #0
 800579e:	f47f ae16 	bne.w	80053ce <protocol_exec_rt_suspend+0x72>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 80057a2:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 80057a6:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 80057a8:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 80057aa:	f004 f821 	bl	80097f0 <system_set_exec_state_flag>
 80057ae:	e60e      	b.n	80053ce <protocol_exec_rt_suspend+0x72>
          sys.suspend = SUSPEND_DISABLE;
 80057b0:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 80057b2:	7022      	strb	r2, [r4, #0]
 80057b4:	e771      	b.n	800569a <protocol_exec_rt_suspend+0x33e>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80057b6:	f013 0f18 	tst.w	r3, #24
 80057ba:	f43f ae77 	beq.w	80054ac <protocol_exec_rt_suspend+0x150>
        uint8_t coolant_state = gc_state.modal.coolant;
 80057be:	f8df a204 	ldr.w	sl, [pc, #516]	; 80059c4 <protocol_exec_rt_suspend+0x668>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80057c2:	f01b 0f80 	tst.w	fp, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 80057c6:	f89a 9008 	ldrb.w	r9, [sl, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80057ca:	f43f af26 	beq.w	800561a <protocol_exec_rt_suspend+0x2be>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 80057ce:	f019 0f80 	tst.w	r9, #128	; 0x80
 80057d2:	bf14      	ite	ne
 80057d4:	f009 097f 	andne.w	r9, r9, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 80057d8:	f049 0980 	orreq.w	r9, r9, #128	; 0x80
 80057dc:	e71d      	b.n	800561a <protocol_exec_rt_suspend+0x2be>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 80057de:	f002 ff81 	bl	80086e4 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80057e2:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80057e4:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80057e6:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	f000 80db 	beq.w	80059a4 <protocol_exec_rt_suspend+0x648>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d184      	bne.n	80056fc <protocol_exec_rt_suspend+0x3a0>
 80057f2:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80057f4:	f01b 0f40 	tst.w	fp, #64	; 0x40
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80057f8:	70a2      	strb	r2, [r4, #2]
 80057fa:	fa4f f98b 	sxtb.w	r9, fp
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80057fe:	d02f      	beq.n	8005860 <protocol_exec_rt_suspend+0x504>
 8005800:	2141      	movs	r1, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005802:	70a1      	strb	r1, [r4, #2]
 8005804:	e782      	b.n	800570c <protocol_exec_rt_suspend+0x3b0>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005806:	4638      	mov	r0, r7
 8005808:	f000 fdf6 	bl	80063f8 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 800580c:	2010      	movs	r0, #16
 800580e:	f003 fff9 	bl	8009804 <system_clear_exec_state_flag>
 8005812:	4f6d      	ldr	r7, [pc, #436]	; (80059c8 <protocol_exec_rt_suspend+0x66c>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005814:	783b      	ldrb	r3, [r7, #0]
 8005816:	06db      	lsls	r3, r3, #27
 8005818:	d5fc      	bpl.n	8005814 <protocol_exec_rt_suspend+0x4b8>
 800581a:	e674      	b.n	8005506 <protocol_exec_rt_suspend+0x1aa>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 800581c:	f896 1058 	ldrb.w	r1, [r6, #88]	; 0x58
 8005820:	078a      	lsls	r2, r1, #30
 8005822:	d59a      	bpl.n	800575a <protocol_exec_rt_suspend+0x3fe>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005824:	7921      	ldrb	r1, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005826:	f89a 0008 	ldrb.w	r0, [sl, #8]
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800582a:	f041 0208 	orr.w	r2, r1, #8
 800582e:	7122      	strb	r2, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005830:	2800      	cmp	r0, #0
 8005832:	d0b6      	beq.n	80057a2 <protocol_exec_rt_suspend+0x446>
 8005834:	e7a5      	b.n	8005782 <protocol_exec_rt_suspend+0x426>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005836:	06da      	lsls	r2, r3, #27
 8005838:	f57f ae08 	bpl.w	800544c <protocol_exec_rt_suspend+0xf0>
 800583c:	78a2      	ldrb	r2, [r4, #2]
 800583e:	07d2      	lsls	r2, r2, #31
 8005840:	f57f ae04 	bpl.w	800544c <protocol_exec_rt_suspend+0xf0>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005844:	2b10      	cmp	r3, #16
 8005846:	f47f adf4 	bne.w	8005432 <protocol_exec_rt_suspend+0xd6>
 800584a:	7ae3      	ldrb	r3, [r4, #11]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f43f adf0 	beq.w	8005432 <protocol_exec_rt_suspend+0xd6>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005852:	f043 0308 	orr.w	r3, r3, #8
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005856:	2002      	movs	r0, #2
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005858:	72e3      	strb	r3, [r4, #11]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 800585a:	f003 ffd3 	bl	8009804 <system_clear_exec_state_flag>
 800585e:	e5f8      	b.n	8005452 <protocol_exec_rt_suspend+0xf6>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005860:	f01b 0f08 	tst.w	fp, #8
 8005864:	f43f af59 	beq.w	800571a <protocol_exec_rt_suspend+0x3be>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005868:	2310      	movs	r3, #16
 800586a:	7023      	strb	r3, [r4, #0]
 800586c:	e755      	b.n	800571a <protocol_exec_rt_suspend+0x3be>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 800586e:	2300      	movs	r3, #0
 8005870:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005872:	f7fe fd05 	bl	8004280 <plan_reset>
          st_reset();
 8005876:	f002 fdd3 	bl	8008420 <st_reset>
          gc_sync_position();
 800587a:	f7fc fa23 	bl	8001cc4 <gc_sync_position>
          plan_sync_position();
 800587e:	f7ff f891 	bl	80049a4 <plan_sync_position>
 8005882:	78a3      	ldrb	r3, [r4, #2]
 8005884:	e6fe      	b.n	8005684 <protocol_exec_rt_suspend+0x328>
            if (!(system_check_safety_door_ajar())) {
 8005886:	f003 fd45 	bl	8009314 <system_check_safety_door_ajar>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 800588a:	78a3      	ldrb	r3, [r4, #2]
            if (!(system_check_safety_door_ajar())) {
 800588c:	2800      	cmp	r0, #0
 800588e:	f47f ad92 	bne.w	80053b6 <protocol_exec_rt_suspend+0x5a>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005892:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005896:	70a3      	strb	r3, [r4, #2]
 8005898:	e58d      	b.n	80053b6 <protocol_exec_rt_suspend+0x5a>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 800589a:	7ae3      	ldrb	r3, [r4, #11]
 800589c:	b9db      	cbnz	r3, 80058d6 <protocol_exec_rt_suspend+0x57a>
 800589e:	2302      	movs	r3, #2
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80058a0:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 80058a4:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80058a6:	f47f aeb0 	bne.w	800560a <protocol_exec_rt_suspend+0x2ae>
    st_prep_buffer();
 80058aa:	f002 ff31 	bl	8008710 <st_prep_buffer>
 80058ae:	e603      	b.n	80054b8 <protocol_exec_rt_suspend+0x15c>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80058b0:	4629      	mov	r1, r5
 80058b2:	f002 fa51 	bl	8007d58 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 80058b6:	2301      	movs	r3, #1
 80058b8:	72e3      	strb	r3, [r4, #11]
 80058ba:	e588      	b.n	80053ce <protocol_exec_rt_suspend+0x72>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80058bc:	78a3      	ldrb	r3, [r4, #2]
 80058be:	f013 0220 	ands.w	r2, r3, #32
 80058c2:	f47f adc3 	bne.w	800544c <protocol_exec_rt_suspend+0xf0>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 80058c6:	06d8      	lsls	r0, r3, #27
 80058c8:	d55d      	bpl.n	8005986 <protocol_exec_rt_suspend+0x62a>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 80058ca:	7022      	strb	r2, [r4, #0]
 80058cc:	e5b1      	b.n	8005432 <protocol_exec_rt_suspend+0xd6>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 80058ce:	2020      	movs	r0, #32
 80058d0:	f003 ffbc 	bl	800984c <system_set_exec_accessory_override_flag>
 80058d4:	e554      	b.n	8005380 <protocol_exec_rt_suspend+0x24>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80058d6:	07d9      	lsls	r1, r3, #31
 80058d8:	d502      	bpl.n	80058e0 <protocol_exec_rt_suspend+0x584>
 80058da:	f043 0304 	orr.w	r3, r3, #4
 80058de:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80058e0:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
 80058e4:	f47f ae91 	bne.w	800560a <protocol_exec_rt_suspend+0x2ae>
    st_prep_buffer();
 80058e8:	f002 ff12 	bl	8008710 <st_prep_buffer>
 80058ec:	e5e4      	b.n	80054b8 <protocol_exec_rt_suspend+0x15c>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 80058ee:	200a      	movs	r0, #10
 80058f0:	f000 fd82 	bl	80063f8 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80058f4:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80058f8:	0798      	lsls	r0, r3, #30
 80058fa:	d54b      	bpl.n	8005994 <protocol_exec_rt_suspend+0x638>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80058fc:	7922      	ldrb	r2, [r4, #4]
 80058fe:	7ae3      	ldrb	r3, [r4, #11]
 8005900:	f042 0208 	orr.w	r2, r2, #8
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005904:	0719      	lsls	r1, r3, #28
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005906:	7122      	strb	r2, [r4, #4]
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005908:	f57f ade9 	bpl.w	80054de <protocol_exec_rt_suspend+0x182>
 800590c:	e6e5      	b.n	80056da <protocol_exec_rt_suspend+0x37e>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800590e:	78a3      	ldrb	r3, [r4, #2]
 8005910:	f043 0305 	orr.w	r3, r3, #5
 8005914:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	7023      	strb	r3, [r4, #0]
 800591a:	e57a      	b.n	8005412 <protocol_exec_rt_suspend+0xb6>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 800591c:	071f      	lsls	r7, r3, #28
 800591e:	f57f af0c 	bpl.w	800573a <protocol_exec_rt_suspend+0x3de>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005922:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005926:	f043 0302 	orr.w	r3, r3, #2
 800592a:	e706      	b.n	800573a <protocol_exec_rt_suspend+0x3de>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 800592c:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <protocol_exec_rt_suspend+0x668>)
 800592e:	7a5f      	ldrb	r7, [r3, #9]
 8005930:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 8005932:	f8d3 800c 	ldr.w	r8, [r3, #12]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005936:	ea47 0302 	orr.w	r3, r7, r2
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	e51a      	b.n	8005374 <protocol_exec_rt_suspend+0x18>
              sys.state = STATE_CYCLE;
 800593e:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005940:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005942:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005944:	f002 fee4 	bl	8008710 <st_prep_buffer>
              st_wake_up();
 8005948:	f002 fb46 	bl	8007fd8 <st_wake_up>
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 800594c:	2002      	movs	r0, #2
 800594e:	f003 ff59 	bl	8009804 <system_clear_exec_state_flag>
 8005952:	e57e      	b.n	8005452 <protocol_exec_rt_suspend+0xf6>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8005954:	200b      	movs	r0, #11
 8005956:	9201      	str	r2, [sp, #4]
 8005958:	f000 fd4e 	bl	80063f8 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 800595c:	9a01      	ldr	r2, [sp, #4]
 800595e:	2100      	movs	r1, #0
 8005960:	4610      	mov	r0, r2
 8005962:	f002 f9f9 	bl	8007d58 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 8005966:	9a01      	ldr	r2, [sp, #4]
 8005968:	4610      	mov	r0, r2
 800596a:	f7fc f8a9 	bl	8001ac0 <coolant_set_state>
            st_go_idle(); // Disable steppers
 800596e:	f002 fb73 	bl	8008058 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 8005972:	7863      	ldrb	r3, [r4, #1]
 8005974:	2b00      	cmp	r3, #0
 8005976:	f47f ada3 	bne.w	80054c0 <protocol_exec_rt_suspend+0x164>
 800597a:	f7ff fb05 	bl	8004f88 <protocol_exec_rt_system>
 800597e:	7863      	ldrb	r3, [r4, #1]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0fa      	beq.n	800597a <protocol_exec_rt_suspend+0x61e>
 8005984:	e59c      	b.n	80054c0 <protocol_exec_rt_suspend+0x164>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005986:	0759      	lsls	r1, r3, #29
 8005988:	f57f ad60 	bpl.w	800544c <protocol_exec_rt_suspend+0xf0>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 800598c:	f043 0308 	orr.w	r3, r3, #8
 8005990:	70a3      	strb	r3, [r4, #2]
 8005992:	e55b      	b.n	800544c <protocol_exec_rt_suspend+0xf0>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005994:	9b01      	ldr	r3, [sp, #4]
 8005996:	4641      	mov	r1, r8
 8005998:	f003 0030 	and.w	r0, r3, #48	; 0x30
 800599c:	f002 f9dc 	bl	8007d58 <spindle_set_state>
 80059a0:	7ae3      	ldrb	r3, [r4, #11]
 80059a2:	e697      	b.n	80056d4 <protocol_exec_rt_suspend+0x378>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 80059a4:	fa4f f98b 	sxtb.w	r9, fp
 80059a8:	f1b9 0f00 	cmp.w	r9, #0
 80059ac:	f6ff aeb5 	blt.w	800571a <protocol_exec_rt_suspend+0x3be>
 80059b0:	78a3      	ldrb	r3, [r4, #2]
 80059b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059b6:	70a3      	strb	r3, [r4, #2]
 80059b8:	e6af      	b.n	800571a <protocol_exec_rt_suspend+0x3be>
 80059ba:	78a1      	ldrb	r1, [r4, #2]
 80059bc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80059c0:	70a1      	strb	r1, [r4, #2]
 80059c2:	e6a3      	b.n	800570c <protocol_exec_rt_suspend+0x3b0>
 80059c4:	20001014 	.word	0x20001014
 80059c8:	200010c5 	.word	0x200010c5

080059cc <protocol_execute_realtime>:
{
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80059ce:	4bab      	ldr	r3, [pc, #684]	; (8005c7c <protocol_execute_realtime+0x2b0>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d156      	bne.n	8005a84 <protocol_execute_realtime+0xb8>
 80059d6:	4caa      	ldr	r4, [pc, #680]	; (8005c80 <protocol_execute_realtime+0x2b4>)
 80059d8:	4daa      	ldr	r5, [pc, #680]	; (8005c84 <protocol_execute_realtime+0x2b8>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 80059da:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 80059dc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80059e0:	b393      	cbz	r3, 8005a48 <protocol_execute_realtime+0x7c>
    if (rt_exec & EXEC_RESET) {
 80059e2:	06ee      	lsls	r6, r5, #27
 80059e4:	f100 80dd 	bmi.w	8005ba2 <protocol_execute_realtime+0x1d6>
    if (rt_exec & EXEC_STATUS_REPORT) {
 80059e8:	07e8      	lsls	r0, r5, #31
 80059ea:	f100 80f8 	bmi.w	8005bde <protocol_execute_realtime+0x212>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 80059ee:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 80059f2:	d00a      	beq.n	8005a0a <protocol_execute_realtime+0x3e>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 80059f4:	7823      	ldrb	r3, [r4, #0]
 80059f6:	0799      	lsls	r1, r3, #30
 80059f8:	f000 80f7 	beq.w	8005bea <protocol_execute_realtime+0x21e>
 80059fc:	b26e      	sxtb	r6, r5
      if (rt_exec & EXEC_SLEEP) {
 80059fe:	2e00      	cmp	r6, #0
 8005a00:	f2c0 8169 	blt.w	8005cd6 <protocol_execute_realtime+0x30a>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005a04:	20e8      	movs	r0, #232	; 0xe8
 8005a06:	f003 fefd 	bl	8009804 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005a0a:	07ab      	lsls	r3, r5, #30
 8005a0c:	d519      	bpl.n	8005a42 <protocol_execute_realtime+0x76>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005a0e:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005a12:	d113      	bne.n	8005a3c <protocol_execute_realtime+0x70>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005a14:	7823      	ldrb	r3, [r4, #0]
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	f000 8175 	beq.w	8005d06 <protocol_execute_realtime+0x33a>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f040 8143 	bne.w	8005ca8 <protocol_execute_realtime+0x2dc>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005a22:	2300      	movs	r3, #0
 8005a24:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005a26:	f7fe fc6d 	bl	8004304 <plan_get_current_block>
 8005a2a:	b120      	cbz	r0, 8005a36 <protocol_execute_realtime+0x6a>
 8005a2c:	78a3      	ldrb	r3, [r4, #2]
 8005a2e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005a32:	f000 81a0 	beq.w	8005d76 <protocol_execute_realtime+0x3aa>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005a36:	2300      	movs	r3, #0
 8005a38:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005a3a:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005a3c:	2002      	movs	r0, #2
 8005a3e:	f003 fee1 	bl	8009804 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005a42:	0769      	lsls	r1, r5, #29
 8005a44:	f100 80b0 	bmi.w	8005ba8 <protocol_execute_realtime+0x1dc>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005a48:	4b8f      	ldr	r3, [pc, #572]	; (8005c88 <protocol_execute_realtime+0x2bc>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005a4c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d16e      	bne.n	8005b32 <protocol_execute_realtime+0x166>
  rt_exec = sys_rt_exec_accessory_override;
 8005a54:	4b8d      	ldr	r3, [pc, #564]	; (8005c8c <protocol_execute_realtime+0x2c0>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005a58:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005a5c:	bb13      	cbnz	r3, 8005aa4 <protocol_execute_realtime+0xd8>
 8005a5e:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005a60:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005a64:	d105      	bne.n	8005a72 <protocol_execute_realtime+0xa6>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005a66:	78a3      	ldrb	r3, [r4, #2]
 8005a68:	b943      	cbnz	r3, 8005a7c <protocol_execute_realtime+0xb0>
 8005a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005a6c:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005a70:	d14c      	bne.n	8005b0c <protocol_execute_realtime+0x140>
    st_prep_buffer();
 8005a72:	f002 fe4d 	bl	8008710 <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005a76:	78a3      	ldrb	r3, [r4, #2]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f6      	beq.n	8005a6a <protocol_execute_realtime+0x9e>
}
 8005a7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005a80:	f7ff bc6c 	b.w	800535c <protocol_exec_rt_suspend>
    sys.state = STATE_ALARM; // Set system alarm state
 8005a84:	2601      	movs	r6, #1
 8005a86:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005a8a:	4c7d      	ldr	r4, [pc, #500]	; (8005c80 <protocol_execute_realtime+0x2b4>)
    report_alarm_message(rt_exec);
 8005a8c:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005a8e:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005a90:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8005a92:	f000 fc9b 	bl	80063cc <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005a96:	42b5      	cmp	r5, r6
 8005a98:	f240 8123 	bls.w	8005ce2 <protocol_execute_realtime+0x316>
 8005a9c:	4d79      	ldr	r5, [pc, #484]	; (8005c84 <protocol_execute_realtime+0x2b8>)
    system_clear_exec_alarm(); // Clear alarm
 8005a9e:	f003 fec3 	bl	8009828 <system_clear_exec_alarm>
 8005aa2:	e79a      	b.n	80059da <protocol_execute_realtime+0xe>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005aa4:	f003 fee4 	bl	8009870 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005aa8:	7aa2      	ldrb	r2, [r4, #10]
 8005aaa:	f015 0f01 	tst.w	r5, #1
 8005aae:	bf0c      	ite	eq
 8005ab0:	4613      	moveq	r3, r2
 8005ab2:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005ab4:	07a8      	lsls	r0, r5, #30
 8005ab6:	bf44      	itt	mi
 8005ab8:	330a      	addmi	r3, #10
 8005aba:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005abc:	0769      	lsls	r1, r5, #29
 8005abe:	bf44      	itt	mi
 8005ac0:	3b0a      	submi	r3, #10
 8005ac2:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005ac4:	072f      	lsls	r7, r5, #28
 8005ac6:	bf44      	itt	mi
 8005ac8:	3301      	addmi	r3, #1
 8005aca:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005acc:	06ee      	lsls	r6, r5, #27
 8005ace:	bf44      	itt	mi
 8005ad0:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005ad4:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005ad6:	2bc8      	cmp	r3, #200	; 0xc8
 8005ad8:	bf28      	it	cs
 8005ada:	23c8      	movcs	r3, #200	; 0xc8
 8005adc:	2b0a      	cmp	r3, #10
 8005ade:	bf38      	it	cc
 8005ae0:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d006      	beq.n	8005af4 <protocol_execute_realtime+0x128>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005ae6:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005ae8:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005aea:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005aec:	f042 0308 	orr.w	r3, r2, #8
 8005af0:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005af2:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005af4:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 8005af6:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005af8:	d502      	bpl.n	8005b00 <protocol_execute_realtime+0x134>
      if (sys.state == STATE_HOLD) {
 8005afa:	2b10      	cmp	r3, #16
 8005afc:	f000 80ca 	beq.w	8005c94 <protocol_execute_realtime+0x2c8>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005b00:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005b04:	d0ac      	beq.n	8005a60 <protocol_execute_realtime+0x94>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f040 80e0 	bne.w	8005ccc <protocol_execute_realtime+0x300>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005b0c:	4f60      	ldr	r7, [pc, #384]	; (8005c90 <protocol_execute_realtime+0x2c4>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005b0e:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8005b10:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005b12:	f100 80f1 	bmi.w	8005cf8 <protocol_execute_realtime+0x32c>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005b16:	0668      	lsls	r0, r5, #25
 8005b18:	d505      	bpl.n	8005b26 <protocol_execute_realtime+0x15a>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005b1a:	0671      	lsls	r1, r6, #25
 8005b1c:	bf4c      	ite	mi
 8005b1e:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005b22:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005b26:	4630      	mov	r0, r6
 8005b28:	f7fb ffca 	bl	8001ac0 <coolant_set_state>
 8005b2c:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005b2e:	723e      	strb	r6, [r7, #8]
 8005b30:	e796      	b.n	8005a60 <protocol_execute_realtime+0x94>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005b32:	f003 fe95 	bl	8009860 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005b36:	7a21      	ldrb	r1, [r4, #8]
 8005b38:	f015 0f01 	tst.w	r5, #1
 8005b3c:	bf0c      	ite	eq
 8005b3e:	460b      	moveq	r3, r1
 8005b40:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005b42:	07ae      	lsls	r6, r5, #30
 8005b44:	bf44      	itt	mi
 8005b46:	330a      	addmi	r3, #10
 8005b48:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005b4a:	0768      	lsls	r0, r5, #29
 8005b4c:	bf44      	itt	mi
 8005b4e:	3b0a      	submi	r3, #10
 8005b50:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005b52:	072f      	lsls	r7, r5, #28
 8005b54:	bf44      	itt	mi
 8005b56:	3301      	addmi	r3, #1
 8005b58:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005b5a:	06ee      	lsls	r6, r5, #27
 8005b5c:	bf44      	itt	mi
 8005b5e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005b62:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005b64:	2bc8      	cmp	r3, #200	; 0xc8
 8005b66:	bf28      	it	cs
 8005b68:	23c8      	movcs	r3, #200	; 0xc8
 8005b6a:	2b0a      	cmp	r3, #10
 8005b6c:	bf38      	it	cc
 8005b6e:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005b70:	7a60      	ldrb	r0, [r4, #9]
 8005b72:	f015 0f20 	tst.w	r5, #32
 8005b76:	bf14      	ite	ne
 8005b78:	2264      	movne	r2, #100	; 0x64
 8005b7a:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005b7c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b80:	bf18      	it	ne
 8005b82:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005b84:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005b88:	bf18      	it	ne
 8005b8a:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	d023      	beq.n	8005bd8 <protocol_execute_realtime+0x20c>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005b90:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8005b92:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005b94:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005b96:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005b98:	f7fe fc26 	bl	80043e8 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005b9c:	f7fe ff20 	bl	80049e0 <plan_cycle_reinitialize>
 8005ba0:	e758      	b.n	8005a54 <protocol_execute_realtime+0x88>
      sys.abort = true;  // Only place this is set true.
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	7063      	strb	r3, [r4, #1]
 8005ba6:	e75e      	b.n	8005a66 <protocol_execute_realtime+0x9a>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005ba8:	7823      	ldrb	r3, [r4, #0]
 8005baa:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005bae:	d002      	beq.n	8005bb6 <protocol_execute_realtime+0x1ea>
 8005bb0:	78e3      	ldrb	r3, [r4, #3]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d051      	beq.n	8005c5a <protocol_execute_realtime+0x28e>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005bb6:	78a3      	ldrb	r3, [r4, #2]
 8005bb8:	061f      	lsls	r7, r3, #24
 8005bba:	d452      	bmi.n	8005c62 <protocol_execute_realtime+0x296>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005bbc:	f013 0220 	ands.w	r2, r3, #32
 8005bc0:	d036      	beq.n	8005c30 <protocol_execute_realtime+0x264>
          sys.state = STATE_SAFETY_DOOR;
 8005bc2:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005bce:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005bd0:	2004      	movs	r0, #4
 8005bd2:	f003 fe17 	bl	8009804 <system_clear_exec_state_flag>
 8005bd6:	e737      	b.n	8005a48 <protocol_execute_realtime+0x7c>
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005bd8:	4290      	cmp	r0, r2
 8005bda:	d1d9      	bne.n	8005b90 <protocol_execute_realtime+0x1c4>
 8005bdc:	e73a      	b.n	8005a54 <protocol_execute_realtime+0x88>
      report_realtime_status();
 8005bde:	f001 f98b 	bl	8006ef8 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005be2:	2001      	movs	r0, #1
 8005be4:	f003 fe0e 	bl	8009804 <system_clear_exec_state_flag>
 8005be8:	e701      	b.n	80059ee <protocol_execute_realtime+0x22>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005bea:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005bee:	d122      	bne.n	8005c36 <protocol_execute_realtime+0x26a>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005bf0:	bb33      	cbnz	r3, 8005c40 <protocol_execute_realtime+0x274>
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005bf6:	066a      	lsls	r2, r5, #25
 8005bf8:	f100 809b 	bmi.w	8005d32 <protocol_execute_realtime+0x366>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005bfc:	072f      	lsls	r7, r5, #28
 8005bfe:	b26e      	sxtb	r6, r5
 8005c00:	d501      	bpl.n	8005c06 <protocol_execute_realtime+0x23a>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005c02:	2310      	movs	r3, #16
 8005c04:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005c06:	06a8      	lsls	r0, r5, #26
 8005c08:	f57f aef9 	bpl.w	80059fe <protocol_execute_realtime+0x32>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005c0c:	2006      	movs	r0, #6
 8005c0e:	f000 fbf3 	bl	80063f8 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005c12:	78a3      	ldrb	r3, [r4, #2]
 8005c14:	0619      	lsls	r1, r3, #24
 8005c16:	d407      	bmi.n	8005c28 <protocol_execute_realtime+0x25c>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005c18:	7822      	ldrb	r2, [r4, #0]
 8005c1a:	2a40      	cmp	r2, #64	; 0x40
 8005c1c:	f000 80ba 	beq.w	8005d94 <protocol_execute_realtime+0x3c8>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005c20:	2a80      	cmp	r2, #128	; 0x80
 8005c22:	d001      	beq.n	8005c28 <protocol_execute_realtime+0x25c>
 8005c24:	2240      	movs	r2, #64	; 0x40
 8005c26:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005c28:	f043 0320 	orr.w	r3, r3, #32
 8005c2c:	70a3      	strb	r3, [r4, #2]
 8005c2e:	e6e6      	b.n	80059fe <protocol_execute_realtime+0x32>
          sys.suspend = SUSPEND_DISABLE;
 8005c30:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005c32:	7022      	strb	r2, [r4, #0]
 8005c34:	e7cc      	b.n	8005bd0 <protocol_execute_realtime+0x204>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005c36:	78a2      	ldrb	r2, [r4, #2]
 8005c38:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005c3c:	f000 808a 	beq.w	8005d54 <protocol_execute_realtime+0x388>
 8005c40:	b26a      	sxtb	r2, r5
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005c42:	0668      	lsls	r0, r5, #25
 8005c44:	4616      	mov	r6, r2
 8005c46:	d502      	bpl.n	8005c4e <protocol_execute_realtime+0x282>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005c48:	0699      	lsls	r1, r3, #26
 8005c4a:	f140 80ab 	bpl.w	8005da4 <protocol_execute_realtime+0x3d8>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005c4e:	072f      	lsls	r7, r5, #28
 8005c50:	d5d9      	bpl.n	8005c06 <protocol_execute_realtime+0x23a>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005c52:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005c56:	d1d6      	bne.n	8005c06 <protocol_execute_realtime+0x23a>
 8005c58:	e7d3      	b.n	8005c02 <protocol_execute_realtime+0x236>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005c5a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da5a      	bge.n	8005d18 <protocol_execute_realtime+0x34c>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005c62:	2300      	movs	r3, #0
 8005c64:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005c66:	f7fe fb0b 	bl	8004280 <plan_reset>
          st_reset();
 8005c6a:	f002 fbd9 	bl	8008420 <st_reset>
          gc_sync_position();
 8005c6e:	f7fc f829 	bl	8001cc4 <gc_sync_position>
          plan_sync_position();
 8005c72:	f7fe fe97 	bl	80049a4 <plan_sync_position>
 8005c76:	78a3      	ldrb	r3, [r4, #2]
 8005c78:	e7a0      	b.n	8005bbc <protocol_execute_realtime+0x1f0>
 8005c7a:	bf00      	nop
 8005c7c:	200010e8 	.word	0x200010e8
 8005c80:	200010b0 	.word	0x200010b0
 8005c84:	200010c5 	.word	0x200010c5
 8005c88:	200010ac 	.word	0x200010ac
 8005c8c:	200010c4 	.word	0x200010c4
 8005c90:	20001014 	.word	0x20001014
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005c94:	7ae3      	ldrb	r3, [r4, #11]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d150      	bne.n	8005d3c <protocol_execute_realtime+0x370>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005c9e:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005ca2:	f47f af33 	bne.w	8005b0c <protocol_execute_realtime+0x140>
 8005ca6:	e6e4      	b.n	8005a72 <protocol_execute_realtime+0xa6>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005ca8:	06da      	lsls	r2, r3, #27
 8005caa:	f57f aec7 	bpl.w	8005a3c <protocol_execute_realtime+0x70>
 8005cae:	78a2      	ldrb	r2, [r4, #2]
 8005cb0:	07d0      	lsls	r0, r2, #31
 8005cb2:	f57f aec3 	bpl.w	8005a3c <protocol_execute_realtime+0x70>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005cb6:	2b10      	cmp	r3, #16
 8005cb8:	f47f aeb3 	bne.w	8005a22 <protocol_execute_realtime+0x56>
 8005cbc:	7ae3      	ldrb	r3, [r4, #11]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f43f aeaf 	beq.w	8005a22 <protocol_execute_realtime+0x56>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005cc4:	f043 0308 	orr.w	r3, r3, #8
 8005cc8:	72e3      	strb	r3, [r4, #11]
 8005cca:	e6b7      	b.n	8005a3c <protocol_execute_realtime+0x70>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005ccc:	f013 0f18 	tst.w	r3, #24
 8005cd0:	f43f aec6 	beq.w	8005a60 <protocol_execute_realtime+0x94>
 8005cd4:	e71a      	b.n	8005b0c <protocol_execute_realtime+0x140>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005cd6:	7823      	ldrb	r3, [r4, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d036      	beq.n	8005d4a <protocol_execute_realtime+0x37e>
        sys.state = STATE_SLEEP; 
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	7023      	strb	r3, [r4, #0]
 8005ce0:	e690      	b.n	8005a04 <protocol_execute_realtime+0x38>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f000 fb88 	bl	80063f8 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005ce8:	2010      	movs	r0, #16
 8005cea:	f003 fd8b 	bl	8009804 <system_clear_exec_state_flag>
 8005cee:	4d2f      	ldr	r5, [pc, #188]	; (8005dac <protocol_execute_realtime+0x3e0>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005cf0:	782b      	ldrb	r3, [r5, #0]
 8005cf2:	06df      	lsls	r7, r3, #27
 8005cf4:	d5fc      	bpl.n	8005cf0 <protocol_execute_realtime+0x324>
 8005cf6:	e6d2      	b.n	8005a9e <protocol_execute_realtime+0xd2>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005cf8:	0633      	lsls	r3, r6, #24
 8005cfa:	bf4c      	ite	mi
 8005cfc:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005d00:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
 8005d04:	e707      	b.n	8005b16 <protocol_execute_realtime+0x14a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005d06:	78a3      	ldrb	r3, [r4, #2]
 8005d08:	f013 0220 	ands.w	r2, r3, #32
 8005d0c:	f47f ae96 	bne.w	8005a3c <protocol_execute_realtime+0x70>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005d10:	06df      	lsls	r7, r3, #27
 8005d12:	d538      	bpl.n	8005d86 <protocol_execute_realtime+0x3ba>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005d14:	7022      	strb	r2, [r4, #0]
 8005d16:	e684      	b.n	8005a22 <protocol_execute_realtime+0x56>
        plan_cycle_reinitialize();
 8005d18:	f7fe fe62 	bl	80049e0 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005d1c:	7923      	ldrb	r3, [r4, #4]
 8005d1e:	079a      	lsls	r2, r3, #30
 8005d20:	d503      	bpl.n	8005d2a <protocol_execute_realtime+0x35e>
 8005d22:	78a2      	ldrb	r2, [r4, #2]
 8005d24:	f042 0201 	orr.w	r2, r2, #1
 8005d28:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005d2a:	f023 0306 	bic.w	r3, r3, #6
 8005d2e:	7123      	strb	r3, [r4, #4]
 8005d30:	e74e      	b.n	8005bd0 <protocol_execute_realtime+0x204>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005d32:	2141      	movs	r1, #65	; 0x41
 8005d34:	b26a      	sxtb	r2, r5
 8005d36:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005d38:	70a1      	strb	r1, [r4, #2]
 8005d3a:	e788      	b.n	8005c4e <protocol_execute_realtime+0x282>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005d3c:	07d9      	lsls	r1, r3, #31
 8005d3e:	f57f ae95 	bpl.w	8005a6c <protocol_execute_realtime+0xa0>
 8005d42:	f043 0304 	orr.w	r3, r3, #4
 8005d46:	72e3      	strb	r3, [r4, #11]
 8005d48:	e7a9      	b.n	8005c9e <protocol_execute_realtime+0x2d2>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005d4a:	78a3      	ldrb	r3, [r4, #2]
 8005d4c:	f043 0305 	orr.w	r3, r3, #5
 8005d50:	70a3      	strb	r3, [r4, #2]
 8005d52:	e7c3      	b.n	8005cdc <protocol_execute_realtime+0x310>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005d54:	f002 fcc6 	bl	80086e4 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005d58:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005d5a:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005d5c:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	f47f af46 	bne.w	8005bf0 <protocol_execute_realtime+0x224>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005d64:	b26e      	sxtb	r6, r5
 8005d66:	2e00      	cmp	r6, #0
 8005d68:	f6ff af4d 	blt.w	8005c06 <protocol_execute_realtime+0x23a>
 8005d6c:	78a3      	ldrb	r3, [r4, #2]
 8005d6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d72:	70a3      	strb	r3, [r4, #2]
 8005d74:	e747      	b.n	8005c06 <protocol_execute_realtime+0x23a>
              sys.state = STATE_CYCLE;
 8005d76:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005d78:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005d7a:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005d7c:	f002 fcc8 	bl	8008710 <st_prep_buffer>
              st_wake_up();
 8005d80:	f002 f92a 	bl	8007fd8 <st_wake_up>
 8005d84:	e65a      	b.n	8005a3c <protocol_execute_realtime+0x70>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005d86:	075e      	lsls	r6, r3, #29
 8005d88:	f57f ae58 	bpl.w	8005a3c <protocol_execute_realtime+0x70>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005d8c:	f043 0308 	orr.w	r3, r3, #8
 8005d90:	70a3      	strb	r3, [r4, #2]
 8005d92:	e653      	b.n	8005a3c <protocol_execute_realtime+0x70>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005d94:	071a      	lsls	r2, r3, #28
 8005d96:	f57f af45 	bpl.w	8005c24 <protocol_execute_realtime+0x258>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005d9a:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005d9e:	f043 0302 	orr.w	r3, r3, #2
 8005da2:	e73f      	b.n	8005c24 <protocol_execute_realtime+0x258>
 8005da4:	78a1      	ldrb	r1, [r4, #2]
 8005da6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005daa:	e7c4      	b.n	8005d36 <protocol_execute_realtime+0x36a>
 8005dac:	200010c5 	.word	0x200010c5

08005db0 <protocol_buffer_synchronize>:
{
 8005db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8005db4:	f7fe faa6 	bl	8004304 <plan_get_current_block>
 8005db8:	b110      	cbz	r0, 8005dc0 <protocol_buffer_synchronize+0x10>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005dba:	2002      	movs	r0, #2
 8005dbc:	f003 fd18 	bl	80097f0 <system_set_exec_state_flag>
 8005dc0:	4eab      	ldr	r6, [pc, #684]	; (8006070 <protocol_buffer_synchronize+0x2c0>)
 8005dc2:	4cac      	ldr	r4, [pc, #688]	; (8006074 <protocol_buffer_synchronize+0x2c4>)
 8005dc4:	4dac      	ldr	r5, [pc, #688]	; (8006078 <protocol_buffer_synchronize+0x2c8>)
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005dc6:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8006080 <protocol_buffer_synchronize+0x2d0>
  rt_exec = sys_rt_exec_accessory_override;
 8005dca:	4fac      	ldr	r7, [pc, #688]	; (800607c <protocol_buffer_synchronize+0x2cc>)
        uint8_t coolant_state = gc_state.modal.coolant;
 8005dcc:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 8006084 <protocol_buffer_synchronize+0x2d4>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005dd0:	7833      	ldrb	r3, [r6, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005dd2:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 808b 	bne.w	8005ef2 <protocol_buffer_synchronize+0x142>
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005ddc:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005dde:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d054      	beq.n	8005e90 <protocol_buffer_synchronize+0xe0>
    if (rt_exec & EXEC_RESET) {
 8005de6:	f01a 0f10 	tst.w	sl, #16
 8005dea:	f040 8121 	bne.w	8006030 <protocol_buffer_synchronize+0x280>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005dee:	f01a 0f01 	tst.w	sl, #1
 8005df2:	f040 8137 	bne.w	8006064 <protocol_buffer_synchronize+0x2b4>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005df6:	f01a 0fe8 	tst.w	sl, #232	; 0xe8
 8005dfa:	d00c      	beq.n	8005e16 <protocol_buffer_synchronize+0x66>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005dfc:	7823      	ldrb	r3, [r4, #0]
 8005dfe:	0798      	lsls	r0, r3, #30
 8005e00:	f000 8142 	beq.w	8006088 <protocol_buffer_synchronize+0x2d8>
 8005e04:	fa4f fb8a 	sxtb.w	fp, sl
      if (rt_exec & EXEC_SLEEP) {
 8005e08:	f1bb 0f00 	cmp.w	fp, #0
 8005e0c:	f2c0 8167 	blt.w	80060de <protocol_buffer_synchronize+0x32e>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005e10:	20e8      	movs	r0, #232	; 0xe8
 8005e12:	f003 fcf7 	bl	8009804 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005e16:	f01a 0f02 	tst.w	sl, #2
 8005e1a:	d019      	beq.n	8005e50 <protocol_buffer_synchronize+0xa0>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005e1c:	f01a 0f68 	tst.w	sl, #104	; 0x68
 8005e20:	d113      	bne.n	8005e4a <protocol_buffer_synchronize+0x9a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005e22:	7823      	ldrb	r3, [r4, #0]
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	f000 81ca 	beq.w	80061be <protocol_buffer_synchronize+0x40e>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 81b5 	bne.w	800619a <protocol_buffer_synchronize+0x3ea>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005e30:	2300      	movs	r3, #0
 8005e32:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005e34:	f7fe fa66 	bl	8004304 <plan_get_current_block>
 8005e38:	b120      	cbz	r0, 8005e44 <protocol_buffer_synchronize+0x94>
 8005e3a:	78a3      	ldrb	r3, [r4, #2]
 8005e3c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005e40:	f000 81d0 	beq.w	80061e4 <protocol_buffer_synchronize+0x434>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005e44:	2300      	movs	r3, #0
 8005e46:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005e48:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005e4a:	2002      	movs	r0, #2
 8005e4c:	f003 fcda 	bl	8009804 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005e50:	f01a 0f04 	tst.w	sl, #4
 8005e54:	d01c      	beq.n	8005e90 <protocol_buffer_synchronize+0xe0>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005e56:	7823      	ldrb	r3, [r4, #0]
 8005e58:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005e5c:	f000 80f0 	beq.w	8006040 <protocol_buffer_synchronize+0x290>
 8005e60:	78e3      	ldrb	r3, [r4, #3]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f040 80ec 	bne.w	8006040 <protocol_buffer_synchronize+0x290>
 8005e68:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f2c0 8178 	blt.w	8006162 <protocol_buffer_synchronize+0x3b2>
        plan_cycle_reinitialize();
 8005e72:	f7fe fdb5 	bl	80049e0 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005e76:	7923      	ldrb	r3, [r4, #4]
 8005e78:	079a      	lsls	r2, r3, #30
 8005e7a:	d503      	bpl.n	8005e84 <protocol_buffer_synchronize+0xd4>
 8005e7c:	78a2      	ldrb	r2, [r4, #2]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005e84:	f023 0306 	bic.w	r3, r3, #6
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005e88:	2004      	movs	r0, #4
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005e8a:	7123      	strb	r3, [r4, #4]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005e8c:	f003 fcba 	bl	8009804 <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005e90:	f898 3000 	ldrb.w	r3, [r8]
  if (rt_exec) {
 8005e94:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 8089 	bne.w	8005fb0 <protocol_buffer_synchronize+0x200>
  rt_exec = sys_rt_exec_accessory_override;
 8005e9e:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 8005ea0:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d133      	bne.n	8005f10 <protocol_buffer_synchronize+0x160>
 8005ea8:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005eaa:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005eae:	d118      	bne.n	8005ee2 <protocol_buffer_synchronize+0x132>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005eb0:	78a3      	ldrb	r3, [r4, #2]
 8005eb2:	b9db      	cbnz	r3, 8005eec <protocol_buffer_synchronize+0x13c>
    if (sys.abort) { return; } // Check for system abort
 8005eb4:	7863      	ldrb	r3, [r4, #1]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f040 80c0 	bne.w	800603c <protocol_buffer_synchronize+0x28c>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 8005ebc:	f7fe fa22 	bl	8004304 <plan_get_current_block>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d185      	bne.n	8005dd0 <protocol_buffer_synchronize+0x20>
 8005ec4:	7823      	ldrb	r3, [r4, #0]
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d082      	beq.n	8005dd0 <protocol_buffer_synchronize+0x20>
 8005eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005ece:	7ae3      	ldrb	r3, [r4, #11]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8159 	beq.w	8006188 <protocol_buffer_synchronize+0x3d8>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005ed6:	07d9      	lsls	r1, r3, #31
 8005ed8:	f100 818c 	bmi.w	80061f4 <protocol_buffer_synchronize+0x444>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005edc:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8005ee0:	d14f      	bne.n	8005f82 <protocol_buffer_synchronize+0x1d2>
    st_prep_buffer();
 8005ee2:	f002 fc15 	bl	8008710 <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005ee6:	78a3      	ldrb	r3, [r4, #2]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0e3      	beq.n	8005eb4 <protocol_buffer_synchronize+0x104>
 8005eec:	f7ff fa36 	bl	800535c <protocol_exec_rt_suspend>
 8005ef0:	e7e0      	b.n	8005eb4 <protocol_buffer_synchronize+0x104>
    sys.state = STATE_ALARM; // Set system alarm state
 8005ef2:	f04f 0b01 	mov.w	fp, #1
    report_alarm_message(rt_exec);
 8005ef6:	4650      	mov	r0, sl
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005ef8:	f10a 3aff 	add.w	sl, sl, #4294967295
    sys.state = STATE_ALARM; // Set system alarm state
 8005efc:	f884 b000 	strb.w	fp, [r4]
    report_alarm_message(rt_exec);
 8005f00:	f000 fa64 	bl	80063cc <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005f04:	45da      	cmp	sl, fp
 8005f06:	f240 8118 	bls.w	800613a <protocol_buffer_synchronize+0x38a>
    system_clear_exec_alarm(); // Clear alarm
 8005f0a:	f003 fc8d 	bl	8009828 <system_clear_exec_alarm>
 8005f0e:	e765      	b.n	8005ddc <protocol_buffer_synchronize+0x2c>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005f10:	f003 fcae 	bl	8009870 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005f14:	f01a 0f01 	tst.w	sl, #1
 8005f18:	bf18      	it	ne
 8005f1a:	2364      	movne	r3, #100	; 0x64
 8005f1c:	7aa2      	ldrb	r2, [r4, #10]
 8005f1e:	bf08      	it	eq
 8005f20:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005f22:	f01a 0f02 	tst.w	sl, #2
 8005f26:	bf1c      	itt	ne
 8005f28:	330a      	addne	r3, #10
 8005f2a:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005f2c:	f01a 0f04 	tst.w	sl, #4
 8005f30:	bf1c      	itt	ne
 8005f32:	3b0a      	subne	r3, #10
 8005f34:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005f36:	f01a 0f08 	tst.w	sl, #8
 8005f3a:	bf1c      	itt	ne
 8005f3c:	3301      	addne	r3, #1
 8005f3e:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005f40:	f01a 0f10 	tst.w	sl, #16
 8005f44:	bf1c      	itt	ne
 8005f46:	f103 33ff 	addne.w	r3, r3, #4294967295
 8005f4a:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005f4c:	2bc8      	cmp	r3, #200	; 0xc8
 8005f4e:	bf28      	it	cs
 8005f50:	23c8      	movcs	r3, #200	; 0xc8
 8005f52:	2b0a      	cmp	r3, #10
 8005f54:	bf38      	it	cc
 8005f56:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d006      	beq.n	8005f6a <protocol_buffer_synchronize+0x1ba>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005f5c:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005f5e:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005f60:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005f62:	f042 0308 	orr.w	r3, r2, #8
 8005f66:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005f68:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005f6a:	f01a 0f20 	tst.w	sl, #32
      if (sys.state == STATE_HOLD) {
 8005f6e:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005f70:	d001      	beq.n	8005f76 <protocol_buffer_synchronize+0x1c6>
      if (sys.state == STATE_HOLD) {
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d0ab      	beq.n	8005ece <protocol_buffer_synchronize+0x11e>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005f76:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8005f7a:	d096      	beq.n	8005eaa <protocol_buffer_synchronize+0xfa>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f040 80b7 	bne.w	80060f0 <protocol_buffer_synchronize+0x340>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005f82:	f01a 0f80 	tst.w	sl, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 8005f86:	f899 b008 	ldrb.w	fp, [r9, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005f8a:	f040 80bb 	bne.w	8006104 <protocol_buffer_synchronize+0x354>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005f8e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005f92:	d006      	beq.n	8005fa2 <protocol_buffer_synchronize+0x1f2>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005f94:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005f98:	bf14      	ite	ne
 8005f9a:	f00b 0bbf 	andne.w	fp, fp, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005f9e:	f04b 0b40 	orreq.w	fp, fp, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005fa2:	4658      	mov	r0, fp
 8005fa4:	f7fb fd8c 	bl	8001ac0 <coolant_set_state>
 8005fa8:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005faa:	f889 b008 	strb.w	fp, [r9, #8]
 8005fae:	e77c      	b.n	8005eaa <protocol_buffer_synchronize+0xfa>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005fb0:	f003 fc56 	bl	8009860 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005fb4:	f01a 0f01 	tst.w	sl, #1
 8005fb8:	bf18      	it	ne
 8005fba:	2364      	movne	r3, #100	; 0x64
 8005fbc:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 8005fbe:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 8005fc0:	bf08      	it	eq
 8005fc2:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005fc4:	f01a 0f02 	tst.w	sl, #2
 8005fc8:	bf1c      	itt	ne
 8005fca:	330a      	addne	r3, #10
 8005fcc:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005fce:	f01a 0f04 	tst.w	sl, #4
 8005fd2:	bf1c      	itt	ne
 8005fd4:	3b0a      	subne	r3, #10
 8005fd6:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005fd8:	f01a 0f08 	tst.w	sl, #8
 8005fdc:	bf1c      	itt	ne
 8005fde:	3301      	addne	r3, #1
 8005fe0:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005fe2:	f01a 0f10 	tst.w	sl, #16
 8005fe6:	bf1c      	itt	ne
 8005fe8:	f103 33ff 	addne.w	r3, r3, #4294967295
 8005fec:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005fee:	2bc8      	cmp	r3, #200	; 0xc8
 8005ff0:	bf28      	it	cs
 8005ff2:	23c8      	movcs	r3, #200	; 0xc8
 8005ff4:	2b0a      	cmp	r3, #10
 8005ff6:	bf38      	it	cc
 8005ff8:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005ffa:	f01a 0f20 	tst.w	sl, #32
 8005ffe:	bf14      	ite	ne
 8006000:	2164      	movne	r1, #100	; 0x64
 8006002:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8006004:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006008:	bf18      	it	ne
 800600a:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 800600c:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8006010:	bf18      	it	ne
 8006012:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8006014:	429a      	cmp	r2, r3
 8006016:	d102      	bne.n	800601e <protocol_buffer_synchronize+0x26e>
 8006018:	4288      	cmp	r0, r1
 800601a:	f43f af40 	beq.w	8005e9e <protocol_buffer_synchronize+0xee>
      sys.report_ovr_counter = 0; // Set to report change immediately
 800601e:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 8006020:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8006022:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006024:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 8006026:	f7fe f9df 	bl	80043e8 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 800602a:	f7fe fcd9 	bl	80049e0 <plan_cycle_reinitialize>
 800602e:	e736      	b.n	8005e9e <protocol_buffer_synchronize+0xee>
      sys.abort = true;  // Only place this is set true.
 8006030:	2201      	movs	r2, #1
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006032:	78a3      	ldrb	r3, [r4, #2]
      sys.abort = true;  // Only place this is set true.
 8006034:	7062      	strb	r2, [r4, #1]
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006036:	2b00      	cmp	r3, #0
 8006038:	f47f af58 	bne.w	8005eec <protocol_buffer_synchronize+0x13c>
 800603c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8006040:	78a3      	ldrb	r3, [r4, #2]
 8006042:	0618      	lsls	r0, r3, #24
 8006044:	f100 808d 	bmi.w	8006162 <protocol_buffer_synchronize+0x3b2>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8006048:	f013 0220 	ands.w	r2, r3, #32
 800604c:	d04d      	beq.n	80060ea <protocol_buffer_synchronize+0x33a>
          sys.state = STATE_SAFETY_DOOR;
 800604e:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8006050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 800605a:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800605c:	2004      	movs	r0, #4
 800605e:	f003 fbd1 	bl	8009804 <system_clear_exec_state_flag>
 8006062:	e715      	b.n	8005e90 <protocol_buffer_synchronize+0xe0>
      report_realtime_status();
 8006064:	f000 ff48 	bl	8006ef8 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8006068:	2001      	movs	r0, #1
 800606a:	f003 fbcb 	bl	8009804 <system_clear_exec_state_flag>
 800606e:	e6c2      	b.n	8005df6 <protocol_buffer_synchronize+0x46>
 8006070:	200010e8 	.word	0x200010e8
 8006074:	200010b0 	.word	0x200010b0
 8006078:	200010c5 	.word	0x200010c5
 800607c:	200010c4 	.word	0x200010c4
 8006080:	200010ac 	.word	0x200010ac
 8006084:	20001014 	.word	0x20001014
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8006088:	f013 0f28 	tst.w	r3, #40	; 0x28
 800608c:	d049      	beq.n	8006122 <protocol_buffer_synchronize+0x372>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 800608e:	78a2      	ldrb	r2, [r4, #2]
 8006090:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8006094:	d03e      	beq.n	8006114 <protocol_buffer_synchronize+0x364>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8006096:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800609a:	fa4f fb8a 	sxtb.w	fp, sl
 800609e:	d16c      	bne.n	800617a <protocol_buffer_synchronize+0x3ca>
        if (rt_exec & EXEC_FEED_HOLD) {
 80060a0:	f01a 0f08 	tst.w	sl, #8
 80060a4:	d002      	beq.n	80060ac <protocol_buffer_synchronize+0x2fc>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80060a6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 80060aa:	d053      	beq.n	8006154 <protocol_buffer_synchronize+0x3a4>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80060ac:	f01a 0f20 	tst.w	sl, #32
 80060b0:	f43f aeaa 	beq.w	8005e08 <protocol_buffer_synchronize+0x58>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 80060b4:	2006      	movs	r0, #6
 80060b6:	f000 f99f 	bl	80063f8 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80060ba:	78a3      	ldrb	r3, [r4, #2]
 80060bc:	061a      	lsls	r2, r3, #24
 80060be:	d407      	bmi.n	80060d0 <protocol_buffer_synchronize+0x320>
            if (sys.state == STATE_SAFETY_DOOR) {
 80060c0:	7822      	ldrb	r2, [r4, #0]
 80060c2:	2a40      	cmp	r2, #64	; 0x40
 80060c4:	f000 80a7 	beq.w	8006216 <protocol_buffer_synchronize+0x466>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 80060c8:	2a80      	cmp	r2, #128	; 0x80
 80060ca:	d001      	beq.n	80060d0 <protocol_buffer_synchronize+0x320>
 80060cc:	2240      	movs	r2, #64	; 0x40
 80060ce:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 80060d0:	f043 0320 	orr.w	r3, r3, #32
      if (rt_exec & EXEC_SLEEP) {
 80060d4:	f1bb 0f00 	cmp.w	fp, #0
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 80060d8:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 80060da:	f6bf ae99 	bge.w	8005e10 <protocol_buffer_synchronize+0x60>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80060de:	7823      	ldrb	r3, [r4, #0]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d07a      	beq.n	80061da <protocol_buffer_synchronize+0x42a>
        sys.state = STATE_SLEEP; 
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	7023      	strb	r3, [r4, #0]
 80060e8:	e692      	b.n	8005e10 <protocol_buffer_synchronize+0x60>
          sys.suspend = SUSPEND_DISABLE;
 80060ea:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 80060ec:	7022      	strb	r2, [r4, #0]
 80060ee:	e7b5      	b.n	800605c <protocol_buffer_synchronize+0x2ac>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80060f0:	f013 0f18 	tst.w	r3, #24
 80060f4:	f43f aed9 	beq.w	8005eaa <protocol_buffer_synchronize+0xfa>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80060f8:	f01a 0f80 	tst.w	sl, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 80060fc:	f899 b008 	ldrb.w	fp, [r9, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8006100:	f43f af45 	beq.w	8005f8e <protocol_buffer_synchronize+0x1de>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8006104:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8006108:	bf14      	ite	ne
 800610a:	f00b 0b7f 	andne.w	fp, fp, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 800610e:	f04b 0b80 	orreq.w	fp, fp, #128	; 0x80
 8006112:	e73c      	b.n	8005f8e <protocol_buffer_synchronize+0x1de>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8006114:	f002 fae6 	bl	80086e4 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8006118:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800611a:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800611c:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800611e:	2b20      	cmp	r3, #32
 8006120:	d06e      	beq.n	8006200 <protocol_buffer_synchronize+0x450>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1b7      	bne.n	8006096 <protocol_buffer_synchronize+0x2e6>
 8006126:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8006128:	f01a 0f40 	tst.w	sl, #64	; 0x40
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 800612c:	70a2      	strb	r2, [r4, #2]
 800612e:	fa4f fb8a 	sxtb.w	fp, sl
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8006132:	d00c      	beq.n	800614e <protocol_buffer_synchronize+0x39e>
 8006134:	2241      	movs	r2, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8006136:	70a2      	strb	r2, [r4, #2]
 8006138:	e7b2      	b.n	80060a0 <protocol_buffer_synchronize+0x2f0>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 800613a:	4658      	mov	r0, fp
 800613c:	f000 f95c 	bl	80063f8 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8006140:	2010      	movs	r0, #16
 8006142:	f003 fb5f 	bl	8009804 <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8006146:	782b      	ldrb	r3, [r5, #0]
 8006148:	06db      	lsls	r3, r3, #27
 800614a:	d5fc      	bpl.n	8006146 <protocol_buffer_synchronize+0x396>
 800614c:	e6dd      	b.n	8005f0a <protocol_buffer_synchronize+0x15a>
        if (rt_exec & EXEC_FEED_HOLD) {
 800614e:	f01a 0f08 	tst.w	sl, #8
 8006152:	d0ab      	beq.n	80060ac <protocol_buffer_synchronize+0x2fc>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8006154:	2310      	movs	r3, #16
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8006156:	f01a 0f20 	tst.w	sl, #32
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800615a:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800615c:	f43f ae54 	beq.w	8005e08 <protocol_buffer_synchronize+0x58>
 8006160:	e7a8      	b.n	80060b4 <protocol_buffer_synchronize+0x304>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8006162:	2300      	movs	r3, #0
 8006164:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8006166:	f7fe f88b 	bl	8004280 <plan_reset>
          st_reset();
 800616a:	f002 f959 	bl	8008420 <st_reset>
          gc_sync_position();
 800616e:	f7fb fda9 	bl	8001cc4 <gc_sync_position>
          plan_sync_position();
 8006172:	f7fe fc17 	bl	80049a4 <plan_sync_position>
 8006176:	78a3      	ldrb	r3, [r4, #2]
 8006178:	e766      	b.n	8006048 <protocol_buffer_synchronize+0x298>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800617a:	0699      	lsls	r1, r3, #26
 800617c:	d490      	bmi.n	80060a0 <protocol_buffer_synchronize+0x2f0>
 800617e:	78a2      	ldrb	r2, [r4, #2]
 8006180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006184:	70a2      	strb	r2, [r4, #2]
 8006186:	e78b      	b.n	80060a0 <protocol_buffer_synchronize+0x2f0>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8006188:	2302      	movs	r3, #2
 800618a:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800618c:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8006190:	f47f aef7 	bne.w	8005f82 <protocol_buffer_synchronize+0x1d2>
    st_prep_buffer();
 8006194:	f002 fabc 	bl	8008710 <st_prep_buffer>
 8006198:	e6a5      	b.n	8005ee6 <protocol_buffer_synchronize+0x136>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 800619a:	06da      	lsls	r2, r3, #27
 800619c:	f57f ae55 	bpl.w	8005e4a <protocol_buffer_synchronize+0x9a>
 80061a0:	78a2      	ldrb	r2, [r4, #2]
 80061a2:	07d1      	lsls	r1, r2, #31
 80061a4:	f57f ae51 	bpl.w	8005e4a <protocol_buffer_synchronize+0x9a>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	f47f ae41 	bne.w	8005e30 <protocol_buffer_synchronize+0x80>
 80061ae:	7ae3      	ldrb	r3, [r4, #11]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f43f ae3d 	beq.w	8005e30 <protocol_buffer_synchronize+0x80>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 80061b6:	f043 0308 	orr.w	r3, r3, #8
 80061ba:	72e3      	strb	r3, [r4, #11]
 80061bc:	e645      	b.n	8005e4a <protocol_buffer_synchronize+0x9a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80061be:	78a3      	ldrb	r3, [r4, #2]
 80061c0:	f013 0220 	ands.w	r2, r3, #32
 80061c4:	f47f ae41 	bne.w	8005e4a <protocol_buffer_synchronize+0x9a>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 80061c8:	06d9      	lsls	r1, r3, #27
 80061ca:	d417      	bmi.n	80061fc <protocol_buffer_synchronize+0x44c>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80061cc:	0758      	lsls	r0, r3, #29
 80061ce:	f57f ae3c 	bpl.w	8005e4a <protocol_buffer_synchronize+0x9a>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 80061d2:	f043 0308 	orr.w	r3, r3, #8
 80061d6:	70a3      	strb	r3, [r4, #2]
 80061d8:	e637      	b.n	8005e4a <protocol_buffer_synchronize+0x9a>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80061da:	78a3      	ldrb	r3, [r4, #2]
 80061dc:	f043 0305 	orr.w	r3, r3, #5
 80061e0:	70a3      	strb	r3, [r4, #2]
 80061e2:	e77f      	b.n	80060e4 <protocol_buffer_synchronize+0x334>
              sys.state = STATE_CYCLE;
 80061e4:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80061e6:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 80061e8:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80061ea:	f002 fa91 	bl	8008710 <st_prep_buffer>
              st_wake_up();
 80061ee:	f001 fef3 	bl	8007fd8 <st_wake_up>
 80061f2:	e62a      	b.n	8005e4a <protocol_buffer_synchronize+0x9a>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80061f4:	f043 0304 	orr.w	r3, r3, #4
 80061f8:	72e3      	strb	r3, [r4, #11]
 80061fa:	e7c7      	b.n	800618c <protocol_buffer_synchronize+0x3dc>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 80061fc:	7022      	strb	r2, [r4, #0]
 80061fe:	e617      	b.n	8005e30 <protocol_buffer_synchronize+0x80>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8006200:	fa4f fb8a 	sxtb.w	fp, sl
 8006204:	f1bb 0f00 	cmp.w	fp, #0
 8006208:	f6ff af50 	blt.w	80060ac <protocol_buffer_synchronize+0x2fc>
 800620c:	78a3      	ldrb	r3, [r4, #2]
 800620e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006212:	70a3      	strb	r3, [r4, #2]
 8006214:	e74a      	b.n	80060ac <protocol_buffer_synchronize+0x2fc>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8006216:	0718      	lsls	r0, r3, #28
 8006218:	f57f af58 	bpl.w	80060cc <protocol_buffer_synchronize+0x31c>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 800621c:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8006220:	f043 0302 	orr.w	r3, r3, #2
 8006224:	e752      	b.n	80060cc <protocol_buffer_synchronize+0x31c>
 8006226:	bf00      	nop

08006228 <protocol_main_loop>:
{
 8006228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 800622c:	4b57      	ldr	r3, [pc, #348]	; (800638c <protocol_main_loop+0x164>)
 800622e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006232:	071a      	lsls	r2, r3, #28
 8006234:	f100 8091 	bmi.w	800635a <protocol_main_loop+0x132>
 8006238:	4e55      	ldr	r6, [pc, #340]	; (8006390 <protocol_main_loop+0x168>)
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 800623a:	7833      	ldrb	r3, [r6, #0]
 800623c:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 8006240:	f000 8083 	beq.w	800634a <protocol_main_loop+0x122>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 8006244:	2002      	movs	r0, #2
 8006246:	f000 f8d7 	bl	80063f8 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 800624a:	2301      	movs	r3, #1
 800624c:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 800624e:	2500      	movs	r5, #0
 8006250:	462c      	mov	r4, r5
        line[char_counter] = 0; // Set string termination character.
 8006252:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8006394 <protocol_main_loop+0x16c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006256:	f001 f87f 	bl	8007358 <serial_read>
 800625a:	28ff      	cmp	r0, #255	; 0xff
 800625c:	d00f      	beq.n	800627e <protocol_main_loop+0x56>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 800625e:	280a      	cmp	r0, #10
 8006260:	d01d      	beq.n	800629e <protocol_main_loop+0x76>
 8006262:	280d      	cmp	r0, #13
 8006264:	d01b      	beq.n	800629e <protocol_main_loop+0x76>
        if (line_flags) {
 8006266:	2c00      	cmp	r4, #0
 8006268:	d035      	beq.n	80062d6 <protocol_main_loop+0xae>
          if (c == ')') {
 800626a:	2829      	cmp	r0, #41	; 0x29
 800626c:	d1f3      	bne.n	8006256 <protocol_main_loop+0x2e>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 800626e:	07a3      	lsls	r3, r4, #30
 8006270:	d5f1      	bpl.n	8006256 <protocol_main_loop+0x2e>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006272:	f001 f871 	bl	8007358 <serial_read>
 8006276:	28ff      	cmp	r0, #255	; 0xff
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8006278:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    while((c = serial_read()) != SERIAL_NO_DATA) {
 800627c:	d1ef      	bne.n	800625e <protocol_main_loop+0x36>
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800627e:	f7fe f841 	bl	8004304 <plan_get_current_block>
 8006282:	b110      	cbz	r0, 800628a <protocol_main_loop+0x62>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8006284:	2002      	movs	r0, #2
 8006286:	f003 fab3 	bl	80097f0 <system_set_exec_state_flag>
  protocol_exec_rt_system();
 800628a:	f7fe fe7d 	bl	8004f88 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800628e:	78b3      	ldrb	r3, [r6, #2]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d14a      	bne.n	800632a <protocol_main_loop+0x102>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 8006294:	7873      	ldrb	r3, [r6, #1]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0dd      	beq.n	8006256 <protocol_main_loop+0x2e>
 800629a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  protocol_exec_rt_system();
 800629e:	f7fe fe73 	bl	8004f88 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80062a2:	78b3      	ldrb	r3, [r6, #2]
 80062a4:	bb63      	cbnz	r3, 8006300 <protocol_main_loop+0xd8>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 80062a6:	7877      	ldrb	r7, [r6, #1]
 80062a8:	2f00      	cmp	r7, #0
 80062aa:	d1f6      	bne.n	800629a <protocol_main_loop+0x72>
        line[char_counter] = 0; // Set string termination character.
 80062ac:	f808 7005 	strb.w	r7, [r8, r5]
				LedBlink();
 80062b0:	f7fd fa02 	bl	80036b8 <LedBlink>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 80062b4:	f014 0401 	ands.w	r4, r4, #1
 80062b8:	d125      	bne.n	8006306 <protocol_main_loop+0xde>
        } else if (line[0] == 0) {
 80062ba:	f898 0000 	ldrb.w	r0, [r8]
 80062be:	b378      	cbz	r0, 8006320 <protocol_main_loop+0xf8>
        } else if (line[0] == '$') {
 80062c0:	2824      	cmp	r0, #36	; 0x24
 80062c2:	d039      	beq.n	8006338 <protocol_main_loop+0x110>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 80062c4:	7833      	ldrb	r3, [r6, #0]
 80062c6:	f013 0521 	ands.w	r5, r3, #33	; 0x21
 80062ca:	d022      	beq.n	8006312 <protocol_main_loop+0xea>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 80062cc:	2009      	movs	r0, #9
        char_counter = 0;
 80062ce:	4625      	mov	r5, r4
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 80062d0:	f000 f864 	bl	800639c <report_status_message>
 80062d4:	e7bf      	b.n	8006256 <protocol_main_loop+0x2e>
          if (c <= ' ') {
 80062d6:	2820      	cmp	r0, #32
 80062d8:	d9bd      	bls.n	8006256 <protocol_main_loop+0x2e>
          } else if (c == '/') {
 80062da:	282f      	cmp	r0, #47	; 0x2f
 80062dc:	d0bb      	beq.n	8006256 <protocol_main_loop+0x2e>
          } else if (c == '(') {
 80062de:	2828      	cmp	r0, #40	; 0x28
 80062e0:	d026      	beq.n	8006330 <protocol_main_loop+0x108>
          } else if (c == ';') {
 80062e2:	283b      	cmp	r0, #59	; 0x3b
 80062e4:	d02f      	beq.n	8006346 <protocol_main_loop+0x11e>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 80062e6:	2d4e      	cmp	r5, #78	; 0x4e
 80062e8:	d824      	bhi.n	8006334 <protocol_main_loop+0x10c>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 80062ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 80062f2:	bf98      	it	ls
 80062f4:	3820      	subls	r0, #32
            line[char_counter++] = c;
 80062f6:	1c6b      	adds	r3, r5, #1
 80062f8:	f808 0005 	strb.w	r0, [r8, r5]
 80062fc:	b2dd      	uxtb	r5, r3
 80062fe:	e7aa      	b.n	8006256 <protocol_main_loop+0x2e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006300:	f7ff f82c 	bl	800535c <protocol_exec_rt_suspend>
 8006304:	e7cf      	b.n	80062a6 <protocol_main_loop+0x7e>
          report_status_message(STATUS_OVERFLOW);
 8006306:	200b      	movs	r0, #11
        char_counter = 0;
 8006308:	463d      	mov	r5, r7
        line_flags = 0;
 800630a:	463c      	mov	r4, r7
          report_status_message(STATUS_OVERFLOW);
 800630c:	f000 f846 	bl	800639c <report_status_message>
 8006310:	e7a1      	b.n	8006256 <protocol_main_loop+0x2e>
          report_status_message(gc_execute_line(line));
 8006312:	4640      	mov	r0, r8
 8006314:	f7fb fcde 	bl	8001cd4 <gc_execute_line>
 8006318:	f000 f840 	bl	800639c <report_status_message>
        line_flags = 0;
 800631c:	462c      	mov	r4, r5
 800631e:	e79a      	b.n	8006256 <protocol_main_loop+0x2e>
        char_counter = 0;
 8006320:	4605      	mov	r5, r0
          report_status_message(STATUS_OK);
 8006322:	f000 f83b 	bl	800639c <report_status_message>
        line_flags = 0;
 8006326:	462c      	mov	r4, r5
 8006328:	e795      	b.n	8006256 <protocol_main_loop+0x2e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800632a:	f7ff f817 	bl	800535c <protocol_exec_rt_suspend>
 800632e:	e7b1      	b.n	8006294 <protocol_main_loop+0x6c>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 8006330:	2402      	movs	r4, #2
 8006332:	e790      	b.n	8006256 <protocol_main_loop+0x2e>
            line_flags |= LINE_FLAG_OVERFLOW;
 8006334:	2401      	movs	r4, #1
 8006336:	e78e      	b.n	8006256 <protocol_main_loop+0x2e>
          report_status_message(system_execute_line(line));
 8006338:	4640      	mov	r0, r8
        char_counter = 0;
 800633a:	4625      	mov	r5, r4
          report_status_message(system_execute_line(line));
 800633c:	f003 f808 	bl	8009350 <system_execute_line>
 8006340:	f000 f82c 	bl	800639c <report_status_message>
 8006344:	e787      	b.n	8006256 <protocol_main_loop+0x2e>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 8006346:	2404      	movs	r4, #4
 8006348:	e785      	b.n	8006256 <protocol_main_loop+0x2e>
    sys.state = STATE_IDLE;
 800634a:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 800634c:	f002 ffe2 	bl	8009314 <system_check_safety_door_ajar>
 8006350:	b978      	cbnz	r0, 8006372 <protocol_main_loop+0x14a>
    system_execute_startup(line); // Execute startup script.
 8006352:	4810      	ldr	r0, [pc, #64]	; (8006394 <protocol_main_loop+0x16c>)
 8006354:	f002 ffe0 	bl	8009318 <system_execute_startup>
 8006358:	e779      	b.n	800624e <protocol_main_loop+0x26>
      if (limits_get_state()) {
 800635a:	f7fc fe7d 	bl	8003058 <limits_get_state>
 800635e:	2800      	cmp	r0, #0
 8006360:	f43f af6a 	beq.w	8006238 <protocol_main_loop+0x10>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8006364:	2301      	movs	r3, #1
 8006366:	4e0a      	ldr	r6, [pc, #40]	; (8006390 <protocol_main_loop+0x168>)
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8006368:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 800636a:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 800636c:	f000 f844 	bl	80063f8 <report_feedback_message>
 8006370:	e763      	b.n	800623a <protocol_main_loop+0x12>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8006372:	4a09      	ldr	r2, [pc, #36]	; (8006398 <protocol_main_loop+0x170>)
 8006374:	7813      	ldrb	r3, [r2, #0]
 8006376:	f043 0320 	orr.w	r3, r3, #32
 800637a:	7013      	strb	r3, [r2, #0]
  protocol_exec_rt_system();
 800637c:	f7fe fe04 	bl	8004f88 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006380:	78b3      	ldrb	r3, [r6, #2]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0e5      	beq.n	8006352 <protocol_main_loop+0x12a>
 8006386:	f7fe ffe9 	bl	800535c <protocol_exec_rt_suspend>
 800638a:	e7e2      	b.n	8006352 <protocol_main_loop+0x12a>
 800638c:	2000126c 	.word	0x2000126c
 8006390:	200010b0 	.word	0x200010b0
 8006394:	20000a08 	.word	0x20000a08
 8006398:	200010c5 	.word	0x200010c5

0800639c <report_status_message>:
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
  switch(status_code) {
 800639c:	b160      	cbz	r0, 80063b8 <report_status_message+0x1c>
{
 800639e:	b510      	push	{r4, lr}
 80063a0:	4604      	mov	r4, r0
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
    default:
      printPgmString(PSTR("error:"));
 80063a2:	4807      	ldr	r0, [pc, #28]	; (80063c0 <report_status_message+0x24>)
 80063a4:	f7fe fb2c 	bl	8004a00 <printString>
      print_uint8_base10(status_code);
 80063a8:	4620      	mov	r0, r4
 80063aa:	f7fe fb35 	bl	8004a18 <print_uint8_base10>
      report_util_line_feed();
  }
}
 80063ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80063b2:	4804      	ldr	r0, [pc, #16]	; (80063c4 <report_status_message+0x28>)
 80063b4:	f7fe bb24 	b.w	8004a00 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 80063b8:	4803      	ldr	r0, [pc, #12]	; (80063c8 <report_status_message+0x2c>)
 80063ba:	f7fe bb21 	b.w	8004a00 <printString>
 80063be:	bf00      	nop
 80063c0:	0800c08c 	.word	0x0800c08c
 80063c4:	0800c094 	.word	0x0800c094
 80063c8:	0800c084 	.word	0x0800c084

080063cc <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 80063cc:	b510      	push	{r4, lr}
 80063ce:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 80063d0:	4807      	ldr	r0, [pc, #28]	; (80063f0 <report_alarm_message+0x24>)
 80063d2:	f7fe fb15 	bl	8004a00 <printString>
  print_uint8_base10(alarm_code);
 80063d6:	4620      	mov	r0, r4
 80063d8:	f7fe fb1e 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80063dc:	4805      	ldr	r0, [pc, #20]	; (80063f4 <report_alarm_message+0x28>)
 80063de:	f7fe fb0f 	bl	8004a00 <printString>
  report_util_line_feed();
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 80063e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 80063e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063ea:	f7fd bd6d 	b.w	8003ec8 <delay_ms>
 80063ee:	bf00      	nop
 80063f0:	0800be80 	.word	0x0800be80
 80063f4:	0800c094 	.word	0x0800c094

080063f8 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 80063f8:	b510      	push	{r4, lr}
 80063fa:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 80063fc:	4820      	ldr	r0, [pc, #128]	; (8006480 <report_feedback_message+0x88>)
 80063fe:	f7fe faff 	bl	8004a00 <printString>
  switch(message_code) {
 8006402:	1e60      	subs	r0, r4, #1
 8006404:	280a      	cmp	r0, #10
 8006406:	d80a      	bhi.n	800641e <report_feedback_message+0x26>
 8006408:	e8df f000 	tbb	[pc, r0]
 800640c:	1d191511 	.word	0x1d191511
 8006410:	2d292521 	.word	0x2d292521
 8006414:	3531      	.short	0x3531
 8006416:	06          	.byte	0x06
 8006417:	00          	.byte	0x00
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 8006418:	481a      	ldr	r0, [pc, #104]	; (8006484 <report_feedback_message+0x8c>)
 800641a:	f7fe faf1 	bl	8004a00 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 800641e:	205d      	movs	r0, #93	; 0x5d
 8006420:	f000 ff70 	bl	8007304 <serial_write>
  }
  report_util_feedback_line_feed();
}
 8006424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006428:	4817      	ldr	r0, [pc, #92]	; (8006488 <report_feedback_message+0x90>)
 800642a:	f7fe bae9 	b.w	8004a00 <printString>
      printPgmString(PSTR("Reset to continue")); break;
 800642e:	4817      	ldr	r0, [pc, #92]	; (800648c <report_feedback_message+0x94>)
 8006430:	f7fe fae6 	bl	8004a00 <printString>
 8006434:	e7f3      	b.n	800641e <report_feedback_message+0x26>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 8006436:	4816      	ldr	r0, [pc, #88]	; (8006490 <report_feedback_message+0x98>)
 8006438:	f7fe fae2 	bl	8004a00 <printString>
 800643c:	e7ef      	b.n	800641e <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 800643e:	4815      	ldr	r0, [pc, #84]	; (8006494 <report_feedback_message+0x9c>)
 8006440:	f7fe fade 	bl	8004a00 <printString>
 8006444:	e7eb      	b.n	800641e <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 8006446:	4814      	ldr	r0, [pc, #80]	; (8006498 <report_feedback_message+0xa0>)
 8006448:	f7fe fada 	bl	8004a00 <printString>
 800644c:	e7e7      	b.n	800641e <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 800644e:	4813      	ldr	r0, [pc, #76]	; (800649c <report_feedback_message+0xa4>)
 8006450:	f7fe fad6 	bl	8004a00 <printString>
 8006454:	e7e3      	b.n	800641e <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 8006456:	4812      	ldr	r0, [pc, #72]	; (80064a0 <report_feedback_message+0xa8>)
 8006458:	f7fe fad2 	bl	8004a00 <printString>
 800645c:	e7df      	b.n	800641e <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 800645e:	4811      	ldr	r0, [pc, #68]	; (80064a4 <report_feedback_message+0xac>)
 8006460:	f7fe face 	bl	8004a00 <printString>
 8006464:	e7db      	b.n	800641e <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 8006466:	4810      	ldr	r0, [pc, #64]	; (80064a8 <report_feedback_message+0xb0>)
 8006468:	f7fe faca 	bl	8004a00 <printString>
 800646c:	e7d7      	b.n	800641e <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 800646e:	480f      	ldr	r0, [pc, #60]	; (80064ac <report_feedback_message+0xb4>)
 8006470:	f7fe fac6 	bl	8004a00 <printString>
 8006474:	e7d3      	b.n	800641e <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 8006476:	480e      	ldr	r0, [pc, #56]	; (80064b0 <report_feedback_message+0xb8>)
 8006478:	f7fe fac2 	bl	8004a00 <printString>
 800647c:	e7cf      	b.n	800641e <report_feedback_message+0x26>
 800647e:	bf00      	nop
 8006480:	0800bea4 	.word	0x0800bea4
 8006484:	0800bf48 	.word	0x0800bf48
 8006488:	0800c094 	.word	0x0800c094
 800648c:	0800beac 	.word	0x0800beac
 8006490:	0800bec0 	.word	0x0800bec0
 8006494:	0800bed4 	.word	0x0800bed4
 8006498:	0800bee8 	.word	0x0800bee8
 800649c:	0800bef0 	.word	0x0800bef0
 80064a0:	0800befc 	.word	0x0800befc
 80064a4:	0800bf08 	.word	0x0800bf08
 80064a8:	0800bf18 	.word	0x0800bf18
 80064ac:	0800bf20 	.word	0x0800bf20
 80064b0:	0800bf34 	.word	0x0800bf34

080064b4 <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 80064b4:	4801      	ldr	r0, [pc, #4]	; (80064bc <report_init_message+0x8>)
 80064b6:	f7fe baa3 	b.w	8004a00 <printString>
 80064ba:	bf00      	nop
 80064bc:	0800bfc0 	.word	0x0800bfc0

080064c0 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 80064c0:	4801      	ldr	r0, [pc, #4]	; (80064c8 <report_grbl_help+0x8>)
 80064c2:	f7fe ba9d 	b.w	8004a00 <printString>
 80064c6:	bf00      	nop
 80064c8:	0800bf74 	.word	0x0800bf74

080064cc <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 80064cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 80064d0:	4cc7      	ldr	r4, [pc, #796]	; (80067f0 <report_grbl_settings+0x324>)
void report_grbl_settings() {
 80064d2:	b083      	sub	sp, #12
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80064d4:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(0,settings.pulse_microseconds);
 80064d6:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80064da:	f000 ff13 	bl	8007304 <serial_write>
 80064de:	2000      	movs	r0, #0
 80064e0:	f7fe fa9a 	bl	8004a18 <print_uint8_base10>
 80064e4:	203d      	movs	r0, #61	; 0x3d
 80064e6:	f000 ff0d 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 80064ea:	4628      	mov	r0, r5
 80064ec:	f7fe fa94 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80064f0:	48c0      	ldr	r0, [pc, #768]	; (80067f4 <report_grbl_settings+0x328>)
 80064f2:	f7fe fa85 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80064f6:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 80064f8:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80064fc:	f000 ff02 	bl	8007304 <serial_write>
 8006500:	2001      	movs	r0, #1
 8006502:	f7fe fa89 	bl	8004a18 <print_uint8_base10>
 8006506:	203d      	movs	r0, #61	; 0x3d
 8006508:	f000 fefc 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 800650c:	4628      	mov	r0, r5
 800650e:	f7fe fa83 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006512:	48b8      	ldr	r0, [pc, #736]	; (80067f4 <report_grbl_settings+0x328>)
 8006514:	f7fe fa74 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006518:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(2,settings.step_invert_mask);
 800651a:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800651e:	f000 fef1 	bl	8007304 <serial_write>
 8006522:	2002      	movs	r0, #2
 8006524:	f7fe fa78 	bl	8004a18 <print_uint8_base10>
 8006528:	203d      	movs	r0, #61	; 0x3d
 800652a:	f000 feeb 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 800652e:	b2e8      	uxtb	r0, r5
 8006530:	f7fe fa72 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006534:	48af      	ldr	r0, [pc, #700]	; (80067f4 <report_grbl_settings+0x328>)
 8006536:	f7fe fa63 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800653a:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(3,settings.dir_invert_mask);
 800653c:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006540:	f000 fee0 	bl	8007304 <serial_write>
 8006544:	2003      	movs	r0, #3
 8006546:	f7fe fa67 	bl	8004a18 <print_uint8_base10>
 800654a:	203d      	movs	r0, #61	; 0x3d
 800654c:	f000 feda 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 8006550:	b2e8      	uxtb	r0, r5
 8006552:	f7fe fa61 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006556:	48a7      	ldr	r0, [pc, #668]	; (80067f4 <report_grbl_settings+0x328>)
 8006558:	f7fe fa52 	bl	8004a00 <printString>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 800655c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006560:	2024      	movs	r0, #36	; 0x24
 8006562:	f000 fecf 	bl	8007304 <serial_write>
 8006566:	2004      	movs	r0, #4
 8006568:	f7fe fa56 	bl	8004a18 <print_uint8_base10>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 800656c:	f3c5 0580 	ubfx	r5, r5, #2, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006570:	203d      	movs	r0, #61	; 0x3d
 8006572:	f000 fec7 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 8006576:	4628      	mov	r0, r5
 8006578:	f7fe fa4e 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800657c:	489d      	ldr	r0, [pc, #628]	; (80067f4 <report_grbl_settings+0x328>)
 800657e:	f7fe fa3f 	bl	8004a00 <printString>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006582:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006586:	2024      	movs	r0, #36	; 0x24
 8006588:	f000 febc 	bl	8007304 <serial_write>
 800658c:	2005      	movs	r0, #5
 800658e:	f7fe fa43 	bl	8004a18 <print_uint8_base10>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006592:	f3c5 1580 	ubfx	r5, r5, #6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006596:	203d      	movs	r0, #61	; 0x3d
 8006598:	f000 feb4 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 800659c:	4628      	mov	r0, r5
 800659e:	f7fe fa3b 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80065a2:	4894      	ldr	r0, [pc, #592]	; (80067f4 <report_grbl_settings+0x328>)
 80065a4:	f7fe fa2c 	bl	8004a00 <printString>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 80065a8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065ac:	2024      	movs	r0, #36	; 0x24
 80065ae:	f000 fea9 	bl	8007304 <serial_write>
 80065b2:	2006      	movs	r0, #6
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 80065b4:	09ed      	lsrs	r5, r5, #7
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065b6:	f7fe fa2f 	bl	8004a18 <print_uint8_base10>
 80065ba:	203d      	movs	r0, #61	; 0x3d
 80065bc:	f000 fea2 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 80065c0:	4628      	mov	r0, r5
 80065c2:	f7fe fa29 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80065c6:	488b      	ldr	r0, [pc, #556]	; (80067f4 <report_grbl_settings+0x328>)
 80065c8:	f7fe fa1a 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065cc:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(10,settings.status_report_mask);
 80065ce:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065d2:	f000 fe97 	bl	8007304 <serial_write>
 80065d6:	200a      	movs	r0, #10
 80065d8:	f7fe fa1e 	bl	8004a18 <print_uint8_base10>
 80065dc:	203d      	movs	r0, #61	; 0x3d
 80065de:	f000 fe91 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7fe fa18 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80065e8:	4882      	ldr	r0, [pc, #520]	; (80067f4 <report_grbl_settings+0x328>)
 80065ea:	f7fe fa09 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065ee:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 80065f0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065f2:	f000 fe87 	bl	8007304 <serial_write>
 80065f6:	200b      	movs	r0, #11
 80065f8:	f7fe fa0e 	bl	8004a18 <print_uint8_base10>
 80065fc:	203d      	movs	r0, #61	; 0x3d
 80065fe:	f000 fe81 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006602:	2103      	movs	r1, #3
 8006604:	4628      	mov	r0, r5
 8006606:	f7fe fa49 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800660a:	487a      	ldr	r0, [pc, #488]	; (80067f4 <report_grbl_settings+0x328>)
 800660c:	f7fe f9f8 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006610:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 8006612:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006614:	f000 fe76 	bl	8007304 <serial_write>
 8006618:	200c      	movs	r0, #12
 800661a:	f7fe f9fd 	bl	8004a18 <print_uint8_base10>
 800661e:	203d      	movs	r0, #61	; 0x3d
 8006620:	f000 fe70 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006624:	2103      	movs	r1, #3
 8006626:	4628      	mov	r0, r5
 8006628:	f7fe fa38 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800662c:	4871      	ldr	r0, [pc, #452]	; (80067f4 <report_grbl_settings+0x328>)
 800662e:	f7fe f9e7 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006632:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8006634:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006638:	f000 fe64 	bl	8007304 <serial_write>
 800663c:	200d      	movs	r0, #13
 800663e:	f7fe f9eb 	bl	8004a18 <print_uint8_base10>
 8006642:	203d      	movs	r0, #61	; 0x3d
 8006644:	f000 fe5e 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 8006648:	f005 0001 	and.w	r0, r5, #1
 800664c:	f7fe f9e4 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006650:	4868      	ldr	r0, [pc, #416]	; (80067f4 <report_grbl_settings+0x328>)
 8006652:	f7fe f9d5 	bl	8004a00 <printString>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006656:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800665a:	2024      	movs	r0, #36	; 0x24
 800665c:	f000 fe52 	bl	8007304 <serial_write>
 8006660:	2014      	movs	r0, #20
 8006662:	f7fe f9d9 	bl	8004a18 <print_uint8_base10>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006666:	f3c5 1540 	ubfx	r5, r5, #5, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800666a:	203d      	movs	r0, #61	; 0x3d
 800666c:	f000 fe4a 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 8006670:	4628      	mov	r0, r5
 8006672:	f7fe f9d1 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006676:	485f      	ldr	r0, [pc, #380]	; (80067f4 <report_grbl_settings+0x328>)
 8006678:	f7fe f9c2 	bl	8004a00 <printString>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 800667c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006680:	2024      	movs	r0, #36	; 0x24
 8006682:	f000 fe3f 	bl	8007304 <serial_write>
 8006686:	2015      	movs	r0, #21
 8006688:	f7fe f9c6 	bl	8004a18 <print_uint8_base10>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 800668c:	f3c5 05c0 	ubfx	r5, r5, #3, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006690:	203d      	movs	r0, #61	; 0x3d
 8006692:	f000 fe37 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 8006696:	4628      	mov	r0, r5
 8006698:	f7fe f9be 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800669c:	4855      	ldr	r0, [pc, #340]	; (80067f4 <report_grbl_settings+0x328>)
 800669e:	f7fe f9af 	bl	8004a00 <printString>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 80066a2:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066a6:	2024      	movs	r0, #36	; 0x24
 80066a8:	f000 fe2c 	bl	8007304 <serial_write>
 80066ac:	2016      	movs	r0, #22
 80066ae:	f7fe f9b3 	bl	8004a18 <print_uint8_base10>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 80066b2:	f3c5 1500 	ubfx	r5, r5, #4, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066b6:	203d      	movs	r0, #61	; 0x3d
 80066b8:	f000 fe24 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 80066bc:	4628      	mov	r0, r5
 80066be:	f7fe f9ab 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80066c2:	484c      	ldr	r0, [pc, #304]	; (80067f4 <report_grbl_settings+0x328>)
 80066c4:	f7fe f99c 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066c8:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(23,settings.homing_dir_mask);
 80066ca:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066ce:	f000 fe19 	bl	8007304 <serial_write>
 80066d2:	2017      	movs	r0, #23
 80066d4:	f7fe f9a0 	bl	8004a18 <print_uint8_base10>
 80066d8:	203d      	movs	r0, #61	; 0x3d
 80066da:	f000 fe13 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 80066de:	b2e8      	uxtb	r0, r5
 80066e0:	f7fe f99a 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80066e4:	4843      	ldr	r0, [pc, #268]	; (80067f4 <report_grbl_settings+0x328>)
 80066e6:	f7fe f98b 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066ea:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 80066ec:	6de5      	ldr	r5, [r4, #92]	; 0x5c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066ee:	f000 fe09 	bl	8007304 <serial_write>
 80066f2:	2018      	movs	r0, #24
 80066f4:	f7fe f990 	bl	8004a18 <print_uint8_base10>
 80066f8:	203d      	movs	r0, #61	; 0x3d
 80066fa:	f000 fe03 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 80066fe:	2103      	movs	r1, #3
 8006700:	4628      	mov	r0, r5
 8006702:	f7fe f9cb 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006706:	483b      	ldr	r0, [pc, #236]	; (80067f4 <report_grbl_settings+0x328>)
 8006708:	f7fe f97a 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800670c:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 800670e:	6e25      	ldr	r5, [r4, #96]	; 0x60
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006710:	f000 fdf8 	bl	8007304 <serial_write>
 8006714:	2019      	movs	r0, #25
 8006716:	f7fe f97f 	bl	8004a18 <print_uint8_base10>
 800671a:	203d      	movs	r0, #61	; 0x3d
 800671c:	f000 fdf2 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006720:	2103      	movs	r1, #3
 8006722:	4628      	mov	r0, r5
 8006724:	f7fe f9ba 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006728:	4832      	ldr	r0, [pc, #200]	; (80067f4 <report_grbl_settings+0x328>)
 800672a:	f7fe f969 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800672e:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8006730:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006734:	f000 fde6 	bl	8007304 <serial_write>
 8006738:	201a      	movs	r0, #26
 800673a:	f7fe f96d 	bl	8004a18 <print_uint8_base10>
 800673e:	203d      	movs	r0, #61	; 0x3d
 8006740:	f000 fde0 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 8006744:	b2e8      	uxtb	r0, r5
 8006746:	f7fe f967 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800674a:	482a      	ldr	r0, [pc, #168]	; (80067f4 <report_grbl_settings+0x328>)
 800674c:	f7fe f958 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006750:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8006752:	6ea5      	ldr	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006754:	f000 fdd6 	bl	8007304 <serial_write>
 8006758:	201b      	movs	r0, #27
 800675a:	f7fe f95d 	bl	8004a18 <print_uint8_base10>
 800675e:	203d      	movs	r0, #61	; 0x3d
 8006760:	f000 fdd0 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006764:	2103      	movs	r1, #3
 8006766:	4628      	mov	r0, r5
 8006768:	f7fe f998 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800676c:	4821      	ldr	r0, [pc, #132]	; (80067f4 <report_grbl_settings+0x328>)
 800676e:	f7fe f947 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006772:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8006774:	6d25      	ldr	r5, [r4, #80]	; 0x50
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006776:	f000 fdc5 	bl	8007304 <serial_write>
 800677a:	201e      	movs	r0, #30
 800677c:	f7fe f94c 	bl	8004a18 <print_uint8_base10>
 8006780:	203d      	movs	r0, #61	; 0x3d
 8006782:	f000 fdbf 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006786:	2100      	movs	r1, #0
 8006788:	4628      	mov	r0, r5
 800678a:	f7fe f987 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800678e:	4819      	ldr	r0, [pc, #100]	; (80067f4 <report_grbl_settings+0x328>)
 8006790:	f7fe f936 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006794:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8006796:	6d65      	ldr	r5, [r4, #84]	; 0x54
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006798:	f000 fdb4 	bl	8007304 <serial_write>
 800679c:	201f      	movs	r0, #31
 800679e:	f7fe f93b 	bl	8004a18 <print_uint8_base10>
 80067a2:	203d      	movs	r0, #61	; 0x3d
 80067a4:	f000 fdae 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 80067a8:	2100      	movs	r1, #0
 80067aa:	4628      	mov	r0, r5
 80067ac:	f7fe f976 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067b0:	4810      	ldr	r0, [pc, #64]	; (80067f4 <report_grbl_settings+0x328>)
 80067b2:	f7fe f925 	bl	8004a00 <printString>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 80067b6:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067ba:	2024      	movs	r0, #36	; 0x24
 80067bc:	f000 fda2 	bl	8007304 <serial_write>
 80067c0:	2020      	movs	r0, #32
 80067c2:	f7fe f929 	bl	8004a18 <print_uint8_base10>
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 80067c6:	f3c5 0540 	ubfx	r5, r5, #1, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067ca:	203d      	movs	r0, #61	; 0x3d
 80067cc:	f000 fd9a 	bl	8007304 <serial_write>
  print_uint8_base10(val);
 80067d0:	4628      	mov	r0, r5
 80067d2:	f7fe f921 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067d6:	4807      	ldr	r0, [pc, #28]	; (80067f4 <report_grbl_settings+0x328>)
 80067d8:	f7fe f912 	bl	8004a00 <printString>
 80067dc:	f04f 0965 	mov.w	r9, #101	; 0x65
 80067e0:	f04f 0866 	mov.w	r8, #102	; 0x66
 80067e4:	2667      	movs	r6, #103	; 0x67
 80067e6:	2701      	movs	r7, #1
 80067e8:	f8df a008 	ldr.w	sl, [pc, #8]	; 80067f4 <report_grbl_settings+0x328>
 80067ec:	e004      	b.n	80067f8 <report_grbl_settings+0x32c>
 80067ee:	bf00      	nop
 80067f0:	2000126c 	.word	0x2000126c
 80067f4:	0800c094 	.word	0x0800c094
 80067f8:	1e7d      	subs	r5, r7, #1
 80067fa:	b2ed      	uxtb	r5, r5
 80067fc:	1ef3      	subs	r3, r6, #3
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
 80067fe:	2d02      	cmp	r5, #2
 8006800:	fa5f fb83 	uxtb.w	fp, r3
 8006804:	d075      	beq.n	80068f2 <report_grbl_settings+0x426>
 8006806:	2d03      	cmp	r5, #3
 8006808:	f000 80fe 	beq.w	8006a08 <report_grbl_settings+0x53c>
 800680c:	2d01      	cmp	r5, #1
 800680e:	f000 80c5 	beq.w	800699c <report_grbl_settings+0x4d0>
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006812:	6822      	ldr	r2, [r4, #0]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006814:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006816:	9201      	str	r2, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006818:	f000 fd74 	bl	8007304 <serial_write>
 800681c:	4658      	mov	r0, fp
 800681e:	f7fe f8fb 	bl	8004a18 <print_uint8_base10>
 8006822:	203d      	movs	r0, #61	; 0x3d
 8006824:	f000 fd6e 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006828:	9a01      	ldr	r2, [sp, #4]
 800682a:	2103      	movs	r1, #3
 800682c:	4610      	mov	r0, r2
 800682e:	f7fe f935 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006832:	4650      	mov	r0, sl
 8006834:	f7fe f8e4 	bl	8004a00 <printString>
      switch (set_idx) {
 8006838:	2d02      	cmp	r5, #2
 800683a:	d06f      	beq.n	800691c <report_grbl_settings+0x450>
 800683c:	2d03      	cmp	r5, #3
 800683e:	f000 80f6 	beq.w	8006a2e <report_grbl_settings+0x562>
 8006842:	2d01      	cmp	r5, #1
 8006844:	f000 80bb 	beq.w	80069be <report_grbl_settings+0x4f2>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006848:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 800684a:	f8d4 b004 	ldr.w	fp, [r4, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800684e:	f000 fd59 	bl	8007304 <serial_write>
 8006852:	4648      	mov	r0, r9
 8006854:	f7fe f8e0 	bl	8004a18 <print_uint8_base10>
 8006858:	203d      	movs	r0, #61	; 0x3d
 800685a:	f000 fd53 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 800685e:	4658      	mov	r0, fp
 8006860:	2103      	movs	r1, #3
 8006862:	f7fe f91b 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006866:	4650      	mov	r0, sl
 8006868:	f7fe f8ca 	bl	8004a00 <printString>
      switch (set_idx) {
 800686c:	2d02      	cmp	r5, #2
 800686e:	d06a      	beq.n	8006946 <report_grbl_settings+0x47a>
 8006870:	2d03      	cmp	r5, #3
 8006872:	f000 80f0 	beq.w	8006a56 <report_grbl_settings+0x58a>
 8006876:	2d01      	cmp	r5, #1
 8006878:	f000 80b2 	beq.w	80069e0 <report_grbl_settings+0x514>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800687c:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 800687e:	f8d4 b008 	ldr.w	fp, [r4, #8]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006882:	f000 fd3f 	bl	8007304 <serial_write>
 8006886:	4640      	mov	r0, r8
 8006888:	f7fe f8c6 	bl	8004a18 <print_uint8_base10>
 800688c:	203d      	movs	r0, #61	; 0x3d
 800688e:	f000 fd39 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006892:	4658      	mov	r0, fp
 8006894:	2103      	movs	r1, #3
 8006896:	f7fe f901 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800689a:	4650      	mov	r0, sl
 800689c:	f7fe f8b0 	bl	8004a00 <printString>
      switch (set_idx) {
 80068a0:	2d02      	cmp	r5, #2
 80068a2:	d065      	beq.n	8006970 <report_grbl_settings+0x4a4>
 80068a4:	2d03      	cmp	r5, #3
 80068a6:	f000 80ea 	beq.w	8006a7e <report_grbl_settings+0x5b2>
 80068aa:	2d01      	cmp	r5, #1
 80068ac:	f000 80a9 	beq.w	8006a02 <report_grbl_settings+0x536>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068b0:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 80068b2:	68e5      	ldr	r5, [r4, #12]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068b4:	f000 fd26 	bl	8007304 <serial_write>
 80068b8:	4630      	mov	r0, r6
 80068ba:	f7fe f8ad 	bl	8004a18 <print_uint8_base10>
 80068be:	203d      	movs	r0, #61	; 0x3d
 80068c0:	f000 fd20 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 80068c4:	4628      	mov	r0, r5
 80068c6:	2103      	movs	r1, #3
 80068c8:	f7fe f8e8 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80068cc:	4650      	mov	r0, sl
 80068ce:	f7fe f897 	bl	8004a00 <printString>
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 80068d2:	2f04      	cmp	r7, #4
 80068d4:	f000 80e9 	beq.w	8006aaa <report_grbl_settings+0x5de>
 80068d8:	3701      	adds	r7, #1
 80068da:	360a      	adds	r6, #10
 80068dc:	f108 080a 	add.w	r8, r8, #10
 80068e0:	f109 090a 	add.w	r9, r9, #10
 80068e4:	b2ff      	uxtb	r7, r7
 80068e6:	b2f6      	uxtb	r6, r6
 80068e8:	fa5f f888 	uxtb.w	r8, r8
 80068ec:	fa5f f989 	uxtb.w	r9, r9
 80068f0:	e782      	b.n	80067f8 <report_grbl_settings+0x32c>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 80068f2:	496f      	ldr	r1, [pc, #444]	; (8006ab0 <report_grbl_settings+0x5e4>)
 80068f4:	6a20      	ldr	r0, [r4, #32]
 80068f6:	f7fa f9db 	bl	8000cb0 <__aeabi_fmul>
 80068fa:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068fc:	2024      	movs	r0, #36	; 0x24
 80068fe:	f000 fd01 	bl	8007304 <serial_write>
 8006902:	4658      	mov	r0, fp
 8006904:	f7fe f888 	bl	8004a18 <print_uint8_base10>
 8006908:	203d      	movs	r0, #61	; 0x3d
 800690a:	f000 fcfb 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 800690e:	4628      	mov	r0, r5
 8006910:	2103      	movs	r1, #3
 8006912:	f7fe f8c3 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006916:	4650      	mov	r0, sl
 8006918:	f7fe f872 	bl	8004a00 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 800691c:	4964      	ldr	r1, [pc, #400]	; (8006ab0 <report_grbl_settings+0x5e4>)
 800691e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006920:	f7fa f9c6 	bl	8000cb0 <__aeabi_fmul>
 8006924:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006926:	2024      	movs	r0, #36	; 0x24
 8006928:	f000 fcec 	bl	8007304 <serial_write>
 800692c:	4648      	mov	r0, r9
 800692e:	f7fe f873 	bl	8004a18 <print_uint8_base10>
 8006932:	203d      	movs	r0, #61	; 0x3d
 8006934:	f000 fce6 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006938:	4628      	mov	r0, r5
 800693a:	2103      	movs	r1, #3
 800693c:	f7fe f8ae 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006940:	4650      	mov	r0, sl
 8006942:	f7fe f85d 	bl	8004a00 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006946:	495a      	ldr	r1, [pc, #360]	; (8006ab0 <report_grbl_settings+0x5e4>)
 8006948:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800694a:	f7fa f9b1 	bl	8000cb0 <__aeabi_fmul>
 800694e:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006950:	2024      	movs	r0, #36	; 0x24
 8006952:	f000 fcd7 	bl	8007304 <serial_write>
 8006956:	4640      	mov	r0, r8
 8006958:	f7fe f85e 	bl	8004a18 <print_uint8_base10>
 800695c:	203d      	movs	r0, #61	; 0x3d
 800695e:	f000 fcd1 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006962:	4628      	mov	r0, r5
 8006964:	2103      	movs	r1, #3
 8006966:	f7fe f899 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800696a:	4650      	mov	r0, sl
 800696c:	f7fe f848 	bl	8004a00 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006970:	494f      	ldr	r1, [pc, #316]	; (8006ab0 <report_grbl_settings+0x5e4>)
 8006972:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006974:	f7fa f99c 	bl	8000cb0 <__aeabi_fmul>
 8006978:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800697a:	2024      	movs	r0, #36	; 0x24
 800697c:	f000 fcc2 	bl	8007304 <serial_write>
 8006980:	4630      	mov	r0, r6
 8006982:	f7fe f849 	bl	8004a18 <print_uint8_base10>
 8006986:	203d      	movs	r0, #61	; 0x3d
 8006988:	f000 fcbc 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 800698c:	4628      	mov	r0, r5
 800698e:	2103      	movs	r1, #3
 8006990:	f7fe f884 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006994:	4650      	mov	r0, sl
 8006996:	f7fe f833 	bl	8004a00 <printString>
 800699a:	e79d      	b.n	80068d8 <report_grbl_settings+0x40c>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800699c:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 800699e:	6925      	ldr	r5, [r4, #16]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069a0:	f000 fcb0 	bl	8007304 <serial_write>
 80069a4:	4658      	mov	r0, fp
 80069a6:	f7fe f837 	bl	8004a18 <print_uint8_base10>
 80069aa:	203d      	movs	r0, #61	; 0x3d
 80069ac:	f000 fcaa 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 80069b0:	4628      	mov	r0, r5
 80069b2:	2103      	movs	r1, #3
 80069b4:	f7fe f872 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069b8:	4650      	mov	r0, sl
 80069ba:	f7fe f821 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069be:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 80069c0:	6965      	ldr	r5, [r4, #20]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069c2:	f000 fc9f 	bl	8007304 <serial_write>
 80069c6:	4648      	mov	r0, r9
 80069c8:	f7fe f826 	bl	8004a18 <print_uint8_base10>
 80069cc:	203d      	movs	r0, #61	; 0x3d
 80069ce:	f000 fc99 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 80069d2:	4628      	mov	r0, r5
 80069d4:	2103      	movs	r1, #3
 80069d6:	f7fe f861 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069da:	4650      	mov	r0, sl
 80069dc:	f7fe f810 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069e0:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 80069e2:	69a5      	ldr	r5, [r4, #24]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069e4:	f000 fc8e 	bl	8007304 <serial_write>
 80069e8:	4640      	mov	r0, r8
 80069ea:	f7fe f815 	bl	8004a18 <print_uint8_base10>
 80069ee:	203d      	movs	r0, #61	; 0x3d
 80069f0:	f000 fc88 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 80069f4:	4628      	mov	r0, r5
 80069f6:	2103      	movs	r1, #3
 80069f8:	f7fe f850 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069fc:	4650      	mov	r0, sl
 80069fe:	f7fd ffff 	bl	8004a00 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a02:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a04:	69e5      	ldr	r5, [r4, #28]
 8006a06:	e7b9      	b.n	800697c <report_grbl_settings+0x4b0>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a08:	6b22      	ldr	r2, [r4, #48]	; 0x30
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a0a:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a0c:	f102 4700 	add.w	r7, r2, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a10:	f000 fc78 	bl	8007304 <serial_write>
 8006a14:	4658      	mov	r0, fp
 8006a16:	f7fd ffff 	bl	8004a18 <print_uint8_base10>
 8006a1a:	203d      	movs	r0, #61	; 0x3d
 8006a1c:	f000 fc72 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006a20:	4638      	mov	r0, r7
 8006a22:	4629      	mov	r1, r5
 8006a24:	f7fe f83a 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a28:	4822      	ldr	r0, [pc, #136]	; (8006ab4 <report_grbl_settings+0x5e8>)
 8006a2a:	f7fd ffe9 	bl	8004a00 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a30:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a32:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a36:	f000 fc65 	bl	8007304 <serial_write>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a3a:	1eb0      	subs	r0, r6, #2
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a3c:	b2c0      	uxtb	r0, r0
 8006a3e:	f7fd ffeb 	bl	8004a18 <print_uint8_base10>
 8006a42:	203d      	movs	r0, #61	; 0x3d
 8006a44:	f000 fc5e 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006a48:	4628      	mov	r0, r5
 8006a4a:	2103      	movs	r1, #3
 8006a4c:	f7fe f826 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a50:	4818      	ldr	r0, [pc, #96]	; (8006ab4 <report_grbl_settings+0x5e8>)
 8006a52:	f7fd ffd5 	bl	8004a00 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a58:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a5a:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a5e:	f000 fc51 	bl	8007304 <serial_write>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a62:	1e70      	subs	r0, r6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a64:	b2c0      	uxtb	r0, r0
 8006a66:	f7fd ffd7 	bl	8004a18 <print_uint8_base10>
 8006a6a:	203d      	movs	r0, #61	; 0x3d
 8006a6c:	f000 fc4a 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006a70:	4628      	mov	r0, r5
 8006a72:	2103      	movs	r1, #3
 8006a74:	f7fe f812 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a78:	480e      	ldr	r0, [pc, #56]	; (8006ab4 <report_grbl_settings+0x5e8>)
 8006a7a:	f7fd ffc1 	bl	8004a00 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a7e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a80:	2024      	movs	r0, #36	; 0x24
 8006a82:	f000 fc3f 	bl	8007304 <serial_write>
 8006a86:	4630      	mov	r0, r6
 8006a88:	f7fd ffc6 	bl	8004a18 <print_uint8_base10>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a8c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a90:	203d      	movs	r0, #61	; 0x3d
 8006a92:	f000 fc37 	bl	8007304 <serial_write>
  printFloat(val, n_decimal);
 8006a96:	4620      	mov	r0, r4
 8006a98:	2103      	movs	r1, #3
 8006a9a:	f7fd ffff 	bl	8004a9c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a9e:	4805      	ldr	r0, [pc, #20]	; (8006ab4 <report_grbl_settings+0x5e8>)
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
  }
}
 8006aa0:	b003      	add	sp, #12
 8006aa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006aa6:	f7fd bfab 	b.w	8004a00 <printString>
}
 8006aaa:	b003      	add	sp, #12
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab0:	3991a2b4 	.word	0x3991a2b4
 8006ab4:	0800c094 	.word	0x0800c094

08006ab8 <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8006ab8:	b500      	push	{lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8006aba:	4816      	ldr	r0, [pc, #88]	; (8006b14 <report_probe_parameters+0x5c>)
{
 8006abc:	b085      	sub	sp, #20
  printPgmString(PSTR("[PRB:"));
 8006abe:	f7fd ff9f 	bl	8004a00 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006ac2:	4915      	ldr	r1, [pc, #84]	; (8006b18 <report_probe_parameters+0x60>)
 8006ac4:	4668      	mov	r0, sp
 8006ac6:	f002 fdf1 	bl	80096ac <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006aca:	9800      	ldr	r0, [sp, #0]
 8006acc:	f7fe f858 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006ad0:	202c      	movs	r0, #44	; 0x2c
 8006ad2:	f000 fc17 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006ad6:	9801      	ldr	r0, [sp, #4]
 8006ad8:	f7fe f852 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006adc:	202c      	movs	r0, #44	; 0x2c
 8006ade:	f000 fc11 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006ae2:	9802      	ldr	r0, [sp, #8]
 8006ae4:	f7fe f84c 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006ae8:	202c      	movs	r0, #44	; 0x2c
 8006aea:	f000 fc0b 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006aee:	9803      	ldr	r0, [sp, #12]
 8006af0:	f7fe f846 	bl	8004b80 <printFloat_CoordValue>
  report_util_axis_values(print_position);
  serial_write(':');
 8006af4:	203a      	movs	r0, #58	; 0x3a
 8006af6:	f000 fc05 	bl	8007304 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006afa:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <report_probe_parameters+0x64>)
 8006afc:	7958      	ldrb	r0, [r3, #5]
 8006afe:	f7fd ff8b 	bl	8004a18 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006b02:	205d      	movs	r0, #93	; 0x5d
 8006b04:	f000 fbfe 	bl	8007304 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b08:	4805      	ldr	r0, [pc, #20]	; (8006b20 <report_probe_parameters+0x68>)
 8006b0a:	f7fd ff79 	bl	8004a00 <printString>
  report_util_feedback_line_feed();
}
 8006b0e:	b005      	add	sp, #20
 8006b10:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b14:	0800bffc 	.word	0x0800bffc
 8006b18:	200010c8 	.word	0x200010c8
 8006b1c:	200010b0 	.word	0x200010b0
 8006b20:	0800c094 	.word	0x0800c094

08006b24 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8006b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b28:	2400      	movs	r4, #0
 8006b2a:	b088      	sub	sp, #32
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 8006b2c:	4e51      	ldr	r6, [pc, #324]	; (8006c74 <report_ngc_parameters+0x150>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 8006b2e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8006c9c <report_ngc_parameters+0x178>
      case 7: printPgmString(PSTR("30")); break;
 8006b32:	4f51      	ldr	r7, [pc, #324]	; (8006c78 <report_ngc_parameters+0x154>)
 8006b34:	e025      	b.n	8006b82 <report_ngc_parameters+0x5e>
    switch (coord_select) {
 8006b36:	2d07      	cmp	r5, #7
 8006b38:	d133      	bne.n	8006ba2 <report_ngc_parameters+0x7e>
      case 7: printPgmString(PSTR("30")); break;
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	f7fd ff60 	bl	8004a00 <printString>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
    }
    serial_write(':');
 8006b40:	203a      	movs	r0, #58	; 0x3a
 8006b42:	f000 fbdf 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b46:	9800      	ldr	r0, [sp, #0]
 8006b48:	f7fe f81a 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b4c:	202c      	movs	r0, #44	; 0x2c
 8006b4e:	f000 fbd9 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b52:	9801      	ldr	r0, [sp, #4]
 8006b54:	f7fe f814 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b58:	202c      	movs	r0, #44	; 0x2c
 8006b5a:	f000 fbd3 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b5e:	9802      	ldr	r0, [sp, #8]
 8006b60:	f7fe f80e 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b64:	202c      	movs	r0, #44	; 0x2c
 8006b66:	f000 fbcd 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b6a:	9803      	ldr	r0, [sp, #12]
 8006b6c:	f7fe f808 	bl	8004b80 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006b70:	205d      	movs	r0, #93	; 0x5d
 8006b72:	f000 fbc7 	bl	8007304 <serial_write>
 8006b76:	3401      	adds	r4, #1
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b78:	4840      	ldr	r0, [pc, #256]	; (8006c7c <report_ngc_parameters+0x158>)
 8006b7a:	f7fd ff41 	bl	8004a00 <printString>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006b7e:	2c08      	cmp	r4, #8
 8006b80:	d015      	beq.n	8006bae <report_ngc_parameters+0x8a>
 8006b82:	b2e5      	uxtb	r5, r4
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006b84:	4628      	mov	r0, r5
 8006b86:	4669      	mov	r1, sp
 8006b88:	f000 fdca 	bl	8007720 <settings_read_coord_data>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d065      	beq.n	8006c5c <report_ngc_parameters+0x138>
    printPgmString(PSTR("[G"));
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7fd ff35 	bl	8004a00 <printString>
    switch (coord_select) {
 8006b96:	2d06      	cmp	r5, #6
 8006b98:	d1cd      	bne.n	8006b36 <report_ngc_parameters+0x12>
      case 6: printPgmString(PSTR("28")); break;
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	f7fd ff30 	bl	8004a00 <printString>
 8006ba0:	e7ce      	b.n	8006b40 <report_ngc_parameters+0x1c>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8006ba2:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8006ba6:	b2c0      	uxtb	r0, r0
 8006ba8:	f7fd ff36 	bl	8004a18 <print_uint8_base10>
 8006bac:	e7c8      	b.n	8006b40 <report_ngc_parameters+0x1c>
    printFloat_CoordValue(axis_value[idx]);
 8006bae:	4c34      	ldr	r4, [pc, #208]	; (8006c80 <report_ngc_parameters+0x15c>)
    report_util_axis_values(coord_data);
    report_util_feedback_line_feed();
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006bb0:	4834      	ldr	r0, [pc, #208]	; (8006c84 <report_ngc_parameters+0x160>)
 8006bb2:	f7fd ff25 	bl	8004a00 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8006bb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006bb8:	f7fd ffe2 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006bbc:	202c      	movs	r0, #44	; 0x2c
 8006bbe:	f000 fba1 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006bc2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006bc4:	f7fd ffdc 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006bc8:	202c      	movs	r0, #44	; 0x2c
 8006bca:	f000 fb9b 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006bce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006bd0:	f7fd ffd6 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006bd4:	202c      	movs	r0, #44	; 0x2c
 8006bd6:	f000 fb95 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006bda:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006bdc:	f7fd ffd0 	bl	8004b80 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006be0:	205d      	movs	r0, #93	; 0x5d
 8006be2:	f000 fb8f 	bl	8007304 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006be6:	4825      	ldr	r0, [pc, #148]	; (8006c7c <report_ngc_parameters+0x158>)
 8006be8:	f7fd ff0a 	bl	8004a00 <printString>
  report_util_axis_values(gc_state.coord_offset);
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8006bec:	4826      	ldr	r0, [pc, #152]	; (8006c88 <report_ngc_parameters+0x164>)
 8006bee:	f7fd ff07 	bl	8004a00 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8006bf2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006bf4:	f7fd ffc4 	bl	8004b80 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006bf8:	205d      	movs	r0, #93	; 0x5d
 8006bfa:	f000 fb83 	bl	8007304 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006bfe:	481f      	ldr	r0, [pc, #124]	; (8006c7c <report_ngc_parameters+0x158>)
 8006c00:	f7fd fefe 	bl	8004a00 <printString>
  printPgmString(PSTR("[PRB:"));
 8006c04:	4821      	ldr	r0, [pc, #132]	; (8006c8c <report_ngc_parameters+0x168>)
 8006c06:	f7fd fefb 	bl	8004a00 <printString>
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006c0a:	4921      	ldr	r1, [pc, #132]	; (8006c90 <report_ngc_parameters+0x16c>)
 8006c0c:	a804      	add	r0, sp, #16
 8006c0e:	f002 fd4d 	bl	80096ac <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006c12:	9804      	ldr	r0, [sp, #16]
 8006c14:	f7fd ffb4 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c18:	202c      	movs	r0, #44	; 0x2c
 8006c1a:	f000 fb73 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c1e:	9805      	ldr	r0, [sp, #20]
 8006c20:	f7fd ffae 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c24:	202c      	movs	r0, #44	; 0x2c
 8006c26:	f000 fb6d 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c2a:	9806      	ldr	r0, [sp, #24]
 8006c2c:	f7fd ffa8 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c30:	202c      	movs	r0, #44	; 0x2c
 8006c32:	f000 fb67 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c36:	9807      	ldr	r0, [sp, #28]
 8006c38:	f7fd ffa2 	bl	8004b80 <printFloat_CoordValue>
  serial_write(':');
 8006c3c:	203a      	movs	r0, #58	; 0x3a
 8006c3e:	f000 fb61 	bl	8007304 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006c42:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <report_ngc_parameters+0x170>)
 8006c44:	7958      	ldrb	r0, [r3, #5]
 8006c46:	f7fd fee7 	bl	8004a18 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006c4a:	205d      	movs	r0, #93	; 0x5d
 8006c4c:	f000 fb5a 	bl	8007304 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c50:	480a      	ldr	r0, [pc, #40]	; (8006c7c <report_ngc_parameters+0x158>)
 8006c52:	f7fd fed5 	bl	8004a00 <printString>
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8006c56:	b008      	add	sp, #32
 8006c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      printPgmString(PSTR("error:"));
 8006c5c:	480e      	ldr	r0, [pc, #56]	; (8006c98 <report_ngc_parameters+0x174>)
 8006c5e:	f7fd fecf 	bl	8004a00 <printString>
      print_uint8_base10(status_code);
 8006c62:	2007      	movs	r0, #7
 8006c64:	f7fd fed8 	bl	8004a18 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c68:	4804      	ldr	r0, [pc, #16]	; (8006c7c <report_ngc_parameters+0x158>)
 8006c6a:	f7fd fec9 	bl	8004a00 <printString>
}
 8006c6e:	b008      	add	sp, #32
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c74:	0800bfe0 	.word	0x0800bfe0
 8006c78:	0800bfe8 	.word	0x0800bfe8
 8006c7c:	0800c094 	.word	0x0800c094
 8006c80:	20001014 	.word	0x20001014
 8006c84:	0800bfec 	.word	0x0800bfec
 8006c88:	0800bff4 	.word	0x0800bff4
 8006c8c:	0800bffc 	.word	0x0800bffc
 8006c90:	200010c8 	.word	0x200010c8
 8006c94:	200010b0 	.word	0x200010b0
 8006c98:	0800c08c 	.word	0x0800c08c
 8006c9c:	0800bfe4 	.word	0x0800bfe4

08006ca0 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8006ca0:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006ca2:	4c52      	ldr	r4, [pc, #328]	; (8006dec <report_gcode_modes+0x14c>)
  printPgmString(PSTR("[GC:G"));
 8006ca4:	4852      	ldr	r0, [pc, #328]	; (8006df0 <report_gcode_modes+0x150>)
 8006ca6:	f7fd feab 	bl	8004a00 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006caa:	7820      	ldrb	r0, [r4, #0]
 8006cac:	288b      	cmp	r0, #139	; 0x8b
 8006cae:	d961      	bls.n	8006d74 <report_gcode_modes+0xd4>
    printPgmString(PSTR("38."));
 8006cb0:	4850      	ldr	r0, [pc, #320]	; (8006df4 <report_gcode_modes+0x154>)
 8006cb2:	f7fd fea5 	bl	8004a00 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8006cb6:	7820      	ldrb	r0, [r4, #0]
 8006cb8:	3076      	adds	r0, #118	; 0x76
 8006cba:	b2c0      	uxtb	r0, r0
 8006cbc:	f7fd feac 	bl	8004a18 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006cc0:	484d      	ldr	r0, [pc, #308]	; (8006df8 <report_gcode_modes+0x158>)
 8006cc2:	f7fd fe9d 	bl	8004a00 <printString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8006cc6:	79a0      	ldrb	r0, [r4, #6]
 8006cc8:	3036      	adds	r0, #54	; 0x36
 8006cca:	b2c0      	uxtb	r0, r0
 8006ccc:	f7fd fea4 	bl	8004a18 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006cd0:	4849      	ldr	r0, [pc, #292]	; (8006df8 <report_gcode_modes+0x158>)
 8006cd2:	f7fd fe95 	bl	8004a00 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8006cd6:	7920      	ldrb	r0, [r4, #4]
 8006cd8:	3011      	adds	r0, #17
 8006cda:	b2c0      	uxtb	r0, r0
 8006cdc:	f7fd fe9c 	bl	8004a18 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006ce0:	4845      	ldr	r0, [pc, #276]	; (8006df8 <report_gcode_modes+0x158>)
 8006ce2:	f7fd fe8d 	bl	8004a00 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 8006ce6:	78a0      	ldrb	r0, [r4, #2]
 8006ce8:	f1c0 0015 	rsb	r0, r0, #21
 8006cec:	b2c0      	uxtb	r0, r0
 8006cee:	f7fd fe93 	bl	8004a18 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006cf2:	4841      	ldr	r0, [pc, #260]	; (8006df8 <report_gcode_modes+0x158>)
 8006cf4:	f7fd fe84 	bl	8004a00 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8006cf8:	78e0      	ldrb	r0, [r4, #3]
 8006cfa:	305a      	adds	r0, #90	; 0x5a
 8006cfc:	b2c0      	uxtb	r0, r0
 8006cfe:	f7fd fe8b 	bl	8004a18 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006d02:	483d      	ldr	r0, [pc, #244]	; (8006df8 <report_gcode_modes+0x158>)
 8006d04:	f7fd fe7c 	bl	8004a00 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8006d08:	7860      	ldrb	r0, [r4, #1]
 8006d0a:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 8006d0e:	b2c0      	uxtb	r0, r0
 8006d10:	f7fd fe82 	bl	8004a18 <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8006d14:	79e3      	ldrb	r3, [r4, #7]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d13f      	bne.n	8006d9a <report_gcode_modes+0xfa>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006d1a:	4838      	ldr	r0, [pc, #224]	; (8006dfc <report_gcode_modes+0x15c>)
 8006d1c:	f7fd fe70 	bl	8004a00 <printString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8006d20:	7a63      	ldrb	r3, [r4, #9]
 8006d22:	2b10      	cmp	r3, #16
 8006d24:	d04a      	beq.n	8006dbc <report_gcode_modes+0x11c>
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	d044      	beq.n	8006db4 <report_gcode_modes+0x114>
 8006d2a:	b333      	cbz	r3, 8006d7a <report_gcode_modes+0xda>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006d2c:	4833      	ldr	r0, [pc, #204]	; (8006dfc <report_gcode_modes+0x15c>)
 8006d2e:	f7fd fe67 	bl	8004a00 <printString>
    case SPINDLE_DISABLE : serial_write('5'); break;
  }

  report_util_gcode_modes_M();
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8006d32:	7a23      	ldrb	r3, [r4, #8]
 8006d34:	b353      	cbz	r3, 8006d8c <report_gcode_modes+0xec>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006d36:	061a      	lsls	r2, r3, #24
 8006d38:	d44f      	bmi.n	8006dda <report_gcode_modes+0x13a>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006d3a:	065b      	lsls	r3, r3, #25
 8006d3c:	d442      	bmi.n	8006dc4 <report_gcode_modes+0x124>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 8006d3e:	4830      	ldr	r0, [pc, #192]	; (8006e00 <report_gcode_modes+0x160>)
 8006d40:	f7fd fe5e 	bl	8004a00 <printString>
  print_uint8_base10(gc_state.tool);
 8006d44:	7d20      	ldrb	r0, [r4, #20]
 8006d46:	f7fd fe67 	bl	8004a18 <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8006d4a:	482e      	ldr	r0, [pc, #184]	; (8006e04 <report_gcode_modes+0x164>)
 8006d4c:	f7fd fe58 	bl	8004a00 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 8006d50:	6920      	ldr	r0, [r4, #16]
 8006d52:	f7fd fffd 	bl	8004d50 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 8006d56:	482c      	ldr	r0, [pc, #176]	; (8006e08 <report_gcode_modes+0x168>)
 8006d58:	f7fd fe52 	bl	8004a00 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 8006d5c:	68e0      	ldr	r0, [r4, #12]
 8006d5e:	2100      	movs	r1, #0
 8006d60:	f7fd fe9c 	bl	8004a9c <printFloat>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006d64:	205d      	movs	r0, #93	; 0x5d
 8006d66:	f000 facd 	bl	8007304 <serial_write>
  #endif

  report_util_feedback_line_feed();
}
 8006d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d6e:	4827      	ldr	r0, [pc, #156]	; (8006e0c <report_gcode_modes+0x16c>)
 8006d70:	f7fd be46 	b.w	8004a00 <printString>
    print_uint8_base10(gc_state.modal.motion);
 8006d74:	f7fd fe50 	bl	8004a18 <print_uint8_base10>
 8006d78:	e7a2      	b.n	8006cc0 <report_gcode_modes+0x20>
    case SPINDLE_DISABLE : serial_write('5'); break;
 8006d7a:	2035      	movs	r0, #53	; 0x35
 8006d7c:	f000 fac2 	bl	8007304 <serial_write>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006d80:	481e      	ldr	r0, [pc, #120]	; (8006dfc <report_gcode_modes+0x15c>)
 8006d82:	f7fd fe3d 	bl	8004a00 <printString>
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8006d86:	7a23      	ldrb	r3, [r4, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1d4      	bne.n	8006d36 <report_gcode_modes+0x96>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006d8c:	481b      	ldr	r0, [pc, #108]	; (8006dfc <report_gcode_modes+0x15c>)
 8006d8e:	f7fd fe37 	bl	8004a00 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8006d92:	2039      	movs	r0, #57	; 0x39
 8006d94:	f000 fab6 	bl	8007304 <serial_write>
 8006d98:	e7d1      	b.n	8006d3e <report_gcode_modes+0x9e>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006d9a:	4818      	ldr	r0, [pc, #96]	; (8006dfc <report_gcode_modes+0x15c>)
 8006d9c:	f7fd fe30 	bl	8004a00 <printString>
    switch (gc_state.modal.program_flow) {
 8006da0:	79e0      	ldrb	r0, [r4, #7]
 8006da2:	2803      	cmp	r0, #3
 8006da4:	d015      	beq.n	8006dd2 <report_gcode_modes+0x132>
 8006da6:	281e      	cmp	r0, #30
 8006da8:	d001      	beq.n	8006dae <report_gcode_modes+0x10e>
 8006daa:	2802      	cmp	r0, #2
 8006dac:	d1b5      	bne.n	8006d1a <report_gcode_modes+0x7a>
        print_uint8_base10(gc_state.modal.program_flow);
 8006dae:	f7fd fe33 	bl	8004a18 <print_uint8_base10>
        break;
 8006db2:	e7b2      	b.n	8006d1a <report_gcode_modes+0x7a>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8006db4:	2034      	movs	r0, #52	; 0x34
 8006db6:	f000 faa5 	bl	8007304 <serial_write>
 8006dba:	e7b7      	b.n	8006d2c <report_gcode_modes+0x8c>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8006dbc:	2033      	movs	r0, #51	; 0x33
 8006dbe:	f000 faa1 	bl	8007304 <serial_write>
 8006dc2:	e7b3      	b.n	8006d2c <report_gcode_modes+0x8c>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006dc4:	480d      	ldr	r0, [pc, #52]	; (8006dfc <report_gcode_modes+0x15c>)
 8006dc6:	f7fd fe1b 	bl	8004a00 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006dca:	2038      	movs	r0, #56	; 0x38
 8006dcc:	f000 fa9a 	bl	8007304 <serial_write>
 8006dd0:	e7b5      	b.n	8006d3e <report_gcode_modes+0x9e>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 8006dd2:	2030      	movs	r0, #48	; 0x30
 8006dd4:	f000 fa96 	bl	8007304 <serial_write>
 8006dd8:	e79f      	b.n	8006d1a <report_gcode_modes+0x7a>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006dda:	4808      	ldr	r0, [pc, #32]	; (8006dfc <report_gcode_modes+0x15c>)
 8006ddc:	f7fd fe10 	bl	8004a00 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006de0:	2037      	movs	r0, #55	; 0x37
 8006de2:	f000 fa8f 	bl	8007304 <serial_write>
 8006de6:	7a23      	ldrb	r3, [r4, #8]
 8006de8:	e7a7      	b.n	8006d3a <report_gcode_modes+0x9a>
 8006dea:	bf00      	nop
 8006dec:	20001014 	.word	0x20001014
 8006df0:	0800bf54 	.word	0x0800bf54
 8006df4:	0800bf5c 	.word	0x0800bf5c
 8006df8:	0800bf60 	.word	0x0800bf60
 8006dfc:	0800bf64 	.word	0x0800bf64
 8006e00:	0800bf68 	.word	0x0800bf68
 8006e04:	0800bf6c 	.word	0x0800bf6c
 8006e08:	0800bf70 	.word	0x0800bf70
 8006e0c:	0800c094 	.word	0x0800c094

08006e10 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4605      	mov	r5, r0
 8006e14:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 8006e16:	4808      	ldr	r0, [pc, #32]	; (8006e38 <report_startup_line+0x28>)
 8006e18:	f7fd fdf2 	bl	8004a00 <printString>
  print_uint8_base10(n);
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f7fd fdfb 	bl	8004a18 <print_uint8_base10>
  serial_write('=');
 8006e22:	203d      	movs	r0, #61	; 0x3d
 8006e24:	f000 fa6e 	bl	8007304 <serial_write>
  printString(line);
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f7fd fde9 	bl	8004a00 <printString>
  report_util_line_feed();
}
 8006e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e32:	4802      	ldr	r0, [pc, #8]	; (8006e3c <report_startup_line+0x2c>)
 8006e34:	f7fd bde4 	b.w	8004a00 <printString>
 8006e38:	0800c080 	.word	0x0800c080
 8006e3c:	0800c094 	.word	0x0800c094

08006e40 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4605      	mov	r5, r0
 8006e44:	460c      	mov	r4, r1
  serial_write('>');
 8006e46:	203e      	movs	r0, #62	; 0x3e
 8006e48:	f000 fa5c 	bl	8007304 <serial_write>
  printString(line);
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f7fd fdd7 	bl	8004a00 <printString>
  serial_write(':');
 8006e52:	203a      	movs	r0, #58	; 0x3a
 8006e54:	f000 fa56 	bl	8007304 <serial_write>
  switch(status_code) {
 8006e58:	b154      	cbz	r4, 8006e70 <report_execute_startup_message+0x30>
      printPgmString(PSTR("error:"));
 8006e5a:	4808      	ldr	r0, [pc, #32]	; (8006e7c <report_execute_startup_message+0x3c>)
 8006e5c:	f7fd fdd0 	bl	8004a00 <printString>
      print_uint8_base10(status_code);
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7fd fdd9 	bl	8004a18 <print_uint8_base10>
  report_status_message(status_code);
}
 8006e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e6a:	4805      	ldr	r0, [pc, #20]	; (8006e80 <report_execute_startup_message+0x40>)
 8006e6c:	f7fd bdc8 	b.w	8004a00 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 8006e70:	4804      	ldr	r0, [pc, #16]	; (8006e84 <report_execute_startup_message+0x44>)
}
 8006e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("ok\r\n")); break;
 8006e76:	f7fd bdc3 	b.w	8004a00 <printString>
 8006e7a:	bf00      	nop
 8006e7c:	0800c08c 	.word	0x0800c08c
 8006e80:	0800c094 	.word	0x0800c094
 8006e84:	0800c084 	.word	0x0800c084

08006e88 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 8006e8c:	4817      	ldr	r0, [pc, #92]	; (8006eec <report_build_info+0x64>)
 8006e8e:	f7fd fdb7 	bl	8004a00 <printString>
  printString(line);
 8006e92:	4620      	mov	r0, r4
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e94:	4c16      	ldr	r4, [pc, #88]	; (8006ef0 <report_build_info+0x68>)
  printString(line);
 8006e96:	f7fd fdb3 	bl	8004a00 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006e9a:	205d      	movs	r0, #93	; 0x5d
 8006e9c:	f000 fa32 	bl	8007304 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7fd fdad 	bl	8004a00 <printString>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 8006ea6:	4813      	ldr	r0, [pc, #76]	; (8006ef4 <report_build_info+0x6c>)
 8006ea8:	f7fd fdaa 	bl	8004a00 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8006eac:	2056      	movs	r0, #86	; 0x56
 8006eae:	f000 fa29 	bl	8007304 <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 8006eb2:	204d      	movs	r0, #77	; 0x4d
 8006eb4:	f000 fa26 	bl	8007304 <serial_write>
  #endif
  #ifdef PARKING_ENABLE
    serial_write('P');
  #endif
  #ifdef HOMING_FORCE_SET_ORIGIN
    serial_write('Z');
 8006eb8:	205a      	movs	r0, #90	; 0x5a
 8006eba:	f000 fa23 	bl	8007304 <serial_write>
  #endif
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    serial_write('H');
 8006ebe:	2048      	movs	r0, #72	; 0x48
 8006ec0:	f000 fa20 	bl	8007304 <serial_write>
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 8006ec4:	202c      	movs	r0, #44	; 0x2c
 8006ec6:	f000 fa1d 	bl	8007304 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 8006eca:	2023      	movs	r0, #35	; 0x23
 8006ecc:	f7fd fda4 	bl	8004a18 <print_uint8_base10>
	serial_write(',');
 8006ed0:	202c      	movs	r0, #44	; 0x2c
 8006ed2:	f000 fa17 	bl	8007304 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 8006ed6:	20fe      	movs	r0, #254	; 0xfe
 8006ed8:	f7fd fd9e 	bl	8004a18 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006edc:	205d      	movs	r0, #93	; 0x5d
 8006ede:	f000 fa11 	bl	8007304 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ee2:	4620      	mov	r0, r4

	report_util_feedback_line_feed();
}
 8006ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ee8:	f7fd bd8a 	b.w	8004a00 <printString>
 8006eec:	0800be88 	.word	0x0800be88
 8006ef0:	0800c094 	.word	0x0800c094
 8006ef4:	0800be9c 	.word	0x0800be9c

08006ef8 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8006ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006efa:	4ba8      	ldr	r3, [pc, #672]	; (800719c <report_realtime_status+0x2a4>)
{
 8006efc:	b08d      	sub	sp, #52	; 0x34
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8006f00:	4ca7      	ldr	r4, [pc, #668]	; (80071a0 <report_realtime_status+0x2a8>)
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006f02:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  system_convert_array_steps_to_mpos(print_position, current_position);
 8006f06:	4669      	mov	r1, sp
 8006f08:	a804      	add	r0, sp, #16
 8006f0a:	f002 fbcf 	bl	80096ac <system_convert_array_steps_to_mpos>
  serial_write('<');
 8006f0e:	203c      	movs	r0, #60	; 0x3c
 8006f10:	f000 f9f8 	bl	8007304 <serial_write>
  switch (sys.state) {
 8006f14:	7823      	ldrb	r3, [r4, #0]
 8006f16:	2b08      	cmp	r3, #8
 8006f18:	f000 81a9 	beq.w	800726e <report_realtime_status+0x376>
 8006f1c:	d946      	bls.n	8006fac <report_realtime_status+0xb4>
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	f000 8199 	beq.w	8007256 <report_realtime_status+0x35e>
 8006f24:	f240 80fd 	bls.w	8007122 <report_realtime_status+0x22a>
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	f000 80e6 	beq.w	80070fa <report_realtime_status+0x202>
 8006f2e:	2b80      	cmp	r3, #128	; 0x80
 8006f30:	d149      	bne.n	8006fc6 <report_realtime_status+0xce>
    break;
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006f32:	4e9c      	ldr	r6, [pc, #624]	; (80071a4 <report_realtime_status+0x2ac>)
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8006f34:	489c      	ldr	r0, [pc, #624]	; (80071a8 <report_realtime_status+0x2b0>)
 8006f36:	f7fd fd63 	bl	8004a00 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006f3a:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 8006f3e:	07dd      	lsls	r5, r3, #31
 8006f40:	d446      	bmi.n	8006fd0 <report_realtime_status+0xd8>
    (sys.report_wco_counter == 0)) {
    for (idx = 0; idx< N_AXIS; idx++) {
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f42:	4d9a      	ldr	r5, [pc, #616]	; (80071ac <report_realtime_status+0x2b4>)
 8006f44:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8006f46:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006f48:	f7f9 fdaa 	bl	8000aa0 <__addsf3>
 8006f4c:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
      if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
        print_position[idx] -= wco[idx];
 8006f4e:	9804      	ldr	r0, [sp, #16]
 8006f50:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f52:	9308      	str	r3, [sp, #32]
        print_position[idx] -= wco[idx];
 8006f54:	f7f9 fda2 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f58:	6c29      	ldr	r1, [r5, #64]	; 0x40
        print_position[idx] -= wco[idx];
 8006f5a:	9004      	str	r0, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f5c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006f5e:	f7f9 fd9f 	bl	8000aa0 <__addsf3>
 8006f62:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8006f64:	9805      	ldr	r0, [sp, #20]
 8006f66:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f68:	9309      	str	r3, [sp, #36]	; 0x24
        print_position[idx] -= wco[idx];
 8006f6a:	f7f9 fd97 	bl	8000a9c <__aeabi_fsub>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006f6e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
        print_position[idx] -= wco[idx];
 8006f70:	9005      	str	r0, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f72:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8006f74:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8006f76:	f7f9 fd93 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 fd90 	bl	8000aa0 <__addsf3>
 8006f80:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8006f82:	9806      	ldr	r0, [sp, #24]
 8006f84:	4619      	mov	r1, r3
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006f86:	930a      	str	r3, [sp, #40]	; 0x28
        print_position[idx] -= wco[idx];
 8006f88:	f7f9 fd88 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f8c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
        print_position[idx] -= wco[idx];
 8006f8e:	9006      	str	r0, [sp, #24]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f90:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8006f92:	f7f9 fd85 	bl	8000aa0 <__addsf3>
 8006f96:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8006f98:	9807      	ldr	r0, [sp, #28]
 8006f9a:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f9c:	930b      	str	r3, [sp, #44]	; 0x2c
        print_position[idx] -= wco[idx];
 8006f9e:	f7f9 fd7d 	bl	8000a9c <__aeabi_fsub>
 8006fa2:	9007      	str	r0, [sp, #28]
  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
    printPgmString(PSTR("|MPos:"));
  }
  else {
    printPgmString(PSTR("|WPos:"));
 8006fa4:	4882      	ldr	r0, [pc, #520]	; (80071b0 <report_realtime_status+0x2b8>)
 8006fa6:	f7fd fd2b 	bl	8004a00 <printString>
 8006faa:	e02f      	b.n	800700c <report_realtime_status+0x114>
  switch (sys.state) {
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	f000 815a 	beq.w	8007266 <report_realtime_status+0x36e>
 8006fb2:	f0c0 8154 	bcc.w	800725e <report_realtime_status+0x366>
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	f000 80af 	beq.w	800711a <report_realtime_status+0x222>
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d102      	bne.n	8006fc6 <report_realtime_status+0xce>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8006fc0:	487c      	ldr	r0, [pc, #496]	; (80071b4 <report_realtime_status+0x2bc>)
 8006fc2:	f7fd fd1d 	bl	8004a00 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006fc6:	4e77      	ldr	r6, [pc, #476]	; (80071a4 <report_realtime_status+0x2ac>)
 8006fc8:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 8006fcc:	07dd      	lsls	r5, r3, #31
 8006fce:	d5b8      	bpl.n	8006f42 <report_realtime_status+0x4a>
 8006fd0:	7b63      	ldrb	r3, [r4, #13]
 8006fd2:	b9c3      	cbnz	r3, 8007006 <report_realtime_status+0x10e>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006fd4:	4d75      	ldr	r5, [pc, #468]	; (80071ac <report_realtime_status+0x2b4>)
 8006fd6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8006fd8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006fda:	f7f9 fd61 	bl	8000aa0 <__addsf3>
 8006fde:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8006fe0:	9008      	str	r0, [sp, #32]
 8006fe2:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8006fe4:	f7f9 fd5c 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006fe8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006fea:	9009      	str	r0, [sp, #36]	; 0x24
 8006fec:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8006fee:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8006ff0:	f7f9 fd56 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	f7f9 fd53 	bl	8000aa0 <__addsf3>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006ffa:	6ca9      	ldr	r1, [r5, #72]	; 0x48
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006ffc:	900a      	str	r0, [sp, #40]	; 0x28
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006ffe:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007000:	f7f9 fd4e 	bl	8000aa0 <__addsf3>
 8007004:	900b      	str	r0, [sp, #44]	; 0x2c
    printPgmString(PSTR("|MPos:"));
 8007006:	486c      	ldr	r0, [pc, #432]	; (80071b8 <report_realtime_status+0x2c0>)
 8007008:	f7fd fcfa 	bl	8004a00 <printString>
    printFloat_CoordValue(axis_value[idx]);
 800700c:	9804      	ldr	r0, [sp, #16]
 800700e:	f7fd fdb7 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007012:	202c      	movs	r0, #44	; 0x2c
 8007014:	f000 f976 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8007018:	9805      	ldr	r0, [sp, #20]
 800701a:	f7fd fdb1 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800701e:	202c      	movs	r0, #44	; 0x2c
 8007020:	f000 f970 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8007024:	9806      	ldr	r0, [sp, #24]
 8007026:	f7fd fdab 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800702a:	202c      	movs	r0, #44	; 0x2c
 800702c:	f000 f96a 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8007030:	9807      	ldr	r0, [sp, #28]
 8007032:	f7fd fda5 	bl	8004b80 <printFloat_CoordValue>
  }
  report_util_axis_values(print_position);

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8007036:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 800703a:	0798      	lsls	r0, r3, #30
 800703c:	f100 80ed 	bmi.w	800721a <report_realtime_status+0x322>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 8007040:	485e      	ldr	r0, [pc, #376]	; (80071bc <report_realtime_status+0x2c4>)
 8007042:	f7fd fcdd 	bl	8004a00 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 8007046:	f002 f8b9 	bl	80091bc <st_get_realtime_rate>
 800704a:	f7fd fe81 	bl	8004d50 <printFloat_RateValue>
  serial_write(',');
 800704e:	202c      	movs	r0, #44	; 0x2c
 8007050:	f000 f958 	bl	8007304 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 8007054:	2100      	movs	r1, #0
 8007056:	6920      	ldr	r0, [r4, #16]
 8007058:	f7fd fd20 	bl	8004a9c <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 800705c:	f7fb fffc 	bl	8003058 <limits_get_state>
 8007060:	4605      	mov	r5, r0
  uint8_t ctrl_pin_state = system_control_get_state();
 8007062:	f002 f8fd 	bl	8009260 <system_control_get_state>
 8007066:	4606      	mov	r6, r0
  uint8_t prb_pin_state = probe_get_state();
 8007068:	f7fd ff50 	bl	8004f0c <probe_get_state>
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 800706c:	ea45 0306 	orr.w	r3, r5, r6
 8007070:	4303      	orrs	r3, r0
 8007072:	f013 0fff 	tst.w	r3, #255	; 0xff
  uint8_t prb_pin_state = probe_get_state();
 8007076:	4607      	mov	r7, r0
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8007078:	f040 80b0 	bne.w	80071dc <report_realtime_status+0x2e4>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 800707c:	7b63      	ldrb	r3, [r4, #13]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d061      	beq.n	8007146 <report_realtime_status+0x24e>
 8007082:	3b01      	subs	r3, #1
 8007084:	7363      	strb	r3, [r4, #13]
    report_util_axis_values(wco);
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 8007086:	7b23      	ldrb	r3, [r4, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f040 8083 	bne.w	8007194 <report_realtime_status+0x29c>
    else {
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 800708e:	7823      	ldrb	r3, [r4, #0]
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
      }
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
      printPgmString(PSTR("|Ov:"));
 8007090:	484b      	ldr	r0, [pc, #300]	; (80071c0 <report_realtime_status+0x2c8>)
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 8007092:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 8007096:	bf14      	ite	ne
 8007098:	2313      	movne	r3, #19
 800709a:	2309      	moveq	r3, #9
 800709c:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 800709e:	f7fd fcaf 	bl	8004a00 <printString>
      print_uint8_base10(sys.f_override);
 80070a2:	7a20      	ldrb	r0, [r4, #8]
 80070a4:	f7fd fcb8 	bl	8004a18 <print_uint8_base10>
      serial_write(',');
 80070a8:	202c      	movs	r0, #44	; 0x2c
 80070aa:	f000 f92b 	bl	8007304 <serial_write>
      print_uint8_base10(sys.r_override);
 80070ae:	7a60      	ldrb	r0, [r4, #9]
 80070b0:	f7fd fcb2 	bl	8004a18 <print_uint8_base10>
      serial_write(',');
 80070b4:	202c      	movs	r0, #44	; 0x2c
 80070b6:	f000 f925 	bl	8007304 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 80070ba:	7aa0      	ldrb	r0, [r4, #10]
 80070bc:	f7fd fcac 	bl	8004a18 <print_uint8_base10>

      uint8_t sp_state = spindle_get_state();
 80070c0:	f000 fdd8 	bl	8007c74 <spindle_get_state>
 80070c4:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 80070c6:	f7fa fcdb 	bl	8001a80 <coolant_get_state>
 80070ca:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 80070cc:	2d00      	cmp	r5, #0
 80070ce:	f040 80b3 	bne.w	8007238 <report_realtime_status+0x340>
 80070d2:	b150      	cbz	r0, 80070ea <report_realtime_status+0x1f2>
        printPgmString(PSTR("|A:"));
 80070d4:	483b      	ldr	r0, [pc, #236]	; (80071c4 <report_realtime_status+0x2cc>)
 80070d6:	f7fd fc93 	bl	8004a00 <printString>
          #else
            if (sp_state & SPINDLE_STATE_CW) { serial_write('S'); } // CW
            else { serial_write('C'); } // CCW
          #endif
        }
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 80070da:	07e2      	lsls	r2, r4, #31
 80070dc:	f100 80b7 	bmi.w	800724e <report_realtime_status+0x356>
        #ifdef ENABLE_M7
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 80070e0:	07a3      	lsls	r3, r4, #30
 80070e2:	d502      	bpl.n	80070ea <report_realtime_status+0x1f2>
 80070e4:	204d      	movs	r0, #77	; 0x4d
 80070e6:	f000 f90d 	bl	8007304 <serial_write>
        #endif
      }
    }
  #endif

  serial_write('>');
 80070ea:	203e      	movs	r0, #62	; 0x3e
 80070ec:	f000 f90a 	bl	8007304 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80070f0:	4835      	ldr	r0, [pc, #212]	; (80071c8 <report_realtime_status+0x2d0>)
 80070f2:	f7fd fc85 	bl	8004a00 <printString>
  report_util_line_feed();
}
 80070f6:	b00d      	add	sp, #52	; 0x34
 80070f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printPgmString(PSTR("Door:"));
 80070fa:	4834      	ldr	r0, [pc, #208]	; (80071cc <report_realtime_status+0x2d4>)
 80070fc:	f7fd fc80 	bl	8004a00 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8007100:	78a3      	ldrb	r3, [r4, #2]
 8007102:	071a      	lsls	r2, r3, #28
 8007104:	f100 80d3 	bmi.w	80072ae <report_realtime_status+0x3b6>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8007108:	075f      	lsls	r7, r3, #29
 800710a:	f140 80d4 	bpl.w	80072b6 <report_realtime_status+0x3be>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 800710e:	069e      	lsls	r6, r3, #26
 8007110:	d515      	bpl.n	800713e <report_realtime_status+0x246>
      else { serial_write('1'); } // Actively holding
 8007112:	2031      	movs	r0, #49	; 0x31
 8007114:	f000 f8f6 	bl	8007304 <serial_write>
 8007118:	e755      	b.n	8006fc6 <report_realtime_status+0xce>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 800711a:	482d      	ldr	r0, [pc, #180]	; (80071d0 <report_realtime_status+0x2d8>)
 800711c:	f7fd fc70 	bl	8004a00 <printString>
 8007120:	e751      	b.n	8006fc6 <report_realtime_status+0xce>
  switch (sys.state) {
 8007122:	2b10      	cmp	r3, #16
 8007124:	f47f af4f 	bne.w	8006fc6 <report_realtime_status+0xce>
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8007128:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800712c:	2b00      	cmp	r3, #0
 800712e:	f2c0 8092 	blt.w	8007256 <report_realtime_status+0x35e>
      printPgmString(PSTR("Hold:"));
 8007132:	4828      	ldr	r0, [pc, #160]	; (80071d4 <report_realtime_status+0x2dc>)
 8007134:	f7fd fc64 	bl	8004a00 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 8007138:	78a3      	ldrb	r3, [r4, #2]
 800713a:	07d9      	lsls	r1, r3, #31
 800713c:	d5e9      	bpl.n	8007112 <report_realtime_status+0x21a>
 800713e:	2030      	movs	r0, #48	; 0x30
 8007140:	f000 f8e0 	bl	8007304 <serial_write>
 8007144:	e73f      	b.n	8006fc6 <report_realtime_status+0xce>
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8007146:	7822      	ldrb	r2, [r4, #0]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8007148:	7b23      	ldrb	r3, [r4, #12]
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 800714a:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 800714e:	bf14      	ite	ne
 8007150:	221d      	movne	r2, #29
 8007152:	2209      	moveq	r2, #9
 8007154:	7362      	strb	r2, [r4, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8007156:	b90b      	cbnz	r3, 800715c <report_realtime_status+0x264>
 8007158:	2301      	movs	r3, #1
 800715a:	7323      	strb	r3, [r4, #12]
    printPgmString(PSTR("|WCO:"));
 800715c:	481e      	ldr	r0, [pc, #120]	; (80071d8 <report_realtime_status+0x2e0>)
 800715e:	f7fd fc4f 	bl	8004a00 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8007162:	9808      	ldr	r0, [sp, #32]
 8007164:	f7fd fd0c 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007168:	202c      	movs	r0, #44	; 0x2c
 800716a:	f000 f8cb 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800716e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007170:	f7fd fd06 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007174:	202c      	movs	r0, #44	; 0x2c
 8007176:	f000 f8c5 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800717a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800717c:	f7fd fd00 	bl	8004b80 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007180:	202c      	movs	r0, #44	; 0x2c
 8007182:	f000 f8bf 	bl	8007304 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8007186:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007188:	f7fd fcfa 	bl	8004b80 <printFloat_CoordValue>
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 800718c:	7b23      	ldrb	r3, [r4, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f43f af7d 	beq.w	800708e <report_realtime_status+0x196>
 8007194:	3b01      	subs	r3, #1
 8007196:	7323      	strb	r3, [r4, #12]
 8007198:	e7a7      	b.n	80070ea <report_realtime_status+0x1f2>
 800719a:	bf00      	nop
 800719c:	200010d8 	.word	0x200010d8
 80071a0:	200010b0 	.word	0x200010b0
 80071a4:	2000126c 	.word	0x2000126c
 80071a8:	0800c03c 	.word	0x0800c03c
 80071ac:	20001014 	.word	0x20001014
 80071b0:	0800c078 	.word	0x0800c078
 80071b4:	0800c01c 	.word	0x0800c01c
 80071b8:	0800c044 	.word	0x0800c044
 80071bc:	0800c054 	.word	0x0800c054
 80071c0:	0800c06c 	.word	0x0800c06c
 80071c4:	0800c074 	.word	0x0800c074
 80071c8:	0800c094 	.word	0x0800c094
 80071cc:	0800c034 	.word	0x0800c034
 80071d0:	0800c02c 	.word	0x0800c02c
 80071d4:	0800c010 	.word	0x0800c010
 80071d8:	0800c064 	.word	0x0800c064
    printPgmString(PSTR("|Pn:"));
 80071dc:	4838      	ldr	r0, [pc, #224]	; (80072c0 <report_realtime_status+0x3c8>)
 80071de:	f7fd fc0f 	bl	8004a00 <printString>
    if (prb_pin_state) { serial_write('P'); }
 80071e2:	b9b7      	cbnz	r7, 8007212 <report_realtime_status+0x31a>
    if (lim_pin_state) {
 80071e4:	b13d      	cbz	r5, 80071f6 <report_realtime_status+0x2fe>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 80071e6:	07e9      	lsls	r1, r5, #31
 80071e8:	d45d      	bmi.n	80072a6 <report_realtime_status+0x3ae>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 80071ea:	07aa      	lsls	r2, r5, #30
 80071ec:	d457      	bmi.n	800729e <report_realtime_status+0x3a6>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 80071ee:	076b      	lsls	r3, r5, #29
 80071f0:	d449      	bmi.n	8007286 <report_realtime_status+0x38e>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 80071f2:	072f      	lsls	r7, r5, #28
 80071f4:	d443      	bmi.n	800727e <report_realtime_status+0x386>
    if (ctrl_pin_state) {
 80071f6:	2e00      	cmp	r6, #0
 80071f8:	f43f af40 	beq.w	800707c <report_realtime_status+0x184>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 80071fc:	07f5      	lsls	r5, r6, #31
 80071fe:	d44a      	bmi.n	8007296 <report_realtime_status+0x39e>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8007200:	07b0      	lsls	r0, r6, #30
 8007202:	d444      	bmi.n	800728e <report_realtime_status+0x396>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8007204:	0771      	lsls	r1, r6, #29
 8007206:	f57f af39 	bpl.w	800707c <report_realtime_status+0x184>
 800720a:	2053      	movs	r0, #83	; 0x53
 800720c:	f000 f87a 	bl	8007304 <serial_write>
 8007210:	e734      	b.n	800707c <report_realtime_status+0x184>
    if (prb_pin_state) { serial_write('P'); }
 8007212:	2050      	movs	r0, #80	; 0x50
 8007214:	f000 f876 	bl	8007304 <serial_write>
 8007218:	e7e4      	b.n	80071e4 <report_realtime_status+0x2ec>
    printPgmString(PSTR("|Bf:"));
 800721a:	482a      	ldr	r0, [pc, #168]	; (80072c4 <report_realtime_status+0x3cc>)
 800721c:	f7fd fbf0 	bl	8004a00 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 8007220:	f7fd fbcc 	bl	80049bc <plan_get_block_buffer_available>
 8007224:	f7fd fbf8 	bl	8004a18 <print_uint8_base10>
    serial_write(',');
 8007228:	202c      	movs	r0, #44	; 0x2c
 800722a:	f000 f86b 	bl	8007304 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 800722e:	f000 f855 	bl	80072dc <serial_get_rx_buffer_available>
 8007232:	f7fd fbf1 	bl	8004a18 <print_uint8_base10>
 8007236:	e703      	b.n	8007040 <report_realtime_status+0x148>
        printPgmString(PSTR("|A:"));
 8007238:	4823      	ldr	r0, [pc, #140]	; (80072c8 <report_realtime_status+0x3d0>)
 800723a:	f7fd fbe1 	bl	8004a00 <printString>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 800723e:	2d01      	cmp	r5, #1
 8007240:	d019      	beq.n	8007276 <report_realtime_status+0x37e>
              else { serial_write('C'); } // CCW
 8007242:	2043      	movs	r0, #67	; 0x43
 8007244:	f000 f85e 	bl	8007304 <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8007248:	07e2      	lsls	r2, r4, #31
 800724a:	f57f af49 	bpl.w	80070e0 <report_realtime_status+0x1e8>
 800724e:	2046      	movs	r0, #70	; 0x46
 8007250:	f000 f858 	bl	8007304 <serial_write>
 8007254:	e744      	b.n	80070e0 <report_realtime_status+0x1e8>
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 8007256:	481d      	ldr	r0, [pc, #116]	; (80072cc <report_realtime_status+0x3d4>)
 8007258:	f7fd fbd2 	bl	8004a00 <printString>
 800725c:	e6b3      	b.n	8006fc6 <report_realtime_status+0xce>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 800725e:	481c      	ldr	r0, [pc, #112]	; (80072d0 <report_realtime_status+0x3d8>)
 8007260:	f7fd fbce 	bl	8004a00 <printString>
 8007264:	e6af      	b.n	8006fc6 <report_realtime_status+0xce>
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 8007266:	481b      	ldr	r0, [pc, #108]	; (80072d4 <report_realtime_status+0x3dc>)
 8007268:	f7fd fbca 	bl	8004a00 <printString>
 800726c:	e6ab      	b.n	8006fc6 <report_realtime_status+0xce>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 800726e:	481a      	ldr	r0, [pc, #104]	; (80072d8 <report_realtime_status+0x3e0>)
 8007270:	f7fd fbc6 	bl	8004a00 <printString>
 8007274:	e6a7      	b.n	8006fc6 <report_realtime_status+0xce>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8007276:	2053      	movs	r0, #83	; 0x53
 8007278:	f000 f844 	bl	8007304 <serial_write>
 800727c:	e72d      	b.n	80070da <report_realtime_status+0x1e2>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 800727e:	2041      	movs	r0, #65	; 0x41
 8007280:	f000 f840 	bl	8007304 <serial_write>
 8007284:	e7b7      	b.n	80071f6 <report_realtime_status+0x2fe>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 8007286:	205a      	movs	r0, #90	; 0x5a
 8007288:	f000 f83c 	bl	8007304 <serial_write>
 800728c:	e7b1      	b.n	80071f2 <report_realtime_status+0x2fa>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 800728e:	2048      	movs	r0, #72	; 0x48
 8007290:	f000 f838 	bl	8007304 <serial_write>
 8007294:	e7b6      	b.n	8007204 <report_realtime_status+0x30c>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8007296:	2052      	movs	r0, #82	; 0x52
 8007298:	f000 f834 	bl	8007304 <serial_write>
 800729c:	e7b0      	b.n	8007200 <report_realtime_status+0x308>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 800729e:	2059      	movs	r0, #89	; 0x59
 80072a0:	f000 f830 	bl	8007304 <serial_write>
 80072a4:	e7a3      	b.n	80071ee <report_realtime_status+0x2f6>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 80072a6:	2058      	movs	r0, #88	; 0x58
 80072a8:	f000 f82c 	bl	8007304 <serial_write>
 80072ac:	e79d      	b.n	80071ea <report_realtime_status+0x2f2>
      serial_write('3'); // Restoring
 80072ae:	2033      	movs	r0, #51	; 0x33
 80072b0:	f000 f828 	bl	8007304 <serial_write>
 80072b4:	e687      	b.n	8006fc6 <report_realtime_status+0xce>
        serial_write('2'); // Retracting
 80072b6:	2032      	movs	r0, #50	; 0x32
 80072b8:	f000 f824 	bl	8007304 <serial_write>
 80072bc:	e683      	b.n	8006fc6 <report_realtime_status+0xce>
 80072be:	bf00      	nop
 80072c0:	0800c05c 	.word	0x0800c05c
 80072c4:	0800c04c 	.word	0x0800c04c
 80072c8:	0800c074 	.word	0x0800c074
 80072cc:	0800c018 	.word	0x0800c018
 80072d0:	0800c004 	.word	0x0800c004
 80072d4:	0800c024 	.word	0x0800c024
 80072d8:	0800c00c 	.word	0x0800c00c

080072dc <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 80072de:	4a07      	ldr	r2, [pc, #28]	; (80072fc <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 80072e0:	781b      	ldrb	r3, [r3, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 80072e2:	7812      	ldrb	r2, [r2, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 80072e4:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 80072e6:	4293      	cmp	r3, r2
 80072e8:	bf94      	ite	ls
 80072ea:	1e98      	subls	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 80072ec:	f103 30ff 	addhi.w	r0, r3, #4294967295
 80072f0:	1a80      	subs	r0, r0, r2
 80072f2:	b2c0      	uxtb	r0, r0
}
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	20000a59 	.word	0x20000a59
 80072fc:	20000a58 	.word	0x20000a58

08007300 <serial_init>:
  return (TX_RING_BUFFER - (ttail-serial_tx_buffer_head));
}


void serial_init()
{
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop

08007304 <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 8007304:	b470      	push	{r4, r5, r6}
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 8007306:	4e0f      	ldr	r6, [pc, #60]	; (8007344 <serial_write+0x40>)
 8007308:	490f      	ldr	r1, [pc, #60]	; (8007348 <serial_write+0x44>)
 800730a:	7835      	ldrb	r5, [r6, #0]
  if (next_head == TX_RING_BUFFER) { next_head = 0; }

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 800730c:	4c0f      	ldr	r4, [pc, #60]	; (800734c <serial_write+0x48>)
  uint8_t next_head = serial_tx_buffer_head + 1;
 800730e:	1c6a      	adds	r2, r5, #1
 8007310:	b2d2      	uxtb	r2, r2
  if (next_head == TX_RING_BUFFER) { next_head = 0; }
 8007312:	2a80      	cmp	r2, #128	; 0x80
 8007314:	bf08      	it	eq
 8007316:	2200      	moveq	r2, #0
 8007318:	e002      	b.n	8007320 <serial_write+0x1c>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 800731a:	7823      	ldrb	r3, [r4, #0]
 800731c:	06db      	lsls	r3, r3, #27
 800731e:	d40e      	bmi.n	800733e <serial_write+0x3a>
  while (next_head == serial_tx_buffer_tail) {
 8007320:	780b      	ldrb	r3, [r1, #0]
 8007322:	4293      	cmp	r3, r2
 8007324:	d0f9      	beq.n	800731a <serial_write+0x16>
     Sleep(1);
#endif
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 8007326:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <serial_write+0x4c>)
 8007328:	490a      	ldr	r1, [pc, #40]	; (8007354 <serial_write+0x50>)
 800732a:	5558      	strb	r0, [r3, r5]
#ifdef USB_CHANGED_DEBUG
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 800732c:	4807      	ldr	r0, [pc, #28]	; (800734c <serial_write+0x48>)
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 800732e:	e002      	b.n	8007336 <serial_write+0x32>
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 8007330:	7803      	ldrb	r3, [r0, #0]
 8007332:	06db      	lsls	r3, r3, #27
 8007334:	d403      	bmi.n	800733e <serial_write+0x3a>
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 8007336:	780b      	ldrb	r3, [r1, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f9      	bne.n	8007330 <serial_write+0x2c>
  }
#endif
  serial_tx_buffer_head = next_head;
 800733c:	7032      	strb	r2, [r6, #0]

#ifdef AVRTARGET
  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  UCSR0B |=  (1 << UDRIE0);
#endif
}
 800733e:	bc70      	pop	{r4, r5, r6}
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000a5a 	.word	0x20000a5a
 8007348:	20000a5b 	.word	0x20000a5b
 800734c:	200010c5 	.word	0x200010c5
 8007350:	200010ec 	.word	0x200010ec
 8007354:	20000c0c 	.word	0x20000c0c

08007358 <serial_read>:
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007358:	4908      	ldr	r1, [pc, #32]	; (800737c <serial_read+0x24>)
  if (serial_rx_buffer_head == tail) {
 800735a:	4a09      	ldr	r2, [pc, #36]	; (8007380 <serial_read+0x28>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 800735c:	780b      	ldrb	r3, [r1, #0]
  if (serial_rx_buffer_head == tail) {
 800735e:	7812      	ldrb	r2, [r2, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007360:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head == tail) {
 8007362:	429a      	cmp	r2, r3
 8007364:	d008      	beq.n	8007378 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];

    tail++;
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	b2d2      	uxtb	r2, r2
    if (tail == RX_RING_BUFFER) { tail = 0; }
 800736a:	2afe      	cmp	r2, #254	; 0xfe
 800736c:	bf08      	it	eq
 800736e:	2200      	moveq	r2, #0
    uint8_t data = serial_rx_buffer[tail];
 8007370:	4804      	ldr	r0, [pc, #16]	; (8007384 <serial_read+0x2c>)
    serial_rx_buffer_tail = tail;
 8007372:	700a      	strb	r2, [r1, #0]
    uint8_t data = serial_rx_buffer[tail];
 8007374:	5cc0      	ldrb	r0, [r0, r3]

    return data;
 8007376:	4770      	bx	lr
    return SERIAL_NO_DATA;
 8007378:	20ff      	movs	r0, #255	; 0xff
  }
}
 800737a:	4770      	bx	lr
 800737c:	20000a59 	.word	0x20000a59
 8007380:	20000a58 	.word	0x20000a58
 8007384:	2000116c 	.word	0x2000116c

08007388 <OnUsbDataRx>:
	//lcd_write_char(*dataIn);
	uint8_t next_head;
    uint8_t data;

	// Write data to buffer unless it is full.
	while (length != 0)
 8007388:	2900      	cmp	r1, #0
 800738a:	d079      	beq.n	8007480 <OnUsbDataRx+0xf8>
{
 800738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007390:	1e4d      	subs	r5, r1, #1
 8007392:	b2ed      	uxtb	r5, r5
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
          #endif
        }
        // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
      } else { // Write character to buffer
        next_head = serial_rx_buffer_head + 1;
 8007394:	4e61      	ldr	r6, [pc, #388]	; (800751c <OnUsbDataRx+0x194>)
        if (next_head == RX_RING_BUFFER) { next_head = 0; }

        // Write data to buffer unless it is full.
        if (next_head != serial_rx_buffer_tail) {
 8007396:	4f62      	ldr	r7, [pc, #392]	; (8007520 <OnUsbDataRx+0x198>)
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8007398:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8007528 <OnUsbDataRx+0x1a0>
 800739c:	4405      	add	r5, r0
 800739e:	1e44      	subs	r4, r0, #1
 80073a0:	e008      	b.n	80073b4 <OnUsbDataRx+0x2c>
  switch (data) {
 80073a2:	2b3f      	cmp	r3, #63	; 0x3f
 80073a4:	d026      	beq.n	80073f4 <OnUsbDataRx+0x6c>
 80073a6:	2b7e      	cmp	r3, #126	; 0x7e
 80073a8:	d115      	bne.n	80073d6 <OnUsbDataRx+0x4e>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 80073aa:	2002      	movs	r0, #2
 80073ac:	f002 fa20 	bl	80097f0 <system_set_exec_state_flag>
	while (length != 0)
 80073b0:	42ac      	cmp	r4, r5
 80073b2:	d00a      	beq.n	80073ca <OnUsbDataRx+0x42>
        data = *dataIn ++;
 80073b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  switch (data) {
 80073b8:	2b21      	cmp	r3, #33	; 0x21
 80073ba:	d008      	beq.n	80073ce <OnUsbDataRx+0x46>
 80073bc:	d8f1      	bhi.n	80073a2 <OnUsbDataRx+0x1a>
 80073be:	2b18      	cmp	r3, #24
 80073c0:	d109      	bne.n	80073d6 <OnUsbDataRx+0x4e>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 80073c2:	f7fc fc91 	bl	8003ce8 <mc_reset>
	while (length != 0)
 80073c6:	42ac      	cmp	r4, r5
 80073c8:	d1f4      	bne.n	80073b4 <OnUsbDataRx+0x2c>
 80073ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 80073ce:	2008      	movs	r0, #8
 80073d0:	f002 fa0e 	bl	80097f0 <system_set_exec_state_flag>
 80073d4:	e7ec      	b.n	80073b0 <OnUsbDataRx+0x28>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 80073d6:	061a      	lsls	r2, r3, #24
 80073d8:	d410      	bmi.n	80073fc <OnUsbDataRx+0x74>
        next_head = serial_rx_buffer_head + 1;
 80073da:	7831      	ldrb	r1, [r6, #0]
        if (next_head != serial_rx_buffer_tail) {
 80073dc:	7838      	ldrb	r0, [r7, #0]
        next_head = serial_rx_buffer_head + 1;
 80073de:	1c4a      	adds	r2, r1, #1
 80073e0:	b2d2      	uxtb	r2, r2
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 80073e2:	2afe      	cmp	r2, #254	; 0xfe
 80073e4:	bf08      	it	eq
 80073e6:	2200      	moveq	r2, #0
        if (next_head != serial_rx_buffer_tail) {
 80073e8:	4282      	cmp	r2, r0
          serial_rx_buffer[serial_rx_buffer_head] = data;
 80073ea:	bf1c      	itt	ne
 80073ec:	f808 3001 	strbne.w	r3, [r8, r1]
          serial_rx_buffer_head = next_head;
 80073f0:	7032      	strbne	r2, [r6, #0]
 80073f2:	e7dd      	b.n	80073b0 <OnUsbDataRx+0x28>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 80073f4:	2001      	movs	r0, #1
 80073f6:	f002 f9fb 	bl	80097f0 <system_set_exec_state_flag>
 80073fa:	e7d9      	b.n	80073b0 <OnUsbDataRx+0x28>
        switch(data) {
 80073fc:	3b84      	subs	r3, #132	; 0x84
 80073fe:	2b1d      	cmp	r3, #29
 8007400:	d8d6      	bhi.n	80073b0 <OnUsbDataRx+0x28>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <OnUsbDataRx+0x80>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	08007515 	.word	0x08007515
 800740c:	08007503 	.word	0x08007503
 8007410:	080073b1 	.word	0x080073b1
 8007414:	080073b1 	.word	0x080073b1
 8007418:	080073b1 	.word	0x080073b1
 800741c:	080073b1 	.word	0x080073b1
 8007420:	080073b1 	.word	0x080073b1
 8007424:	080073b1 	.word	0x080073b1
 8007428:	080073b1 	.word	0x080073b1
 800742c:	080073b1 	.word	0x080073b1
 8007430:	080073b1 	.word	0x080073b1
 8007434:	080073b1 	.word	0x080073b1
 8007438:	080074fb 	.word	0x080074fb
 800743c:	080074f3 	.word	0x080074f3
 8007440:	080074eb 	.word	0x080074eb
 8007444:	080074e3 	.word	0x080074e3
 8007448:	080074db 	.word	0x080074db
 800744c:	080074d3 	.word	0x080074d3
 8007450:	080074cb 	.word	0x080074cb
 8007454:	080074c3 	.word	0x080074c3
 8007458:	080073b1 	.word	0x080073b1
 800745c:	080074bb 	.word	0x080074bb
 8007460:	080074b3 	.word	0x080074b3
 8007464:	080074ab 	.word	0x080074ab
 8007468:	080074a3 	.word	0x080074a3
 800746c:	0800749b 	.word	0x0800749b
 8007470:	08007493 	.word	0x08007493
 8007474:	080073b1 	.word	0x080073b1
 8007478:	0800748b 	.word	0x0800748b
 800747c:	08007483 	.word	0x08007483
 8007480:	4770      	bx	lr
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8007482:	2080      	movs	r0, #128	; 0x80
 8007484:	f002 f9e2 	bl	800984c <system_set_exec_accessory_override_flag>
 8007488:	e792      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 800748a:	2040      	movs	r0, #64	; 0x40
 800748c:	f002 f9de 	bl	800984c <system_set_exec_accessory_override_flag>
 8007490:	e78e      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 8007492:	2020      	movs	r0, #32
 8007494:	f002 f9da 	bl	800984c <system_set_exec_accessory_override_flag>
 8007498:	e78a      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 800749a:	2010      	movs	r0, #16
 800749c:	f002 f9d6 	bl	800984c <system_set_exec_accessory_override_flag>
 80074a0:	e786      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 80074a2:	2008      	movs	r0, #8
 80074a4:	f002 f9d2 	bl	800984c <system_set_exec_accessory_override_flag>
 80074a8:	e782      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 80074aa:	2004      	movs	r0, #4
 80074ac:	f002 f9ce 	bl	800984c <system_set_exec_accessory_override_flag>
 80074b0:	e77e      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 80074b2:	2002      	movs	r0, #2
 80074b4:	f002 f9ca 	bl	800984c <system_set_exec_accessory_override_flag>
 80074b8:	e77a      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 80074ba:	2001      	movs	r0, #1
 80074bc:	f002 f9c6 	bl	800984c <system_set_exec_accessory_override_flag>
 80074c0:	e776      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 80074c2:	2080      	movs	r0, #128	; 0x80
 80074c4:	f002 f9b8 	bl	8009838 <system_set_exec_motion_override_flag>
 80074c8:	e772      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 80074ca:	2040      	movs	r0, #64	; 0x40
 80074cc:	f002 f9b4 	bl	8009838 <system_set_exec_motion_override_flag>
 80074d0:	e76e      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 80074d2:	2020      	movs	r0, #32
 80074d4:	f002 f9b0 	bl	8009838 <system_set_exec_motion_override_flag>
 80074d8:	e76a      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 80074da:	2010      	movs	r0, #16
 80074dc:	f002 f9ac 	bl	8009838 <system_set_exec_motion_override_flag>
 80074e0:	e766      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 80074e2:	2008      	movs	r0, #8
 80074e4:	f002 f9a8 	bl	8009838 <system_set_exec_motion_override_flag>
 80074e8:	e762      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 80074ea:	2004      	movs	r0, #4
 80074ec:	f002 f9a4 	bl	8009838 <system_set_exec_motion_override_flag>
 80074f0:	e75e      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 80074f2:	2002      	movs	r0, #2
 80074f4:	f002 f9a0 	bl	8009838 <system_set_exec_motion_override_flag>
 80074f8:	e75a      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 80074fa:	2001      	movs	r0, #1
 80074fc:	f002 f99c 	bl	8009838 <system_set_exec_motion_override_flag>
 8007500:	e756      	b.n	80073b0 <OnUsbDataRx+0x28>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 8007502:	4b08      	ldr	r3, [pc, #32]	; (8007524 <OnUsbDataRx+0x19c>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	069b      	lsls	r3, r3, #26
 8007508:	f57f af52 	bpl.w	80073b0 <OnUsbDataRx+0x28>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL); 
 800750c:	2040      	movs	r0, #64	; 0x40
 800750e:	f002 f96f 	bl	80097f0 <system_set_exec_state_flag>
 8007512:	e74d      	b.n	80073b0 <OnUsbDataRx+0x28>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 8007514:	2020      	movs	r0, #32
 8007516:	f002 f96b 	bl	80097f0 <system_set_exec_state_flag>
 800751a:	e749      	b.n	80073b0 <OnUsbDataRx+0x28>
 800751c:	20000a58 	.word	0x20000a58
 8007520:	20000a59 	.word	0x20000a59
 8007524:	200010b0 	.word	0x200010b0
 8007528:	2000116c 	.word	0x2000116c

0800752c <serial_reset_read_buffer>:
#endif
}

void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 800752c:	4a02      	ldr	r2, [pc, #8]	; (8007538 <serial_reset_read_buffer+0xc>)
 800752e:	4b03      	ldr	r3, [pc, #12]	; (800753c <serial_reset_read_buffer+0x10>)
 8007530:	7812      	ldrb	r2, [r2, #0]
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20000a58 	.word	0x20000a58
 800753c:	20000a59 	.word	0x20000a59

08007540 <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8007546:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800754a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 800754e:	f7fe fc2f 	bl	8005db0 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8007552:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8007556:	4629      	mov	r1, r5
}
 8007558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 800755c:	2250      	movs	r2, #80	; 0x50
 800755e:	f7fa bb27 	b.w	8001bb0 <memcpy_to_eeprom_with_checksum>
 8007562:	bf00      	nop

08007564 <settings_store_build_info>:
// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8007564:	4601      	mov	r1, r0
 8007566:	2250      	movs	r2, #80	; 0x50
 8007568:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 800756c:	f7fa bb20 	b.w	8001bb0 <memcpy_to_eeprom_with_checksum>

08007570 <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4604      	mov	r4, r0
 8007574:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8007576:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    protocol_buffer_synchronize();
 800757a:	f7fe fc19 	bl	8005db0 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 800757e:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8007582:	4629      	mov	r1, r5
}
 8007584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007588:	2210      	movs	r2, #16
 800758a:	f7fa bb11 	b.w	8001bb0 <memcpy_to_eeprom_with_checksum>
 800758e:	bf00      	nop

08007590 <settings_restore>:
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 8007590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007592:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8007594:	07c0      	lsls	r0, r0, #31
void settings_restore(uint8_t restore_flag) {
 8007596:	b085      	sub	sp, #20
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8007598:	d439      	bmi.n	800760e <settings_restore+0x7e>
	#endif
// ---
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 800759a:	07a9      	lsls	r1, r5, #30
 800759c:	d424      	bmi.n	80075e8 <settings_restore+0x58>
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 800759e:	076a      	lsls	r2, r5, #29
 80075a0:	d40d      	bmi.n	80075be <settings_restore+0x2e>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 80075a2:	072b      	lsls	r3, r5, #28
 80075a4:	d509      	bpl.n	80075ba <settings_restore+0x2a>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 80075a6:	2100      	movs	r1, #0
 80075a8:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80075ac:	f7fa fafa 	bl	8001ba4 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 80075b0:	2100      	movs	r1, #0
 80075b2:	f240 30c1 	movw	r0, #961	; 0x3c1
 80075b6:	f7fa faf5 	bl	8001ba4 <eeprom_put_char>
  }
}
 80075ba:	b005      	add	sp, #20
 80075bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 80075be:	2100      	movs	r1, #0
 80075c0:	f44f 7040 	mov.w	r0, #768	; 0x300
 80075c4:	f7fa faee 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 80075c8:	2100      	movs	r1, #0
 80075ca:	f240 3001 	movw	r0, #769	; 0x301
 80075ce:	f7fa fae9 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 80075d2:	2100      	movs	r1, #0
 80075d4:	f240 3051 	movw	r0, #849	; 0x351
 80075d8:	f7fa fae4 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 80075dc:	2100      	movs	r1, #0
 80075de:	f240 3052 	movw	r0, #850	; 0x352
 80075e2:	f7fa fadf 	bl	8001ba4 <eeprom_put_char>
 80075e6:	e7dc      	b.n	80075a2 <settings_restore+0x12>
    memset(&coord_data, 0, sizeof(coord_data));
 80075e8:	2300      	movs	r3, #0
 80075ea:	f44f 7400 	mov.w	r4, #512	; 0x200
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	9302      	str	r3, [sp, #8]
 80075f4:	9303      	str	r3, [sp, #12]
    protocol_buffer_synchronize();
 80075f6:	f7fe fbdb 	bl	8005db0 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80075fa:	4620      	mov	r0, r4
 80075fc:	2210      	movs	r2, #16
 80075fe:	4669      	mov	r1, sp
 8007600:	3411      	adds	r4, #17
 8007602:	f7fa fad5 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007606:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 800760a:	d1f4      	bne.n	80075f6 <settings_restore+0x66>
 800760c:	e7c7      	b.n	800759e <settings_restore+0xe>
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 800760e:	2300      	movs	r3, #0
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007610:	4c21      	ldr	r4, [pc, #132]	; (8007698 <settings_restore+0x108>)
  eeprom_put_char(0, SETTINGS_VERSION);
 8007612:	4618      	mov	r0, r3
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007614:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007618:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 800761c:	4b1f      	ldr	r3, [pc, #124]	; (800769c <settings_restore+0x10c>)
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 800761e:	2606      	movs	r6, #6
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007620:	64e3      	str	r3, [r4, #76]	; 0x4c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007622:	2300      	movs	r3, #0
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007624:	f44f 17f8 	mov.w	r7, #2031616	; 0x1f0000
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007628:	6563      	str	r3, [r4, #84]	; 0x54
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 800762a:	22fa      	movs	r2, #250	; 0xfa
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 800762c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007630:	2144      	movs	r1, #68	; 0x44
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007632:	f04f 0e1f 	mov.w	lr, #31
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007636:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 800763a:	4e19      	ldr	r6, [pc, #100]	; (80076a0 <settings_restore+0x110>)
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 800763c:	f8c4 7042 	str.w	r7, [r4, #66]	; 0x42
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007640:	64a6      	str	r6, [r4, #72]	; 0x48
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007642:	4e18      	ldr	r6, [pc, #96]	; (80076a4 <settings_restore+0x114>)
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007644:	4f18      	ldr	r7, [pc, #96]	; (80076a8 <settings_restore+0x118>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007646:	6526      	str	r6, [r4, #80]	; 0x50
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007648:	4e18      	ldr	r6, [pc, #96]	; (80076ac <settings_restore+0x11c>)
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 800764a:	65e7      	str	r7, [r4, #92]	; 0x5c
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 800764c:	6626      	str	r6, [r4, #96]	; 0x60
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 800764e:	4f18      	ldr	r7, [pc, #96]	; (80076b0 <settings_restore+0x120>)
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007650:	4e18      	ldr	r6, [pc, #96]	; (80076b4 <settings_restore+0x124>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007652:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007656:	66a3      	str	r3, [r4, #104]	; 0x68
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007658:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <settings_restore+0x128>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 800765a:	4b18      	ldr	r3, [pc, #96]	; (80076bc <settings_restore+0x12c>)
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 800765c:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8007660:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007662:	6222      	str	r2, [r4, #32]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007664:	6262      	str	r2, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007666:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007668:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 800766a:	f8a4 e05a 	strh.w	lr, [r4, #90]	; 0x5a
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 800766e:	6027      	str	r7, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007670:	6067      	str	r7, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007672:	60a7      	str	r7, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007674:	60e7      	str	r7, [r4, #12]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007676:	6126      	str	r6, [r4, #16]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007678:	6166      	str	r6, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 800767a:	61a6      	str	r6, [r4, #24]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 800767c:	61e6      	str	r6, [r4, #28]
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 800767e:	6323      	str	r3, [r4, #48]	; 0x30
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007680:	6363      	str	r3, [r4, #52]	; 0x34
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007682:	63a3      	str	r3, [r4, #56]	; 0x38
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007684:	63e3      	str	r3, [r4, #60]	; 0x3c
  eeprom_put_char(0, SETTINGS_VERSION);
 8007686:	f7fa fa8d 	bl	8001ba4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 800768a:	4621      	mov	r1, r4
 800768c:	226c      	movs	r2, #108	; 0x6c
 800768e:	2001      	movs	r0, #1
 8007690:	f7fa fa8e 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
 8007694:	e781      	b.n	800759a <settings_restore+0xa>
 8007696:	bf00      	nop
 8007698:	2000126c 	.word	0x2000126c
 800769c:	3b03126f 	.word	0x3b03126f
 80076a0:	3c23d70a 	.word	0x3c23d70a
 80076a4:	447a0000 	.word	0x447a0000
 80076a8:	41200000 	.word	0x41200000
 80076ac:	42c80000 	.word	0x42c80000
 80076b0:	45a00000 	.word	0x45a00000
 80076b4:	44fa0000 	.word	0x44fa0000
 80076b8:	4bdbba00 	.word	0x4bdbba00
 80076bc:	c38c0000 	.word	0xc38c0000

080076c0 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	460e      	mov	r6, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 80076c4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80076c8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80076cc:	f500 7440 	add.w	r4, r0, #768	; 0x300
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 80076d0:	4621      	mov	r1, r4
 80076d2:	4630      	mov	r0, r6
 80076d4:	2250      	movs	r2, #80	; 0x50
 80076d6:	f7fa fabd 	bl	8001c54 <memcpy_from_eeprom_with_checksum>
 80076da:	b108      	cbz	r0, 80076e0 <settings_read_startup_line+0x20>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return(false);
  }
  return(true);
 80076dc:	2001      	movs	r0, #1
}
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	4605      	mov	r5, r0
    line[0] = 0; // Empty line
 80076e2:	7030      	strb	r0, [r6, #0]
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 80076e4:	f7fe fb64 	bl	8005db0 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 80076e8:	4620      	mov	r0, r4
 80076ea:	4631      	mov	r1, r6
 80076ec:	2250      	movs	r2, #80	; 0x50
 80076ee:	f7fa fa5f 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    return(false);
 80076f2:	4628      	mov	r0, r5
 80076f4:	bd70      	pop	{r4, r5, r6, pc}
 80076f6:	bf00      	nop

080076f8 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 80076f8:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 80076fa:	2250      	movs	r2, #80	; 0x50
 80076fc:	f44f 7170 	mov.w	r1, #960	; 0x3c0
{
 8007700:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8007702:	f7fa faa7 	bl	8001c54 <memcpy_from_eeprom_with_checksum>
 8007706:	b108      	cbz	r0, 800770c <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return(false);
  }
  return(true);
 8007708:	2001      	movs	r0, #1
}
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	4604      	mov	r4, r0
    line[0] = 0; // Empty line
 800770e:	7028      	strb	r0, [r5, #0]
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8007710:	4629      	mov	r1, r5
 8007712:	2250      	movs	r2, #80	; 0x50
 8007714:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007718:	f7fa fa4a 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    return(false);
 800771c:	4620      	mov	r0, r4
 800771e:	bd38      	pop	{r3, r4, r5, pc}

08007720 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	460e      	mov	r6, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8007724:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8007728:	f500 7400 	add.w	r4, r0, #512	; 0x200
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 800772c:	4621      	mov	r1, r4
 800772e:	4630      	mov	r0, r6
 8007730:	2210      	movs	r2, #16
 8007732:	f7fa fa8f 	bl	8001c54 <memcpy_from_eeprom_with_checksum>
 8007736:	b108      	cbz	r0, 800773c <settings_read_coord_data+0x1c>
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
    return(false);
  }
  return(true);
 8007738:	2001      	movs	r0, #1
}
 800773a:	bd70      	pop	{r4, r5, r6, pc}
		coord_data[X_AXIS] = 0.0f;
 800773c:	2300      	movs	r3, #0
 800773e:	4605      	mov	r5, r0
 8007740:	6033      	str	r3, [r6, #0]
		coord_data[Y_AXIS] = 0.0f;
 8007742:	6073      	str	r3, [r6, #4]
		coord_data[Z_AXIS] = 0.0f;
 8007744:	60b3      	str	r3, [r6, #8]
		coord_data[A_AXIS] = 0.0f;
 8007746:	60f3      	str	r3, [r6, #12]
    protocol_buffer_synchronize();
 8007748:	f7fe fb32 	bl	8005db0 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 800774c:	4620      	mov	r0, r4
 800774e:	4631      	mov	r1, r6
 8007750:	2210      	movs	r2, #16
 8007752:	f7fa fa2d 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    return(false);
 8007756:	4628      	mov	r0, r5
 8007758:	bd70      	pop	{r4, r5, r6, pc}
 800775a:	bf00      	nop

0800775c <settings_store_global_setting>:
  return(true);
}


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	460d      	mov	r5, r1
 8007760:	4604      	mov	r4, r0
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8007762:	2100      	movs	r1, #0
 8007764:	4628      	mov	r0, r5
 8007766:	f7f9 fc41 	bl	8000fec <__aeabi_fcmplt>
 800776a:	2800      	cmp	r0, #0
 800776c:	d16c      	bne.n	8007848 <settings_store_global_setting+0xec>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 800776e:	2c63      	cmp	r4, #99	; 0x63
 8007770:	d91e      	bls.n	80077b0 <settings_store_global_setting+0x54>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8007772:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
 8007776:	b2db      	uxtb	r3, r3
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
      if (parameter < N_AXIS) {
 8007778:	2b03      	cmp	r3, #3
 800777a:	f240 813b 	bls.w	80079f4 <settings_store_global_setting+0x298>
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 800777e:	2b09      	cmp	r3, #9
 8007780:	d914      	bls.n	80077ac <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007782:	f1a4 036e 	sub.w	r3, r4, #110	; 0x6e
 8007786:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8007788:	2b03      	cmp	r3, #3
 800778a:	f240 8119 	bls.w	80079c0 <settings_store_global_setting+0x264>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 800778e:	2b09      	cmp	r3, #9
 8007790:	d90c      	bls.n	80077ac <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007792:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 8007796:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8007798:	2b03      	cmp	r3, #3
 800779a:	f240 811a 	bls.w	80079d2 <settings_store_global_setting+0x276>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 800779e:	2b09      	cmp	r3, #9
 80077a0:	d904      	bls.n	80077ac <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 80077a2:	347e      	adds	r4, #126	; 0x7e
 80077a4:	b2e4      	uxtb	r4, r4
      if (parameter < N_AXIS) {
 80077a6:	2c03      	cmp	r4, #3
 80077a8:	f240 811d 	bls.w	80079e6 <settings_store_global_setting+0x28a>
        #else
				return(STATUS_SETTING_DISABLED_LASER);
        #endif
        break;
      default:
        return(STATUS_INVALID_STATEMENT);
 80077ac:	2003      	movs	r0, #3
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t int_value = truncf(value);
 80077b0:	4628      	mov	r0, r5
 80077b2:	f7f9 fc7f 	bl	80010b4 <__aeabi_f2uiz>
 80077b6:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 80077b8:	2c20      	cmp	r4, #32
 80077ba:	d8f7      	bhi.n	80077ac <settings_store_global_setting+0x50>
 80077bc:	a301      	add	r3, pc, #4	; (adr r3, 80077c4 <settings_store_global_setting+0x68>)
 80077be:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	08007877 	.word	0x08007877
 80077c8:	08007881 	.word	0x08007881
 80077cc:	080078a9 	.word	0x080078a9
 80077d0:	08007889 	.word	0x08007889
 80077d4:	08007895 	.word	0x08007895
 80077d8:	080078b5 	.word	0x080078b5
 80077dc:	080078c9 	.word	0x080078c9
 80077e0:	080077ad 	.word	0x080077ad
 80077e4:	080077ad 	.word	0x080077ad
 80077e8:	080077ad 	.word	0x080077ad
 80077ec:	08007933 	.word	0x08007933
 80077f0:	0800793b 	.word	0x0800793b
 80077f4:	080078f7 	.word	0x080078f7
 80077f8:	08007967 	.word	0x08007967
 80077fc:	080077ad 	.word	0x080077ad
 8007800:	080077ad 	.word	0x080077ad
 8007804:	080077ad 	.word	0x080077ad
 8007808:	080077ad 	.word	0x080077ad
 800780c:	080077ad 	.word	0x080077ad
 8007810:	080077ad 	.word	0x080077ad
 8007814:	08007941 	.word	0x08007941
 8007818:	08007951 	.word	0x08007951
 800781c:	080078e3 	.word	0x080078e3
 8007820:	0800792b 	.word	0x0800792b
 8007824:	0800791f 	.word	0x0800791f
 8007828:	08007925 	.word	0x08007925
 800782c:	080078fd 	.word	0x080078fd
 8007830:	08007905 	.word	0x08007905
 8007834:	080077ad 	.word	0x080077ad
 8007838:	080077ad 	.word	0x080077ad
 800783c:	0800790b 	.word	0x0800790b
 8007840:	08007915 	.word	0x08007915
 8007844:	0800784d 	.word	0x0800784d
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8007848:	2004      	movs	r0, #4
 800784a:	bd38      	pop	{r3, r4, r5, pc}
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 800784c:	4a6e      	ldr	r2, [pc, #440]	; (8007a08 <settings_store_global_setting+0x2ac>)
 800784e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8007852:	2800      	cmp	r0, #0
 8007854:	f000 8098 	beq.w	8007988 <settings_store_global_setting+0x22c>
 8007858:	f043 0302 	orr.w	r3, r3, #2
 800785c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8007860:	210a      	movs	r1, #10
 8007862:	2000      	movs	r0, #0
 8007864:	f7fa f99e 	bl	8001ba4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007868:	226c      	movs	r2, #108	; 0x6c
 800786a:	4967      	ldr	r1, [pc, #412]	; (8007a08 <settings_store_global_setting+0x2ac>)
 800786c:	2001      	movs	r0, #1
 800786e:	f7fa f99f 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    }
  }
  write_global_settings();
  return(STATUS_OK);
 8007872:	2000      	movs	r0, #0
 8007874:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8007876:	2802      	cmp	r0, #2
 8007878:	f200 80a7 	bhi.w	80079ca <settings_store_global_setting+0x26e>
 800787c:	2006      	movs	r0, #6
 800787e:	bd38      	pop	{r3, r4, r5, pc}
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8007880:	4b61      	ldr	r3, [pc, #388]	; (8007a08 <settings_store_global_setting+0x2ac>)
 8007882:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
 8007886:	e7eb      	b.n	8007860 <settings_store_global_setting+0x104>
        settings.dir_invert_mask = int_value;
 8007888:	4b5f      	ldr	r3, [pc, #380]	; (8007a08 <settings_store_global_setting+0x2ac>)
 800788a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 800788e:	f000 fd93 	bl	80083b8 <st_generate_step_dir_invert_masks>
        break;
 8007892:	e7e5      	b.n	8007860 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 8007894:	4a5c      	ldr	r2, [pc, #368]	; (8007a08 <settings_store_global_setting+0x2ac>)
 8007896:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 800789a:	2800      	cmp	r0, #0
 800789c:	d079      	beq.n	8007992 <settings_store_global_setting+0x236>
 800789e:	f043 0304 	orr.w	r3, r3, #4
 80078a2:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 80078a6:	e7db      	b.n	8007860 <settings_store_global_setting+0x104>
        settings.step_invert_mask = int_value;
 80078a8:	4b57      	ldr	r3, [pc, #348]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80078aa:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 80078ae:	f000 fd83 	bl	80083b8 <st_generate_step_dir_invert_masks>
        break;
 80078b2:	e7d5      	b.n	8007860 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 80078b4:	4a54      	ldr	r2, [pc, #336]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80078b6:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d06e      	beq.n	800799c <settings_store_global_setting+0x240>
 80078be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c2:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 80078c6:	e7cb      	b.n	8007860 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 80078c8:	4b4f      	ldr	r3, [pc, #316]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80078ca:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d054      	beq.n	800797c <settings_store_global_setting+0x220>
 80078d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        probe_configure_invert_mask(false);
 80078d6:	2000      	movs	r0, #0
 80078d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80078dc:	f7fd fb02 	bl	8004ee4 <probe_configure_invert_mask>
        break;
 80078e0:	e7be      	b.n	8007860 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 80078e2:	4a49      	ldr	r2, [pc, #292]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80078e4:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d061      	beq.n	80079b0 <settings_store_global_setting+0x254>
 80078ec:	f043 0310 	orr.w	r3, r3, #16
 80078f0:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 80078f4:	e7b4      	b.n	8007860 <settings_store_global_setting+0x104>
      case 12: settings.arc_tolerance = value; break;
 80078f6:	4b44      	ldr	r3, [pc, #272]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80078f8:	64dd      	str	r5, [r3, #76]	; 0x4c
 80078fa:	e7b1      	b.n	8007860 <settings_store_global_setting+0x104>
      case 26: settings.homing_debounce_delay = int_value; break;
 80078fc:	4b42      	ldr	r3, [pc, #264]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80078fe:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 8007902:	e7ad      	b.n	8007860 <settings_store_global_setting+0x104>
      case 27: settings.homing_pulloff = value; break;
 8007904:	4b40      	ldr	r3, [pc, #256]	; (8007a08 <settings_store_global_setting+0x2ac>)
 8007906:	669d      	str	r5, [r3, #104]	; 0x68
 8007908:	e7aa      	b.n	8007860 <settings_store_global_setting+0x104>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 800790a:	4b3f      	ldr	r3, [pc, #252]	; (8007a08 <settings_store_global_setting+0x2ac>)
 800790c:	651d      	str	r5, [r3, #80]	; 0x50
 800790e:	f000 f91b 	bl	8007b48 <spindle_init>
 8007912:	e7a5      	b.n	8007860 <settings_store_global_setting+0x104>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8007914:	4b3c      	ldr	r3, [pc, #240]	; (8007a08 <settings_store_global_setting+0x2ac>)
 8007916:	655d      	str	r5, [r3, #84]	; 0x54
 8007918:	f000 f916 	bl	8007b48 <spindle_init>
 800791c:	e7a0      	b.n	8007860 <settings_store_global_setting+0x104>
      case 24: settings.homing_feed_rate = value; break;
 800791e:	4b3a      	ldr	r3, [pc, #232]	; (8007a08 <settings_store_global_setting+0x2ac>)
 8007920:	65dd      	str	r5, [r3, #92]	; 0x5c
 8007922:	e79d      	b.n	8007860 <settings_store_global_setting+0x104>
      case 25: settings.homing_seek_rate = value; break;
 8007924:	4b38      	ldr	r3, [pc, #224]	; (8007a08 <settings_store_global_setting+0x2ac>)
 8007926:	661d      	str	r5, [r3, #96]	; 0x60
 8007928:	e79a      	b.n	8007860 <settings_store_global_setting+0x104>
      case 23: settings.homing_dir_mask = int_value; break;
 800792a:	4b37      	ldr	r3, [pc, #220]	; (8007a08 <settings_store_global_setting+0x2ac>)
 800792c:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
 8007930:	e796      	b.n	8007860 <settings_store_global_setting+0x104>
      case 10: settings.status_report_mask = int_value; break;
 8007932:	4b35      	ldr	r3, [pc, #212]	; (8007a08 <settings_store_global_setting+0x2ac>)
 8007934:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
 8007938:	e792      	b.n	8007860 <settings_store_global_setting+0x104>
      case 11: settings.junction_deviation = value; break;
 800793a:	4b33      	ldr	r3, [pc, #204]	; (8007a08 <settings_store_global_setting+0x2ac>)
 800793c:	649d      	str	r5, [r3, #72]	; 0x48
 800793e:	e78f      	b.n	8007860 <settings_store_global_setting+0x104>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007940:	4a31      	ldr	r2, [pc, #196]	; (8007a08 <settings_store_global_setting+0x2ac>)
 8007942:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) {
 8007946:	b370      	cbz	r0, 80079a6 <settings_store_global_setting+0x24a>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007948:	06d9      	lsls	r1, r3, #27
 800794a:	d457      	bmi.n	80079fc <settings_store_global_setting+0x2a0>
 800794c:	200a      	movs	r0, #10
 800794e:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8007950:	4b2d      	ldr	r3, [pc, #180]	; (8007a08 <settings_store_global_setting+0x2ac>)
 8007952:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007956:	b380      	cbz	r0, 80079ba <settings_store_global_setting+0x25e>
 8007958:	f042 0208 	orr.w	r2, r2, #8
 800795c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8007960:	f7fb fb1c 	bl	8002f9c <limits_init>
        break;
 8007964:	e77c      	b.n	8007860 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 8007966:	4b28      	ldr	r3, [pc, #160]	; (8007a08 <settings_store_global_setting+0x2ac>)
 8007968:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800796c:	b148      	cbz	r0, 8007982 <settings_store_global_setting+0x226>
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 8007976:	f001 fe8f 	bl	8009698 <system_flag_wco_change>
        break;
 800797a:	e771      	b.n	8007860 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 800797c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007980:	e7a9      	b.n	80078d6 <settings_store_global_setting+0x17a>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8007982:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007986:	e7f4      	b.n	8007972 <settings_store_global_setting+0x216>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8007988:	f023 0302 	bic.w	r3, r3, #2
 800798c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007990:	e766      	b.n	8007860 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8007992:	f023 0304 	bic.w	r3, r3, #4
 8007996:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 800799a:	e761      	b.n	8007860 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 800799c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a0:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 80079a4:	e75c      	b.n	8007860 <settings_store_global_setting+0x104>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 80079a6:	f023 0320 	bic.w	r3, r3, #32
 80079aa:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 80079ae:	e757      	b.n	8007860 <settings_store_global_setting+0x104>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 80079b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80079b4:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 80079b8:	e752      	b.n	8007860 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 80079ba:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80079be:	e7cd      	b.n	800795c <settings_store_global_setting+0x200>
            settings.max_rate[parameter] = value;
 80079c0:	4a11      	ldr	r2, [pc, #68]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80079c2:	3304      	adds	r3, #4
 80079c4:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 80079c8:	e74a      	b.n	8007860 <settings_store_global_setting+0x104>
        settings.pulse_microseconds = int_value; break;
 80079ca:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80079cc:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 80079d0:	e746      	b.n	8007860 <settings_store_global_setting+0x104>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 80079d2:	4628      	mov	r0, r5
 80079d4:	490d      	ldr	r1, [pc, #52]	; (8007a0c <settings_store_global_setting+0x2b0>)
 80079d6:	f103 0408 	add.w	r4, r3, #8
 80079da:	f7f9 f969 	bl	8000cb0 <__aeabi_fmul>
 80079de:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80079e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80079e4:	e73c      	b.n	8007860 <settings_store_global_setting+0x104>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 80079e6:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80079e8:	340c      	adds	r4, #12
 80079ea:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80079ee:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 80079f2:	e735      	b.n	8007860 <settings_store_global_setting+0x104>
            settings.steps_per_mm[parameter] = value;
 80079f4:	4a04      	ldr	r2, [pc, #16]	; (8007a08 <settings_store_global_setting+0x2ac>)
 80079f6:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 80079fa:	e731      	b.n	8007860 <settings_store_global_setting+0x104>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 80079fc:	f043 0320 	orr.w	r3, r3, #32
 8007a00:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a04:	e72c      	b.n	8007860 <settings_store_global_setting+0x104>
 8007a06:	bf00      	nop
 8007a08:	2000126c 	.word	0x2000126c
 8007a0c:	45610000 	.word	0x45610000

08007a10 <settings_init>:
}


// Initialize the config subsystem
void settings_init() {
 8007a10:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t version = eeprom_get_char(0);
 8007a12:	2000      	movs	r0, #0
void settings_init() {
 8007a14:	b085      	sub	sp, #20
  uint8_t version = eeprom_get_char(0);
 8007a16:	f7fa f8bf 	bl	8001b98 <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 8007a1a:	280a      	cmp	r0, #10
 8007a1c:	d077      	beq.n	8007b0e <settings_init+0xfe>
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007a1e:	f44f 16f8 	mov.w	r6, #2031616	; 0x1f0000
  if(!read_global_settings()) {
    report_status_message(STATUS_SETTING_READ_FAIL);
 8007a22:	2007      	movs	r0, #7
 8007a24:	f7fe fcba 	bl	800639c <report_status_message>
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007a28:	231f      	movs	r3, #31
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007a2a:	4c3d      	ldr	r4, [pc, #244]	; (8007b20 <settings_init+0x110>)
 8007a2c:	2706      	movs	r7, #6
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007a2e:	f8c4 6042 	str.w	r6, [r4, #66]	; 0x42
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007a32:	4e3c      	ldr	r6, [pc, #240]	; (8007b24 <settings_init+0x114>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007a34:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007a38:	64e6      	str	r6, [r4, #76]	; 0x4c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007a3a:	2600      	movs	r6, #0
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007a3c:	22fa      	movs	r2, #250	; 0xfa
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007a3e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007a42:	2500      	movs	r5, #0
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007a44:	2144      	movs	r1, #68	; 0x44
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007a46:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007a4a:	4f37      	ldr	r7, [pc, #220]	; (8007b28 <settings_init+0x118>)
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007a4c:	6566      	str	r6, [r4, #84]	; 0x54
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007a4e:	64a7      	str	r7, [r4, #72]	; 0x48
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007a50:	4f36      	ldr	r7, [pc, #216]	; (8007b2c <settings_init+0x11c>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007a52:	4e37      	ldr	r6, [pc, #220]	; (8007b30 <settings_init+0x120>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007a54:	6527      	str	r7, [r4, #80]	; 0x50
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007a56:	4f37      	ldr	r7, [pc, #220]	; (8007b34 <settings_init+0x124>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007a58:	6626      	str	r6, [r4, #96]	; 0x60
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007a5a:	65e7      	str	r7, [r4, #92]	; 0x5c
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007a5c:	4e36      	ldr	r6, [pc, #216]	; (8007b38 <settings_init+0x128>)
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007a5e:	4f37      	ldr	r7, [pc, #220]	; (8007b3c <settings_init+0x12c>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007a60:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007a64:	66a3      	str	r3, [r4, #104]	; 0x68
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007a66:	4a36      	ldr	r2, [pc, #216]	; (8007b40 <settings_init+0x130>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007a68:	4b36      	ldr	r3, [pc, #216]	; (8007b44 <settings_init+0x134>)
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007a6a:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8007a6e:	4628      	mov	r0, r5
 8007a70:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007a72:	6222      	str	r2, [r4, #32]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007a74:	6262      	str	r2, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007a76:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007a78:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007a7a:	6323      	str	r3, [r4, #48]	; 0x30
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007a7c:	6363      	str	r3, [r4, #52]	; 0x34
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007a7e:	63a3      	str	r3, [r4, #56]	; 0x38
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007a80:	63e3      	str	r3, [r4, #60]	; 0x3c
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007a82:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007a86:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007a8a:	6027      	str	r7, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007a8c:	6067      	str	r7, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007a8e:	60a7      	str	r7, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007a90:	60e7      	str	r7, [r4, #12]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007a92:	6126      	str	r6, [r4, #16]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007a94:	6166      	str	r6, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007a96:	61a6      	str	r6, [r4, #24]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8007a98:	61e6      	str	r6, [r4, #28]
  eeprom_put_char(0, SETTINGS_VERSION);
 8007a9a:	f7fa f883 	bl	8001ba4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007a9e:	4621      	mov	r1, r4
    memset(&coord_data, 0, sizeof(coord_data));
 8007aa0:	f44f 7400 	mov.w	r4, #512	; 0x200
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007aa4:	226c      	movs	r2, #108	; 0x6c
 8007aa6:	2001      	movs	r0, #1
 8007aa8:	f7fa f882 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    memset(&coord_data, 0, sizeof(coord_data));
 8007aac:	9500      	str	r5, [sp, #0]
 8007aae:	9501      	str	r5, [sp, #4]
 8007ab0:	9502      	str	r5, [sp, #8]
 8007ab2:	9503      	str	r5, [sp, #12]
    protocol_buffer_synchronize();
 8007ab4:	f7fe f97c 	bl	8005db0 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007ab8:	4620      	mov	r0, r4
 8007aba:	2210      	movs	r2, #16
 8007abc:	4669      	mov	r1, sp
 8007abe:	3411      	adds	r4, #17
 8007ac0:	f7fa f876 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007ac4:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 8007ac8:	d1f4      	bne.n	8007ab4 <settings_init+0xa4>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007aca:	2100      	movs	r1, #0
 8007acc:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007ad0:	f7fa f868 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	f240 3001 	movw	r0, #769	; 0x301
 8007ada:	f7fa f863 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8007ade:	2100      	movs	r1, #0
 8007ae0:	f240 3051 	movw	r0, #849	; 0x351
 8007ae4:	f7fa f85e 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007ae8:	2100      	movs	r1, #0
 8007aea:	f240 3052 	movw	r0, #850	; 0x352
 8007aee:	f7fa f859 	bl	8001ba4 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8007af2:	2100      	movs	r1, #0
 8007af4:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007af8:	f7fa f854 	bl	8001ba4 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8007afc:	2100      	movs	r1, #0
 8007afe:	f240 30c1 	movw	r0, #961	; 0x3c1
 8007b02:	f7fa f84f 	bl	8001ba4 <eeprom_put_char>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
    report_grbl_settings();
 8007b06:	f7fe fce1 	bl	80064cc <report_grbl_settings>
  }
}
 8007b0a:	b005      	add	sp, #20
 8007b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8007b0e:	226c      	movs	r2, #108	; 0x6c
 8007b10:	2101      	movs	r1, #1
 8007b12:	4803      	ldr	r0, [pc, #12]	; (8007b20 <settings_init+0x110>)
 8007b14:	f7fa f89e 	bl	8001c54 <memcpy_from_eeprom_with_checksum>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d080      	beq.n	8007a1e <settings_init+0xe>
}
 8007b1c:	b005      	add	sp, #20
 8007b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b20:	2000126c 	.word	0x2000126c
 8007b24:	3b03126f 	.word	0x3b03126f
 8007b28:	3c23d70a 	.word	0x3c23d70a
 8007b2c:	447a0000 	.word	0x447a0000
 8007b30:	42c80000 	.word	0x42c80000
 8007b34:	41200000 	.word	0x41200000
 8007b38:	44fa0000 	.word	0x44fa0000
 8007b3c:	45a00000 	.word	0x45a00000
 8007b40:	4bdbba00 	.word	0x4bdbba00
 8007b44:	c38c0000 	.word	0xc38c0000

08007b48 <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 8007b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007b4c:	4b40      	ldr	r3, [pc, #256]	; (8007c50 <spindle_init+0x108>)
{
 8007b4e:	b088      	sub	sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007b50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b52:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007b54:	f7f8 ffa2 	bl	8000a9c <__aeabi_fsub>
 8007b58:	4601      	mov	r1, r0
 8007b5a:	483e      	ldr	r0, [pc, #248]	; (8007c54 <spindle_init+0x10c>)
 8007b5c:	f7f9 f95c 	bl	8000e18 <__aeabi_fdiv>
#if defined (STM32F103C8)
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007b60:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007b62:	f04f 0803 	mov.w	r8, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007b66:	2510      	movs	r5, #16
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);

#ifdef USE_SPINDLE_ENABLE_PIN
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007b68:	f04f 0902 	mov.w	r9, #2
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007b6c:	2400      	movs	r4, #0
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007b6e:	4b3a      	ldr	r3, [pc, #232]	; (8007c58 <spindle_init+0x110>)
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007b70:	f10d 0a20 	add.w	sl, sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007b74:	6018      	str	r0, [r3, #0]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007b76:	4f39      	ldr	r7, [pc, #228]	; (8007c5c <spindle_init+0x114>)
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 8007b78:	4631      	mov	r1, r6
 8007b7a:	2008      	movs	r0, #8
 8007b7c:	f7f9 fe5c 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007b80:	f82a 6d20 	strh.w	r6, [sl, #-32]!
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007b84:	4651      	mov	r1, sl
 8007b86:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007b88:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007b8c:	f88d 8002 	strb.w	r8, [sp, #2]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007b90:	f7f9 fc36 	bl	8001400 <GPIO_Init>
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007b94:	4651      	mov	r1, sl
 8007b96:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007b98:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007b9c:	f88d 8002 	strb.w	r8, [sp, #2]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007ba0:	f8ad 9000 	strh.w	r9, [sp]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007ba4:	f7f9 fc2c 	bl	8001400 <GPIO_Init>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8007ba8:	4631      	mov	r1, r6
 8007baa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007bae:	f7f9 fe43 	bl	8001838 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007bb2:	a801      	add	r0, sp, #4
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007bb4:	9404      	str	r4, [sp, #16]
 8007bb6:	9405      	str	r4, [sp, #20]
 8007bb8:	9406      	str	r4, [sp, #24]
 8007bba:	9407      	str	r4, [sp, #28]
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007bbc:	f7f9 fef2 	bl	80019a4 <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8007bc0:	2263      	movs	r2, #99	; 0x63
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007bc2:	4b27      	ldr	r3, [pc, #156]	; (8007c60 <spindle_init+0x118>)
 8007bc4:	4827      	ldr	r0, [pc, #156]	; (8007c64 <spindle_init+0x11c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007bc8:	4d27      	ldr	r5, [pc, #156]	; (8007c68 <spindle_init+0x120>)
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007bca:	fba0 0303 	umull	r0, r3, r0, r3
 8007bce:	0c9b      	lsrs	r3, r3, #18
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007bd0:	a901      	add	r1, sp, #4
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007bd2:	3b01      	subs	r3, #1
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007bd4:	4628      	mov	r0, r5
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8007bd6:	f8ad 2008 	strh.w	r2, [sp, #8]
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007bda:	f8ad 3004 	strh.w	r3, [sp, #4]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8007bde:	f8ad 4006 	strh.w	r4, [sp, #6]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8007be2:	f8ad 400a 	strh.w	r4, [sp, #10]
  timerInitStructure.TIM_RepetitionCounter = 0;
 8007be6:	f88d 400c 	strb.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007bea:	f7f9 fe3d 	bl	8001868 <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8007bee:	4b1f      	ldr	r3, [pc, #124]	; (8007c6c <spindle_init+0x124>)
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM1, &outputChannelInit);
 8007bf0:	a904      	add	r1, sp, #16
 8007bf2:	4628      	mov	r0, r5
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8007bf4:	9304      	str	r3, [sp, #16]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 8007bf6:	f8cd 4016 	str.w	r4, [sp, #22]
  TIM_OC1Init(TIM1, &outputChannelInit);
 8007bfa:	f7f9 fe8b 	bl	8001914 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8007bfe:	4628      	mov	r0, r5
 8007c00:	2108      	movs	r1, #8
 8007c02:	f7f9 feff 	bl	8001a04 <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f7f9 fee1 	bl	80019d0 <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	f7f9 fecf 	bl	80019b4 <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 8007c16:	4631      	mov	r1, r6
 8007c18:	2004      	movs	r0, #4
 8007c1a:	f7f9 fe0d 	bl	8001838 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8007c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007c22:	2218      	movs	r2, #24
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8007c24:	4651      	mov	r1, sl
 8007c26:	4812      	ldr	r0, [pc, #72]	; (8007c70 <spindle_init+0x128>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007c28:	f88d 2003 	strb.w	r2, [sp, #3]
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8007c2c:	f8ad 3000 	strh.w	r3, [sp]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007c30:	f88d 8002 	strb.w	r8, [sp, #2]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8007c34:	f7f9 fbe4 	bl	8001400 <GPIO_Init>
#endif
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f7f9 fec8 	bl	80019d0 <TIM_CtrlPWMOutputs>
	#endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
      #else
        ResetSpindleEnablebit();
 8007c40:	4622      	mov	r2, r4
 8007c42:	4649      	mov	r1, r9
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7f9 fd9d 	bl	8001784 <GPIO_WriteBit>
}
 8007c4a:	b008      	add	sp, #32
 8007c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c50:	2000126c 	.word	0x2000126c
 8007c54:	42c60000 	.word	0x42c60000
 8007c58:	20000a5c 	.word	0x20000a5c
 8007c5c:	40010c00 	.word	0x40010c00
 8007c60:	20000004 	.word	0x20000004
 8007c64:	431bde83 	.word	0x431bde83
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	00010060 	.word	0x00010060
 8007c70:	40010800 	.word	0x40010800

08007c74 <spindle_get_state>:
{
 8007c74:	b508      	push	{r3, lr}
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 8007c76:	4807      	ldr	r0, [pc, #28]	; (8007c94 <spindle_get_state+0x20>)
 8007c78:	f7f9 fd78 	bl	800176c <GPIO_ReadInputData>
 8007c7c:	b2c0      	uxtb	r0, r0
		  if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT)))
 8007c7e:	f010 0302 	ands.w	r3, r0, #2
 8007c82:	d005      	beq.n	8007c90 <spindle_get_state+0x1c>
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 8007c84:	f010 0f01 	tst.w	r0, #1
		  else { return(SPINDLE_STATE_CW); }
 8007c88:	bf14      	ite	ne
 8007c8a:	2002      	movne	r0, #2
 8007c8c:	2001      	moveq	r0, #1
 8007c8e:	bd08      	pop	{r3, pc}
		} else { return(SPINDLE_STATE_DISABLE); }
 8007c90:	4618      	mov	r0, r3
}
 8007c92:	bd08      	pop	{r3, pc}
 8007c94:	40010c00 	.word	0x40010c00

08007c98 <spindle_stop>:
{
 8007c98:	b508      	push	{r3, lr}
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	4804      	ldr	r0, [pc, #16]	; (8007cb0 <spindle_stop+0x18>)
 8007c9e:	f7f9 fe97 	bl	80019d0 <TIM_CtrlPWMOutputs>
      #endif
    #endif
#endif
}
 8007ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ResetSpindleEnablebit();
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2102      	movs	r1, #2
 8007caa:	4802      	ldr	r0, [pc, #8]	; (8007cb4 <spindle_stop+0x1c>)
 8007cac:	f7f9 bd6a 	b.w	8001784 <GPIO_WriteBit>
 8007cb0:	40012c00 	.word	0x40012c00
 8007cb4:	40010c00 	.word	0x40010c00

08007cb8 <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 8007cb8:	4601      	mov	r1, r0
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 8007cba:	4803      	ldr	r0, [pc, #12]	; (8007cc8 <spindle_set_speed+0x10>)
 8007cbc:	8681      	strh	r1, [r0, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007cbe:	b101      	cbz	r1, 8007cc2 <spindle_set_speed+0xa>
			} else {
			#ifdef AVRTARGET
      SPINDLE_TCCRA_REGISTER |= (1<<SPINDLE_COMB_BIT); // Ensure PWM output is enabled.
			#endif
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	f7f9 be85 	b.w	80019d0 <TIM_CtrlPWMOutputs>
 8007cc6:	bf00      	nop
 8007cc8:	40012c00 	.word	0x40012c00

08007ccc <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007cce:	4b1e      	ldr	r3, [pc, #120]	; (8007d48 <spindle_compute_pwm_value+0x7c>)
	{
 8007cd0:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007cd2:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8007cd4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	4621      	mov	r1, r4
 8007cda:	f7f9 f99b 	bl	8001014 <__aeabi_fcmpge>
 8007cde:	4d1b      	ldr	r5, [pc, #108]	; (8007d4c <spindle_compute_pwm_value+0x80>)
 8007ce0:	b110      	cbz	r0, 8007ce8 <spindle_compute_pwm_value+0x1c>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
 8007ce2:	612c      	str	r4, [r5, #16]
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007ce4:	2064      	movs	r0, #100	; 0x64
 8007ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007ce8:	7aa8      	ldrb	r0, [r5, #10]
 8007cea:	f7f8 ff8d 	bl	8000c08 <__aeabi_i2f>
 8007cee:	4639      	mov	r1, r7
 8007cf0:	f7f8 ffde 	bl	8000cb0 <__aeabi_fmul>
 8007cf4:	4916      	ldr	r1, [pc, #88]	; (8007d50 <spindle_compute_pwm_value+0x84>)
 8007cf6:	f7f8 ffdb 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007cfa:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007cfc:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007cfe:	f7f9 f989 	bl	8001014 <__aeabi_fcmpge>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d1ed      	bne.n	8007ce2 <spindle_compute_pwm_value+0x16>
		}
		else if (rpm <= settings.rpm_min) {
 8007d06:	4631      	mov	r1, r6
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7f9 f979 	bl	8001000 <__aeabi_fcmple>
 8007d0e:	b140      	cbz	r0, 8007d22 <spindle_compute_pwm_value+0x56>
			if (rpm == 0.0f) { // S0 disables spindle
 8007d10:	2400      	movs	r4, #0
 8007d12:	4638      	mov	r0, r7
 8007d14:	4621      	mov	r1, r4
 8007d16:	f7f9 f95f 	bl	8000fd8 <__aeabi_fcmpeq>
 8007d1a:	b190      	cbz	r0, 8007d42 <spindle_compute_pwm_value+0x76>
				sys.spindle_speed = 0.0f;
 8007d1c:	612c      	str	r4, [r5, #16]
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 8007d1e:	2000      	movs	r0, #0
 8007d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else {
			// Compute intermediate PWM value with linear spindle speed model.
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007d22:	4631      	mov	r1, r6
			sys.spindle_speed = rpm;
 8007d24:	612f      	str	r7, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007d26:	4638      	mov	r0, r7
 8007d28:	f7f8 feb8 	bl	8000a9c <__aeabi_fsub>
 8007d2c:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <spindle_compute_pwm_value+0x88>)
 8007d2e:	6819      	ldr	r1, [r3, #0]
 8007d30:	f7f8 ffbe 	bl	8000cb0 <__aeabi_fmul>
 8007d34:	f003 f86a 	bl	800ae0c <floorf>
 8007d38:	f7f9 f9bc 	bl	80010b4 <__aeabi_f2uiz>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	b280      	uxth	r0, r0
		}
		return(pwm_value);
	}
 8007d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				sys.spindle_speed = settings.rpm_min;
 8007d42:	612e      	str	r6, [r5, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007d44:	2001      	movs	r0, #1
 8007d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d48:	2000126c 	.word	0x2000126c
 8007d4c:	200010b0 	.word	0x200010b0
 8007d50:	3c23d70a 	.word	0x3c23d70a
 8007d54:	20000a5c 	.word	0x20000a5c

08007d58 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sys.abort) { return; } // Block during abort.
 8007d5a:	4c3e      	ldr	r4, [pc, #248]	; (8007e54 <spindle_set_state+0xfc>)
 8007d5c:	7862      	ldrb	r2, [r4, #1]
 8007d5e:	bb2a      	cbnz	r2, 8007dac <spindle_set_state+0x54>
 8007d60:	4605      	mov	r5, r0
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8007d62:	b320      	cbz	r0, 8007dae <spindle_set_state+0x56>
    #endif
    spindle_stop();
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 8007d64:	2810      	cmp	r0, #16
 8007d66:	460e      	mov	r6, r1
 8007d68:	d056      	beq.n	8007e18 <spindle_set_state+0xc0>
        ResetSpindleDirectionBit();
	  }
	  else {
      SetSpindleDirectionBit();
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	483a      	ldr	r0, [pc, #232]	; (8007e58 <spindle_set_state+0x100>)
 8007d6e:	4611      	mov	r1, r2
 8007d70:	f7f9 fd08 	bl	8001784 <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007d74:	4b39      	ldr	r3, [pc, #228]	; (8007e5c <spindle_set_state+0x104>)
 8007d76:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007d7a:	0792      	lsls	r2, r2, #30
 8007d7c:	d425      	bmi.n	8007dca <spindle_set_state+0x72>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007d7e:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8007d80:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8007d82:	4638      	mov	r0, r7
 8007d84:	4629      	mov	r1, r5
 8007d86:	f7f9 f945 	bl	8001014 <__aeabi_fcmpge>
 8007d8a:	b310      	cbz	r0, 8007dd2 <spindle_set_state+0x7a>
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007d8c:	2264      	movs	r2, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 8007d8e:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007d90:	4b33      	ldr	r3, [pc, #204]	; (8007e60 <spindle_set_state+0x108>)
 8007d92:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007d94:	2101      	movs	r1, #1
 8007d96:	4832      	ldr	r0, [pc, #200]	; (8007e60 <spindle_set_state+0x108>)
 8007d98:	f7f9 fe1a 	bl	80019d0 <TIM_CtrlPWMOutputs>
#if (defined(USE_SPINDLE_ENABLE_PIN) && \
        !defined(SPINDLE_ENABLE_OFF_WITH_ZERO_SPEED)) || !defined(VARIABLE_SPINDLE)
	  #ifdef INVERT_SPINDLE_ENABLE_PIN
		ResetSpindleEnablebit();
	  #else
		SetSpindleEnablebit();
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	2102      	movs	r1, #2
 8007da0:	482d      	ldr	r0, [pc, #180]	; (8007e58 <spindle_set_state+0x100>)
 8007da2:	f7f9 fcef 	bl	8001784 <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007da6:	2300      	movs	r3, #0
 8007da8:	7323      	strb	r3, [r4, #12]
 8007daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 8007dae:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007db0:	4601      	mov	r1, r0
 8007db2:	482b      	ldr	r0, [pc, #172]	; (8007e60 <spindle_set_state+0x108>)
      sys.spindle_speed = 0.0f;
 8007db4:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007db6:	f7f9 fe0b 	bl	80019d0 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 8007dba:	462a      	mov	r2, r5
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	4826      	ldr	r0, [pc, #152]	; (8007e58 <spindle_set_state+0x100>)
 8007dc0:	f7f9 fce0 	bl	8001784 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	7323      	strb	r3, [r4, #12]
 8007dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007dca:	2d20      	cmp	r5, #32
 8007dcc:	bf08      	it	eq
 8007dce:	2600      	moveq	r6, #0
 8007dd0:	e7d5      	b.n	8007d7e <spindle_set_state+0x26>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007dd2:	7aa0      	ldrb	r0, [r4, #10]
 8007dd4:	f7f8 ff18 	bl	8000c08 <__aeabi_i2f>
 8007dd8:	4922      	ldr	r1, [pc, #136]	; (8007e64 <spindle_set_state+0x10c>)
 8007dda:	f7f8 ff69 	bl	8000cb0 <__aeabi_fmul>
 8007dde:	4631      	mov	r1, r6
 8007de0:	f7f8 ff66 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007de4:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007de6:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007de8:	f7f9 f914 	bl	8001014 <__aeabi_fcmpge>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d1cd      	bne.n	8007d8c <spindle_set_state+0x34>
		else if (rpm <= settings.rpm_min) {
 8007df0:	4639      	mov	r1, r7
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7f9 f904 	bl	8001000 <__aeabi_fcmple>
 8007df8:	b1a0      	cbz	r0, 8007e24 <spindle_set_state+0xcc>
			if (rpm == 0.0f) { // S0 disables spindle
 8007dfa:	2500      	movs	r5, #0
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f7f9 f8ea 	bl	8000fd8 <__aeabi_fcmpeq>
 8007e04:	b310      	cbz	r0, 8007e4c <spindle_set_state+0xf4>
		TIM1->CCR1 = pwm_value;
 8007e06:	2200      	movs	r2, #0
 8007e08:	4b15      	ldr	r3, [pc, #84]	; (8007e60 <spindle_set_state+0x108>)
				sys.spindle_speed = 0.0f;
 8007e0a:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007e0c:	869a      	strh	r2, [r3, #52]	; 0x34
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007e0e:	2100      	movs	r1, #0
 8007e10:	4813      	ldr	r0, [pc, #76]	; (8007e60 <spindle_set_state+0x108>)
 8007e12:	f7f9 fddd 	bl	80019d0 <TIM_CtrlPWMOutputs>
 8007e16:	e7c1      	b.n	8007d9c <spindle_set_state+0x44>
        ResetSpindleDirectionBit();
 8007e18:	2101      	movs	r1, #1
 8007e1a:	480f      	ldr	r0, [pc, #60]	; (8007e58 <spindle_set_state+0x100>)
 8007e1c:	f7f9 fcb2 	bl	8001784 <GPIO_WriteBit>
 8007e20:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <spindle_set_state+0x104>)
 8007e22:	e7ac      	b.n	8007d7e <spindle_set_state+0x26>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007e24:	4639      	mov	r1, r7
 8007e26:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8007e28:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007e2a:	f7f8 fe37 	bl	8000a9c <__aeabi_fsub>
 8007e2e:	4b0e      	ldr	r3, [pc, #56]	; (8007e68 <spindle_set_state+0x110>)
 8007e30:	6819      	ldr	r1, [r3, #0]
 8007e32:	f7f8 ff3d 	bl	8000cb0 <__aeabi_fmul>
 8007e36:	f002 ffe9 	bl	800ae0c <floorf>
 8007e3a:	f7f9 f93b 	bl	80010b4 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8007e3e:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <spindle_set_state+0x108>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007e40:	3001      	adds	r0, #1
 8007e42:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 8007e44:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d0e1      	beq.n	8007e0e <spindle_set_state+0xb6>
 8007e4a:	e7a3      	b.n	8007d94 <spindle_set_state+0x3c>
				sys.spindle_speed = settings.rpm_min;
 8007e4c:	6127      	str	r7, [r4, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007e4e:	2201      	movs	r2, #1
 8007e50:	e79e      	b.n	8007d90 <spindle_set_state+0x38>
 8007e52:	bf00      	nop
 8007e54:	200010b0 	.word	0x200010b0
 8007e58:	40010c00 	.word	0x40010c00
 8007e5c:	2000126c 	.word	0x2000126c
 8007e60:	40012c00 	.word	0x40012c00
 8007e64:	3c23d70a 	.word	0x3c23d70a
 8007e68:	20000a5c 	.word	0x20000a5c

08007e6c <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 8007e6e:	4c3f      	ldr	r4, [pc, #252]	; (8007f6c <spindle_sync+0x100>)
 8007e70:	7823      	ldrb	r3, [r4, #0]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d005      	beq.n	8007e82 <spindle_sync+0x16>
 8007e76:	4605      	mov	r5, r0
 8007e78:	460e      	mov	r6, r1
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 8007e7a:	f7fd ff99 	bl	8005db0 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.
 8007e7e:	7862      	ldrb	r2, [r4, #1]
 8007e80:	b102      	cbz	r2, 8007e84 <spindle_sync+0x18>
 8007e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8007e84:	b32d      	cbz	r5, 8007ed2 <spindle_sync+0x66>
      if (state == SPINDLE_ENABLE_CW) {
 8007e86:	2d10      	cmp	r5, #16
 8007e88:	d052      	beq.n	8007f30 <spindle_sync+0xc4>
      SetSpindleDirectionBit();
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	4838      	ldr	r0, [pc, #224]	; (8007f70 <spindle_sync+0x104>)
 8007e8e:	4611      	mov	r1, r2
 8007e90:	f7f9 fc78 	bl	8001784 <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007e94:	4b37      	ldr	r3, [pc, #220]	; (8007f74 <spindle_sync+0x108>)
 8007e96:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007e9a:	0792      	lsls	r2, r2, #30
 8007e9c:	d502      	bpl.n	8007ea4 <spindle_sync+0x38>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007e9e:	2d20      	cmp	r5, #32
 8007ea0:	bf08      	it	eq
 8007ea2:	2600      	moveq	r6, #0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007ea4:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8007ea6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	4629      	mov	r1, r5
 8007eac:	f7f9 f8b2 	bl	8001014 <__aeabi_fcmpge>
 8007eb0:	b1d8      	cbz	r0, 8007eea <spindle_sync+0x7e>
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007eb2:	2264      	movs	r2, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 8007eb4:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007eb6:	4b30      	ldr	r3, [pc, #192]	; (8007f78 <spindle_sync+0x10c>)
 8007eb8:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007eba:	2101      	movs	r1, #1
 8007ebc:	482e      	ldr	r0, [pc, #184]	; (8007f78 <spindle_sync+0x10c>)
 8007ebe:	f7f9 fd87 	bl	80019d0 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	2102      	movs	r1, #2
 8007ec6:	482a      	ldr	r0, [pc, #168]	; (8007f70 <spindle_sync+0x104>)
 8007ec8:	f7f9 fc5c 	bl	8001784 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007ecc:	2300      	movs	r3, #0
 8007ece:	7323      	strb	r3, [r4, #12]
 8007ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 8007ed2:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4828      	ldr	r0, [pc, #160]	; (8007f78 <spindle_sync+0x10c>)
      sys.spindle_speed = 0.0f;
 8007ed8:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007eda:	f7f9 fd79 	bl	80019d0 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 8007ede:	462a      	mov	r2, r5
 8007ee0:	2102      	movs	r1, #2
 8007ee2:	4823      	ldr	r0, [pc, #140]	; (8007f70 <spindle_sync+0x104>)
 8007ee4:	f7f9 fc4e 	bl	8001784 <GPIO_WriteBit>
 8007ee8:	e7f0      	b.n	8007ecc <spindle_sync+0x60>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007eea:	7aa0      	ldrb	r0, [r4, #10]
 8007eec:	f7f8 fe8c 	bl	8000c08 <__aeabi_i2f>
 8007ef0:	4922      	ldr	r1, [pc, #136]	; (8007f7c <spindle_sync+0x110>)
 8007ef2:	f7f8 fedd 	bl	8000cb0 <__aeabi_fmul>
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	f7f8 feda 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007efc:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007efe:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007f00:	f7f9 f888 	bl	8001014 <__aeabi_fcmpge>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d1d4      	bne.n	8007eb2 <spindle_sync+0x46>
		else if (rpm <= settings.rpm_min) {
 8007f08:	4639      	mov	r1, r7
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7f9 f878 	bl	8001000 <__aeabi_fcmple>
 8007f10:	b1a0      	cbz	r0, 8007f3c <spindle_sync+0xd0>
			if (rpm == 0.0f) { // S0 disables spindle
 8007f12:	2500      	movs	r5, #0
 8007f14:	4630      	mov	r0, r6
 8007f16:	4629      	mov	r1, r5
 8007f18:	f7f9 f85e 	bl	8000fd8 <__aeabi_fcmpeq>
 8007f1c:	b310      	cbz	r0, 8007f64 <spindle_sync+0xf8>
		TIM1->CCR1 = pwm_value;
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4b15      	ldr	r3, [pc, #84]	; (8007f78 <spindle_sync+0x10c>)
				sys.spindle_speed = 0.0f;
 8007f22:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007f24:	869a      	strh	r2, [r3, #52]	; 0x34
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007f26:	2100      	movs	r1, #0
 8007f28:	4813      	ldr	r0, [pc, #76]	; (8007f78 <spindle_sync+0x10c>)
 8007f2a:	f7f9 fd51 	bl	80019d0 <TIM_CtrlPWMOutputs>
 8007f2e:	e7c8      	b.n	8007ec2 <spindle_sync+0x56>
        ResetSpindleDirectionBit();
 8007f30:	2101      	movs	r1, #1
 8007f32:	480f      	ldr	r0, [pc, #60]	; (8007f70 <spindle_sync+0x104>)
 8007f34:	f7f9 fc26 	bl	8001784 <GPIO_WriteBit>
 8007f38:	4b0e      	ldr	r3, [pc, #56]	; (8007f74 <spindle_sync+0x108>)
 8007f3a:	e7b3      	b.n	8007ea4 <spindle_sync+0x38>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8007f40:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007f42:	f7f8 fdab 	bl	8000a9c <__aeabi_fsub>
 8007f46:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <spindle_sync+0x114>)
 8007f48:	6819      	ldr	r1, [r3, #0]
 8007f4a:	f7f8 feb1 	bl	8000cb0 <__aeabi_fmul>
 8007f4e:	f002 ff5d 	bl	800ae0c <floorf>
 8007f52:	f7f9 f8af 	bl	80010b4 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8007f56:	4a08      	ldr	r2, [pc, #32]	; (8007f78 <spindle_sync+0x10c>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	b29b      	uxth	r3, r3
		TIM1->CCR1 = pwm_value;
 8007f5c:	8693      	strh	r3, [r2, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0e1      	beq.n	8007f26 <spindle_sync+0xba>
 8007f62:	e7aa      	b.n	8007eba <spindle_sync+0x4e>
				sys.spindle_speed = settings.rpm_min;
 8007f64:	6127      	str	r7, [r4, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007f66:	2201      	movs	r2, #1
 8007f68:	e7a5      	b.n	8007eb6 <spindle_sync+0x4a>
 8007f6a:	bf00      	nop
 8007f6c:	200010b0 	.word	0x200010b0
 8007f70:	40010c00 	.word	0x40010c00
 8007f74:	2000126c 	.word	0x2000126c
 8007f78:	40012c00 	.word	0x40012c00
 8007f7c:	3c23d70a 	.word	0x3c23d70a
 8007f80:	20000a5c 	.word	0x20000a5c

08007f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007fbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007f88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007f8a:	e003      	b.n	8007f94 <LoopCopyDataInit>

08007f8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8007f8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007f90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007f92:	3104      	adds	r1, #4

08007f94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007f94:	480b      	ldr	r0, [pc, #44]	; (8007fc4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8007f96:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8007f98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007f9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007f9c:	d3f6      	bcc.n	8007f8c <CopyDataInit>
	ldr	r2, =_sbss
 8007f9e:	4a0b      	ldr	r2, [pc, #44]	; (8007fcc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8007fa0:	e002      	b.n	8007fa8 <LoopFillZerobss>

08007fa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007fa2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007fa4:	f842 3b04 	str.w	r3, [r2], #4

08007fa8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007fa8:	4b09      	ldr	r3, [pc, #36]	; (8007fd0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8007faa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007fac:	d3f9      	bcc.n	8007fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007fae:	f001 fc67 	bl	8009880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007fb2:	f002 fe7b 	bl	800acac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007fb6:	f7fb fad9 	bl	800356c <main>
	bx	lr
 8007fba:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007fbc:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8007fc0:	0800c53c 	.word	0x0800c53c
	ldr	r0, =_sdata
 8007fc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007fc8:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8007fcc:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8007fd0:	20001358 	.word	0x20001358

08007fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007fd4:	e7fe      	b.n	8007fd4 <ADC1_2_IRQHandler>
	...

08007fd8 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		mc_reset();
		return;
	}
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8007fda:	4d18      	ldr	r5, [pc, #96]	; (800803c <st_wake_up+0x64>)
  {
	  SetStepperDisableBit();
 8007fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8007fe0:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
	  SetStepperDisableBit();
 8007fe4:	4816      	ldr	r0, [pc, #88]	; (8008040 <st_wake_up+0x68>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8007fe6:	075b      	lsls	r3, r3, #29
 8007fe8:	d425      	bmi.n	8008036 <st_wake_up+0x5e>
  }
  else 
  { 
	  ResetStepperDisableBit();
 8007fea:	f7f9 fbc9 	bl	8001780 <GPIO_ResetBits>
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8007fee:	2401      	movs	r4, #1
  TIM3->SR = ~TIM_SR_UIF;
 8007ff0:	f64f 77fe 	movw	r7, #65534	; 0xfffe

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8007ff4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8007ff8:	4b12      	ldr	r3, [pc, #72]	; (8008044 <st_wake_up+0x6c>)
 8007ffa:	4813      	ldr	r0, [pc, #76]	; (8008048 <st_wake_up+0x70>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8008002:	fba0 0202 	umull	r0, r2, r0, r2
 8008006:	0c92      	lsrs	r2, r2, #18
 8008008:	fb03 f302 	mul.w	r3, r3, r2
  st.step_outbits = step_port_invert_mask;
 800800c:	480f      	ldr	r0, [pc, #60]	; (800804c <st_wake_up+0x74>)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 800800e:	4a10      	ldr	r2, [pc, #64]	; (8008050 <st_wake_up+0x78>)
  st.step_outbits = step_port_invert_mask;
 8008010:	4d10      	ldr	r5, [pc, #64]	; (8008054 <st_wake_up+0x7c>)
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008012:	6b06      	ldr	r6, [r0, #48]	; 0x30
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8008014:	b29b      	uxth	r3, r3
  st.step_outbits = step_port_invert_mask;
 8008016:	882d      	ldrh	r5, [r5, #0]
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8008018:	8593      	strh	r3, [r2, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 800801a:	8294      	strh	r4, [r2, #20]
  TIM3->SR = ~TIM_SR_UIF;
 800801c:	8217      	strh	r7, [r2, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800801e:	8872      	ldrh	r2, [r6, #2]
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8008020:	8243      	strh	r3, [r0, #18]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008022:	1e53      	subs	r3, r2, #1
 8008024:	b29b      	uxth	r3, r3
 8008026:	858b      	strh	r3, [r1, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 8008028:	828c      	strh	r4, [r1, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 800802a:	880b      	ldrh	r3, [r1, #0]
  st.step_outbits = step_port_invert_mask;
 800802c:	8285      	strh	r5, [r0, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 800802e:	b29b      	uxth	r3, r3
 8008030:	4323      	orrs	r3, r4
 8008032:	800b      	strh	r3, [r1, #0]
 8008034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  SetStepperDisableBit();
 8008036:	f7f9 fba1 	bl	800177c <GPIO_SetBits>
 800803a:	e7d8      	b.n	8007fee <st_wake_up+0x16>
 800803c:	2000126c 	.word	0x2000126c
 8008040:	40010800 	.word	0x40010800
 8008044:	20000004 	.word	0x20000004
 8008048:	431bde83 	.word	0x431bde83
 800804c:	20000af4 	.word	0x20000af4
 8008050:	40000400 	.word	0x40000400
 8008054:	20000c04 	.word	0x20000c04

08008058 <st_go_idle>:
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 800805c:	2100      	movs	r1, #0
{
 800805e:	b538      	push	{r3, r4, r5, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008060:	8813      	ldrh	r3, [r2, #0]

  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008062:	4c18      	ldr	r4, [pc, #96]	; (80080c4 <st_go_idle+0x6c>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008064:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008068:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800806c:	041b      	lsls	r3, r3, #16
  busy = false;
 800806e:	4d16      	ldr	r5, [pc, #88]	; (80080c8 <st_go_idle+0x70>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008070:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008072:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008074:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 8008076:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 8008078:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800807a:	d00e      	beq.n	800809a <st_go_idle+0x42>
 800807c:	4b13      	ldr	r3, [pc, #76]	; (80080cc <st_go_idle+0x74>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b04      	cmp	r3, #4
 8008082:	d112      	bne.n	80080aa <st_go_idle+0x52>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008084:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8008088:	075b      	lsls	r3, r3, #29
 800808a:	d414      	bmi.n	80080b6 <st_go_idle+0x5e>
  }
  else 
  { 
	  ResetStepperDisableBit();
  }
}
 800808c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  ResetStepperDisableBit();
 8008090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008094:	480e      	ldr	r0, [pc, #56]	; (80080d0 <st_go_idle+0x78>)
 8008096:	f7f9 bb73 	b.w	8001780 <GPIO_ResetBits>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800809a:	4b0e      	ldr	r3, [pc, #56]	; (80080d4 <st_go_idle+0x7c>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1ec      	bne.n	800807c <st_go_idle+0x24>
 80080a2:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <st_go_idle+0x74>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b80      	cmp	r3, #128	; 0x80
 80080a8:	d1ec      	bne.n	8008084 <st_go_idle+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 80080aa:	f7fb ff0d 	bl	8003ec8 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80080ae:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80080b2:	075a      	lsls	r2, r3, #29
 80080b4:	d4ea      	bmi.n	800808c <st_go_idle+0x34>
	  SetStepperDisableBit();
 80080b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 80080ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  SetStepperDisableBit();
 80080be:	4804      	ldr	r0, [pc, #16]	; (80080d0 <st_go_idle+0x78>)
 80080c0:	f7f9 bb5c 	b.w	800177c <GPIO_SetBits>
 80080c4:	2000126c 	.word	0x2000126c
 80080c8:	20000a60 	.word	0x20000a60
 80080cc:	200010b0 	.word	0x200010b0
 80080d0:	40010800 	.word	0x40010800
 80080d4:	200010e8 	.word	0x200010e8

080080d8 <TIM2_IRQHandler>:
ISR(TIMER1_COMPA_vect)
#endif
#ifdef WIN32
void Timer1Proc()
#endif
{
 80080d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 80080da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080de:	8a1a      	ldrh	r2, [r3, #16]
 80080e0:	07d2      	lsls	r2, r2, #31
 80080e2:	f140 808f 	bpl.w	8008204 <TIM2_IRQHandler+0x12c>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
		TIM2->CNT = 0;
 80080e6:	2200      	movs	r2, #0
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 80080e8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 80080ec:	4d93      	ldr	r5, [pc, #588]	; (800833c <TIM2_IRQHandler+0x264>)
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 80080ee:	8219      	strh	r1, [r3, #16]
		TIM2->CNT = 0;
 80080f0:	849a      	strh	r2, [r3, #36]	; 0x24
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 80080f2:	782a      	ldrb	r2, [r5, #0]
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	f040 8085 	bne.w	8008204 <TIM2_IRQHandler+0x12c>
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 80080fa:	f64f 77fc 	movw	r7, #65532	; 0xfffc
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
#endif
  busy = true;
 80080fe:	2001      	movs	r0, #1
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8008100:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8008104:	4c8e      	ldr	r4, [pc, #568]	; (8008340 <TIM2_IRQHandler+0x268>)
 8008106:	f601 0102 	addw	r1, r1, #2050	; 0x802
 800810a:	68ce      	ldr	r6, [r1, #12]
 800810c:	8ae2      	ldrh	r2, [r4, #22]
 800810e:	f026 06f0 	bic.w	r6, r6, #240	; 0xf0
 8008112:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008116:	4332      	orrs	r2, r6
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8008118:	4e8a      	ldr	r6, [pc, #552]	; (8008344 <TIM2_IRQHandler+0x26c>)
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 800811a:	60ca      	str	r2, [r1, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 800811c:	8237      	strh	r7, [r6, #16]
      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 800811e:	68ca      	ldr	r2, [r1, #12]
 8008120:	8aa7      	ldrh	r7, [r4, #20]
 8008122:	f022 020f 	bic.w	r2, r2, #15
 8008126:	433a      	orrs	r2, r7
 8008128:	60ca      	str	r2, [r1, #12]
  TIM3->CR1 |= TIM_CR1_CEN;
 800812a:	8832      	ldrh	r2, [r6, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 800812c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  TIM3->CR1 |= TIM_CR1_CEN;
 800812e:	b292      	uxth	r2, r2
 8008130:	4302      	orrs	r2, r0
 8008132:	8032      	strh	r2, [r6, #0]
  busy = true;
 8008134:	7028      	strb	r0, [r5, #0]
  if (st.exec_segment == NULL) {
 8008136:	2900      	cmp	r1, #0
 8008138:	d07f      	beq.n	800823a <TIM2_IRQHandler+0x162>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 800813a:	4b83      	ldr	r3, [pc, #524]	; (8008348 <TIM2_IRQHandler+0x270>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b01      	cmp	r3, #1
 8008140:	f000 80bd 	beq.w	80082be <TIM2_IRQHandler+0x1e6>

  // Reset step out bits.
  st.step_outbits = 0;
 8008144:	2300      	movs	r3, #0
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 8008146:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    st.counter_x += st.steps[X_AXIS];
 8008148:	6821      	ldr	r1, [r4, #0]
 800814a:	69a6      	ldr	r6, [r4, #24]
  if (st.counter_x > st.exec_block->step_event_count) {
 800814c:	6902      	ldr	r2, [r0, #16]
    st.counter_x += st.steps[X_AXIS];
 800814e:	4431      	add	r1, r6
  if (st.counter_x > st.exec_block->step_event_count) {
 8008150:	4291      	cmp	r1, r2
    st.counter_x += st.steps[X_AXIS];
 8008152:	6021      	str	r1, [r4, #0]
  st.step_outbits = 0;
 8008154:	82a3      	strh	r3, [r4, #20]
  if (st.counter_x > st.exec_block->step_event_count) {
 8008156:	d856      	bhi.n	8008206 <TIM2_IRQHandler+0x12e>
 8008158:	2602      	movs	r6, #2
    st.counter_x -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
    else { sys_position[X_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 800815a:	6861      	ldr	r1, [r4, #4]
 800815c:	69e7      	ldr	r7, [r4, #28]
 800815e:	4439      	add	r1, r7
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 8008160:	428a      	cmp	r2, r1
    st.counter_y += st.steps[Y_AXIS];
 8008162:	6061      	str	r1, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 8008164:	d20a      	bcs.n	800817c <TIM2_IRQHandler+0xa4>
    st.step_outbits |= (1<<Y_STEP_BIT);
    st.counter_y -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8008166:	8a83      	ldrh	r3, [r0, #20]
    st.counter_y -= st.exec_block->step_event_count;
 8008168:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 800816a:	069f      	lsls	r7, r3, #26
    st.counter_y -= st.exec_block->step_event_count;
 800816c:	6061      	str	r1, [r4, #4]
    st.step_outbits |= (1<<Y_STEP_BIT);
 800816e:	82a6      	strh	r6, [r4, #20]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8008170:	d55d      	bpl.n	800822e <TIM2_IRQHandler+0x156>
 8008172:	4633      	mov	r3, r6
 8008174:	4f75      	ldr	r7, [pc, #468]	; (800834c <TIM2_IRQHandler+0x274>)
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	3901      	subs	r1, #1
 800817a:	6079      	str	r1, [r7, #4]
    else { sys_position[Y_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 800817c:	68a1      	ldr	r1, [r4, #8]
 800817e:	6a26      	ldr	r6, [r4, #32]
 8008180:	4431      	add	r1, r6
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 8008182:	428a      	cmp	r2, r1
    st.counter_z += st.steps[Z_AXIS];
 8008184:	60a1      	str	r1, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 8008186:	d20f      	bcs.n	80081a8 <TIM2_IRQHandler+0xd0>
    st.step_outbits |= (1<<Z_STEP_BIT);
    st.counter_z -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8008188:	8a86      	ldrh	r6, [r0, #20]
    st.counter_z -= st.exec_block->step_event_count;
 800818a:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 800818c:	f016 0f40 	tst.w	r6, #64	; 0x40
 8008190:	4e6e      	ldr	r6, [pc, #440]	; (800834c <TIM2_IRQHandler+0x274>)
    st.counter_z -= st.exec_block->step_event_count;
 8008192:	60a1      	str	r1, [r4, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8008194:	68b1      	ldr	r1, [r6, #8]
    st.step_outbits |= (1<<Z_STEP_BIT);
 8008196:	f043 0304 	orr.w	r3, r3, #4
 800819a:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 800819c:	bf14      	ite	ne
 800819e:	f101 31ff 	addne.w	r1, r1, #4294967295
    else { sys_position[Z_AXIS]++; }
 80081a2:	3101      	addeq	r1, #1
    st.step_outbits |= (1<<Z_STEP_BIT);
 80081a4:	82a3      	strh	r3, [r4, #20]
    else { sys_position[Z_AXIS]++; }
 80081a6:	60b1      	str	r1, [r6, #8]
  }
// --- YSV 22-06-2018
  #if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_a += st.steps[A_AXIS];
 80081a8:	68e1      	ldr	r1, [r4, #12]
 80081aa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081ac:	4431      	add	r1, r6
  #else
    st.counter_a += st.exec_block->steps[A_AXIS];
  #endif
  if (st.counter_a > st.exec_block->step_event_count) {
 80081ae:	428a      	cmp	r2, r1
    st.counter_a += st.steps[A_AXIS];
 80081b0:	60e1      	str	r1, [r4, #12]
  if (st.counter_a > st.exec_block->step_event_count) {
 80081b2:	d20e      	bcs.n	80081d2 <TIM2_IRQHandler+0xfa>
    st.step_outbits |= (1<<A_STEP_BIT);
    st.counter_a -= st.exec_block->step_event_count;
 80081b4:	1a8a      	subs	r2, r1, r2
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80081b6:	4965      	ldr	r1, [pc, #404]	; (800834c <TIM2_IRQHandler+0x274>)
 80081b8:	8a80      	ldrh	r0, [r0, #20]
    st.counter_a -= st.exec_block->step_event_count;
 80081ba:	60e2      	str	r2, [r4, #12]
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80081bc:	68ca      	ldr	r2, [r1, #12]
 80081be:	0600      	lsls	r0, r0, #24
    st.step_outbits |= (1<<A_STEP_BIT);
 80081c0:	f043 0308 	orr.w	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80081c6:	bf4c      	ite	mi
 80081c8:	f102 32ff 	addmi.w	r2, r2, #4294967295
    else { sys_position[A_AXIS]++; }
 80081cc:	3201      	addpl	r2, #1
    st.step_outbits |= (1<<A_STEP_BIT);
 80081ce:	82a3      	strh	r3, [r4, #20]
    else { sys_position[A_AXIS]++; }
 80081d0:	60ca      	str	r2, [r1, #12]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 80081d2:	4a5f      	ldr	r2, [pc, #380]	; (8008350 <TIM2_IRQHandler+0x278>)
 80081d4:	7811      	ldrb	r1, [r2, #0]
 80081d6:	2904      	cmp	r1, #4
 80081d8:	d025      	beq.n	8008226 <TIM2_IRQHandler+0x14e>

  st.step_count--; // Decrement step events count
 80081da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80081dc:	3a01      	subs	r2, #1
 80081de:	b292      	uxth	r2, r2
 80081e0:	8522      	strh	r2, [r4, #40]	; 0x28
  if (st.step_count == 0) {
 80081e2:	b942      	cbnz	r2, 80081f6 <TIM2_IRQHandler+0x11e>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 80081e4:	495b      	ldr	r1, [pc, #364]	; (8008354 <TIM2_IRQHandler+0x27c>)
    st.exec_segment = NULL;
 80081e6:	6322      	str	r2, [r4, #48]	; 0x30
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 80081e8:	780a      	ldrb	r2, [r1, #0]
 80081ea:	3201      	adds	r2, #1
 80081ec:	b2d2      	uxtb	r2, r2
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
		segment_tail_next = 0;
 80081ee:	2a0a      	cmp	r2, #10
 80081f0:	bf08      	it	eq
 80081f2:	2200      	moveq	r2, #0
	segment_buffer_tail = segment_tail_next;
 80081f4:	700a      	strb	r2, [r1, #0]
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
  busy = false;
 80081f6:	2100      	movs	r1, #0
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 80081f8:	4a57      	ldr	r2, [pc, #348]	; (8008358 <TIM2_IRQHandler+0x280>)
  busy = false;
 80081fa:	7029      	strb	r1, [r5, #0]
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 80081fc:	8812      	ldrh	r2, [r2, #0]
 80081fe:	4053      	eors	r3, r2
 8008200:	82a3      	strh	r3, [r4, #20]
 8008202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    st.step_outbits |= (1<<X_STEP_BIT);
 8008206:	2301      	movs	r3, #1
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8008208:	4f50      	ldr	r7, [pc, #320]	; (800834c <TIM2_IRQHandler+0x274>)
 800820a:	8a86      	ldrh	r6, [r0, #20]
    st.counter_x -= st.exec_block->step_event_count;
 800820c:	1a89      	subs	r1, r1, r2
 800820e:	6021      	str	r1, [r4, #0]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	f016 0f10 	tst.w	r6, #16
 8008216:	bf14      	ite	ne
 8008218:	f101 31ff 	addne.w	r1, r1, #4294967295
    else { sys_position[X_AXIS]++; }
 800821c:	3101      	addeq	r1, #1
    st.step_outbits |= (1<<X_STEP_BIT);
 800821e:	82a3      	strh	r3, [r4, #20]
 8008220:	2603      	movs	r6, #3
    else { sys_position[X_AXIS]++; }
 8008222:	6039      	str	r1, [r7, #0]
 8008224:	e799      	b.n	800815a <TIM2_IRQHandler+0x82>
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8008226:	88d2      	ldrh	r2, [r2, #6]
 8008228:	4013      	ands	r3, r2
 800822a:	82a3      	strh	r3, [r4, #20]
 800822c:	e7d5      	b.n	80081da <TIM2_IRQHandler+0x102>
    else { sys_position[Y_AXIS]++; }
 800822e:	4633      	mov	r3, r6
 8008230:	4e46      	ldr	r6, [pc, #280]	; (800834c <TIM2_IRQHandler+0x274>)
 8008232:	6871      	ldr	r1, [r6, #4]
 8008234:	3101      	adds	r1, #1
 8008236:	6071      	str	r1, [r6, #4]
 8008238:	e7a0      	b.n	800817c <TIM2_IRQHandler+0xa4>
    if (segment_buffer_head != segment_buffer_tail) {
 800823a:	4a46      	ldr	r2, [pc, #280]	; (8008354 <TIM2_IRQHandler+0x27c>)
 800823c:	4e47      	ldr	r6, [pc, #284]	; (800835c <TIM2_IRQHandler+0x284>)
 800823e:	7810      	ldrb	r0, [r2, #0]
 8008240:	7836      	ldrb	r6, [r6, #0]
 8008242:	4286      	cmp	r6, r0
 8008244:	d03e      	beq.n	80082c4 <TIM2_IRQHandler+0x1ec>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8008246:	7810      	ldrb	r0, [r2, #0]
 8008248:	4a45      	ldr	r2, [pc, #276]	; (8008360 <TIM2_IRQHandler+0x288>)
 800824a:	b2c0      	uxtb	r0, r0
 800824c:	00c7      	lsls	r7, r0, #3
 800824e:	19d6      	adds	r6, r2, r7
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008250:	8871      	ldrh	r1, [r6, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8008252:	6326      	str	r6, [r4, #48]	; 0x30
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008254:	3901      	subs	r1, #1
 8008256:	b289      	uxth	r1, r1
 8008258:	8599      	strh	r1, [r3, #44]	; 0x2c
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 800825a:	f832 1030 	ldrh.w	r1, [r2, r0, lsl #3]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 800825e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8008262:	7930      	ldrb	r0, [r6, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8008264:	8521      	strh	r1, [r4, #40]	; 0x28
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8008266:	4283      	cmp	r3, r0
 8008268:	d053      	beq.n	8008312 <TIM2_IRQHandler+0x23a>
        st.exec_block = &st_block_buffer[st.exec_block_index];
 800826a:	4b3e      	ldr	r3, [pc, #248]	; (8008364 <TIM2_IRQHandler+0x28c>)
 800826c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8008270:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 8008274:	6919      	ldr	r1, [r3, #16]
        st.exec_block_index = st.exec_segment->st_block_index;
 8008276:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 800827a:	0849      	lsrs	r1, r1, #1
        st.exec_block = &st_block_buffer[st.exec_block_index];
 800827c:	62e3      	str	r3, [r4, #44]	; 0x2c
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 800827e:	60e1      	str	r1, [r4, #12]
 8008280:	60a1      	str	r1, [r4, #8]
 8008282:	6061      	str	r1, [r4, #4]
 8008284:	6021      	str	r1, [r4, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8008286:	4838      	ldr	r0, [pc, #224]	; (8008368 <TIM2_IRQHandler+0x290>)
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8008288:	443a      	add	r2, r7
 800828a:	7951      	ldrb	r1, [r2, #5]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 800828c:	f8b0 c000 	ldrh.w	ip, [r0]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8008290:	7990      	ldrb	r0, [r2, #6]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8008292:	681a      	ldr	r2, [r3, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8008294:	8a9f      	ldrh	r7, [r3, #20]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 8008296:	685e      	ldr	r6, [r3, #4]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8008298:	fa22 fe01 	lsr.w	lr, r2, r1
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 800829c:	689a      	ldr	r2, [r3, #8]
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 800829e:	68db      	ldr	r3, [r3, #12]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80082a0:	40ce      	lsrs	r6, r1
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80082a2:	40ca      	lsrs	r2, r1
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80082a4:	ea87 070c 	eor.w	r7, r7, ip
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80082a8:	fa23 f101 	lsr.w	r1, r3, r1
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80082ac:	f8c4 e018 	str.w	lr, [r4, #24]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80082b0:	82e7      	strh	r7, [r4, #22]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80082b2:	61e6      	str	r6, [r4, #28]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80082b4:	6222      	str	r2, [r4, #32]
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80082b6:	6261      	str	r1, [r4, #36]	; 0x24
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80082b8:	f7ff fcfe 	bl	8007cb8 <spindle_set_speed>
 80082bc:	e73d      	b.n	800813a <TIM2_IRQHandler+0x62>
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 80082be:	f7fc fe35 	bl	8004f2c <probe_state_monitor>
 80082c2:	e73f      	b.n	8008144 <TIM2_IRQHandler+0x6c>
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80082c4:	881a      	ldrh	r2, [r3, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80082c6:	4e29      	ldr	r6, [pc, #164]	; (800836c <TIM2_IRQHandler+0x294>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80082c8:	f022 0201 	bic.w	r2, r2, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80082cc:	f896 0046 	ldrb.w	r0, [r6, #70]	; 0x46
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80082d0:	0412      	lsls	r2, r2, #16
 80082d2:	0c12      	lsrs	r2, r2, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80082d4:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80082d6:	801a      	strh	r2, [r3, #0]
  TIM2->CNT = 0;
 80082d8:	8499      	strh	r1, [r3, #36]	; 0x24
  busy = false;
 80082da:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80082dc:	d01b      	beq.n	8008316 <TIM2_IRQHandler+0x23e>
 80082de:	4b1c      	ldr	r3, [pc, #112]	; (8008350 <TIM2_IRQHandler+0x278>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	d01f      	beq.n	8008326 <TIM2_IRQHandler+0x24e>
    delay_ms(settings.stepper_idle_lock_time);
 80082e6:	f7fb fdef 	bl	8003ec8 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80082ea:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80082ee:	075b      	lsls	r3, r3, #29
 80082f0:	d51d      	bpl.n	800832e <TIM2_IRQHandler+0x256>
	  ResetStepperDisableBit();
 80082f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082f6:	481e      	ldr	r0, [pc, #120]	; (8008370 <TIM2_IRQHandler+0x298>)
 80082f8:	f7f9 fa42 	bl	8001780 <GPIO_ResetBits>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 80082fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80082fe:	7d9b      	ldrb	r3, [r3, #22]
 8008300:	b113      	cbz	r3, 8008308 <TIM2_IRQHandler+0x230>
 8008302:	2000      	movs	r0, #0
 8008304:	f7ff fcd8 	bl	8007cb8 <spindle_set_speed>
}
 8008308:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 800830c:	2004      	movs	r0, #4
 800830e:	f001 ba6f 	b.w	80097f0 <system_set_exec_state_flag>
 8008312:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008314:	e7b7      	b.n	8008286 <TIM2_IRQHandler+0x1ae>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008316:	4b17      	ldr	r3, [pc, #92]	; (8008374 <TIM2_IRQHandler+0x29c>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1df      	bne.n	80082de <TIM2_IRQHandler+0x206>
 800831e:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <TIM2_IRQHandler+0x278>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b80      	cmp	r3, #128	; 0x80
 8008324:	d0df      	beq.n	80082e6 <TIM2_IRQHandler+0x20e>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008326:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800832a:	075b      	lsls	r3, r3, #29
 800832c:	d5e1      	bpl.n	80082f2 <TIM2_IRQHandler+0x21a>
	  SetStepperDisableBit();
 800832e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008332:	480f      	ldr	r0, [pc, #60]	; (8008370 <TIM2_IRQHandler+0x298>)
 8008334:	f7f9 fa22 	bl	800177c <GPIO_SetBits>
 8008338:	e7e0      	b.n	80082fc <TIM2_IRQHandler+0x224>
 800833a:	bf00      	nop
 800833c:	20000a60 	.word	0x20000a60
 8008340:	20000af4 	.word	0x20000af4
 8008344:	40000400 	.word	0x40000400
 8008348:	200010c6 	.word	0x200010c6
 800834c:	200010d8 	.word	0x200010d8
 8008350:	200010b0 	.word	0x200010b0
 8008354:	20000af1 	.word	0x20000af1
 8008358:	20000c04 	.word	0x20000c04
 800835c:	20000af0 	.word	0x20000af0
 8008360:	20000aa0 	.word	0x20000aa0
 8008364:	20000b28 	.word	0x20000b28
 8008368:	20000a62 	.word	0x20000a62
 800836c:	2000126c 	.word	0x2000126c
 8008370:	40010800 	.word	0x40010800
 8008374:	200010e8 	.word	0x200010e8

08008378 <TIM3_IRQHandler>:
ISR(TIMER0_OVF_vect)
#endif
#ifdef WIN32
void Timer0Proc()
#endif
{
 8008378:	b410      	push	{r4}
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
		TIM3->CR1 &= ~TIM_CR1_CEN;
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
		TIM3->CNT = 0;
 800837a:	2000      	movs	r0, #0
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 800837c:	f64f 74fc 	movw	r4, #65532	; 0xfffc
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008380:	490a      	ldr	r1, [pc, #40]	; (80083ac <TIM3_IRQHandler+0x34>)
 8008382:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <TIM3_IRQHandler+0x38>)
 8008384:	68ca      	ldr	r2, [r1, #12]
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	f022 020f 	bic.w	r2, r2, #15
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	4313      	orrs	r3, r2
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8008392:	4a08      	ldr	r2, [pc, #32]	; (80083b4 <TIM3_IRQHandler+0x3c>)
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008394:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8008396:	8813      	ldrh	r3, [r2, #0]
 8008398:	f023 0301 	bic.w	r3, r3, #1
 800839c:	041b      	lsls	r3, r3, #16
 800839e:	0c1b      	lsrs	r3, r3, #16
 80083a0:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 80083a2:	8214      	strh	r4, [r2, #16]
		TIM3->CNT = 0;
 80083a4:	8490      	strh	r0, [r2, #36]	; 0x24
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 80083a6:	bc10      	pop	{r4}
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	40010800 	.word	0x40010800
 80083b0:	20000c04 	.word	0x20000c04
 80083b4:	40000400 	.word	0x40000400

080083b8 <st_generate_step_dir_invert_masks>:



// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
 80083b8:	4b16      	ldr	r3, [pc, #88]	; (8008414 <st_generate_step_dir_invert_masks+0x5c>)
 80083ba:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 80083be:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
  uint8_t idx;
  step_port_invert_mask = 0;
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80083c2:	f011 0f01 	tst.w	r1, #1
 80083c6:	bf14      	ite	ne
 80083c8:	2310      	movne	r3, #16
 80083ca:	2300      	moveq	r3, #0
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80083cc:	f000 0201 	and.w	r2, r0, #1
 80083d0:	f010 0f02 	tst.w	r0, #2
 80083d4:	bf18      	it	ne
 80083d6:	f042 0202 	orrne.w	r2, r2, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80083da:	f011 0f02 	tst.w	r1, #2
 80083de:	bf18      	it	ne
 80083e0:	f043 0320 	orrne.w	r3, r3, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80083e4:	f010 0f04 	tst.w	r0, #4
 80083e8:	bf18      	it	ne
 80083ea:	f042 0204 	orrne.w	r2, r2, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80083ee:	f011 0f04 	tst.w	r1, #4
 80083f2:	bf18      	it	ne
 80083f4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80083f8:	0700      	lsls	r0, r0, #28
 80083fa:	bf48      	it	mi
 80083fc:	f042 0208 	orrmi.w	r2, r2, #8
 8008400:	4805      	ldr	r0, [pc, #20]	; (8008418 <st_generate_step_dir_invert_masks+0x60>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008402:	0709      	lsls	r1, r1, #28
 8008404:	4905      	ldr	r1, [pc, #20]	; (800841c <st_generate_step_dir_invert_masks+0x64>)
 8008406:	bf48      	it	mi
 8008408:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800840c:	8002      	strh	r2, [r0, #0]
 800840e:	800b      	strh	r3, [r1, #0]
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	2000126c 	.word	0x2000126c
 8008418:	20000c04 	.word	0x20000c04
 800841c:	20000a62 	.word	0x20000a62

08008420 <st_reset>:
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 8008424:	2100      	movs	r1, #0
}


// Reset and clear stepper subsystem variables
void st_reset()
{
 8008426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008428:	8813      	ldrh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800842a:	4c41      	ldr	r4, [pc, #260]	; (8008530 <st_reset+0x110>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800842c:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008430:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008434:	041b      	lsls	r3, r3, #16
  busy = false;
 8008436:	4d3f      	ldr	r5, [pc, #252]	; (8008534 <st_reset+0x114>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008438:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800843a:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800843c:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 800843e:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 8008440:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008442:	d060      	beq.n	8008506 <st_reset+0xe6>
 8008444:	4b3c      	ldr	r3, [pc, #240]	; (8008538 <st_reset+0x118>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b04      	cmp	r3, #4
 800844a:	d164      	bne.n	8008516 <st_reset+0xf6>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800844c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8008450:	075b      	lsls	r3, r3, #29
 8008452:	d466      	bmi.n	8008522 <st_reset+0x102>
	  ResetStepperDisableBit();
 8008454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008458:	4838      	ldr	r0, [pc, #224]	; (800853c <st_reset+0x11c>)
 800845a:	f7f9 f991 	bl	8001780 <GPIO_ResetBits>
  // Initialize stepper driver idle state.
  st_go_idle();
  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 800845e:	2238      	movs	r2, #56	; 0x38
 8008460:	2100      	movs	r1, #0
 8008462:	4837      	ldr	r0, [pc, #220]	; (8008540 <st_reset+0x120>)
 8008464:	f002 fc55 	bl	800ad12 <memset>
  memset(&st, 0, sizeof(stepper_t));
 8008468:	2234      	movs	r2, #52	; 0x34
 800846a:	2100      	movs	r1, #0
 800846c:	4835      	ldr	r0, [pc, #212]	; (8008544 <st_reset+0x124>)
 800846e:	f002 fc50 	bl	800ad12 <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8008472:	2100      	movs	r1, #0
 8008474:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  segment_buffer_tail = 0;
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 8008478:	2601      	movs	r6, #1
  pl_block = NULL;  // Planner block pointer used by segment buffer
 800847a:	4f33      	ldr	r7, [pc, #204]	; (8008548 <st_reset+0x128>)
  segment_buffer_head = 0; // empty = tail
 800847c:	4833      	ldr	r0, [pc, #204]	; (800854c <st_reset+0x12c>)
  segment_buffer_tail = 0;
 800847e:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 8008564 <st_reset+0x144>
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008482:	f013 0f01 	tst.w	r3, #1
  segment_buffer_tail = 0;
 8008486:	f88e 1000 	strb.w	r1, [lr]
  pl_block = NULL;  // Planner block pointer used by segment buffer
 800848a:	6039      	str	r1, [r7, #0]
  busy = false;
 800848c:	7029      	strb	r1, [r5, #0]
  segment_buffer_head = 0; // empty = tail
 800848e:	7001      	strb	r1, [r0, #0]
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008490:	bf18      	it	ne
 8008492:	2110      	movne	r1, #16
 8008494:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  segment_next_head = 1;
 8008498:	4c2d      	ldr	r4, [pc, #180]	; (8008550 <st_reset+0x130>)
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800849a:	ea02 0006 	and.w	r0, r2, r6
  segment_next_head = 1;
 800849e:	7026      	strb	r6, [r4, #0]
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80084a0:	0796      	lsls	r6, r2, #30
 80084a2:	bf48      	it	mi
 80084a4:	f040 0002 	orrmi.w	r0, r0, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80084a8:	079d      	lsls	r5, r3, #30
 80084aa:	bf48      	it	mi
 80084ac:	f041 0120 	orrmi.w	r1, r1, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80084b0:	0754      	lsls	r4, r2, #29
 80084b2:	bf48      	it	mi
 80084b4:	f040 0004 	orrmi.w	r0, r0, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80084b8:	075f      	lsls	r7, r3, #29
 80084ba:	bf48      	it	mi
 80084bc:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80084c0:	0716      	lsls	r6, r2, #28
 80084c2:	bf48      	it	mi
 80084c4:	f040 0008 	orrmi.w	r0, r0, #8
 80084c8:	4c22      	ldr	r4, [pc, #136]	; (8008554 <st_reset+0x134>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80084ca:	071d      	lsls	r5, r3, #28
 80084cc:	4d22      	ldr	r5, [pc, #136]	; (8008558 <st_reset+0x138>)

  st_generate_step_dir_invert_masks();
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 80084ce:	4b1d      	ldr	r3, [pc, #116]	; (8008544 <st_reset+0x124>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80084d0:	bf48      	it	mi
 80084d2:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 80084d6:	4a21      	ldr	r2, [pc, #132]	; (800855c <st_reset+0x13c>)
 80084d8:	8029      	strh	r1, [r5, #0]
 80084da:	8020      	strh	r0, [r4, #0]
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 80084dc:	82d9      	strh	r1, [r3, #22]
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 80084de:	8813      	ldrh	r3, [r2, #0]
 80084e0:	07dc      	lsls	r4, r3, #31
 80084e2:	d4fc      	bmi.n	80084de <st_reset+0xbe>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 80084e4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80084e8:	4c14      	ldr	r4, [pc, #80]	; (800853c <st_reset+0x11c>)
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 80084ea:	8213      	strh	r3, [r2, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80084ec:	68e3      	ldr	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 80084ee:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80084f2:	f023 030f 	bic.w	r3, r3, #15
 80084f6:	4303      	orrs	r3, r0
 80084f8:	60e3      	str	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 80084fa:	68e3      	ldr	r3, [r4, #12]
 80084fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008500:	4319      	orrs	r1, r3
 8008502:	60e1      	str	r1, [r4, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 8008504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008506:	4b16      	ldr	r3, [pc, #88]	; (8008560 <st_reset+0x140>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d19a      	bne.n	8008444 <st_reset+0x24>
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <st_reset+0x118>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	2b80      	cmp	r3, #128	; 0x80
 8008514:	d19a      	bne.n	800844c <st_reset+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 8008516:	f7fb fcd7 	bl	8003ec8 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800851a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800851e:	075f      	lsls	r7, r3, #29
 8008520:	d498      	bmi.n	8008454 <st_reset+0x34>
	  SetStepperDisableBit();
 8008522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008526:	4805      	ldr	r0, [pc, #20]	; (800853c <st_reset+0x11c>)
 8008528:	f7f9 f928 	bl	800177c <GPIO_SetBits>
 800852c:	e797      	b.n	800845e <st_reset+0x3e>
 800852e:	bf00      	nop
 8008530:	2000126c 	.word	0x2000126c
 8008534:	20000a60 	.word	0x20000a60
 8008538:	200010b0 	.word	0x200010b0
 800853c:	40010800 	.word	0x40010800
 8008540:	20000a68 	.word	0x20000a68
 8008544:	20000af4 	.word	0x20000af4
 8008548:	20000a64 	.word	0x20000a64
 800854c:	20000af0 	.word	0x20000af0
 8008550:	20000af2 	.word	0x20000af2
 8008554:	20000c04 	.word	0x20000c04
 8008558:	20000a62 	.word	0x20000a62
 800855c:	40000400 	.word	0x40000400
 8008560:	200010e8 	.word	0x200010e8
 8008564:	20000af1 	.word	0x20000af1

08008568 <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 8008568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 800856c:	2101      	movs	r1, #1
{
 800856e:	b086      	sub	sp, #24
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 8008570:	2004      	movs	r0, #4
 8008572:	f7f9 f961 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8008576:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800857a:	2610      	movs	r6, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800857c:	2303      	movs	r3, #3
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 800857e:	ad06      	add	r5, sp, #24
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008580:	4f52      	ldr	r7, [pc, #328]	; (80086cc <stepper_init+0x164>)
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8008582:	f825 2d14 	strh.w	r2, [r5, #-20]!
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008586:	4629      	mov	r1, r5
 8008588:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800858a:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800858e:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008592:	f7f8 ff35 	bl	8001400 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 8008596:	2101      	movs	r1, #1
 8008598:	2004      	movs	r0, #4
 800859a:	f7f9 f94d 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 800859e:	230f      	movs	r3, #15
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80085a0:	4629      	mov	r1, r5
 80085a2:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80085a4:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80085a8:	f7f8 ff2a 	bl	8001400 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 80085ac:	2101      	movs	r1, #1
 80085ae:	2004      	movs	r0, #4
 80085b0:	f7f9 f942 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 80085b4:	23f0      	movs	r3, #240	; 0xf0
void TIM_Configuration(TIM_TypeDef* TIMER, u16 Period, u16 Prescaler, u8 PP)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 80085b6:	2400      	movs	r4, #0
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80085b8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80086e0 <stepper_init+0x178>
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 80085bc:	4629      	mov	r1, r5
 80085be:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 80085c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 80085c4:	f7f8 ff1c 	bl	8001400 <GPIO_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80085c8:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80085cc:	a903      	add	r1, sp, #12
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80085d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 80085da:	f8ad 4010 	strh.w	r4, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 80085de:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80085e2:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80085e6:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80085ea:	f7f9 f93d 	bl	8001868 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 80085ee:	2101      	movs	r1, #1
 80085f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80085f4:	f7f9 fa0e 	bl	8001a14 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 80085f8:	2201      	movs	r2, #1
 80085fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80085fe:	4611      	mov	r1, r2
 8008600:	f7f9 f9f6 	bl	80019f0 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8008604:	2101      	movs	r1, #1
 8008606:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800860a:	f7f9 f9d3 	bl	80019b4 <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800860e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008612:	f7f8 fd6f 	bl	80010f4 <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 8008616:	4b2e      	ldr	r3, [pc, #184]	; (80086d0 <stepper_init+0x168>)
 8008618:	af06      	add	r7, sp, #24
 800861a:	f847 3d10 	str.w	r3, [r7, #-16]!
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800861e:	4638      	mov	r0, r7
 8008620:	f7f8 fd72 	bl	8001108 <NVIC_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8008624:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008628:	4d2a      	ldr	r5, [pc, #168]	; (80086d4 <stepper_init+0x16c>)
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 800862a:	f043 0302 	orr.w	r3, r3, #2
 800862e:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008632:	a903      	add	r1, sp, #12
 8008634:	4628      	mov	r0, r5
	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 8008636:	f8ad 4010 	strh.w	r4, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 800863a:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800863e:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008642:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008646:	f7f9 f90f 	bl	8001868 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 800864a:	4628      	mov	r0, r5
 800864c:	2101      	movs	r1, #1
 800864e:	f7f9 f9e1 	bl	8001a14 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8008652:	2201      	movs	r2, #1
 8008654:	4628      	mov	r0, r5
 8008656:	4611      	mov	r1, r2
 8008658:	f7f9 f9ca 	bl	80019f0 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 800865c:	2101      	movs	r1, #1
 800865e:	4628      	mov	r0, r5
 8008660:	f7f9 f9a8 	bl	80019b4 <TIM_Cmd>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8008664:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008668:	f7f8 fd44 	bl	80010f4 <NVIC_PriorityGroupConfig>
	NVIC_Init(&NVIC_InitStructure);
 800866c:	4638      	mov	r0, r7
	TIM2->CR1 &= ~TIM_CR1_CEN;
 800866e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 8008672:	4b19      	ldr	r3, [pc, #100]	; (80086d8 <stepper_init+0x170>)
 8008674:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 8008676:	f7f8 fd47 	bl	8001108 <NVIC_Init>
 800867a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800867e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8008682:	883b      	ldrh	r3, [r7, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8008684:	4a15      	ldr	r2, [pc, #84]	; (80086dc <stepper_init+0x174>)
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	40b3      	lsls	r3, r6
 800868c:	40f3      	lsrs	r3, r6
 800868e:	803b      	strh	r3, [r7, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 8008690:	8a3b      	ldrh	r3, [r7, #16]
 8008692:	f023 0301 	bic.w	r3, r3, #1
 8008696:	40b3      	lsls	r3, r6
 8008698:	40f3      	lsrs	r3, r6
 800869a:	823b      	strh	r3, [r7, #16]
	TIM2->CNT = 0;
 800869c:	84bc      	strh	r4, [r7, #36]	; 0x24
	TIM3->CR1 &= ~TIM_CR1_CEN;
 800869e:	882b      	ldrh	r3, [r5, #0]
 80086a0:	f023 0301 	bic.w	r3, r3, #1
 80086a4:	40b3      	lsls	r3, r6
 80086a6:	40f3      	lsrs	r3, r6
 80086a8:	802b      	strh	r3, [r5, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 80086aa:	8a2b      	ldrh	r3, [r5, #16]
 80086ac:	f023 0303 	bic.w	r3, r3, #3
 80086b0:	40b3      	lsls	r3, r6
 80086b2:	40f3      	lsrs	r3, r6
 80086b4:	822b      	strh	r3, [r5, #16]
	TIM3->CNT = 0;
 80086b6:	84ac      	strh	r4, [r5, #36]	; 0x24
 80086b8:	f882 431d 	strb.w	r4, [r2, #797]	; 0x31d
 80086bc:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80086c0:	6010      	str	r0, [r2, #0]
 80086c2:	6011      	str	r1, [r2, #0]
}
 80086c4:	b006      	add	sp, #24
 80086c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ca:	bf00      	nop
 80086cc:	40010800 	.word	0x40010800
 80086d0:	0101011c 	.word	0x0101011c
 80086d4:	40000400 	.word	0x40000400
 80086d8:	0101011d 	.word	0x0101011d
 80086dc:	e000e100 	.word	0xe000e100
 80086e0:	40021000 	.word	0x40021000

080086e4 <st_update_plan_block_parameters>:
{
 80086e4:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 80086e6:	4c08      	ldr	r4, [pc, #32]	; (8008708 <st_update_plan_block_parameters+0x24>)
 80086e8:	6825      	ldr	r5, [r4, #0]
 80086ea:	b15d      	cbz	r5, 8008704 <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 80086ec:	4b07      	ldr	r3, [pc, #28]	; (800870c <st_update_plan_block_parameters+0x28>)
 80086ee:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 80086f0:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 80086f2:	f042 0201 	orr.w	r2, r2, #1
 80086f6:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 80086f8:	4608      	mov	r0, r1
 80086fa:	f7f8 fad9 	bl	8000cb0 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 80086fe:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008700:	61a8      	str	r0, [r5, #24]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8008702:	6023      	str	r3, [r4, #0]
 8008704:	bd38      	pop	{r3, r4, r5, pc}
 8008706:	bf00      	nop
 8008708:	20000a64 	.word	0x20000a64
 800870c:	20000a68 	.word	0x20000a68

08008710 <st_prep_buffer>:
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8008710:	4b35      	ldr	r3, [pc, #212]	; (80087e8 <st_prep_buffer+0xd8>)
 8008712:	791b      	ldrb	r3, [r3, #4]
 8008714:	07db      	lsls	r3, r3, #31
 8008716:	f100 84c4 	bmi.w	80090a2 <st_prep_buffer+0x992>
{
 800871a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871e:	b091      	sub	sp, #68	; 0x44
 8008720:	4b32      	ldr	r3, [pc, #200]	; (80087ec <st_prep_buffer+0xdc>)
 8008722:	781f      	ldrb	r7, [r3, #0]
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8008724:	4b32      	ldr	r3, [pc, #200]	; (80087f0 <st_prep_buffer+0xe0>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	42bb      	cmp	r3, r7
 800872a:	f000 8318 	beq.w	8008d5e <st_prep_buffer+0x64e>
    if (pl_block == NULL) {
 800872e:	4b31      	ldr	r3, [pc, #196]	; (80087f4 <st_prep_buffer+0xe4>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 833a 	beq.w	8008dae <st_prep_buffer+0x69e>
 800873a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8008808 <st_prep_buffer+0xf8>
 800873e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 8008742:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	4b2b      	ldr	r3, [pc, #172]	; (80087f8 <st_prep_buffer+0xe8>)
 800874a:	930e      	str	r3, [sp, #56]	; 0x38
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 800874c:	4b2b      	ldr	r3, [pc, #172]	; (80087fc <st_prep_buffer+0xec>)
    prep_segment->st_block_index = prep.st_block_index;
 800874e:	492c      	ldr	r1, [pc, #176]	; (8008800 <st_prep_buffer+0xf0>)
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008750:	781b      	ldrb	r3, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 8008752:	f89a 2000 	ldrb.w	r2, [sl]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008756:	930c      	str	r3, [sp, #48]	; 0x30
    prep_segment->st_block_index = prep.st_block_index;
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	9307      	str	r3, [sp, #28]
 800875c:	18cb      	adds	r3, r1, r3
 800875e:	711a      	strb	r2, [r3, #4]
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8008760:	f8da 1010 	ldr.w	r1, [sl, #16]
 8008764:	4658      	mov	r0, fp
 8008766:	f7f8 f999 	bl	8000a9c <__aeabi_fsub>
 800876a:	2100      	movs	r1, #0
 800876c:	9004      	str	r0, [sp, #16]
 800876e:	f7f8 fc51 	bl	8001014 <__aeabi_fcmpge>
 8008772:	b908      	cbnz	r0, 8008778 <st_prep_buffer+0x68>
 8008774:	2300      	movs	r3, #0
 8008776:	9304      	str	r3, [sp, #16]
						mm_remaining = prep.accelerate_until;
 8008778:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800877c:	4658      	mov	r0, fp
 800877e:	4619      	mov	r1, r3
						mm_remaining = prep.accelerate_until;
 8008780:	461c      	mov	r4, r3
 8008782:	9302      	str	r3, [sp, #8]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008784:	f7f8 f98a 	bl	8000a9c <__aeabi_fsub>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008788:	f8da 3020 	ldr.w	r3, [sl, #32]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800878c:	4601      	mov	r1, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 800878e:	461d      	mov	r5, r3
 8008790:	930d      	str	r3, [sp, #52]	; 0x34
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008792:	f7f8 f985 	bl	8000aa0 <__addsf3>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008796:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800879a:	9006      	str	r0, [sp, #24]
 800879c:	4629      	mov	r1, r5
 800879e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
          if (mm_var < prep.decelerate_after) { // End of cruise.
 80087a2:	461e      	mov	r6, r3
 80087a4:	9305      	str	r3, [sp, #20]
 80087a6:	f7f8 fb37 	bl	8000e18 <__aeabi_fdiv>
 80087aa:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80087ae:	900a      	str	r0, [sp, #40]	; 0x28
 80087b0:	9303      	str	r3, [sp, #12]
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 80087b2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80087b6:	4631      	mov	r1, r6
 80087b8:	4620      	mov	r0, r4
 80087ba:	f8da 701c 	ldr.w	r7, [sl, #28]
 80087be:	f8da 8018 	ldr.w	r8, [sl, #24]
 80087c2:	9308      	str	r3, [sp, #32]
 80087c4:	f7f8 fc08 	bl	8000fd8 <__aeabi_fcmpeq>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	f000 827f 	beq.w	8008ccc <st_prep_buffer+0x5bc>
 80087ce:	f04f 0302 	mov.w	r3, #2
 80087d2:	4d0c      	ldr	r5, [pc, #48]	; (8008804 <st_prep_buffer+0xf4>)
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80087da:	2400      	movs	r4, #0
 80087dc:	462e      	mov	r6, r5
 80087de:	9309      	str	r3, [sp, #36]	; 0x24
 80087e0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80087e4:	e01e      	b.n	8008824 <st_prep_buffer+0x114>
 80087e6:	bf00      	nop
 80087e8:	200010b0 	.word	0x200010b0
 80087ec:	20000af2 	.word	0x20000af2
 80087f0:	20000af1 	.word	0x20000af1
 80087f4:	20000a64 	.word	0x20000a64
 80087f8:	20000c00 	.word	0x20000c00
 80087fc:	20000af0 	.word	0x20000af0
 8008800:	20000aa0 	.word	0x20000aa0
 8008804:	392ec33e 	.word	0x392ec33e
 8008808:	20000a68 	.word	0x20000a68
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800880c:	4621      	mov	r1, r4
 800880e:	4630      	mov	r0, r6
 8008810:	f7f8 f944 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008814:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008816:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008818:	4658      	mov	r0, fp
 800881a:	f7f8 fc05 	bl	8001028 <__aeabi_fcmpgt>
 800881e:	2800      	cmp	r0, #0
 8008820:	f000 80cf 	beq.w	80089c2 <st_prep_buffer+0x2b2>
      switch (prep.ramp_type) {
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d044      	beq.n	80088b4 <st_prep_buffer+0x1a4>
 800882a:	f0c0 81a4 	bcc.w	8008b76 <st_prep_buffer+0x466>
 800882e:	2b03      	cmp	r3, #3
 8008830:	d17f      	bne.n	8008932 <st_prep_buffer+0x222>
          speed_var = pl_block->acceleration*time_var;
 8008832:	9b00      	ldr	r3, [sp, #0]
 8008834:	4628      	mov	r0, r5
 8008836:	6a19      	ldr	r1, [r3, #32]
 8008838:	f7f8 fa3a 	bl	8000cb0 <__aeabi_fmul>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 800883c:	4651      	mov	r1, sl
          speed_var = pl_block->acceleration*time_var;
 800883e:	4681      	mov	r9, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008840:	4638      	mov	r0, r7
 8008842:	f7f8 f92b 	bl	8000a9c <__aeabi_fsub>
 8008846:	4601      	mov	r1, r0
 8008848:	4648      	mov	r0, r9
 800884a:	f7f8 fbe3 	bl	8001014 <__aeabi_fcmpge>
 800884e:	2800      	cmp	r0, #0
 8008850:	f000 81d0 	beq.w	8008bf4 <st_prep_buffer+0x4e4>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008854:	4639      	mov	r1, r7
 8008856:	4650      	mov	r0, sl
 8008858:	f7f8 f922 	bl	8000aa0 <__addsf3>
 800885c:	4601      	mov	r1, r0
 800885e:	9806      	ldr	r0, [sp, #24]
 8008860:	f7f8 fada 	bl	8000e18 <__aeabi_fdiv>
      dt += time_var; // Add computed ramp time to total segment time.
 8008864:	4601      	mov	r1, r0
 8008866:	4620      	mov	r0, r4
 8008868:	f7f8 f91a 	bl	8000aa0 <__addsf3>
 800886c:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800886e:	4601      	mov	r1, r0
 8008870:	4630      	mov	r0, r6
 8008872:	f7f8 fbd9 	bl	8001028 <__aeabi_fcmpgt>
 8008876:	2800      	cmp	r0, #0
 8008878:	f040 8207 	bne.w	8008c8a <st_prep_buffer+0x57a>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 800887c:	9f02      	ldr	r7, [sp, #8]
 800887e:	9904      	ldr	r1, [sp, #16]
 8008880:	4638      	mov	r0, r7
 8008882:	f7f8 fbd1 	bl	8001028 <__aeabi_fcmpgt>
 8008886:	2800      	cmp	r0, #0
 8008888:	f000 83cc 	beq.w	8009024 <st_prep_buffer+0x914>
          dt_max += DT_SEGMENT;
 800888c:	4630      	mov	r0, r6
 800888e:	49a0      	ldr	r1, [pc, #640]	; (8008b10 <st_prep_buffer+0x400>)
 8008890:	f7f8 f906 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008894:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008896:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8008898:	f7f8 f900 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800889c:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 800889e:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7f8 fbc1 	bl	8001028 <__aeabi_fcmpgt>
 80088a6:	46bb      	mov	fp, r7
 80088a8:	2800      	cmp	r0, #0
 80088aa:	f000 81fc 	beq.w	8008ca6 <st_prep_buffer+0x596>
            prep.ramp_type = RAMP_CRUISE;
 80088ae:	2301      	movs	r3, #1
            prep.current_speed = prep.maximum_speed;
 80088b0:	4657      	mov	r7, sl
            prep.ramp_type = RAMP_CRUISE;
 80088b2:	9303      	str	r3, [sp, #12]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 80088b4:	4629      	mov	r1, r5
 80088b6:	4650      	mov	r0, sl
 80088b8:	f7f8 f9fa 	bl	8000cb0 <__aeabi_fmul>
 80088bc:	4601      	mov	r1, r0
 80088be:	4658      	mov	r0, fp
 80088c0:	f7f8 f8ec 	bl	8000a9c <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 80088c4:	9905      	ldr	r1, [sp, #20]
            mm_remaining = mm_var;
 80088c6:	46d9      	mov	r9, fp
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 80088c8:	4683      	mov	fp, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 80088ca:	f7f8 fb8f 	bl	8000fec <__aeabi_fcmplt>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f000 81bd 	beq.w	8008c4e <st_prep_buffer+0x53e>
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 80088d4:	f8dd b014 	ldr.w	fp, [sp, #20]
 80088d8:	4648      	mov	r0, r9
 80088da:	4659      	mov	r1, fp
 80088dc:	f7f8 f8de 	bl	8000a9c <__aeabi_fsub>
 80088e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088e2:	f7f8 f9e5 	bl	8000cb0 <__aeabi_fmul>
      dt += time_var; // Add computed ramp time to total segment time.
 80088e6:	4601      	mov	r1, r0
 80088e8:	4620      	mov	r0, r4
 80088ea:	f7f8 f8d9 	bl	8000aa0 <__addsf3>
 80088ee:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80088f0:	4601      	mov	r1, r0
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7f8 fb98 	bl	8001028 <__aeabi_fcmpgt>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	f040 81b5 	bne.w	8008c68 <st_prep_buffer+0x558>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 80088fe:	9904      	ldr	r1, [sp, #16]
 8008900:	4658      	mov	r0, fp
 8008902:	f7f8 fb91 	bl	8001028 <__aeabi_fcmpgt>
 8008906:	2800      	cmp	r0, #0
 8008908:	f000 81ba 	beq.w	8008c80 <st_prep_buffer+0x570>
          dt_max += DT_SEGMENT;
 800890c:	4630      	mov	r0, r6
 800890e:	4980      	ldr	r1, [pc, #512]	; (8008b10 <st_prep_buffer+0x400>)
 8008910:	f7f8 f8c6 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008914:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008916:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8008918:	f7f8 f8c0 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800891c:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 800891e:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008920:	4658      	mov	r0, fp
 8008922:	f7f8 fb81 	bl	8001028 <__aeabi_fcmpgt>
 8008926:	2800      	cmp	r0, #0
 8008928:	f000 81aa 	beq.w	8008c80 <st_prep_buffer+0x570>
 800892c:	2302      	movs	r3, #2
 800892e:	9303      	str	r3, [sp, #12]
            prep.ramp_type = RAMP_DECEL;
 8008930:	9301      	str	r3, [sp, #4]
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008932:	9b00      	ldr	r3, [sp, #0]
 8008934:	4628      	mov	r0, r5
 8008936:	6a19      	ldr	r1, [r3, #32]
 8008938:	f7f8 f9ba 	bl	8000cb0 <__aeabi_fmul>
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 800893c:	4639      	mov	r1, r7
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 800893e:	4681      	mov	r9, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008940:	f7f8 fb54 	bl	8000fec <__aeabi_fcmplt>
 8008944:	2800      	cmp	r0, #0
 8008946:	f000 8141 	beq.w	8008bcc <st_prep_buffer+0x4bc>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 800894a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800894e:	4648      	mov	r0, r9
 8008950:	f7f8 f9ae 	bl	8000cb0 <__aeabi_fmul>
 8008954:	4639      	mov	r1, r7
 8008956:	f7f8 f8a1 	bl	8000a9c <__aeabi_fsub>
 800895a:	4629      	mov	r1, r5
 800895c:	f7f8 f9a8 	bl	8000cb0 <__aeabi_fmul>
 8008960:	4659      	mov	r1, fp
 8008962:	f7f8 f89d 	bl	8000aa0 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008966:	4641      	mov	r1, r8
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008968:	900b      	str	r0, [sp, #44]	; 0x2c
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 800896a:	f7f8 fb5d 	bl	8001028 <__aeabi_fcmpgt>
 800896e:	2800      	cmp	r0, #0
 8008970:	f000 812c 	beq.w	8008bcc <st_prep_buffer+0x4bc>
              prep.current_speed -= speed_var;
 8008974:	4638      	mov	r0, r7
 8008976:	4649      	mov	r1, r9
 8008978:	f7f8 f890 	bl	8000a9c <__aeabi_fsub>
 800897c:	4607      	mov	r7, r0
              mm_remaining = mm_var;
 800897e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
      dt += time_var; // Add computed ramp time to total segment time.
 8008982:	4629      	mov	r1, r5
 8008984:	4620      	mov	r0, r4
 8008986:	f7f8 f88b 	bl	8000aa0 <__addsf3>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800898a:	4631      	mov	r1, r6
      dt += time_var; // Add computed ramp time to total segment time.
 800898c:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800898e:	f7f8 fb2d 	bl	8000fec <__aeabi_fcmplt>
 8008992:	2800      	cmp	r0, #0
 8008994:	f47f af3a 	bne.w	800880c <st_prep_buffer+0xfc>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008998:	4659      	mov	r1, fp
 800899a:	9804      	ldr	r0, [sp, #16]
 800899c:	f7f8 fb26 	bl	8000fec <__aeabi_fcmplt>
 80089a0:	b178      	cbz	r0, 80089c2 <st_prep_buffer+0x2b2>
          dt_max += DT_SEGMENT;
 80089a2:	4630      	mov	r0, r6
 80089a4:	495a      	ldr	r1, [pc, #360]	; (8008b10 <st_prep_buffer+0x400>)
 80089a6:	f7f8 f87b 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 80089aa:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 80089ac:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 80089ae:	f7f8 f875 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80089b2:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 80089b4:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80089b6:	4658      	mov	r0, fp
 80089b8:	f7f8 fb36 	bl	8001028 <__aeabi_fcmpgt>
 80089bc:	2800      	cmp	r0, #0
 80089be:	f47f af31 	bne.w	8008824 <st_prep_buffer+0x114>
 80089c2:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80089c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80089ca:	f8ca 701c 	str.w	r7, [sl, #28]
 80089ce:	f88a 3014 	strb.w	r3, [sl, #20]
      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 80089d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	7d9b      	ldrb	r3, [r3, #22]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f040 817a 	bne.w	8008cd2 <st_prep_buffer+0x5c2>
 80089de:	4b4d      	ldr	r3, [pc, #308]	; (8008b14 <st_prep_buffer+0x404>)
 80089e0:	f893 8004 	ldrb.w	r8, [r3, #4]
 80089e4:	f018 0f08 	tst.w	r8, #8
 80089e8:	f040 81bc 	bne.w	8008d64 <st_prep_buffer+0x654>
 80089ec:	f89a 0034 	ldrb.w	r0, [sl, #52]	; 0x34
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 80089f0:	9a07      	ldr	r2, [sp, #28]
 80089f2:	4b49      	ldr	r3, [pc, #292]	; (8008b18 <st_prep_buffer+0x408>)
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 80089f4:	f8da 100c 	ldr.w	r1, [sl, #12]
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 80089f8:	4413      	add	r3, r2
 80089fa:	7198      	strb	r0, [r3, #6]
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 80089fc:	4658      	mov	r0, fp
 80089fe:	f7f8 f957 	bl	8000cb0 <__aeabi_fmul>
 8008a02:	4606      	mov	r6, r0
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8008a04:	f002 f98e 	bl	800ad24 <ceilf>
 8008a08:	4605      	mov	r5, r0
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008a0a:	f8da 0008 	ldr.w	r0, [sl, #8]
 8008a0e:	f002 f989 	bl	800ad24 <ceilf>
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008a12:	4629      	mov	r1, r5
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008a14:	4607      	mov	r7, r0
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008a16:	f7f8 f841 	bl	8000a9c <__aeabi_fsub>
 8008a1a:	f7f8 fb4b 	bl	80010b4 <__aeabi_f2uiz>
 8008a1e:	4b3e      	ldr	r3, [pc, #248]	; (8008b18 <st_prep_buffer+0x408>)
 8008a20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a22:	fa1f f980 	uxth.w	r9, r0
 8008a26:	f823 9032 	strh.w	r9, [r3, r2, lsl #3]
    if (prep_segment->n_step == 0) {
 8008a2a:	f1b9 0f00 	cmp.w	r9, #0
 8008a2e:	d103      	bne.n	8008a38 <st_prep_buffer+0x328>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8008a30:	f018 0f02 	tst.w	r8, #2
 8008a34:	f040 83a1 	bne.w	800917a <st_prep_buffer+0xa6a>
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008a3e:	f7f8 f82f 	bl	8000aa0 <__addsf3>
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008a42:	4631      	mov	r1, r6
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008a44:	4604      	mov	r4, r0
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008a46:	4638      	mov	r0, r7
 8008a48:	f7f8 f828 	bl	8000a9c <__aeabi_fsub>
 8008a4c:	4601      	mov	r1, r0
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7f8 f9e2 	bl	8000e18 <__aeabi_fdiv>
 8008a54:	4604      	mov	r4, r0
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 8008a56:	4a31      	ldr	r2, [pc, #196]	; (8008b1c <st_prep_buffer+0x40c>)
 8008a58:	4b31      	ldr	r3, [pc, #196]	; (8008b20 <st_prep_buffer+0x410>)
 8008a5a:	6817      	ldr	r7, [r2, #0]
 8008a5c:	4831      	ldr	r0, [pc, #196]	; (8008b24 <st_prep_buffer+0x414>)
 8008a5e:	fba3 2307 	umull	r2, r3, r3, r7
 8008a62:	0c9b      	lsrs	r3, r3, #18
 8008a64:	fb00 f003 	mul.w	r0, r0, r3
 8008a68:	f7f8 f8ca 	bl	8000c00 <__aeabi_ui2f>
 8008a6c:	492e      	ldr	r1, [pc, #184]	; (8008b28 <st_prep_buffer+0x418>)
 8008a6e:	f7f8 f91f 	bl	8000cb0 <__aeabi_fmul>
 8008a72:	4621      	mov	r1, r4
 8008a74:	f7f8 f91c 	bl	8000cb0 <__aeabi_fmul>
 8008a78:	f002 f954 	bl	800ad24 <ceilf>
 8008a7c:	f7f8 fb1a 	bl	80010b4 <__aeabi_f2uiz>
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 8008a80:	4b2a      	ldr	r3, [pc, #168]	; (8008b2c <st_prep_buffer+0x41c>)
 8008a82:	fba3 3707 	umull	r3, r7, r3, r7
 8008a86:	ebb0 2f57 	cmp.w	r0, r7, lsr #9
 8008a8a:	f080 8137 	bcs.w	8008cfc <st_prep_buffer+0x5ec>
 8008a8e:	2200      	movs	r2, #0
 8008a90:	9907      	ldr	r1, [sp, #28]
 8008a92:	4b21      	ldr	r3, [pc, #132]	; (8008b18 <st_prep_buffer+0x408>)
 8008a94:	440b      	add	r3, r1
 8008a96:	715a      	strb	r2, [r3, #5]
 8008a98:	460a      	mov	r2, r1
 8008a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a9e:	4298      	cmp	r0, r3
 8008aa0:	bf28      	it	cs
 8008aa2:	4618      	movcs	r0, r3
    segment_buffer_head = segment_next_head;
 8008aa4:	4b22      	ldr	r3, [pc, #136]	; (8008b30 <st_prep_buffer+0x420>)
 8008aa6:	491c      	ldr	r1, [pc, #112]	; (8008b18 <st_prep_buffer+0x408>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	440a      	add	r2, r1
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008aac:	1c5f      	adds	r7, r3, #1
 8008aae:	b2ff      	uxtb	r7, r7
 8008ab0:	8050      	strh	r0, [r2, #2]
    segment_buffer_head = segment_next_head;
 8008ab2:	4a20      	ldr	r2, [pc, #128]	; (8008b34 <st_prep_buffer+0x424>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008ab4:	2f0a      	cmp	r7, #10
    segment_buffer_head = segment_next_head;
 8008ab6:	7013      	strb	r3, [r2, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008ab8:	f000 8131 	beq.w	8008d1e <st_prep_buffer+0x60e>
    pl_block->millimeters = mm_remaining;
 8008abc:	4b1e      	ldr	r3, [pc, #120]	; (8008b38 <st_prep_buffer+0x428>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008abe:	4a1c      	ldr	r2, [pc, #112]	; (8008b30 <st_prep_buffer+0x420>)
    pl_block->millimeters = mm_remaining;
 8008ac0:	681b      	ldr	r3, [r3, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008ac2:	7017      	strb	r7, [r2, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008ac4:	4631      	mov	r1, r6
    pl_block->millimeters = mm_remaining;
 8008ac6:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
    prep.steps_remaining = n_steps_remaining;
 8008aca:	f8ca 5008 	str.w	r5, [sl, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f7f7 ffe4 	bl	8000a9c <__aeabi_fsub>
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	f7f8 f8eb 	bl	8000cb0 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8008ada:	f8da 1018 	ldr.w	r1, [sl, #24]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008ade:	f8ca 0004 	str.w	r0, [sl, #4]
    if (mm_remaining == prep.mm_complete) {
 8008ae2:	4658      	mov	r0, fp
 8008ae4:	f7f8 fa78 	bl	8000fd8 <__aeabi_fcmpeq>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	f43f ae1b 	beq.w	8008724 <st_prep_buffer+0x14>
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 8008aee:	4658      	mov	r0, fp
 8008af0:	2100      	movs	r1, #0
 8008af2:	f7f8 fa99 	bl	8001028 <__aeabi_fcmpgt>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	f040 833f 	bne.w	800917a <st_prep_buffer+0xa6a>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8008afc:	f018 0304 	ands.w	r3, r8, #4
 8008b00:	f040 833b 	bne.w	800917a <st_prep_buffer+0xa6a>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 8008b04:	4a0c      	ldr	r2, [pc, #48]	; (8008b38 <st_prep_buffer+0x428>)
 8008b06:	6013      	str	r3, [r2, #0]
        plan_discard_current_block();
 8008b08:	f7fb fbd6 	bl	80042b8 <plan_discard_current_block>
 8008b0c:	e608      	b.n	8008720 <st_prep_buffer+0x10>
 8008b0e:	bf00      	nop
 8008b10:	392ec33e 	.word	0x392ec33e
 8008b14:	200010b0 	.word	0x200010b0
 8008b18:	20000aa0 	.word	0x20000aa0
 8008b1c:	20000004 	.word	0x20000004
 8008b20:	431bde83 	.word	0x431bde83
 8008b24:	000f4240 	.word	0x000f4240
 8008b28:	42700000 	.word	0x42700000
 8008b2c:	10624dd3 	.word	0x10624dd3
 8008b30:	20000af2 	.word	0x20000af2
 8008b34:	20000af0 	.word	0x20000af0
 8008b38:	20000a64 	.word	0x20000a64
            prep.current_speed += speed_var;
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f7f7 ffae 	bl	8000aa0 <__addsf3>
      dt += time_var; // Add computed ramp time to total segment time.
 8008b44:	4629      	mov	r1, r5
            prep.current_speed += speed_var;
 8008b46:	4607      	mov	r7, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f7f7 ffa9 	bl	8000aa0 <__addsf3>
 8008b4e:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008b50:	4601      	mov	r1, r0
 8008b52:	4630      	mov	r0, r6
 8008b54:	f7f8 fa68 	bl	8001028 <__aeabi_fcmpgt>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	f43f af1d 	beq.w	8008998 <st_prep_buffer+0x288>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7f7 ff9b 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008b66:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008b68:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008b6a:	4658      	mov	r0, fp
 8008b6c:	f7f8 fa5c 	bl	8001028 <__aeabi_fcmpgt>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f43f af26 	beq.w	80089c2 <st_prep_buffer+0x2b2>
          speed_var = pl_block->acceleration*time_var;
 8008b76:	9b00      	ldr	r3, [sp, #0]
 8008b78:	4628      	mov	r0, r5
 8008b7a:	6a19      	ldr	r1, [r3, #32]
 8008b7c:	f7f8 f898 	bl	8000cb0 <__aeabi_fmul>
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008b80:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
          speed_var = pl_block->acceleration*time_var;
 8008b84:	4681      	mov	r9, r0
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008b86:	f7f8 f893 	bl	8000cb0 <__aeabi_fmul>
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	f7f7 ff88 	bl	8000aa0 <__addsf3>
 8008b90:	4629      	mov	r1, r5
 8008b92:	f7f8 f88d 	bl	8000cb0 <__aeabi_fmul>
 8008b96:	4601      	mov	r1, r0
 8008b98:	4658      	mov	r0, fp
 8008b9a:	f7f7 ff7f 	bl	8000a9c <__aeabi_fsub>
 8008b9e:	4683      	mov	fp, r0
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8008ba0:	4601      	mov	r1, r0
 8008ba2:	9802      	ldr	r0, [sp, #8]
 8008ba4:	f7f8 fa40 	bl	8001028 <__aeabi_fcmpgt>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d0c7      	beq.n	8008b3c <st_prep_buffer+0x42c>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008bac:	4639      	mov	r1, r7
 8008bae:	4650      	mov	r0, sl
 8008bb0:	f7f7 ff76 	bl	8000aa0 <__addsf3>
 8008bb4:	4601      	mov	r1, r0
 8008bb6:	9806      	ldr	r0, [sp, #24]
 8008bb8:	f7f8 f92e 	bl	8000e18 <__aeabi_fdiv>
 8008bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bbe:	4605      	mov	r5, r0
            prep.current_speed = prep.maximum_speed;
 8008bc0:	4657      	mov	r7, sl
 8008bc2:	9303      	str	r3, [sp, #12]
 8008bc4:	9301      	str	r3, [sp, #4]
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8008bc6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008bca:	e6da      	b.n	8008982 <st_prep_buffer+0x272>
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008bcc:	4658      	mov	r0, fp
 8008bce:	4641      	mov	r1, r8
 8008bd0:	f7f7 ff64 	bl	8000a9c <__aeabi_fsub>
 8008bd4:	4601      	mov	r1, r0
 8008bd6:	f7f7 ff63 	bl	8000aa0 <__addsf3>
 8008bda:	4639      	mov	r1, r7
 8008bdc:	9f08      	ldr	r7, [sp, #32]
 8008bde:	4605      	mov	r5, r0
 8008be0:	4638      	mov	r0, r7
 8008be2:	f7f7 ff5d 	bl	8000aa0 <__addsf3>
 8008be6:	4601      	mov	r1, r0
 8008be8:	4628      	mov	r0, r5
 8008bea:	f7f8 f915 	bl	8000e18 <__aeabi_fdiv>
          mm_remaining = prep.mm_complete;
 8008bee:	46c3      	mov	fp, r8
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	e6c6      	b.n	8008982 <st_prep_buffer+0x272>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8008bf4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008bf8:	4648      	mov	r0, r9
 8008bfa:	f7f8 f859 	bl	8000cb0 <__aeabi_fmul>
 8008bfe:	4639      	mov	r1, r7
 8008c00:	f7f7 ff4c 	bl	8000a9c <__aeabi_fsub>
 8008c04:	4629      	mov	r1, r5
 8008c06:	f7f8 f853 	bl	8000cb0 <__aeabi_fmul>
 8008c0a:	4601      	mov	r1, r0
 8008c0c:	4658      	mov	r0, fp
 8008c0e:	f7f7 ff47 	bl	8000aa0 <__addsf3>
            prep.current_speed -= speed_var;
 8008c12:	4649      	mov	r1, r9
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8008c14:	4683      	mov	fp, r0
            prep.current_speed -= speed_var;
 8008c16:	4638      	mov	r0, r7
 8008c18:	f7f7 ff40 	bl	8000a9c <__aeabi_fsub>
      dt += time_var; // Add computed ramp time to total segment time.
 8008c1c:	4629      	mov	r1, r5
            prep.current_speed -= speed_var;
 8008c1e:	4607      	mov	r7, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008c20:	4620      	mov	r0, r4
 8008c22:	f7f7 ff3d 	bl	8000aa0 <__addsf3>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c26:	4631      	mov	r1, r6
      dt += time_var; // Add computed ramp time to total segment time.
 8008c28:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c2a:	f7f8 f9df 	bl	8000fec <__aeabi_fcmplt>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	f43f aeb2 	beq.w	8008998 <st_prep_buffer+0x288>
 8008c34:	4621      	mov	r1, r4
 8008c36:	4630      	mov	r0, r6
 8008c38:	f7f7 ff30 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c3c:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c3e:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c40:	4658      	mov	r0, fp
 8008c42:	f7f8 f9f1 	bl	8001028 <__aeabi_fcmpgt>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	f47f adf3 	bne.w	8008832 <st_prep_buffer+0x122>
 8008c4c:	e6b9      	b.n	80089c2 <st_prep_buffer+0x2b2>
      dt += time_var; // Add computed ramp time to total segment time.
 8008c4e:	4629      	mov	r1, r5
 8008c50:	4620      	mov	r0, r4
 8008c52:	f7f7 ff25 	bl	8000aa0 <__addsf3>
 8008c56:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c58:	4601      	mov	r1, r0
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7f8 f9e4 	bl	8001028 <__aeabi_fcmpgt>
 8008c60:	bb38      	cbnz	r0, 8008cb2 <st_prep_buffer+0x5a2>
 8008c62:	2301      	movs	r3, #1
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	e697      	b.n	8008998 <st_prep_buffer+0x288>
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7f7 ff16 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c70:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c72:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c74:	4658      	mov	r0, fp
 8008c76:	f7f8 f9d7 	bl	8001028 <__aeabi_fcmpgt>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f47f ae56 	bne.w	800892c <st_prep_buffer+0x21c>
            prep.ramp_type = RAMP_DECEL;
 8008c80:	2302      	movs	r3, #2
 8008c82:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8008c86:	9303      	str	r3, [sp, #12]
 8008c88:	e69d      	b.n	80089c6 <st_prep_buffer+0x2b6>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f7f7 ff05 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c92:	f8dd b008 	ldr.w	fp, [sp, #8]
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c96:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c98:	4641      	mov	r1, r8
 8008c9a:	4658      	mov	r0, fp
 8008c9c:	f7f8 f9c4 	bl	8001028 <__aeabi_fcmpgt>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	f47f ae04 	bne.w	80088ae <st_prep_buffer+0x19e>
            prep.ramp_type = RAMP_CRUISE;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
            prep.current_speed = prep.maximum_speed;
 8008cac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
            prep.ramp_type = RAMP_CRUISE;
 8008cae:	9303      	str	r3, [sp, #12]
 8008cb0:	e689      	b.n	80089c6 <st_prep_buffer+0x2b6>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f7f7 fef1 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008cba:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008cbc:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008cbe:	4658      	mov	r0, fp
 8008cc0:	f7f8 f9b2 	bl	8001028 <__aeabi_fcmpgt>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f47f adf5 	bne.w	80088b4 <st_prep_buffer+0x1a4>
 8008cca:	e67a      	b.n	80089c2 <st_prep_buffer+0x2b2>
 8008ccc:	f04f 0301 	mov.w	r3, #1
 8008cd0:	e57f      	b.n	80087d2 <st_prep_buffer+0xc2>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8008cd2:	9b00      	ldr	r3, [sp, #0]
 8008cd4:	7d9b      	ldrb	r3, [r3, #22]
 8008cd6:	f013 0f30 	tst.w	r3, #48	; 0x30
 8008cda:	d15c      	bne.n	8008d96 <st_prep_buffer+0x686>
 8008cdc:	4bb2      	ldr	r3, [pc, #712]	; (8008fa8 <st_prep_buffer+0x898>)
 8008cde:	f893 8004 	ldrb.w	r8, [r3, #4]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008ce2:	2300      	movs	r3, #0
          sys.spindle_speed = 0.0;
 8008ce4:	2100      	movs	r1, #0
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008ce6:	4618      	mov	r0, r3
          sys.spindle_speed = 0.0;
 8008ce8:	4aaf      	ldr	r2, [pc, #700]	; (8008fa8 <st_prep_buffer+0x898>)
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008cea:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
          sys.spindle_speed = 0.0;
 8008cee:	6111      	str	r1, [r2, #16]
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8008cf0:	4bad      	ldr	r3, [pc, #692]	; (8008fa8 <st_prep_buffer+0x898>)
 8008cf2:	f008 08f7 	and.w	r8, r8, #247	; 0xf7
 8008cf6:	f883 8004 	strb.w	r8, [r3, #4]
 8008cfa:	e679      	b.n	80089f0 <st_prep_buffer+0x2e0>
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 8008cfc:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
 8008d00:	d240      	bcs.n	8008d84 <st_prep_buffer+0x674>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4aa9      	ldr	r2, [pc, #676]	; (8008fac <st_prep_buffer+0x89c>)
 8008d06:	9907      	ldr	r1, [sp, #28]
 8008d08:	440a      	add	r2, r1
 8008d0a:	7153      	strb	r3, [r2, #5]
        prep_segment->n_step <<= prep_segment->amass_level;
 8008d0c:	4aa7      	ldr	r2, [pc, #668]	; (8008fac <st_prep_buffer+0x89c>)
 8008d0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d10:	fa09 f903 	lsl.w	r9, r9, r3
 8008d14:	f822 9031 	strh.w	r9, [r2, r1, lsl #3]
        cycles >>= prep_segment->amass_level;
 8008d18:	40d8      	lsrs	r0, r3
 8008d1a:	9a07      	ldr	r2, [sp, #28]
 8008d1c:	e6bd      	b.n	8008a9a <st_prep_buffer+0x38a>
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d1e:	2200      	movs	r2, #0
    pl_block->millimeters = mm_remaining;
 8008d20:	4ba3      	ldr	r3, [pc, #652]	; (8008fb0 <st_prep_buffer+0x8a0>)
    prep.steps_remaining = n_steps_remaining;
 8008d22:	f8ca 5008 	str.w	r5, [sl, #8]
    pl_block->millimeters = mm_remaining;
 8008d26:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d28:	4628      	mov	r0, r5
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d2a:	4da2      	ldr	r5, [pc, #648]	; (8008fb4 <st_prep_buffer+0x8a4>)
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d2c:	4631      	mov	r1, r6
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d2e:	702a      	strb	r2, [r5, #0]
    pl_block->millimeters = mm_remaining;
 8008d30:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d34:	f7f7 feb2 	bl	8000a9c <__aeabi_fsub>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	f7f7 ffb9 	bl	8000cb0 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8008d3e:	4659      	mov	r1, fp
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d40:	f8ca 0004 	str.w	r0, [sl, #4]
    if (mm_remaining == prep.mm_complete) {
 8008d44:	f8da 0018 	ldr.w	r0, [sl, #24]
 8008d48:	f7f8 f946 	bl	8000fd8 <__aeabi_fcmpeq>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f47f aece 	bne.w	8008aee <st_prep_buffer+0x3de>
 8008d52:	4607      	mov	r7, r0
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8008d54:	4b98      	ldr	r3, [pc, #608]	; (8008fb8 <st_prep_buffer+0x8a8>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	42bb      	cmp	r3, r7
 8008d5a:	f47f ace8 	bne.w	800872e <st_prep_buffer+0x1e>
}
 8008d5e:	b011      	add	sp, #68	; 0x44
 8008d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8008d64:	9b00      	ldr	r3, [sp, #0]
 8008d66:	7d9b      	ldrb	r3, [r3, #22]
 8008d68:	f013 0f30 	tst.w	r3, #48	; 0x30
 8008d6c:	d0b9      	beq.n	8008ce2 <st_prep_buffer+0x5d2>
          float rpm = pl_block->spindle_speed;
 8008d6e:	9b00      	ldr	r3, [sp, #0]
 8008d70:	6b58      	ldr	r0, [r3, #52]	; 0x34
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8008d72:	f7fe ffab 	bl	8007ccc <spindle_compute_pwm_value>
 8008d76:	4b8c      	ldr	r3, [pc, #560]	; (8008fa8 <st_prep_buffer+0x898>)
 8008d78:	b2c0      	uxtb	r0, r0
 8008d7a:	f88a 0034 	strb.w	r0, [sl, #52]	; 0x34
 8008d7e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8008d82:	e7b5      	b.n	8008cf0 <st_prep_buffer+0x5e0>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 8008d84:	ebb0 1fd7 	cmp.w	r0, r7, lsr #7
 8008d88:	d25d      	bcs.n	8008e46 <st_prep_buffer+0x736>
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	4a87      	ldr	r2, [pc, #540]	; (8008fac <st_prep_buffer+0x89c>)
 8008d8e:	9907      	ldr	r1, [sp, #28]
 8008d90:	440a      	add	r2, r1
 8008d92:	7153      	strb	r3, [r2, #5]
 8008d94:	e7ba      	b.n	8008d0c <st_prep_buffer+0x5fc>
          float rpm = pl_block->spindle_speed;
 8008d96:	9b00      	ldr	r3, [sp, #0]
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8008d98:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
          float rpm = pl_block->spindle_speed;
 8008d9c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8008d9e:	f8da 001c 	ldr.w	r0, [sl, #28]
 8008da2:	f7f7 ff85 	bl	8000cb0 <__aeabi_fmul>
 8008da6:	4629      	mov	r1, r5
 8008da8:	f7f7 ff82 	bl	8000cb0 <__aeabi_fmul>
 8008dac:	e7e1      	b.n	8008d72 <st_prep_buffer+0x662>
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8008dae:	4b7e      	ldr	r3, [pc, #504]	; (8008fa8 <st_prep_buffer+0x898>)
 8008db0:	791b      	ldrb	r3, [r3, #4]
 8008db2:	075c      	lsls	r4, r3, #29
 8008db4:	d54e      	bpl.n	8008e54 <st_prep_buffer+0x744>
 8008db6:	f7fb fa99 	bl	80042ec <plan_get_system_motion_block>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	4b7c      	ldr	r3, [pc, #496]	; (8008fb0 <st_prep_buffer+0x8a0>)
 8008dbe:	9000      	str	r0, [sp, #0]
 8008dc0:	6018      	str	r0, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8008dc2:	2a00      	cmp	r2, #0
 8008dc4:	d0cb      	beq.n	8008d5e <st_prep_buffer+0x64e>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8008dc6:	f8df a204 	ldr.w	sl, [pc, #516]	; 8008fcc <st_prep_buffer+0x8bc>
 8008dca:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8008dce:	f014 0101 	ands.w	r1, r4, #1
 8008dd2:	d046      	beq.n	8008e62 <st_prep_buffer+0x752>
          prep.recalculate_flag = false;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4974      	ldr	r1, [pc, #464]	; (8008fa8 <st_prep_buffer+0x898>)
 8008dd8:	f88a 3001 	strb.w	r3, [sl, #1]
 8008ddc:	790d      	ldrb	r5, [r1, #4]
 8008dde:	4b77      	ldr	r3, [pc, #476]	; (8008fbc <st_prep_buffer+0x8ac>)
 8008de0:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 8008de4:	f005 0602 	and.w	r6, r5, #2
 8008de8:	930e      	str	r3, [sp, #56]	; 0x38
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008dea:	2200      	movs	r2, #0
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8008dec:	9b00      	ldr	r3, [sp, #0]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008dee:	f8ca 2018 	str.w	r2, [sl, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8008df2:	6a1f      	ldr	r7, [r3, #32]
 8008df4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008df8:	4639      	mov	r1, r7
 8008dfa:	f7f8 f80d 	bl	8000e18 <__aeabi_fdiv>
 8008dfe:	4604      	mov	r4, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8008e00:	2e00      	cmp	r6, #0
 8008e02:	f000 808e 	beq.w	8008f22 <st_prep_buffer+0x812>
				prep.ramp_type = RAMP_DECEL;
 8008e06:	f04f 0802 	mov.w	r8, #2
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8008e0a:	9b00      	ldr	r3, [sp, #0]
				prep.ramp_type = RAMP_DECEL;
 8008e0c:	f88a 8014 	strb.w	r8, [sl, #20]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8008e10:	699c      	ldr	r4, [r3, #24]
 8008e12:	4621      	mov	r1, r4
 8008e14:	f7f7 ff4c 	bl	8000cb0 <__aeabi_fmul>
 8008e18:	4601      	mov	r1, r0
 8008e1a:	4658      	mov	r0, fp
 8008e1c:	f7f7 fe3e 	bl	8000a9c <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 8008e20:	2100      	movs	r1, #0
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8008e22:	4606      	mov	r6, r0
				if (decel_dist < 0.0f) {
 8008e24:	f7f8 f8e2 	bl	8000fec <__aeabi_fcmplt>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	f040 814a 	bne.w	80090c2 <st_prep_buffer+0x9b2>
					prep.exit_speed = 0.0f;
 8008e2e:	2300      	movs	r3, #0
					prep.mm_complete = decel_dist; // End of feed hold.
 8008e30:	f8ca 6018 	str.w	r6, [sl, #24]
					prep.exit_speed = 0.0f;
 8008e34:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
 8008e38:	f8cd 8004 	str.w	r8, [sp, #4]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8008e3c:	4b5a      	ldr	r3, [pc, #360]	; (8008fa8 <st_prep_buffer+0x898>)
 8008e3e:	f045 0508 	orr.w	r5, r5, #8
 8008e42:	711d      	strb	r5, [r3, #4]
 8008e44:	e482      	b.n	800874c <st_prep_buffer+0x3c>
        else { prep_segment->amass_level = 3; }
 8008e46:	2203      	movs	r2, #3
 8008e48:	4958      	ldr	r1, [pc, #352]	; (8008fac <st_prep_buffer+0x89c>)
 8008e4a:	9f07      	ldr	r7, [sp, #28]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	4439      	add	r1, r7
 8008e50:	714a      	strb	r2, [r1, #5]
 8008e52:	e75b      	b.n	8008d0c <st_prep_buffer+0x5fc>
      else { pl_block = plan_get_current_block(); }
 8008e54:	f7fb fa56 	bl	8004304 <plan_get_current_block>
 8008e58:	4b55      	ldr	r3, [pc, #340]	; (8008fb0 <st_prep_buffer+0x8a0>)
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	9000      	str	r0, [sp, #0]
 8008e5e:	6018      	str	r0, [r3, #0]
 8008e60:	e7af      	b.n	8008dc2 <st_prep_buffer+0x6b2>
  block_index++;
 8008e62:	f89a 2000 	ldrb.w	r2, [sl]
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8008e66:	4b56      	ldr	r3, [pc, #344]	; (8008fc0 <st_prep_buffer+0x8b0>)
  block_index++;
 8008e68:	3201      	adds	r2, #1
 8008e6a:	b2d2      	uxtb	r2, r2
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8008e6c:	2a09      	cmp	r2, #9
 8008e6e:	f000 8119 	beq.w	80090a4 <st_prep_buffer+0x994>
 8008e72:	4611      	mov	r1, r2
 8008e74:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8008e78:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008e7c:	9e00      	ldr	r6, [sp, #0]
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 8008e7e:	f88a 2000 	strb.w	r2, [sl]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008e82:	4635      	mov	r5, r6
 8008e84:	6830      	ldr	r0, [r6, #0]
 8008e86:	6872      	ldr	r2, [r6, #4]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008e88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008e8c:	00c0      	lsls	r0, r0, #3
 8008e8e:	68ad      	ldr	r5, [r5, #8]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008e90:	8ab6      	ldrh	r6, [r6, #20]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008e92:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
 8008e96:	9800      	ldr	r0, [sp, #0]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008e98:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008e9c:	00d2      	lsls	r2, r2, #3
 8008e9e:	68c1      	ldr	r1, [r0, #12]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008ea0:	6900      	ldr	r0, [r0, #16]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008ea2:	605a      	str	r2, [r3, #4]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008ea4:	4a45      	ldr	r2, [pc, #276]	; (8008fbc <st_prep_buffer+0x8ac>)
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008ea6:	829e      	strh	r6, [r3, #20]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008ea8:	4616      	mov	r6, r2
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008eaa:	00c9      	lsls	r1, r1, #3
 8008eac:	00ed      	lsls	r5, r5, #3
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008eae:	920e      	str	r2, [sp, #56]	; 0x38
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008eb0:	00c2      	lsls	r2, r0, #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008eb2:	609d      	str	r5, [r3, #8]
 8008eb4:	60d9      	str	r1, [r3, #12]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008eb6:	611a      	str	r2, [r3, #16]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008eb8:	6037      	str	r7, [r6, #0]
        prep.steps_remaining = (float)pl_block->step_event_count;
 8008eba:	f7f7 fea1 	bl	8000c00 <__aeabi_ui2f>
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008ebe:	9d00      	ldr	r5, [sp, #0]
        prep.steps_remaining = (float)pl_block->step_event_count;
 8008ec0:	f8ca 0008 	str.w	r0, [sl, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008ec4:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
 8008ec8:	4659      	mov	r1, fp
 8008eca:	f7f7 ffa5 	bl	8000e18 <__aeabi_fdiv>
 8008ece:	4601      	mov	r1, r0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008ed0:	483c      	ldr	r0, [pc, #240]	; (8008fc4 <st_prep_buffer+0x8b4>)
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008ed2:	f8ca 100c 	str.w	r1, [sl, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008ed6:	f7f7 ff9f 	bl	8000e18 <__aeabi_fdiv>
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008eda:	4b33      	ldr	r3, [pc, #204]	; (8008fa8 <st_prep_buffer+0x898>)
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008edc:	f8ca 0010 	str.w	r0, [sl, #16]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008ee0:	791d      	ldrb	r5, [r3, #4]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8008ee2:	2300      	movs	r3, #0
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008ee4:	f015 0602 	ands.w	r6, r5, #2
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8008ee8:	f8ca 3004 	str.w	r3, [sl, #4]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008eec:	d170      	bne.n	8008fd0 <st_prep_buffer+0x8c0>
 8008eee:	f014 0808 	ands.w	r8, r4, #8
 8008ef2:	d16d      	bne.n	8008fd0 <st_prep_buffer+0x8c0>
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8008ef4:	9b00      	ldr	r3, [sp, #0]
 8008ef6:	6998      	ldr	r0, [r3, #24]
 8008ef8:	f002 f82c 	bl	800af54 <sqrtf>
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008efc:	4b32      	ldr	r3, [pc, #200]	; (8008fc8 <st_prep_buffer+0x8b8>)
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8008efe:	f8ca 001c 	str.w	r0, [sl, #28]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008f02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
        st_prep_block->is_pwm_rate_adjusted = false;
 8008f06:	f887 8016 	strb.w	r8, [r7, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008f0a:	0799      	lsls	r1, r3, #30
 8008f0c:	d475      	bmi.n	8008ffa <st_prep_buffer+0x8ea>
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f8ca 3018 	str.w	r3, [sl, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8008f14:	9b00      	ldr	r3, [sp, #0]
 8008f16:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008f1a:	6a19      	ldr	r1, [r3, #32]
 8008f1c:	f7f7 ff7c 	bl	8000e18 <__aeabi_fdiv>
 8008f20:	4604      	mov	r4, r0
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8008f22:	2300      	movs	r3, #0
 8008f24:	f88a 3014 	strb.w	r3, [sl, #20]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8008f28:	076b      	lsls	r3, r5, #29
				prep.accelerate_until = pl_block->millimeters;
 8008f2a:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8008f2e:	f140 80bc 	bpl.w	80090aa <st_prep_buffer+0x99a>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 8008f32:	2300      	movs	r3, #0
 8008f34:	4698      	mov	r8, r3
 8008f36:	9800      	ldr	r0, [sp, #0]
 8008f38:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8008f3c:	f7fb fa1e 	bl	800437c <plan_compute_profile_nominal_speed>
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8008f40:	4601      	mov	r1, r0
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8008f42:	4681      	mov	r9, r0
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8008f44:	f7f7 feb4 	bl	8000cb0 <__aeabi_fmul>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8008f48:	4b19      	ldr	r3, [pc, #100]	; (8008fb0 <st_prep_buffer+0x8a0>)
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8008f4a:	4606      	mov	r6, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	699d      	ldr	r5, [r3, #24]
 8008f50:	9300      	str	r3, [sp, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8008f52:	4629      	mov	r1, r5
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8008f54:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8008f58:	f7f8 f848 	bl	8000fec <__aeabi_fcmplt>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d068      	beq.n	8009032 <st_prep_buffer+0x922>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f7f7 fd9a 	bl	8000a9c <__aeabi_fsub>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	f7f7 fea1 	bl	8000cb0 <__aeabi_fmul>
 8008f6e:	4659      	mov	r1, fp
 8008f70:	f7f7 fd96 	bl	8000aa0 <__addsf3>
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8008f74:	2100      	movs	r1, #0
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8008f76:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8008f7a:	f7f8 f841 	bl	8001000 <__aeabi_fcmple>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	f040 80c5 	bne.w	800910e <st_prep_buffer+0x9fe>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8008f84:	4641      	mov	r1, r8
 8008f86:	4630      	mov	r0, r6
 8008f88:	f7f7 fd88 	bl	8000a9c <__aeabi_fsub>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	f7f7 fe8f 	bl	8000cb0 <__aeabi_fmul>
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8008f92:	2303      	movs	r3, #3
 8008f94:	f88a 3014 	strb.w	r3, [sl, #20]
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <st_prep_buffer+0x898>)
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8008f9c:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
						prep.maximum_speed = nominal_speed;
 8008fa0:	f8ca 9020 	str.w	r9, [sl, #32]
 8008fa4:	791d      	ldrb	r5, [r3, #4]
 8008fa6:	e749      	b.n	8008e3c <st_prep_buffer+0x72c>
 8008fa8:	200010b0 	.word	0x200010b0
 8008fac:	20000aa0 	.word	0x20000aa0
 8008fb0:	20000a64 	.word	0x20000a64
 8008fb4:	20000af2 	.word	0x20000af2
 8008fb8:	20000af1 	.word	0x20000af1
 8008fbc:	20000c00 	.word	0x20000c00
 8008fc0:	20000b28 	.word	0x20000b28
 8008fc4:	3fa00000 	.word	0x3fa00000
 8008fc8:	2000126c 	.word	0x2000126c
 8008fcc:	20000a68 	.word	0x20000a68
          prep.current_speed = prep.exit_speed;
 8008fd0:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8008fd4:	f024 0408 	bic.w	r4, r4, #8
          prep.current_speed = prep.exit_speed;
 8008fd8:	f8ca 101c 	str.w	r1, [sl, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8008fdc:	4608      	mov	r0, r1
 8008fde:	f7f7 fe67 	bl	8000cb0 <__aeabi_fmul>
        st_prep_block->is_pwm_rate_adjusted = false;
 8008fe2:	2200      	movs	r2, #0
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8008fe4:	9900      	ldr	r1, [sp, #0]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008fe6:	4b72      	ldr	r3, [pc, #456]	; (80091b0 <st_prep_buffer+0xaa0>)
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8008fe8:	6188      	str	r0, [r1, #24]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008fea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8008fee:	f88a 4001 	strb.w	r4, [sl, #1]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008ff2:	0798      	lsls	r0, r3, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 8008ff4:	75ba      	strb	r2, [r7, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008ff6:	f57f aef8 	bpl.w	8008dea <st_prep_buffer+0x6da>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8008ffa:	9c00      	ldr	r4, [sp, #0]
 8008ffc:	7da3      	ldrb	r3, [r4, #22]
 8008ffe:	069a      	lsls	r2, r3, #26
 8009000:	f57f aef3 	bpl.w	8008dea <st_prep_buffer+0x6da>
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8009004:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009006:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800900a:	f7f7 ff05 	bl	8000e18 <__aeabi_fdiv>
            st_prep_block->is_pwm_rate_adjusted = true;
 800900e:	2301      	movs	r3, #1
 8009010:	75bb      	strb	r3, [r7, #22]
 8009012:	4b68      	ldr	r3, [pc, #416]	; (80091b4 <st_prep_buffer+0xaa4>)
 8009014:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8009018:	791d      	ldrb	r5, [r3, #4]
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 800901a:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
 800901e:	f005 0602 	and.w	r6, r5, #2
 8009022:	e6e2      	b.n	8008dea <st_prep_buffer+0x6da>
            prep.ramp_type = RAMP_CRUISE;
 8009024:	2301      	movs	r3, #1
 8009026:	46bb      	mov	fp, r7
 8009028:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
            prep.current_speed = prep.maximum_speed;
 800902c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
            prep.ramp_type = RAMP_CRUISE;
 800902e:	9303      	str	r3, [sp, #12]
 8009030:	e4c9      	b.n	80089c6 <st_prep_buffer+0x2b6>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8009032:	4641      	mov	r1, r8
 8009034:	4628      	mov	r0, r5
 8009036:	f7f7 fd31 	bl	8000a9c <__aeabi_fsub>
 800903a:	4621      	mov	r1, r4
 800903c:	f7f7 fe38 	bl	8000cb0 <__aeabi_fmul>
 8009040:	4659      	mov	r1, fp
 8009042:	f7f7 fd2d 	bl	8000aa0 <__addsf3>
				float intersect_distance =
 8009046:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800904a:	f7f7 fe31 	bl	8000cb0 <__aeabi_fmul>
				} else if (intersect_distance > 0.0f) {
 800904e:	2100      	movs	r1, #0
				float intersect_distance =
 8009050:	4607      	mov	r7, r0
				} else if (intersect_distance > 0.0f) {
 8009052:	f7f7 ffe9 	bl	8001028 <__aeabi_fcmpgt>
 8009056:	2800      	cmp	r0, #0
 8009058:	d04c      	beq.n	80090f4 <st_prep_buffer+0x9e4>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 800905a:	4639      	mov	r1, r7
 800905c:	4658      	mov	r0, fp
 800905e:	f7f7 ffe3 	bl	8001028 <__aeabi_fcmpgt>
 8009062:	2800      	cmp	r0, #0
 8009064:	d03f      	beq.n	80090e6 <st_prep_buffer+0x9d6>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 8009066:	4641      	mov	r1, r8
 8009068:	4630      	mov	r0, r6
 800906a:	f7f7 fd17 	bl	8000a9c <__aeabi_fsub>
 800906e:	4621      	mov	r1, r4
 8009070:	f7f7 fe1e 	bl	8000cb0 <__aeabi_fmul>
 8009074:	4601      	mov	r1, r0
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 8009076:	4638      	mov	r0, r7
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 8009078:	f8ca 102c 	str.w	r1, [sl, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 800907c:	f7f7 ffd4 	bl	8001028 <__aeabi_fcmpgt>
 8009080:	2800      	cmp	r0, #0
 8009082:	d061      	beq.n	8009148 <st_prep_buffer+0xa38>
							prep.maximum_speed = nominal_speed;
 8009084:	f8ca 9020 	str.w	r9, [sl, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8009088:	4629      	mov	r1, r5
 800908a:	4630      	mov	r0, r6
 800908c:	f7f7 ffa4 	bl	8000fd8 <__aeabi_fcmpeq>
 8009090:	2800      	cmp	r0, #0
 8009092:	d07a      	beq.n	800918a <st_prep_buffer+0xa7a>
								prep.ramp_type = RAMP_CRUISE;
 8009094:	2301      	movs	r3, #1
 8009096:	4a47      	ldr	r2, [pc, #284]	; (80091b4 <st_prep_buffer+0xaa4>)
 8009098:	f88a 3014 	strb.w	r3, [sl, #20]
 800909c:	7915      	ldrb	r5, [r2, #4]
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	e6cc      	b.n	8008e3c <st_prep_buffer+0x72c>
 80090a2:	4770      	bx	lr
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 80090a4:	460a      	mov	r2, r1
 80090a6:	461f      	mov	r7, r3
 80090a8:	e6e8      	b.n	8008e7c <st_prep_buffer+0x76c>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 80090aa:	f7fb f93f 	bl	800432c <plan_get_exec_block_exit_speed_sqr>
 80090ae:	4680      	mov	r8, r0
          prep.exit_speed = sqrtf(exit_speed_sqr);
 80090b0:	f001 ff50 	bl	800af54 <sqrtf>
 80090b4:	4b40      	ldr	r3, [pc, #256]	; (80091b8 <st_prep_buffer+0xaa8>)
 80090b6:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	4618      	mov	r0, r3
 80090c0:	e73c      	b.n	8008f3c <st_prep_buffer+0x82c>
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 80090c2:	4639      	mov	r1, r7
 80090c4:	4638      	mov	r0, r7
 80090c6:	f7f7 fceb 	bl	8000aa0 <__addsf3>
 80090ca:	4659      	mov	r1, fp
 80090cc:	f7f7 fdf0 	bl	8000cb0 <__aeabi_fmul>
 80090d0:	4601      	mov	r1, r0
 80090d2:	4620      	mov	r0, r4
 80090d4:	f7f7 fce2 	bl	8000a9c <__aeabi_fsub>
 80090d8:	f001 ff3c 	bl	800af54 <sqrtf>
 80090dc:	f8cd 8004 	str.w	r8, [sp, #4]
 80090e0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80090e4:	e6aa      	b.n	8008e3c <st_prep_buffer+0x72c>
            prep.ramp_type = RAMP_DECEL;
 80090e6:	2302      	movs	r3, #2
 80090e8:	4a32      	ldr	r2, [pc, #200]	; (80091b4 <st_prep_buffer+0xaa4>)
 80090ea:	f88a 3014 	strb.w	r3, [sl, #20]
 80090ee:	7915      	ldrb	r5, [r2, #4]
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	e6a3      	b.n	8008e3c <st_prep_buffer+0x72c>
 80090f4:	4a2f      	ldr	r2, [pc, #188]	; (80091b4 <st_prep_buffer+0xaa4>)
					prep.maximum_speed = prep.exit_speed;
 80090f6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80090fa:	7915      	ldrb	r5, [r2, #4]
 80090fc:	f89a 2014 	ldrb.w	r2, [sl, #20]
 8009100:	f8ca 3020 	str.w	r3, [sl, #32]
 8009104:	9201      	str	r2, [sp, #4]
					prep.accelerate_until = 0.0f;
 8009106:	2200      	movs	r2, #0
 8009108:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
 800910c:	e696      	b.n	8008e3c <st_prep_buffer+0x72c>
            prep.ramp_type = RAMP_DECEL;
 800910e:	2402      	movs	r4, #2
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009110:	9b00      	ldr	r3, [sp, #0]
            prep.ramp_type = RAMP_DECEL;
 8009112:	f88a 4014 	strb.w	r4, [sl, #20]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009116:	6a19      	ldr	r1, [r3, #32]
 8009118:	4658      	mov	r0, fp
 800911a:	f7f7 fdc9 	bl	8000cb0 <__aeabi_fmul>
 800911e:	4601      	mov	r1, r0
 8009120:	f7f7 fcbe 	bl	8000aa0 <__addsf3>
 8009124:	4601      	mov	r1, r0
 8009126:	4628      	mov	r0, r5
 8009128:	f7f7 fcb8 	bl	8000a9c <__aeabi_fsub>
 800912c:	f001 ff12 	bl	800af54 <sqrtf>
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8009130:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009134:	9401      	str	r4, [sp, #4]
 8009136:	f043 0308 	orr.w	r3, r3, #8
 800913a:	f88a 3001 	strb.w	r3, [sl, #1]
 800913e:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <st_prep_buffer+0xaa4>)
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009140:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8009144:	791d      	ldrb	r5, [r3, #4]
 8009146:	e679      	b.n	8008e3c <st_prep_buffer+0x72c>
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8009148:	9b00      	ldr	r3, [sp, #0]
 800914a:	6a19      	ldr	r1, [r3, #32]
							prep.accelerate_until = intersect_distance;
 800914c:	f8ca 7028 	str.w	r7, [sl, #40]	; 0x28
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8009150:	4608      	mov	r0, r1
							prep.decelerate_after = intersect_distance;
 8009152:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8009156:	f7f7 fca3 	bl	8000aa0 <__addsf3>
 800915a:	4639      	mov	r1, r7
 800915c:	f7f7 fda8 	bl	8000cb0 <__aeabi_fmul>
 8009160:	4641      	mov	r1, r8
 8009162:	f7f7 fc9d 	bl	8000aa0 <__addsf3>
 8009166:	f001 fef5 	bl	800af54 <sqrtf>
 800916a:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <st_prep_buffer+0xaa4>)
 800916c:	f8ca 0020 	str.w	r0, [sl, #32]
 8009170:	791d      	ldrb	r5, [r3, #4]
 8009172:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	e660      	b.n	8008e3c <st_prep_buffer+0x72c>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 800917a:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <st_prep_buffer+0xaa4>)
 800917c:	f048 0901 	orr.w	r9, r8, #1
 8009180:	f883 9004 	strb.w	r9, [r3, #4]
}
 8009184:	b011      	add	sp, #68	; 0x44
 8009186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 800918a:	4631      	mov	r1, r6
 800918c:	4628      	mov	r0, r5
 800918e:	f7f7 fc85 	bl	8000a9c <__aeabi_fsub>
 8009192:	4621      	mov	r1, r4
 8009194:	f7f7 fd8c 	bl	8000cb0 <__aeabi_fmul>
 8009198:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 800919c:	f7f7 fc80 	bl	8000aa0 <__addsf3>
 80091a0:	4b04      	ldr	r3, [pc, #16]	; (80091b4 <st_prep_buffer+0xaa4>)
 80091a2:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
 80091a6:	791d      	ldrb	r5, [r3, #4]
 80091a8:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	e645      	b.n	8008e3c <st_prep_buffer+0x72c>
 80091b0:	2000126c 	.word	0x2000126c
 80091b4:	200010b0 	.word	0x200010b0
 80091b8:	20000a64 	.word	0x20000a64

080091bc <st_get_realtime_rate>:
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 80091bc:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <st_get_realtime_rate+0x14>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 80091c4:	bf1a      	itte	ne
 80091c6:	4b03      	ldrne	r3, [pc, #12]	; (80091d4 <st_get_realtime_rate+0x18>)
 80091c8:	69d8      	ldrne	r0, [r3, #28]
  return 0.0f;
 80091ca:	2000      	moveq	r0, #0
}
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	200010b0 	.word	0x200010b0
 80091d4:	20000a68 	.word	0x20000a68

080091d8 <system_init>:

#include "grbl.h"


void system_init()
{
 80091d8:	b510      	push	{r4, lr}
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80091da:	2101      	movs	r1, #1
{
 80091dc:	b084      	sub	sp, #16
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80091de:	2009      	movs	r0, #9
 80091e0:	f7f8 fb2a 	bl	8001838 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 80091e4:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 80091e8:	2101      	movs	r1, #1
 80091ea:	481a      	ldr	r0, [pc, #104]	; (8009254 <system_init+0x7c>)
 80091ec:	f7f8 fad0 	bl	8001790 <GPIO_PinRemapConfig>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80091f0:	2203      	movs	r2, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80091f2:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 80091f4:	a904      	add	r1, sp, #16
 80091f6:	f821 4d10 	strh.w	r4, [r1, #-16]!
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 80091fa:	4817      	ldr	r0, [pc, #92]	; (8009258 <system_init+0x80>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80091fc:	f88d 2002 	strb.w	r2, [sp, #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8009200:	f88d 3003 	strb.w	r3, [sp, #3]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8009204:	f7f8 f8fc 	bl	8001400 <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 8009208:	2105      	movs	r1, #5
 800920a:	2001      	movs	r0, #1
 800920c:	f7f8 faf6 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 8009210:	2106      	movs	r1, #6
 8009212:	2001      	movs	r0, #1
 8009214:	f7f8 faf2 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 8009218:	2107      	movs	r1, #7
 800921a:	2001      	movs	r0, #1
 800921c:	f7f8 faee 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 8009220:	2108      	movs	r1, #8
 8009222:	2001      	movs	r0, #1
 8009224:	f7f8 faea 	bl	80017fc <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8009228:	2100      	movs	r1, #0
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 800922a:	2210      	movs	r2, #16
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800922c:	2301      	movs	r3, #1
  EXTI_Init(&EXTI_InitStructure);
 800922e:	a802      	add	r0, sp, #8
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8009230:	f88d 100c 	strb.w	r1, [sp, #12]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8009234:	f88d 200d 	strb.w	r2, [sp, #13]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009238:	f88d 300e 	strb.w	r3, [sp, #14]
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 800923c:	9402      	str	r4, [sp, #8]
  EXTI_Init(&EXTI_InitStructure);
 800923e:	f7f7 ff95 	bl	800116c <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 8009242:	4b06      	ldr	r3, [pc, #24]	; (800925c <system_init+0x84>)
 8009244:	a804      	add	r0, sp, #16
 8009246:	f840 3d0c 	str.w	r3, [r0, #-12]!
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
  NVIC_Init(&NVIC_InitStructure);
 800924a:	f7f7 ff5d 	bl	8001108 <NVIC_Init>
#endif
}
 800924e:	b004      	add	sp, #16
 8009250:	bd10      	pop	{r4, pc}
 8009252:	bf00      	nop
 8009254:	00300200 	.word	0x00300200
 8009258:	40010c00 	.word	0x40010c00
 800925c:	01020217 	.word	0x01020217

08009260 <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 8009260:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 8009262:	480a      	ldr	r0, [pc, #40]	; (800928c <system_control_get_state+0x2c>)
 8009264:	f7f8 fa82 	bl	800176c <GPIO_ReadInputData>
#endif
  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 8009268:	b168      	cbz	r0, 8009286 <system_control_get_state+0x26>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 800926a:	f080 0320 	eor.w	r3, r0, #32
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 800926e:	0641      	lsls	r1, r0, #25
  uint8_t control_state = 0;
 8009270:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8009274:	bf58      	it	pl
 8009276:	f043 0302 	orrpl.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 800927a:	0602      	lsls	r2, r0, #24
 800927c:	d401      	bmi.n	8009282 <system_control_get_state+0x22>
 800927e:	f043 0304 	orr.w	r3, r3, #4
  }
  return(control_state);
}
 8009282:	4618      	mov	r0, r3
 8009284:	bd08      	pop	{r3, pc}
  uint8_t control_state = 0;
 8009286:	4603      	mov	r3, r0
}
 8009288:	4618      	mov	r0, r3
 800928a:	bd08      	pop	{r3, pc}
 800928c:	40010c00 	.word	0x40010c00

08009290 <EXTI9_5_IRQHandler>:
  }
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
 8009290:	b508      	push	{r3, lr}
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 8009292:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8009296:	f7f7 ffb5 	bl	8001204 <EXTI_ClearITPendingBit>
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 800929a:	481b      	ldr	r0, [pc, #108]	; (8009308 <EXTI9_5_IRQHandler+0x78>)
 800929c:	f7f8 fa66 	bl	800176c <GPIO_ReadInputData>
  if (pin) {
 80092a0:	b1b8      	cbz	r0, 80092d2 <EXTI9_5_IRQHandler+0x42>
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80092a2:	f010 0220 	ands.w	r2, r0, #32
  uint8_t control_state = 0;
 80092a6:	bf0c      	ite	eq
 80092a8:	2301      	moveq	r3, #1
 80092aa:	2300      	movne	r3, #0
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80092ac:	0641      	lsls	r1, r0, #25
 80092ae:	d411      	bmi.n	80092d4 <EXTI9_5_IRQHandler+0x44>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80092b0:	0600      	lsls	r0, r0, #24
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80092b2:	f043 0302 	orr.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80092b6:	d419      	bmi.n	80092ec <EXTI9_5_IRQHandler+0x5c>
	uint8_t pin = system_control_get_state();
	if (pin) 
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
 80092b8:	07db      	lsls	r3, r3, #31
 80092ba:	d40f      	bmi.n	80092dc <EXTI9_5_IRQHandler+0x4c>
		{
			mc_reset();
		}
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_CYCLE_START))
		{
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 80092bc:	4a13      	ldr	r2, [pc, #76]	; (800930c <EXTI9_5_IRQHandler+0x7c>)
 80092be:	7813      	ldrb	r3, [r2, #0]
 80092c0:	f043 0302 	orr.w	r3, r3, #2
 80092c4:	7013      	strb	r3, [r2, #0]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 80092c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80092ca:	4b11      	ldr	r3, [pc, #68]	; (8009310 <EXTI9_5_IRQHandler+0x80>)
 80092cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
}
}
 80092d0:	bd08      	pop	{r3, pc}
 80092d2:	bd08      	pop	{r3, pc}
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80092d4:	0601      	lsls	r1, r0, #24
 80092d6:	d5ef      	bpl.n	80092b8 <EXTI9_5_IRQHandler+0x28>
	if (pin) 
 80092d8:	2a00      	cmp	r2, #0
 80092da:	d1fa      	bne.n	80092d2 <EXTI9_5_IRQHandler+0x42>
			mc_reset();
 80092dc:	f7fa fd04 	bl	8003ce8 <mc_reset>
 80092e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80092e4:	4b0a      	ldr	r3, [pc, #40]	; (8009310 <EXTI9_5_IRQHandler+0x80>)
 80092e6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 80092ea:	bd08      	pop	{r3, pc}
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
 80092ec:	2a00      	cmp	r2, #0
 80092ee:	d0f5      	beq.n	80092dc <EXTI9_5_IRQHandler+0x4c>
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 80092f0:	4a06      	ldr	r2, [pc, #24]	; (800930c <EXTI9_5_IRQHandler+0x7c>)
 80092f2:	7813      	ldrb	r3, [r2, #0]
 80092f4:	f043 0308 	orr.w	r3, r3, #8
 80092f8:	7013      	strb	r3, [r2, #0]
 80092fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80092fe:	4b04      	ldr	r3, [pc, #16]	; (8009310 <EXTI9_5_IRQHandler+0x80>)
 8009300:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8009304:	bd08      	pop	{r3, pc}
 8009306:	bf00      	nop
 8009308:	40010c00 	.word	0x40010c00
 800930c:	200010c5 	.word	0x200010c5
 8009310:	e000e100 	.word	0xe000e100

08009314 <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8009314:	2000      	movs	r0, #0
 8009316:	4770      	bx	lr

08009318 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4605      	mov	r5, r0
 800931c:	2400      	movs	r4, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 800931e:	4629      	mov	r1, r5
 8009320:	b2e0      	uxtb	r0, r4
 8009322:	f7fe f9cd 	bl	80076c0 <settings_read_startup_line>
 8009326:	b128      	cbz	r0, 8009334 <system_execute_startup+0x1c>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
    } else {
      if (line[0] != 0) {
 8009328:	782b      	ldrb	r3, [r5, #0]
 800932a:	b94b      	cbnz	r3, 8009340 <system_execute_startup+0x28>
 800932c:	3401      	adds	r4, #1
  for (n=0; n < N_STARTUP_LINE; n++) {
 800932e:	2c02      	cmp	r4, #2
 8009330:	d1f5      	bne.n	800931e <system_execute_startup+0x6>
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
      }
    }
  }
}
 8009332:	bd38      	pop	{r3, r4, r5, pc}
      line[0] = 0;
 8009334:	7028      	strb	r0, [r5, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 8009336:	2107      	movs	r1, #7
 8009338:	4628      	mov	r0, r5
 800933a:	f7fd fd81 	bl	8006e40 <report_execute_startup_message>
 800933e:	e7f5      	b.n	800932c <system_execute_startup+0x14>
        uint8_t status_code = gc_execute_line(line);
 8009340:	4628      	mov	r0, r5
 8009342:	f7f8 fcc7 	bl	8001cd4 <gc_execute_line>
        report_execute_startup_message(line,status_code);
 8009346:	4601      	mov	r1, r0
 8009348:	4628      	mov	r0, r5
 800934a:	f7fd fd79 	bl	8006e40 <report_execute_startup_message>
 800934e:	e7ed      	b.n	800932c <system_execute_startup+0x14>

08009350 <system_execute_line>:
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
  uint8_t char_counter = 1;
 8009350:	2301      	movs	r3, #1
{
 8009352:	b570      	push	{r4, r5, r6, lr}
  uint8_t helper_var = 0; // Helper variable
  float parameter, value;
  switch( line[char_counter] ) {
 8009354:	7844      	ldrb	r4, [r0, #1]
{
 8009356:	b084      	sub	sp, #16
  switch( line[char_counter] ) {
 8009358:	2c43      	cmp	r4, #67	; 0x43
{
 800935a:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 800935c:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 8009360:	d034      	beq.n	80093cc <system_execute_line+0x7c>
 8009362:	d939      	bls.n	80093d8 <system_execute_line+0x88>
 8009364:	2c4a      	cmp	r4, #74	; 0x4a
 8009366:	d108      	bne.n	800937a <system_execute_line+0x2a>
    case 0 : report_grbl_help(); break;
    case 'J' : // Jogging
      // Execute only if in IDLE or JOG states.
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 8009368:	4b93      	ldr	r3, [pc, #588]	; (80095b8 <system_execute_line+0x268>)
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8009370:	d039      	beq.n	80093e6 <system_execute_line+0x96>
                report_startup_line(helper_var,line);
              }
            }
            break;
          } else { // Store startup line [IDLE Only] Prevents motion during ALARM.
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8009372:	2408      	movs	r4, #8
            return(settings_store_global_setting((uint8_t)parameter, value));
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
}
 8009374:	4620      	mov	r0, r4
 8009376:	b004      	add	sp, #16
 8009378:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 800937a:	2c58      	cmp	r4, #88	; 0x58
 800937c:	d026      	beq.n	80093cc <system_execute_line+0x7c>
 800937e:	2c47      	cmp	r4, #71	; 0x47
 8009380:	d024      	beq.n	80093cc <system_execute_line+0x7c>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 8009382:	4e8d      	ldr	r6, [pc, #564]	; (80095b8 <system_execute_line+0x268>)
 8009384:	7833      	ldrb	r3, [r6, #0]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d8f3      	bhi.n	8009372 <system_execute_line+0x22>
      switch( line[1] ) {
 800938a:	3c23      	subs	r4, #35	; 0x23
 800938c:	2c30      	cmp	r4, #48	; 0x30
 800938e:	f200 80b6 	bhi.w	80094fe <system_execute_line+0x1ae>
 8009392:	e8df f004 	tbb	[pc, r4]
 8009396:	b4ad      	.short	0xb4ad
 8009398:	b4b4b4b4 	.word	0xb4b4b4b4
 800939c:	b4b4b4b4 	.word	0xb4b4b4b4
 80093a0:	b4b4b4b4 	.word	0xb4b4b4b4
 80093a4:	b4b4b4b4 	.word	0xb4b4b4b4
 80093a8:	b4b4b4b4 	.word	0xb4b4b4b4
 80093ac:	b4b4b4b4 	.word	0xb4b4b4b4
 80093b0:	b4b4b4b4 	.word	0xb4b4b4b4
 80093b4:	b4b4b4b4 	.word	0xb4b4b4b4
 80093b8:	a6b4b4b4 	.word	0xa6b4b4b4
 80093bc:	b4b4b48d 	.word	0xb4b4b48d
 80093c0:	b4b468b4 	.word	0xb4b468b4
 80093c4:	49b4      	.short	0x49b4
 80093c6:	7c          	.byte	0x7c
 80093c7:	00          	.byte	0x00
  switch( line[char_counter] ) {
 80093c8:	2c24      	cmp	r4, #36	; 0x24
 80093ca:	d1da      	bne.n	8009382 <system_execute_line+0x32>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 80093cc:	78ad      	ldrb	r5, [r5, #2]
 80093ce:	b18d      	cbz	r5, 80093f4 <system_execute_line+0xa4>
            default: return(STATUS_INVALID_STATEMENT);
 80093d0:	2403      	movs	r4, #3
}
 80093d2:	4620      	mov	r0, r4
 80093d4:	b004      	add	sp, #16
 80093d6:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 80093d8:	2c00      	cmp	r4, #0
 80093da:	d1f5      	bne.n	80093c8 <system_execute_line+0x78>
    case 0 : report_grbl_help(); break;
 80093dc:	f7fd f870 	bl	80064c0 <report_grbl_help>
}
 80093e0:	4620      	mov	r0, r4
 80093e2:	b004      	add	sp, #16
 80093e4:	bd70      	pop	{r4, r5, r6, pc}
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 80093e6:	7883      	ldrb	r3, [r0, #2]
 80093e8:	2b3d      	cmp	r3, #61	; 0x3d
 80093ea:	d1f1      	bne.n	80093d0 <system_execute_line+0x80>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 80093ec:	f7f8 fc72 	bl	8001cd4 <gc_execute_line>
 80093f0:	4604      	mov	r4, r0
 80093f2:	e7bf      	b.n	8009374 <system_execute_line+0x24>
      switch( line[1] ) {
 80093f4:	2c43      	cmp	r4, #67	; 0x43
 80093f6:	f000 80a0 	beq.w	800953a <system_execute_line+0x1ea>
 80093fa:	d90b      	bls.n	8009414 <system_execute_line+0xc4>
 80093fc:	2c47      	cmp	r4, #71	; 0x47
 80093fe:	f000 80a9 	beq.w	8009554 <system_execute_line+0x204>
 8009402:	2c58      	cmp	r4, #88	; 0x58
 8009404:	d104      	bne.n	8009410 <system_execute_line+0xc0>
          if (sys.state == STATE_ALARM) {
 8009406:	4e6c      	ldr	r6, [pc, #432]	; (80095b8 <system_execute_line+0x268>)
 8009408:	7833      	ldrb	r3, [r6, #0]
 800940a:	2b01      	cmp	r3, #1
 800940c:	f000 80a6 	beq.w	800955c <system_execute_line+0x20c>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009410:	2400      	movs	r4, #0
 8009412:	e7af      	b.n	8009374 <system_execute_line+0x24>
      switch( line[1] ) {
 8009414:	2c24      	cmp	r4, #36	; 0x24
 8009416:	d1fb      	bne.n	8009410 <system_execute_line+0xc0>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 8009418:	4b67      	ldr	r3, [pc, #412]	; (80095b8 <system_execute_line+0x268>)
 800941a:	781c      	ldrb	r4, [r3, #0]
 800941c:	f014 0418 	ands.w	r4, r4, #24
 8009420:	d1a7      	bne.n	8009372 <system_execute_line+0x22>
          else { report_grbl_settings(); }
 8009422:	f7fd f853 	bl	80064cc <report_grbl_settings>
          break;
 8009426:	e7a5      	b.n	8009374 <system_execute_line+0x24>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8009428:	78ab      	ldrb	r3, [r5, #2]
 800942a:	2b53      	cmp	r3, #83	; 0x53
 800942c:	d1d0      	bne.n	80093d0 <system_execute_line+0x80>
 800942e:	78eb      	ldrb	r3, [r5, #3]
 8009430:	2b54      	cmp	r3, #84	; 0x54
 8009432:	d1cd      	bne.n	80093d0 <system_execute_line+0x80>
 8009434:	792b      	ldrb	r3, [r5, #4]
 8009436:	2b3d      	cmp	r3, #61	; 0x3d
 8009438:	d1ca      	bne.n	80093d0 <system_execute_line+0x80>
 800943a:	79ab      	ldrb	r3, [r5, #6]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1c7      	bne.n	80093d0 <system_execute_line+0x80>
          switch (line[5]) {
 8009440:	796b      	ldrb	r3, [r5, #5]
 8009442:	2b24      	cmp	r3, #36	; 0x24
 8009444:	f000 8122 	beq.w	800968c <system_execute_line+0x33c>
 8009448:	2b2a      	cmp	r3, #42	; 0x2a
 800944a:	f000 811b 	beq.w	8009684 <system_execute_line+0x334>
 800944e:	2b23      	cmp	r3, #35	; 0x23
 8009450:	d1be      	bne.n	80093d0 <system_execute_line+0x80>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 8009452:	2002      	movs	r0, #2
 8009454:	f7fe f89c 	bl	8007590 <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 8009458:	2009      	movs	r0, #9
 800945a:	f7fc ffcd 	bl	80063f8 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800945e:	2400      	movs	r4, #0
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 8009460:	f7fa fc42 	bl	8003ce8 <mc_reset>
          break;
 8009464:	e786      	b.n	8009374 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 8009466:	2202      	movs	r2, #2
 8009468:	78ac      	ldrb	r4, [r5, #2]
 800946a:	f88d 2007 	strb.w	r2, [sp, #7]
 800946e:	2c00      	cmp	r4, #0
 8009470:	d047      	beq.n	8009502 <system_execute_line+0x1b2>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8009472:	2b00      	cmp	r3, #0
 8009474:	f47f af7d 	bne.w	8009372 <system_execute_line+0x22>
            helper_var = true;  // Set helper_var to flag storing method.
 8009478:	2401      	movs	r4, #1
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800947a:	f10d 0107 	add.w	r1, sp, #7
 800947e:	aa02      	add	r2, sp, #8
 8009480:	4628      	mov	r0, r5
 8009482:	f7fa fc61 	bl	8003d48 <read_float>
 8009486:	2800      	cmp	r0, #0
 8009488:	d16e      	bne.n	8009568 <system_execute_line+0x218>
 800948a:	2402      	movs	r4, #2
 800948c:	e772      	b.n	8009374 <system_execute_line+0x24>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 800948e:	78ab      	ldrb	r3, [r5, #2]
 8009490:	2b4c      	cmp	r3, #76	; 0x4c
 8009492:	d19d      	bne.n	80093d0 <system_execute_line+0x80>
 8009494:	78eb      	ldrb	r3, [r5, #3]
 8009496:	2b50      	cmp	r3, #80	; 0x50
 8009498:	d19a      	bne.n	80093d0 <system_execute_line+0x80>
 800949a:	792c      	ldrb	r4, [r5, #4]
 800949c:	2c00      	cmp	r4, #0
 800949e:	d197      	bne.n	80093d0 <system_execute_line+0x80>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80094a0:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 80094a2:	4a46      	ldr	r2, [pc, #280]	; (80095bc <system_execute_line+0x26c>)
 80094a4:	7813      	ldrb	r3, [r2, #0]
 80094a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094aa:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 80094ac:	b662      	cpsie	i
 80094ae:	e761      	b.n	8009374 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) {
 80094b0:	2302      	movs	r3, #2
 80094b2:	78ac      	ldrb	r4, [r5, #2]
 80094b4:	f88d 3007 	strb.w	r3, [sp, #7]
 80094b8:	2c00      	cmp	r4, #0
 80094ba:	f000 80ab 	beq.w	8009614 <system_execute_line+0x2c4>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 80094be:	2c3d      	cmp	r4, #61	; 0x3d
 80094c0:	f04f 0303 	mov.w	r3, #3
 80094c4:	d184      	bne.n	80093d0 <system_execute_line+0x80>
                line[char_counter-helper_var] = line[char_counter];
 80094c6:	5cec      	ldrb	r4, [r5, r3]
 80094c8:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 80094ca:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 80094cc:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2c00      	cmp	r4, #0
 80094d4:	d1f7      	bne.n	80094c6 <system_execute_line+0x176>
              settings_store_build_info(line);
 80094d6:	4628      	mov	r0, r5
 80094d8:	f88d 3007 	strb.w	r3, [sp, #7]
 80094dc:	f7fe f842 	bl	8007564 <settings_store_build_info>
 80094e0:	e748      	b.n	8009374 <system_execute_line+0x24>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 80094e2:	4b37      	ldr	r3, [pc, #220]	; (80095c0 <system_execute_line+0x270>)
 80094e4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80094e8:	06db      	lsls	r3, r3, #27
 80094ea:	d46b      	bmi.n	80095c4 <system_execute_line+0x274>
 80094ec:	2405      	movs	r4, #5
 80094ee:	e741      	b.n	8009374 <system_execute_line+0x24>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 80094f0:	78ac      	ldrb	r4, [r5, #2]
 80094f2:	2c00      	cmp	r4, #0
 80094f4:	f47f af6c 	bne.w	80093d0 <system_execute_line+0x80>
          else { report_ngc_parameters(); }
 80094f8:	f7fd fb14 	bl	8006b24 <report_ngc_parameters>
          break;
 80094fc:	e73a      	b.n	8009374 <system_execute_line+0x24>
  uint8_t helper_var = 0; // Helper variable
 80094fe:	2400      	movs	r4, #0
 8009500:	e7bb      	b.n	800947a <system_execute_line+0x12a>
 8009502:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 8009504:	4630      	mov	r0, r6
 8009506:	4629      	mov	r1, r5
 8009508:	f7fe f8da 	bl	80076c0 <settings_read_startup_line>
 800950c:	b968      	cbnz	r0, 800952a <system_execute_line+0x1da>
                report_status_message(STATUS_SETTING_READ_FAIL);
 800950e:	2007      	movs	r0, #7
 8009510:	f7fc ff44 	bl	800639c <report_status_message>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 8009514:	2c00      	cmp	r4, #0
 8009516:	f47f af7b 	bne.w	8009410 <system_execute_line+0xc0>
 800951a:	2401      	movs	r4, #1
 800951c:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 800951e:	4630      	mov	r0, r6
 8009520:	4629      	mov	r1, r5
 8009522:	f7fe f8cd 	bl	80076c0 <settings_read_startup_line>
 8009526:	2800      	cmp	r0, #0
 8009528:	d0f1      	beq.n	800950e <system_execute_line+0x1be>
                report_startup_line(helper_var,line);
 800952a:	4630      	mov	r0, r6
 800952c:	4629      	mov	r1, r5
 800952e:	f7fd fc6f 	bl	8006e10 <report_startup_line>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 8009532:	2c00      	cmp	r4, #0
 8009534:	f47f af6c 	bne.w	8009410 <system_execute_line+0xc0>
 8009538:	e7ef      	b.n	800951a <system_execute_line+0x1ca>
          if ( sys.state == STATE_CHECK_MODE ) {
 800953a:	4b1f      	ldr	r3, [pc, #124]	; (80095b8 <system_execute_line+0x268>)
 800953c:	781c      	ldrb	r4, [r3, #0]
 800953e:	2c02      	cmp	r4, #2
 8009540:	d061      	beq.n	8009606 <system_execute_line+0x2b6>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 8009542:	2c00      	cmp	r4, #0
 8009544:	f47f af15 	bne.w	8009372 <system_execute_line+0x22>
            sys.state = STATE_CHECK_MODE;
 8009548:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 800954a:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 800954c:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 800954e:	f7fc ff53 	bl	80063f8 <report_feedback_message>
 8009552:	e70f      	b.n	8009374 <system_execute_line+0x24>
          report_gcode_modes();
 8009554:	f7fd fba4 	bl	8006ca0 <report_gcode_modes>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009558:	462c      	mov	r4, r5
          break;
 800955a:	e70b      	b.n	8009374 <system_execute_line+0x24>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 800955c:	2003      	movs	r0, #3
 800955e:	f7fc ff4b 	bl	80063f8 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009562:	462c      	mov	r4, r5
            sys.state = STATE_IDLE;
 8009564:	7035      	strb	r5, [r6, #0]
 8009566:	e705      	b.n	8009374 <system_execute_line+0x24>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8009568:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800956c:	1c53      	adds	r3, r2, #1
 800956e:	5caa      	ldrb	r2, [r5, r2]
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2a3d      	cmp	r2, #61	; 0x3d
 8009574:	f88d 3007 	strb.w	r3, [sp, #7]
 8009578:	f47f af2a 	bne.w	80093d0 <system_execute_line+0x80>
          if (helper_var) { // Store startup line
 800957c:	2c00      	cmp	r4, #0
 800957e:	d054      	beq.n	800962a <system_execute_line+0x2da>
 8009580:	4618      	mov	r0, r3
              line[char_counter-helper_var] = line[char_counter];
 8009582:	5ce9      	ldrb	r1, [r5, r3]
 8009584:	1a1a      	subs	r2, r3, r0
 8009586:	54a9      	strb	r1, [r5, r2]
 8009588:	18ea      	adds	r2, r5, r3
            } while (line[char_counter++] != 0);
 800958a:	7812      	ldrb	r2, [r2, #0]
 800958c:	3301      	adds	r3, #1
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2a00      	cmp	r2, #0
 8009592:	d1f6      	bne.n	8009582 <system_execute_line+0x232>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 8009594:	4628      	mov	r0, r5
 8009596:	f88d 3007 	strb.w	r3, [sp, #7]
 800959a:	f7f8 fb9b 	bl	8001cd4 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 800959e:	4604      	mov	r4, r0
 80095a0:	2800      	cmp	r0, #0
 80095a2:	f47f aee7 	bne.w	8009374 <system_execute_line+0x24>
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 80095a6:	9802      	ldr	r0, [sp, #8]
 80095a8:	f7f7 fd84 	bl	80010b4 <__aeabi_f2uiz>
              settings_store_startup_line(helper_var,line);
 80095ac:	4629      	mov	r1, r5
 80095ae:	b2c0      	uxtb	r0, r0
 80095b0:	f7fd ffc6 	bl	8007540 <settings_store_startup_line>
 80095b4:	e6de      	b.n	8009374 <system_execute_line+0x24>
 80095b6:	bf00      	nop
 80095b8:	200010b0 	.word	0x200010b0
 80095bc:	200010c5 	.word	0x200010c5
 80095c0:	2000126c 	.word	0x2000126c
          sys.state = STATE_HOMING; // Set system state variable
 80095c4:	2004      	movs	r0, #4
          if (line[2] == 0) {
 80095c6:	78ab      	ldrb	r3, [r5, #2]
          sys.state = STATE_HOMING; // Set system state variable
 80095c8:	7030      	strb	r0, [r6, #0]
          if (line[2] == 0) {
 80095ca:	b353      	cbz	r3, 8009622 <system_execute_line+0x2d2>
            } else if (line[3] == 0) {
 80095cc:	78ea      	ldrb	r2, [r5, #3]
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	f47f aefe 	bne.w	80093d0 <system_execute_line+0x80>
              switch (line[2]) {
 80095d4:	2b58      	cmp	r3, #88	; 0x58
 80095d6:	d048      	beq.n	800966a <system_execute_line+0x31a>
 80095d8:	d94f      	bls.n	800967a <system_execute_line+0x32a>
 80095da:	2b59      	cmp	r3, #89	; 0x59
 80095dc:	d049      	beq.n	8009672 <system_execute_line+0x322>
 80095de:	2b5a      	cmp	r3, #90	; 0x5a
 80095e0:	f47f aef6 	bne.w	80093d0 <system_execute_line+0x80>
				case 'A': mc_homing_cycle(HOMING_CYCLE_A); break;
 80095e4:	f7fa fac4 	bl	8003b70 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 80095e8:	7874      	ldrb	r4, [r6, #1]
 80095ea:	2c00      	cmp	r4, #0
 80095ec:	f47f af10 	bne.w	8009410 <system_execute_line+0xc0>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 80095f0:	7034      	strb	r4, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 80095f2:	f7fe fd31 	bl	8008058 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 80095f6:	78ab      	ldrb	r3, [r5, #2]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f47f af09 	bne.w	8009410 <system_execute_line+0xc0>
 80095fe:	4628      	mov	r0, r5
 8009600:	f7ff fe8a 	bl	8009318 <system_execute_startup>
 8009604:	e6b6      	b.n	8009374 <system_execute_line+0x24>
            mc_reset();
 8009606:	f7fa fb6f 	bl	8003ce8 <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 800960a:	2005      	movs	r0, #5
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800960c:	462c      	mov	r4, r5
            report_feedback_message(MESSAGE_DISABLED);
 800960e:	f7fc fef3 	bl	80063f8 <report_feedback_message>
 8009612:	e6af      	b.n	8009374 <system_execute_line+0x24>
            settings_read_build_info(line);
 8009614:	4628      	mov	r0, r5
 8009616:	f7fe f86f 	bl	80076f8 <settings_read_build_info>
            report_build_info(line);
 800961a:	4628      	mov	r0, r5
 800961c:	f7fd fc34 	bl	8006e88 <report_build_info>
 8009620:	e6a8      	b.n	8009374 <system_execute_line+0x24>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 8009622:	4618      	mov	r0, r3
 8009624:	f7fa faa4 	bl	8003b70 <mc_homing_cycle>
 8009628:	e7de      	b.n	80095e8 <system_execute_line+0x298>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800962a:	f10d 0107 	add.w	r1, sp, #7
 800962e:	aa03      	add	r2, sp, #12
 8009630:	4628      	mov	r0, r5
 8009632:	f7fa fb89 	bl	8003d48 <read_float>
 8009636:	2800      	cmp	r0, #0
 8009638:	f43f af27 	beq.w	800948a <system_execute_line+0x13a>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 800963c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009640:	5ceb      	ldrb	r3, [r5, r3]
 8009642:	2b00      	cmp	r3, #0
 8009644:	f47f aec4 	bne.w	80093d0 <system_execute_line+0x80>
 8009648:	9c02      	ldr	r4, [sp, #8]
 800964a:	4912      	ldr	r1, [pc, #72]	; (8009694 <system_execute_line+0x344>)
 800964c:	4620      	mov	r0, r4
 800964e:	f7f7 fceb 	bl	8001028 <__aeabi_fcmpgt>
 8009652:	2800      	cmp	r0, #0
 8009654:	f47f aebc 	bne.w	80093d0 <system_execute_line+0x80>
            return(settings_store_global_setting((uint8_t)parameter, value));
 8009658:	4620      	mov	r0, r4
 800965a:	f7f7 fd2b 	bl	80010b4 <__aeabi_f2uiz>
 800965e:	9903      	ldr	r1, [sp, #12]
 8009660:	b2c0      	uxtb	r0, r0
 8009662:	f7fe f87b 	bl	800775c <settings_store_global_setting>
 8009666:	4604      	mov	r4, r0
 8009668:	e684      	b.n	8009374 <system_execute_line+0x24>
                case 'X': mc_homing_cycle(HOMING_CYCLE_X); break;
 800966a:	2001      	movs	r0, #1
 800966c:	f7fa fa80 	bl	8003b70 <mc_homing_cycle>
 8009670:	e7ba      	b.n	80095e8 <system_execute_line+0x298>
                case 'Y': mc_homing_cycle(HOMING_CYCLE_Y); break;
 8009672:	2002      	movs	r0, #2
 8009674:	f7fa fa7c 	bl	8003b70 <mc_homing_cycle>
 8009678:	e7b6      	b.n	80095e8 <system_execute_line+0x298>
              switch (line[2]) {
 800967a:	2b41      	cmp	r3, #65	; 0x41
 800967c:	f47f aea8 	bne.w	80093d0 <system_execute_line+0x80>
				case 'A': mc_homing_cycle(HOMING_CYCLE_A); break;
 8009680:	2008      	movs	r0, #8
 8009682:	e7af      	b.n	80095e4 <system_execute_line+0x294>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 8009684:	20ff      	movs	r0, #255	; 0xff
 8009686:	f7fd ff83 	bl	8007590 <settings_restore>
 800968a:	e6e5      	b.n	8009458 <system_execute_line+0x108>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 800968c:	2001      	movs	r0, #1
 800968e:	f7fd ff7f 	bl	8007590 <settings_restore>
 8009692:	e6e1      	b.n	8009458 <system_execute_line+0x108>
 8009694:	437f0000 	.word	0x437f0000

08009698 <system_flag_wco_change>:
{
 8009698:	b508      	push	{r3, lr}
    protocol_buffer_synchronize();
 800969a:	f7fc fb89 	bl	8005db0 <protocol_buffer_synchronize>
  sys.report_wco_counter = 0;
 800969e:	2200      	movs	r2, #0
 80096a0:	4b01      	ldr	r3, [pc, #4]	; (80096a8 <system_flag_wco_change+0x10>)
 80096a2:	735a      	strb	r2, [r3, #13]
 80096a4:	bd08      	pop	{r3, pc}
 80096a6:	bf00      	nop
 80096a8:	200010b0 	.word	0x200010b0

080096ac <system_convert_array_steps_to_mpos>:
{
 80096ac:	b570      	push	{r4, r5, r6, lr}
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096ae:	4d10      	ldr	r5, [pc, #64]	; (80096f0 <system_convert_array_steps_to_mpos+0x44>)
{
 80096b0:	4604      	mov	r4, r0
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096b2:	6808      	ldr	r0, [r1, #0]
{
 80096b4:	460e      	mov	r6, r1
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096b6:	f7f7 faa7 	bl	8000c08 <__aeabi_i2f>
 80096ba:	6829      	ldr	r1, [r5, #0]
 80096bc:	f7f7 fbac 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096c0:	6020      	str	r0, [r4, #0]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096c2:	6870      	ldr	r0, [r6, #4]
 80096c4:	f7f7 faa0 	bl	8000c08 <__aeabi_i2f>
 80096c8:	6869      	ldr	r1, [r5, #4]
 80096ca:	f7f7 fba5 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096ce:	6060      	str	r0, [r4, #4]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096d0:	68b0      	ldr	r0, [r6, #8]
 80096d2:	f7f7 fa99 	bl	8000c08 <__aeabi_i2f>
 80096d6:	68a9      	ldr	r1, [r5, #8]
 80096d8:	f7f7 fb9e 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096dc:	60a0      	str	r0, [r4, #8]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096de:	68f0      	ldr	r0, [r6, #12]
 80096e0:	f7f7 fa92 	bl	8000c08 <__aeabi_i2f>
 80096e4:	68e9      	ldr	r1, [r5, #12]
 80096e6:	f7f7 fb97 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096ea:	60e0      	str	r0, [r4, #12]
 80096ec:	bd70      	pop	{r4, r5, r6, pc}
 80096ee:	bf00      	nop
 80096f0:	2000126c 	.word	0x2000126c

080096f4 <system_check_travel_limits>:
{
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	4c3d      	ldr	r4, [pc, #244]	; (80097ec <system_check_travel_limits+0xf8>)
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 80096f8:	6807      	ldr	r7, [r0, #0]
 80096fa:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
{
 80096fe:	4606      	mov	r6, r0
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009700:	07eb      	lsls	r3, r5, #31
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009702:	f04f 0100 	mov.w	r1, #0
 8009706:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009708:	d409      	bmi.n	800971e <system_check_travel_limits+0x2a>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800970a:	f7f7 fc8d 	bl	8001028 <__aeabi_fcmpgt>
 800970e:	b920      	cbnz	r0, 800971a <system_check_travel_limits+0x26>
 8009710:	4639      	mov	r1, r7
 8009712:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009714:	f7f7 fc88 	bl	8001028 <__aeabi_fcmpgt>
 8009718:	b168      	cbz	r0, 8009736 <system_check_travel_limits+0x42>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 800971a:	2001      	movs	r0, #1
}
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 800971e:	f7f7 fc65 	bl	8000fec <__aeabi_fcmplt>
 8009722:	2800      	cmp	r0, #0
 8009724:	d1f9      	bne.n	800971a <system_check_travel_limits+0x26>
 8009726:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009728:	4639      	mov	r1, r7
 800972a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800972e:	f7f7 fc5d 	bl	8000fec <__aeabi_fcmplt>
 8009732:	2800      	cmp	r0, #0
 8009734:	d1f1      	bne.n	800971a <system_check_travel_limits+0x26>
 8009736:	6877      	ldr	r7, [r6, #4]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009738:	07aa      	lsls	r2, r5, #30
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 800973a:	f04f 0100 	mov.w	r1, #0
 800973e:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009740:	d42e      	bmi.n	80097a0 <system_check_travel_limits+0xac>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009742:	f7f7 fc71 	bl	8001028 <__aeabi_fcmpgt>
 8009746:	2800      	cmp	r0, #0
 8009748:	d1e7      	bne.n	800971a <system_check_travel_limits+0x26>
 800974a:	4638      	mov	r0, r7
 800974c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800974e:	f7f7 fc4d 	bl	8000fec <__aeabi_fcmplt>
 8009752:	2800      	cmp	r0, #0
 8009754:	d1e1      	bne.n	800971a <system_check_travel_limits+0x26>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009756:	68b7      	ldr	r7, [r6, #8]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009758:	076b      	lsls	r3, r5, #29
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 800975a:	f04f 0100 	mov.w	r1, #0
 800975e:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009760:	d42b      	bmi.n	80097ba <system_check_travel_limits+0xc6>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009762:	f7f7 fc61 	bl	8001028 <__aeabi_fcmpgt>
 8009766:	2800      	cmp	r0, #0
 8009768:	d1d7      	bne.n	800971a <system_check_travel_limits+0x26>
 800976a:	4638      	mov	r0, r7
 800976c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800976e:	f7f7 fc3d 	bl	8000fec <__aeabi_fcmplt>
 8009772:	2800      	cmp	r0, #0
 8009774:	d1d1      	bne.n	800971a <system_check_travel_limits+0x26>
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009776:	f015 0f08 	tst.w	r5, #8
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 800977a:	68f5      	ldr	r5, [r6, #12]
 800977c:	f04f 0100 	mov.w	r1, #0
 8009780:	4628      	mov	r0, r5
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009782:	d027      	beq.n	80097d4 <system_check_travel_limits+0xe0>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009784:	f7f7 fc32 	bl	8000fec <__aeabi_fcmplt>
 8009788:	2800      	cmp	r0, #0
 800978a:	d1c6      	bne.n	800971a <system_check_travel_limits+0x26>
 800978c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800978e:	4628      	mov	r0, r5
 8009790:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009794:	f7f7 fc48 	bl	8001028 <__aeabi_fcmpgt>
  return(false);
 8009798:	3000      	adds	r0, #0
 800979a:	bf18      	it	ne
 800979c:	2001      	movne	r0, #1
 800979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 80097a0:	f7f7 fc24 	bl	8000fec <__aeabi_fcmplt>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d1b8      	bne.n	800971a <system_check_travel_limits+0x26>
 80097a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097aa:	4638      	mov	r0, r7
 80097ac:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80097b0:	f7f7 fc3a 	bl	8001028 <__aeabi_fcmpgt>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d0ce      	beq.n	8009756 <system_check_travel_limits+0x62>
 80097b8:	e7af      	b.n	800971a <system_check_travel_limits+0x26>
 80097ba:	f7f7 fc17 	bl	8000fec <__aeabi_fcmplt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d1ab      	bne.n	800971a <system_check_travel_limits+0x26>
 80097c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80097c4:	4638      	mov	r0, r7
 80097c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80097ca:	f7f7 fc2d 	bl	8001028 <__aeabi_fcmpgt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	d0d1      	beq.n	8009776 <system_check_travel_limits+0x82>
 80097d2:	e7a2      	b.n	800971a <system_check_travel_limits+0x26>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 80097d4:	f7f7 fc28 	bl	8001028 <__aeabi_fcmpgt>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d19e      	bne.n	800971a <system_check_travel_limits+0x26>
 80097dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80097de:	4628      	mov	r0, r5
 80097e0:	f7f7 fc04 	bl	8000fec <__aeabi_fcmplt>
  return(false);
 80097e4:	3000      	adds	r0, #0
 80097e6:	bf18      	it	ne
 80097e8:	2001      	movne	r0, #1
 80097ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ec:	2000126c 	.word	0x2000126c

080097f0 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i");
 80097f0:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
 80097f2:	4a03      	ldr	r2, [pc, #12]	; (8009800 <system_set_exec_state_flag+0x10>)
 80097f4:	7813      	ldrb	r3, [r2, #0]
 80097f6:	4318      	orrs	r0, r3
 80097f8:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 80097fa:	b662      	cpsie	i
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	200010c5 	.word	0x200010c5

08009804 <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8009804:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 8009806:	4a03      	ldr	r2, [pc, #12]	; (8009814 <system_clear_exec_state_flag+0x10>)
 8009808:	7813      	ldrb	r3, [r2, #0]
 800980a:	ea23 0000 	bic.w	r0, r3, r0
 800980e:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009810:	b662      	cpsie	i
 8009812:	4770      	bx	lr
 8009814:	200010c5 	.word	0x200010c5

08009818 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i");
 8009818:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 800981a:	4b02      	ldr	r3, [pc, #8]	; (8009824 <system_set_exec_alarm+0xc>)
 800981c:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i");
 800981e:	b662      	cpsie	i
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	200010e8 	.word	0x200010e8

08009828 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i");
 8009828:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 800982a:	2200      	movs	r2, #0
 800982c:	4b01      	ldr	r3, [pc, #4]	; (8009834 <system_clear_exec_alarm+0xc>)
 800982e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009830:	b662      	cpsie	i
 8009832:	4770      	bx	lr
 8009834:	200010e8 	.word	0x200010e8

08009838 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i");
 8009838:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 800983a:	4a03      	ldr	r2, [pc, #12]	; (8009848 <system_set_exec_motion_override_flag+0x10>)
 800983c:	7813      	ldrb	r3, [r2, #0]
 800983e:	4318      	orrs	r0, r3
 8009840:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009842:	b662      	cpsie	i
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	200010ac 	.word	0x200010ac

0800984c <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i");
 800984c:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 800984e:	4a03      	ldr	r2, [pc, #12]	; (800985c <system_set_exec_accessory_override_flag+0x10>)
 8009850:	7813      	ldrb	r3, [r2, #0]
 8009852:	4318      	orrs	r0, r3
 8009854:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009856:	b662      	cpsie	i
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	200010c4 	.word	0x200010c4

08009860 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i");
 8009860:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 8009862:	2200      	movs	r2, #0
 8009864:	4b01      	ldr	r3, [pc, #4]	; (800986c <system_clear_exec_motion_overrides+0xc>)
 8009866:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009868:	b662      	cpsie	i
 800986a:	4770      	bx	lr
 800986c:	200010ac 	.word	0x200010ac

08009870 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i");
 8009870:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 8009872:	2200      	movs	r2, #0
 8009874:	4b01      	ldr	r3, [pc, #4]	; (800987c <system_clear_exec_accessory_overrides+0xc>)
 8009876:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009878:	b662      	cpsie	i
 800987a:	4770      	bx	lr
 800987c:	200010c4 	.word	0x200010c4

08009880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009880:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009882:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 8009884:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8009888:	4b3a      	ldr	r3, [pc, #232]	; (8009974 <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800988a:	493b      	ldr	r1, [pc, #236]	; (8009978 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 800988c:	6818      	ldr	r0, [r3, #0]
{
 800988e:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8009890:	f040 0001 	orr.w	r0, r0, #1
 8009894:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009896:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009898:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800989a:	4001      	ands	r1, r0
 800989c:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800989e:	6819      	ldr	r1, [r3, #0]
 80098a0:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80098a4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80098a8:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80098aa:	6819      	ldr	r1, [r3, #0]
 80098ac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80098b0:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80098b2:	6859      	ldr	r1, [r3, #4]
 80098b4:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80098b8:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 80098ba:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80098bc:	9400      	str	r4, [sp, #0]
 80098be:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80098c0:	6819      	ldr	r1, [r3, #0]
 80098c2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80098c6:	6019      	str	r1, [r3, #0]
 80098c8:	e003      	b.n	80098d2 <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80098ca:	9b00      	ldr	r3, [sp, #0]
 80098cc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80098d0:	d009      	beq.n	80098e6 <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80098d2:	6813      	ldr	r3, [r2, #0]
 80098d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d8:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	3301      	adds	r3, #1
 80098de:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80098e0:	9b01      	ldr	r3, [sp, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0f1      	beq.n	80098ca <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80098e6:	4b23      	ldr	r3, [pc, #140]	; (8009974 <SystemInit+0xf4>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80098ee:	bf18      	it	ne
 80098f0:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80098f2:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80098f4:	9b01      	ldr	r3, [sp, #4]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d006      	beq.n	8009908 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80098fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80098fe:	4b1f      	ldr	r3, [pc, #124]	; (800997c <SystemInit+0xfc>)
 8009900:	609a      	str	r2, [r3, #8]
}
 8009902:	b002      	add	sp, #8
 8009904:	bc30      	pop	{r4, r5}
 8009906:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009908:	491d      	ldr	r1, [pc, #116]	; (8009980 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800990a:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800990c:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800990e:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009910:	f040 0010 	orr.w	r0, r0, #16
 8009914:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8009916:	6808      	ldr	r0, [r1, #0]
 8009918:	f020 0003 	bic.w	r0, r0, #3
 800991c:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800991e:	6808      	ldr	r0, [r1, #0]
 8009920:	f040 0002 	orr.w	r0, r0, #2
 8009924:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009926:	6859      	ldr	r1, [r3, #4]
 8009928:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800992a:	6859      	ldr	r1, [r3, #4]
 800992c:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800992e:	6859      	ldr	r1, [r3, #4]
 8009930:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009934:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8009936:	6859      	ldr	r1, [r3, #4]
 8009938:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 800993c:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800993e:	6859      	ldr	r1, [r3, #4]
 8009940:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8009944:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8009946:	6819      	ldr	r1, [r3, #0]
 8009948:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800994c:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800994e:	6813      	ldr	r3, [r2, #0]
 8009950:	019b      	lsls	r3, r3, #6
 8009952:	d5fc      	bpl.n	800994e <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009954:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8009956:	4907      	ldr	r1, [pc, #28]	; (8009974 <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009958:	f023 0303 	bic.w	r3, r3, #3
 800995c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800995e:	6853      	ldr	r3, [r2, #4]
 8009960:	f043 0302 	orr.w	r3, r3, #2
 8009964:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8009966:	684b      	ldr	r3, [r1, #4]
 8009968:	f003 030c 	and.w	r3, r3, #12
 800996c:	2b08      	cmp	r3, #8
 800996e:	d1fa      	bne.n	8009966 <SystemInit+0xe6>
 8009970:	e7c3      	b.n	80098fa <SystemInit+0x7a>
 8009972:	bf00      	nop
 8009974:	40021000 	.word	0x40021000
 8009978:	f8ff0000 	.word	0xf8ff0000
 800997c:	e000ed00 	.word	0xe000ed00
 8009980:	40022000 	.word	0x40022000

08009984 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8009984:	b508      	push	{r3, lr}
  if (Length == 0)
 8009986:	b138      	cbz	r0, 8009998 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8009988:	4b06      	ldr	r3, [pc, #24]	; (80099a4 <Standard_GetConfiguration+0x20>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8009990:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <Standard_GetConfiguration+0x24>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	300a      	adds	r0, #10
}
 8009996:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 8009998:	2201      	movs	r2, #1
 800999a:	4b03      	ldr	r3, [pc, #12]	; (80099a8 <Standard_GetConfiguration+0x24>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	821a      	strh	r2, [r3, #16]
    return 0;
 80099a0:	bd08      	pop	{r3, pc}
 80099a2:	bf00      	nop
 80099a4:	20001304 	.word	0x20001304
 80099a8:	20001308 	.word	0x20001308

080099ac <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 80099ac:	b508      	push	{r3, lr}
  if (Length == 0)
 80099ae:	b138      	cbz	r0, 80099c0 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 80099b0:	4b06      	ldr	r3, [pc, #24]	; (80099cc <Standard_GetInterface+0x20>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <Standard_GetInterface+0x24>)
 80099ba:	6818      	ldr	r0, [r3, #0]
 80099bc:	300c      	adds	r0, #12
}
 80099be:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 80099c0:	2201      	movs	r2, #1
 80099c2:	4b03      	ldr	r3, [pc, #12]	; (80099d0 <Standard_GetInterface+0x24>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	821a      	strh	r2, [r3, #16]
    return 0;
 80099c8:	bd08      	pop	{r3, pc}
 80099ca:	bf00      	nop
 80099cc:	20001304 	.word	0x20001304
 80099d0:	20001308 	.word	0x20001308

080099d4 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 80099d4:	b508      	push	{r3, lr}
  if (Length == 0)
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d033      	beq.n	8009a42 <Standard_GetStatus+0x6e>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80099da:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80099dc:	4b1e      	ldr	r3, [pc, #120]	; (8009a58 <Standard_GetStatus+0x84>)
  StatusInfo.w = 0;
 80099de:	481f      	ldr	r0, [pc, #124]	; (8009a5c <Standard_GetStatus+0x88>)
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80099e0:	681a      	ldr	r2, [r3, #0]
  StatusInfo.w = 0;
 80099e2:	8001      	strh	r1, [r0, #0]
 80099e4:	7813      	ldrb	r3, [r2, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80099e6:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 80099ea:	d016      	beq.n	8009a1a <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d027      	beq.n	8009a40 <Standard_GetStatus+0x6c>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d124      	bne.n	8009a3e <Standard_GetStatus+0x6a>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 80099f4:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 80099f6:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a00:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    if (ValBit(wIndex0, 7))
 8009a04:	0612      	lsls	r2, r2, #24
      if (_GetTxStallStatus(Related_Endpoint))
 8009a06:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 8009a08:	d420      	bmi.n	8009a4c <Standard_GetStatus+0x78>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8009a0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a12:	d10e      	bne.n	8009a32 <Standard_GetStatus+0x5e>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8009a14:	2301      	movs	r3, #1
 8009a16:	7003      	strb	r3, [r0, #0]
 8009a18:	e00b      	b.n	8009a32 <Standard_GetStatus+0x5e>
    uint8_t Feature = pInformation->Current_Feature;
 8009a1a:	7a52      	ldrb	r2, [r2, #9]
    if (ValBit(Feature, 5))
 8009a1c:	0693      	lsls	r3, r2, #26
 8009a1e:	bf4c      	ite	mi
 8009a20:	2302      	movmi	r3, #2
 8009a22:	7803      	ldrbpl	r3, [r0, #0]
    if (ValBit(Feature, 6))
 8009a24:	0651      	lsls	r1, r2, #25
      SetBit(StatusInfo0, 0);
 8009a26:	bf4c      	ite	mi
 8009a28:	f043 0301 	orrmi.w	r3, r3, #1
      ClrBit(StatusInfo0, 0);
 8009a2c:	f023 0301 	bicpl.w	r3, r3, #1
 8009a30:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8009a32:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <Standard_GetStatus+0x8c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8009a3a:	4808      	ldr	r0, [pc, #32]	; (8009a5c <Standard_GetStatus+0x88>)
 8009a3c:	bd08      	pop	{r3, pc}
    return NULL;
 8009a3e:	4608      	mov	r0, r1
}
 8009a40:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8009a42:	2202      	movs	r2, #2
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <Standard_GetStatus+0x84>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	821a      	strh	r2, [r3, #16]
    return 0;
 8009a4a:	bd08      	pop	{r3, pc}
      if (_GetTxStallStatus(Related_Endpoint))
 8009a4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a50:	2b10      	cmp	r3, #16
 8009a52:	d1ee      	bne.n	8009a32 <Standard_GetStatus+0x5e>
 8009a54:	e7de      	b.n	8009a14 <Standard_GetStatus+0x40>
 8009a56:	bf00      	nop
 8009a58:	20001308 	.word	0x20001308
 8009a5c:	200012d8 	.word	0x200012d8
 8009a60:	20001304 	.word	0x20001304

08009a64 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8009a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8009a68:	4f24      	ldr	r7, [pc, #144]	; (8009afc <DataStageIn+0x98>)
 8009a6a:	683d      	ldr	r5, [r7, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8009a6c:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8009a6e:	b92c      	cbnz	r4, 8009a7c <DataStageIn+0x18>
  uint32_t ControlState = pInformation->ControlState;
 8009a70:	7a2e      	ldrb	r6, [r5, #8]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8009a72:	2e04      	cmp	r6, #4
 8009a74:	d02b      	beq.n	8009ace <DataStageIn+0x6a>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8009a76:	8aab      	ldrh	r3, [r5, #20]
 8009a78:	2604      	movs	r6, #4
 8009a7a:	e004      	b.n	8009a86 <DataStageIn+0x22>
 8009a7c:	8aab      	ldrh	r3, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8009a7e:	429c      	cmp	r4, r3
 8009a80:	bf8c      	ite	hi
 8009a82:	2602      	movhi	r6, #2
 8009a84:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8009a86:	429c      	cmp	r4, r3
 8009a88:	bf28      	it	cs
 8009a8a:	461c      	movcs	r4, r3
 8009a8c:	69ab      	ldr	r3, [r5, #24]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	4798      	blx	r3
 8009a92:	4680      	mov	r8, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8009a94:	2000      	movs	r0, #0
 8009a96:	f000 fdd3 	bl	800a640 <GetEPTxAddr>
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	4601      	mov	r1, r0
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	f000 fce4 	bl	800a46c <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	f000 fde6 	bl	800a678 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8009aac:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009aae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  pEPinfo->Usb_wLength -= Length;
 8009ab2:	8a2b      	ldrh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8009ab4:	8a69      	ldrh	r1, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 8009ab6:	1b1b      	subs	r3, r3, r4
 8009ab8:	822b      	strh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8009aba:	440c      	add	r4, r1
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009abc:	4b10      	ldr	r3, [pc, #64]	; (8009b00 <DataStageIn+0x9c>)
  vSetEPTxStatus(EP_TX_VALID);
 8009abe:	4911      	ldr	r1, [pc, #68]	; (8009b04 <DataStageIn+0xa0>)
  pEPinfo->Usb_wOffset += Length;
 8009ac0:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8009ac2:	8008      	strh	r0, [r1, #0]
 8009ac4:	683d      	ldr	r5, [r7, #0]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009ac6:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8009ac8:	722e      	strb	r6, [r5, #8]
}
 8009aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Data_Mul_MaxPacketSize == TRUE)
 8009ace:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <DataStageIn+0xa4>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	2a01      	cmp	r2, #1
 8009ad4:	d006      	beq.n	8009ae4 <DataStageIn+0x80>
      vSetEPTxStatus(EP_TX_STALL);
 8009ad6:	2210      	movs	r2, #16
 8009ad8:	2607      	movs	r6, #7
 8009ada:	4b0a      	ldr	r3, [pc, #40]	; (8009b04 <DataStageIn+0xa0>)
 8009adc:	801a      	strh	r2, [r3, #0]
  pInformation->ControlState = ControlState;
 8009ade:	722e      	strb	r6, [r5, #8]
}
 8009ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Send0LengthData();
 8009ae4:	2730      	movs	r7, #48	; 0x30
 8009ae6:	4909      	ldr	r1, [pc, #36]	; (8009b0c <DataStageIn+0xa8>)
 8009ae8:	4a09      	ldr	r2, [pc, #36]	; (8009b10 <DataStageIn+0xac>)
 8009aea:	6809      	ldr	r1, [r1, #0]
 8009aec:	4805      	ldr	r0, [pc, #20]	; (8009b04 <DataStageIn+0xa0>)
 8009aee:	b289      	uxth	r1, r1
 8009af0:	440a      	add	r2, r1
 8009af2:	0052      	lsls	r2, r2, #1
 8009af4:	6014      	str	r4, [r2, #0]
      Data_Mul_MaxPacketSize = FALSE;
 8009af6:	601c      	str	r4, [r3, #0]
      Send0LengthData();
 8009af8:	8007      	strh	r7, [r0, #0]
 8009afa:	e7e5      	b.n	8009ac8 <DataStageIn+0x64>
 8009afc:	20001308 	.word	0x20001308
 8009b00:	2000130e 	.word	0x2000130e
 8009b04:	20001310 	.word	0x20001310
 8009b08:	20000c08 	.word	0x20000c08
 8009b0c:	40005c50 	.word	0x40005c50
 8009b10:	20003002 	.word	0x20003002

08009b14 <Standard_ClearFeature>:
{
 8009b14:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8009b16:	4b30      	ldr	r3, [pc, #192]	; (8009bd8 <Standard_ClearFeature+0xc4>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	7818      	ldrb	r0, [r3, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009b1c:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8009b20:	d003      	beq.n	8009b2a <Standard_ClearFeature+0x16>
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009b22:	2802      	cmp	r0, #2
 8009b24:	d006      	beq.n	8009b34 <Standard_ClearFeature+0x20>
  return USB_UNSUPPORT;
 8009b26:	2002      	movs	r0, #2
}
 8009b28:	bd38      	pop	{r3, r4, r5, pc}
    ClrBit(pInformation->Current_Feature, 5);
 8009b2a:	7a5a      	ldrb	r2, [r3, #9]
 8009b2c:	f022 0220 	bic.w	r2, r2, #32
 8009b30:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8009b34:	885a      	ldrh	r2, [r3, #2]
 8009b36:	2a00      	cmp	r2, #0
 8009b38:	d1f6      	bne.n	8009b28 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8009b3a:	791a      	ldrb	r2, [r3, #4]
 8009b3c:	2a00      	cmp	r2, #0
 8009b3e:	d1f3      	bne.n	8009b28 <Standard_ClearFeature+0x14>
    wIndex0 = pInformation->USBwIndex0;
 8009b40:	7958      	ldrb	r0, [r3, #5]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009b42:	4d26      	ldr	r5, [pc, #152]	; (8009bdc <Standard_ClearFeature+0xc8>)
    if (ValBit(pInformation->USBwIndex0, 7))
 8009b44:	b241      	sxtb	r1, r0
    rEP = wIndex0 & ~0x80;
 8009b46:	f020 0080 	bic.w	r0, r0, #128	; 0x80
      Status = _GetEPTxStatus(Related_Endpoint);
 8009b4a:	0084      	lsls	r4, r0, #2
 8009b4c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8009b50:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8009b54:	6822      	ldr	r2, [r4, #0]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009b56:	782d      	ldrb	r5, [r5, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 8009b58:	2900      	cmp	r1, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 8009b5a:	bfb4      	ite	lt
 8009b5c:	f002 0230 	andlt.w	r2, r2, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 8009b60:	f402 5240 	andge.w	r2, r2, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009b64:	42a8      	cmp	r0, r5
 8009b66:	d2de      	bcs.n	8009b26 <Standard_ClearFeature+0x12>
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	d0dc      	beq.n	8009b26 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8009b6c:	7a9b      	ldrb	r3, [r3, #10]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0d9      	beq.n	8009b26 <Standard_ClearFeature+0x12>
    if (wIndex0 & 0x80)
 8009b72:	2900      	cmp	r1, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 8009b74:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 8009b76:	db0a      	blt.n	8009b8e <Standard_ClearFeature+0x7a>
      if (_GetRxStallStatus(Related_Endpoint))
 8009b78:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b80:	d012      	beq.n	8009ba8 <Standard_ClearFeature+0x94>
    pUser_Standard_Requests->User_ClearFeature();
 8009b82:	4b17      	ldr	r3, [pc, #92]	; (8009be0 <Standard_ClearFeature+0xcc>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	4798      	blx	r3
    return USB_SUCCESS;
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	bd38      	pop	{r3, r4, r5, pc}
      if (_GetTxStallStatus(Related_Endpoint ))
 8009b8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b92:	2b10      	cmp	r3, #16
 8009b94:	d1f5      	bne.n	8009b82 <Standard_ClearFeature+0x6e>
        ClearDTOG_TX(Related_Endpoint);
 8009b96:	b2c4      	uxtb	r4, r0
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 fd1f 	bl	800a5dc <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	2130      	movs	r1, #48	; 0x30
 8009ba2:	f000 fc9d 	bl	800a4e0 <SetEPTxStatus>
 8009ba6:	e7ec      	b.n	8009b82 <Standard_ClearFeature+0x6e>
        if (Related_Endpoint == ENDP0)
 8009ba8:	b990      	cbnz	r0, 8009bd0 <Standard_ClearFeature+0xbc>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8009baa:	4b0e      	ldr	r3, [pc, #56]	; (8009be4 <Standard_ClearFeature+0xd0>)
 8009bac:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009bb0:	f000 fd70 	bl	800a694 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	e7d8      	b.n	8009b82 <Standard_ClearFeature+0x6e>
          ClearDTOG_RX(Related_Endpoint);
 8009bd0:	f000 fcf2 	bl	800a5b8 <ClearDTOG_RX>
 8009bd4:	e7ee      	b.n	8009bb4 <Standard_ClearFeature+0xa0>
 8009bd6:	bf00      	nop
 8009bd8:	20001308 	.word	0x20001308
 8009bdc:	2000009c 	.word	0x2000009c
 8009be0:	20001304 	.word	0x20001304
 8009be4:	2000006c 	.word	0x2000006c

08009be8 <Standard_SetEndPointFeature>:
{
 8009be8:	b538      	push	{r3, r4, r5, lr}
  wIndex0 = pInformation->USBwIndex0;
 8009bea:	4b21      	ldr	r3, [pc, #132]	; (8009c70 <Standard_SetEndPointFeature+0x88>)
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009bec:	4d21      	ldr	r5, [pc, #132]	; (8009c74 <Standard_SetEndPointFeature+0x8c>)
  wIndex0 = pInformation->USBwIndex0;
 8009bee:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009bf0:	782d      	ldrb	r5, [r5, #0]
  wIndex0 = pInformation->USBwIndex0;
 8009bf2:	7942      	ldrb	r2, [r0, #5]
  if (ValBit(pInformation->USBwIndex0, 7))
 8009bf4:	b254      	sxtb	r4, r2
  rEP = wIndex0 & ~0x80;
 8009bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    Status = _GetEPTxStatus(Related_Endpoint);
 8009bfa:	0093      	lsls	r3, r2, #2
 8009bfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c00:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8009c04:	6819      	ldr	r1, [r3, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 8009c06:	2c00      	cmp	r4, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 8009c08:	bfb4      	ite	lt
 8009c0a:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 8009c0e:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009c12:	42aa      	cmp	r2, r5
 8009c14:	d301      	bcc.n	8009c1a <Standard_SetEndPointFeature+0x32>
    return USB_UNSUPPORT;
 8009c16:	2002      	movs	r0, #2
}
 8009c18:	bd38      	pop	{r3, r4, r5, pc}
      || pInformation->USBwValue != 0 || Status == 0
 8009c1a:	8842      	ldrh	r2, [r0, #2]
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	d1fa      	bne.n	8009c16 <Standard_SetEndPointFeature+0x2e>
 8009c20:	2900      	cmp	r1, #0
 8009c22:	d0f8      	beq.n	8009c16 <Standard_SetEndPointFeature+0x2e>
      || pInformation->Current_Configuration == 0)
 8009c24:	7a82      	ldrb	r2, [r0, #10]
 8009c26:	2a00      	cmp	r2, #0
 8009c28:	d0f5      	beq.n	8009c16 <Standard_SetEndPointFeature+0x2e>
    if (wIndex0 & 0x80)
 8009c2a:	2c00      	cmp	r4, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8009c2c:	681a      	ldr	r2, [r3, #0]
    if (wIndex0 & 0x80)
 8009c2e:	db11      	blt.n	8009c54 <Standard_SetEndPointFeature+0x6c>
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8009c30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c38:	b292      	uxth	r2, r2
 8009c3a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8009c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c46:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 8009c48:	4b0b      	ldr	r3, [pc, #44]	; (8009c78 <Standard_SetEndPointFeature+0x90>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	4798      	blx	r3
  return USB_SUCCESS;
 8009c50:	2000      	movs	r0, #0
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8009c54:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c5c:	b292      	uxth	r2, r2
 8009c5e:	f082 0210 	eor.w	r2, r2, #16
 8009c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	e7ec      	b.n	8009c48 <Standard_SetEndPointFeature+0x60>
 8009c6e:	bf00      	nop
 8009c70:	20001308 	.word	0x20001308
 8009c74:	2000009c 	.word	0x2000009c
 8009c78:	20001304 	.word	0x20001304

08009c7c <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8009c7c:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <Standard_GetDescriptorData+0x18>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8009c82:	b110      	cbz	r0, 8009c8a <Standard_GetDescriptorData+0xe>
  return pDesc->Descriptor + wOffset;
 8009c84:	6808      	ldr	r0, [r1, #0]
 8009c86:	4410      	add	r0, r2
}
 8009c88:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8009c8a:	8889      	ldrh	r1, [r1, #4]
 8009c8c:	1a8a      	subs	r2, r1, r2
 8009c8e:	821a      	strh	r2, [r3, #16]
    return 0;
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	20001308 	.word	0x20001308

08009c98 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8009c98:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 8009c9a:	4ea7      	ldr	r6, [pc, #668]	; (8009f38 <Setup0_Process+0x2a0>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009c9c:	4ba7      	ldr	r3, [pc, #668]	; (8009f3c <Setup0_Process+0x2a4>)
  if (pInformation->ControlState != PAUSE)
 8009c9e:	6834      	ldr	r4, [r6, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009ca0:	681a      	ldr	r2, [r3, #0]
  if (pInformation->ControlState != PAUSE)
 8009ca2:	7a23      	ldrb	r3, [r4, #8]
{
 8009ca4:	b083      	sub	sp, #12
  if (pInformation->ControlState != PAUSE)
 8009ca6:	2b09      	cmp	r3, #9
 8009ca8:	d039      	beq.n	8009d1e <Setup0_Process+0x86>
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009caa:	4ba5      	ldr	r3, [pc, #660]	; (8009f40 <Setup0_Process+0x2a8>)
 8009cac:	b292      	uxth	r2, r2
 8009cae:	4413      	add	r3, r2
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	881d      	ldrh	r5, [r3, #0]
 8009cb4:	006d      	lsls	r5, r5, #1
 8009cb6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8009cba:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8009cbe:	782b      	ldrb	r3, [r5, #0]
 8009cc0:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8009cc2:	786b      	ldrb	r3, [r5, #1]
 8009cc4:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8009cc6:	88a8      	ldrh	r0, [r5, #4]
 8009cc8:	f000 fd16 	bl	800a6f8 <ByteSwap>
 8009ccc:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8009cce:	8928      	ldrh	r0, [r5, #8]
 8009cd0:	6834      	ldr	r4, [r6, #0]
 8009cd2:	f000 fd11 	bl	800a6f8 <ByteSwap>
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8009cd6:	2201      	movs	r2, #1
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8009cd8:	80a0      	strh	r0, [r4, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8009cda:	89ab      	ldrh	r3, [r5, #12]
 8009cdc:	6834      	ldr	r4, [r6, #0]
 8009cde:	80e3      	strh	r3, [r4, #6]
  pInformation->ControlState = SETTING_UP;
 8009ce0:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8009ce2:	b30b      	cbz	r3, 8009d28 <Setup0_Process+0x90>
  uint32_t Request_No = pInformation->USBbRequest;
 8009ce4:	7860      	ldrb	r0, [r4, #1]
  if (Request_No == GET_DESCRIPTOR)
 8009ce6:	2806      	cmp	r0, #6
 8009ce8:	f000 8091 	beq.w	8009e0e <Setup0_Process+0x176>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d14b      	bne.n	8009d88 <Setup0_Process+0xf0>
 8009cf0:	8861      	ldrh	r1, [r4, #2]
 8009cf2:	2900      	cmp	r1, #0
 8009cf4:	f000 80a3 	beq.w	8009e3e <Setup0_Process+0x1a6>
 8009cf8:	4d92      	ldr	r5, [pc, #584]	; (8009f44 <Setup0_Process+0x2ac>)
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8009cfa:	682b      	ldr	r3, [r5, #0]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8009d00:	2803      	cmp	r0, #3
 8009d02:	f000 8112 	beq.w	8009f2a <Setup0_Process+0x292>
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8009d06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009d0a:	6833      	ldr	r3, [r6, #0]
 8009d0c:	8a1a      	ldrh	r2, [r3, #16]
 8009d0e:	428a      	cmp	r2, r1
 8009d10:	f000 8092 	beq.w	8009e38 <Setup0_Process+0x1a0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8009d14:	2802      	cmp	r0, #2
 8009d16:	d147      	bne.n	8009da8 <Setup0_Process+0x110>
    pInformation->ControlState = STALLED;
 8009d18:	2208      	movs	r2, #8
 8009d1a:	721a      	strb	r2, [r3, #8]
 8009d1c:	e01c      	b.n	8009d58 <Setup0_Process+0xc0>
  pInformation->ControlState = SETTING_UP;
 8009d1e:	2201      	movs	r2, #1
 8009d20:	88e3      	ldrh	r3, [r4, #6]
 8009d22:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1dd      	bne.n	8009ce4 <Setup0_Process+0x4c>
 8009d28:	7823      	ldrb	r3, [r4, #0]
  uint32_t RequestNo = pInformation->USBbRequest;
 8009d2a:	7867      	ldrb	r7, [r4, #1]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009d2c:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8009d30:	d047      	beq.n	8009dc2 <Setup0_Process+0x12a>
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	f000 80cf 	beq.w	8009ed6 <Setup0_Process+0x23e>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	f000 8129 	beq.w	8009f90 <Setup0_Process+0x2f8>
 8009d3e:	4d81      	ldr	r5, [pc, #516]	; (8009f44 <Setup0_Process+0x2ac>)
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	4638      	mov	r0, r7
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8009d48:	2803      	cmp	r0, #3
 8009d4a:	f000 8157 	beq.w	8009ffc <Setup0_Process+0x364>
 8009d4e:	6834      	ldr	r4, [r6, #0]
  if (Result != USB_SUCCESS)
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d04f      	beq.n	8009df4 <Setup0_Process+0x15c>
          || (pInformation->Current_Configuration != 0))
 8009d54:	2308      	movs	r3, #8
  pInformation->ControlState = ControlState;
 8009d56:	7223      	strb	r3, [r4, #8]
{
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8009d58:	4b7b      	ldr	r3, [pc, #492]	; (8009f48 <Setup0_Process+0x2b0>)
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009d60:	f000 fc98 	bl	800a694 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8009d64:	6833      	ldr	r3, [r6, #0]
 8009d66:	7a18      	ldrb	r0, [r3, #8]
 8009d68:	2808      	cmp	r0, #8
 8009d6a:	d106      	bne.n	8009d7a <Setup0_Process+0xe2>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8009d6c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8009d70:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8009d72:	4976      	ldr	r1, [pc, #472]	; (8009f4c <Setup0_Process+0x2b4>)
    vSetEPTxStatus(EP_TX_STALL);
 8009d74:	4b76      	ldr	r3, [pc, #472]	; (8009f50 <Setup0_Process+0x2b8>)
    vSetEPRxStatus(EP_RX_STALL);
 8009d76:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8009d78:	801a      	strh	r2, [r3, #0]
}
 8009d7a:	f1a0 0009 	sub.w	r0, r0, #9
 8009d7e:	fab0 f080 	clz	r0, r0
 8009d82:	0940      	lsrs	r0, r0, #5
 8009d84:	b003      	add	sp, #12
 8009d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (Request_No == GET_CONFIGURATION)
 8009d88:	2808      	cmp	r0, #8
 8009d8a:	d16a      	bne.n	8009e62 <Setup0_Process+0x1ca>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009d8c:	7823      	ldrb	r3, [r4, #0]
 8009d8e:	065b      	lsls	r3, r3, #25
 8009d90:	d1b2      	bne.n	8009cf8 <Setup0_Process+0x60>
      CopyRoutine = Standard_GetConfiguration;
 8009d92:	4b70      	ldr	r3, [pc, #448]	; (8009f54 <Setup0_Process+0x2bc>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8009d94:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8009d96:	61a3      	str	r3, [r4, #24]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8009d98:	8260      	strh	r0, [r4, #18]
    (*CopyRoutine)(0);
 8009d9a:	4798      	blx	r3
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8009d9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009da0:	6833      	ldr	r3, [r6, #0]
 8009da2:	8a1a      	ldrh	r2, [r3, #16]
 8009da4:	428a      	cmp	r2, r1
 8009da6:	d047      	beq.n	8009e38 <Setup0_Process+0x1a0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8009da8:	2a00      	cmp	r2, #0
 8009daa:	d0b5      	beq.n	8009d18 <Setup0_Process+0x80>
  if (ValBit(pInformation->USBbmRequestType, 7))
 8009dac:	f993 1000 	ldrsb.w	r1, [r3]
 8009db0:	2900      	cmp	r1, #0
 8009db2:	db79      	blt.n	8009ea8 <Setup0_Process+0x210>
    pInformation->ControlState = OUT_DATA;
 8009db4:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8009db6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8009dba:	4a64      	ldr	r2, [pc, #400]	; (8009f4c <Setup0_Process+0x2b4>)
    pInformation->ControlState = OUT_DATA;
 8009dbc:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8009dbe:	8011      	strh	r1, [r2, #0]
 8009dc0:	e7ca      	b.n	8009d58 <Setup0_Process+0xc0>
    if (RequestNo == SET_CONFIGURATION)
 8009dc2:	2f09      	cmp	r7, #9
 8009dc4:	f000 8102 	beq.w	8009fcc <Setup0_Process+0x334>
    else if (RequestNo == SET_ADDRESS)
 8009dc8:	2f05      	cmp	r7, #5
 8009dca:	f000 80cf 	beq.w	8009f6c <Setup0_Process+0x2d4>
    else if (RequestNo == SET_FEATURE)
 8009dce:	2f03      	cmp	r7, #3
 8009dd0:	f000 80e7 	beq.w	8009fa2 <Setup0_Process+0x30a>
    else if (RequestNo == CLEAR_FEATURE)
 8009dd4:	2f01      	cmp	r7, #1
 8009dd6:	d1b2      	bne.n	8009d3e <Setup0_Process+0xa6>
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8009dd8:	78e3      	ldrb	r3, [r4, #3]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d1af      	bne.n	8009d3e <Setup0_Process+0xa6>
          && pInformation->USBwIndex == 0
 8009dde:	88a3      	ldrh	r3, [r4, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1ac      	bne.n	8009d3e <Setup0_Process+0xa6>
          && ValBit(pInformation->Current_Feature, 5))
 8009de4:	7a63      	ldrb	r3, [r4, #9]
 8009de6:	069b      	lsls	r3, r3, #26
 8009de8:	d5a9      	bpl.n	8009d3e <Setup0_Process+0xa6>
        Result = Standard_ClearFeature();
 8009dea:	f7ff fe93 	bl	8009b14 <Standard_ClearFeature>
  if (Result != USB_SUCCESS)
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d1a5      	bne.n	8009d3e <Setup0_Process+0xa6>
 8009df2:	6834      	ldr	r4, [r6, #0]
  USB_StatusIn();
 8009df4:	2500      	movs	r5, #0
 8009df6:	2030      	movs	r0, #48	; 0x30
 8009df8:	4a50      	ldr	r2, [pc, #320]	; (8009f3c <Setup0_Process+0x2a4>)
 8009dfa:	4b57      	ldr	r3, [pc, #348]	; (8009f58 <Setup0_Process+0x2c0>)
 8009dfc:	6812      	ldr	r2, [r2, #0]
 8009dfe:	4954      	ldr	r1, [pc, #336]	; (8009f50 <Setup0_Process+0x2b8>)
 8009e00:	b292      	uxth	r2, r2
 8009e02:	4413      	add	r3, r2
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	601d      	str	r5, [r3, #0]
 8009e08:	2306      	movs	r3, #6
 8009e0a:	8008      	strh	r0, [r1, #0]
 8009e0c:	e7a3      	b.n	8009d56 <Setup0_Process+0xbe>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009e0e:	7823      	ldrb	r3, [r4, #0]
 8009e10:	065d      	lsls	r5, r3, #25
 8009e12:	f47f af71 	bne.w	8009cf8 <Setup0_Process+0x60>
      uint8_t wValue1 = pInformation->USBwValue1;
 8009e16:	78a3      	ldrb	r3, [r4, #2]
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8009e18:	4d4a      	ldr	r5, [pc, #296]	; (8009f44 <Setup0_Process+0x2ac>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	f000 80eb 	beq.w	8009ff6 <Setup0_Process+0x35e>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	f000 8086 	beq.w	8009f32 <Setup0_Process+0x29a>
      else if (wValue1 == STRING_DESCRIPTOR)
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	f47f af67 	bne.w	8009cfa <Setup0_Process+0x62>
        CopyRoutine = pProperty->GetStringDescriptor;
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (CopyRoutine)
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1af      	bne.n	8009d94 <Setup0_Process+0xfc>
 8009e34:	2006      	movs	r0, #6
 8009e36:	e760      	b.n	8009cfa <Setup0_Process+0x62>
    pInformation->ControlState = PAUSE;
 8009e38:	2209      	movs	r2, #9
 8009e3a:	721a      	strb	r2, [r3, #8]
 8009e3c:	e78c      	b.n	8009d58 <Setup0_Process+0xc0>
           && (pInformation->USBwIndex1 == 0))
 8009e3e:	6863      	ldr	r3, [r4, #4]
 8009e40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e48:	f47f af56 	bne.w	8009cf8 <Setup0_Process+0x60>
 8009e4c:	7820      	ldrb	r0, [r4, #0]
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009e4e:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8009e52:	f040 80d6 	bne.w	800a002 <Setup0_Process+0x36a>
        && (pInformation->USBwIndex == 0))
 8009e56:	88a3      	ldrh	r3, [r4, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f47f af4d 	bne.w	8009cf8 <Setup0_Process+0x60>
        CopyRoutine = Standard_GetStatus;
 8009e5e:	4b3f      	ldr	r3, [pc, #252]	; (8009f5c <Setup0_Process+0x2c4>)
 8009e60:	e798      	b.n	8009d94 <Setup0_Process+0xfc>
  else if (Request_No == GET_INTERFACE)
 8009e62:	280a      	cmp	r0, #10
 8009e64:	f47f af48 	bne.w	8009cf8 <Setup0_Process+0x60>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009e68:	7823      	ldrb	r3, [r4, #0]
 8009e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	f47f af42 	bne.w	8009cf8 <Setup0_Process+0x60>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8009e74:	7aa3      	ldrb	r3, [r4, #10]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f43f af3e 	beq.w	8009cf8 <Setup0_Process+0x60>
 8009e7c:	8861      	ldrh	r1, [r4, #2]
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	f47f af3a 	bne.w	8009cf8 <Setup0_Process+0x60>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8009e84:	6863      	ldr	r3, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8009e86:	4d2f      	ldr	r5, [pc, #188]	; (8009f44 <Setup0_Process+0x2ac>)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8009e88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e90:	f47f af33 	bne.w	8009cfa <Setup0_Process+0x62>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	7960      	ldrb	r0, [r4, #5]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	4798      	blx	r3
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f040 80ed 	bne.w	800a07c <Setup0_Process+0x3e4>
 8009ea2:	6834      	ldr	r4, [r6, #0]
      CopyRoutine = Standard_GetInterface;
 8009ea4:	4b2e      	ldr	r3, [pc, #184]	; (8009f60 <Setup0_Process+0x2c8>)
 8009ea6:	e775      	b.n	8009d94 <Setup0_Process+0xfc>
    __IO uint32_t wLength = pInformation->USBwLength;
 8009ea8:	88d9      	ldrh	r1, [r3, #6]
 8009eaa:	9101      	str	r1, [sp, #4]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8009eac:	9801      	ldr	r0, [sp, #4]
 8009eae:	4282      	cmp	r2, r0
 8009eb0:	d834      	bhi.n	8009f1c <Setup0_Process+0x284>
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8009eb2:	4291      	cmp	r1, r2
 8009eb4:	f240 80ab 	bls.w	800a00e <Setup0_Process+0x376>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8009eb8:	4922      	ldr	r1, [pc, #136]	; (8009f44 <Setup0_Process+0x2ac>)
 8009eba:	6809      	ldr	r1, [r1, #0]
 8009ebc:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 8009ec0:	b281      	uxth	r1, r0
 8009ec2:	4291      	cmp	r1, r2
 8009ec4:	f240 80a8 	bls.w	800a018 <Setup0_Process+0x380>
        Data_Mul_MaxPacketSize = FALSE;
 8009ec8:	2000      	movs	r0, #0
 8009eca:	4a26      	ldr	r2, [pc, #152]	; (8009f64 <Setup0_Process+0x2cc>)
 8009ecc:	6010      	str	r0, [r2, #0]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8009ece:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 8009ed0:	f7ff fdc8 	bl	8009a64 <DataStageIn>
 8009ed4:	e740      	b.n	8009d58 <Setup0_Process+0xc0>
    if (RequestNo == SET_INTERFACE)
 8009ed6:	2f0b      	cmp	r7, #11
 8009ed8:	f47f af31 	bne.w	8009d3e <Setup0_Process+0xa6>
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8009edc:	4d19      	ldr	r5, [pc, #100]	; (8009f44 <Setup0_Process+0x2ac>)
 8009ede:	78e1      	ldrb	r1, [r4, #3]
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	7960      	ldrb	r0, [r4, #5]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	4798      	blx	r3
  if (pInformation->Current_Configuration != 0)
 8009ee8:	6833      	ldr	r3, [r6, #0]
 8009eea:	7a9a      	ldrb	r2, [r3, #10]
 8009eec:	2a00      	cmp	r2, #0
 8009eee:	f43f af27 	beq.w	8009d40 <Setup0_Process+0xa8>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	f47f af24 	bne.w	8009d40 <Setup0_Process+0xa8>
 8009ef8:	791a      	ldrb	r2, [r3, #4]
 8009efa:	2a00      	cmp	r2, #0
 8009efc:	f47f af20 	bne.w	8009d40 <Setup0_Process+0xa8>
        || (pInformation->USBwValue1 != 0))
 8009f00:	789b      	ldrb	r3, [r3, #2]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f47f af1c 	bne.w	8009d40 <Setup0_Process+0xa8>
      pUser_Standard_Requests->User_SetInterface();
 8009f08:	4b17      	ldr	r3, [pc, #92]	; (8009f68 <Setup0_Process+0x2d0>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8009f10:	6834      	ldr	r4, [r6, #0]
 8009f12:	7962      	ldrb	r2, [r4, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8009f14:	78e3      	ldrb	r3, [r4, #3]
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8009f16:	72e2      	strb	r2, [r4, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8009f18:	7323      	strb	r3, [r4, #12]
 8009f1a:	e76b      	b.n	8009df4 <Setup0_Process+0x15c>
 8009f1c:	4a09      	ldr	r2, [pc, #36]	; (8009f44 <Setup0_Process+0x2ac>)
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8009f1e:	9901      	ldr	r1, [sp, #4]
 8009f20:	6812      	ldr	r2, [r2, #0]
 8009f22:	8219      	strh	r1, [r3, #16]
 8009f24:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8009f28:	e7d1      	b.n	8009ece <Setup0_Process+0x236>
      pInformation->ControlState = PAUSE;
 8009f2a:	2209      	movs	r2, #9
 8009f2c:	6833      	ldr	r3, [r6, #0]
 8009f2e:	721a      	strb	r2, [r3, #8]
 8009f30:	e712      	b.n	8009d58 <Setup0_Process+0xc0>
        CopyRoutine = pProperty->GetConfigDescriptor;
 8009f32:	682b      	ldr	r3, [r5, #0]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	e77b      	b.n	8009e30 <Setup0_Process+0x198>
 8009f38:	20001308 	.word	0x20001308
 8009f3c:	40005c50 	.word	0x40005c50
 8009f40:	20003004 	.word	0x20003004
 8009f44:	200012e0 	.word	0x200012e0
 8009f48:	2000006c 	.word	0x2000006c
 8009f4c:	2000130e 	.word	0x2000130e
 8009f50:	20001310 	.word	0x20001310
 8009f54:	08009985 	.word	0x08009985
 8009f58:	20003002 	.word	0x20003002
 8009f5c:	080099d5 	.word	0x080099d5
 8009f60:	080099ad 	.word	0x080099ad
 8009f64:	20000c08 	.word	0x20000c08
 8009f68:	20001304 	.word	0x20001304
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8009f6c:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f6ff aeef 	blt.w	8009d54 <Setup0_Process+0xbc>
 8009f76:	78a3      	ldrb	r3, [r4, #2]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f47f aeeb 	bne.w	8009d54 <Setup0_Process+0xbc>
          || (pInformation->USBwIndex != 0)
 8009f7e:	88a3      	ldrh	r3, [r4, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f47f aee7 	bne.w	8009d54 <Setup0_Process+0xbc>
          || (pInformation->Current_Configuration != 0))
 8009f86:	7aa3      	ldrb	r3, [r4, #10]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f43f af33 	beq.w	8009df4 <Setup0_Process+0x15c>
 8009f8e:	e6e1      	b.n	8009d54 <Setup0_Process+0xbc>
    if (RequestNo == CLEAR_FEATURE)
 8009f90:	2f01      	cmp	r7, #1
 8009f92:	f43f af2a 	beq.w	8009dea <Setup0_Process+0x152>
    else if (RequestNo == SET_FEATURE)
 8009f96:	2f03      	cmp	r7, #3
 8009f98:	f47f aed1 	bne.w	8009d3e <Setup0_Process+0xa6>
      Result = Standard_SetEndPointFeature();
 8009f9c:	f7ff fe24 	bl	8009be8 <Standard_SetEndPointFeature>
 8009fa0:	e725      	b.n	8009dee <Setup0_Process+0x156>
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8009fa2:	78e3      	ldrb	r3, [r4, #3]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	f47f aeca 	bne.w	8009d3e <Setup0_Process+0xa6>
          && (pInformation->USBwIndex == 0)
 8009faa:	88a3      	ldrh	r3, [r4, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f47f aec6 	bne.w	8009d3e <Setup0_Process+0xa6>
          && (ValBit(pInformation->Current_Feature, 5)))
 8009fb2:	7a63      	ldrb	r3, [r4, #9]
 8009fb4:	069a      	lsls	r2, r3, #26
 8009fb6:	f57f aec2 	bpl.w	8009d3e <Setup0_Process+0xa6>
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009fba:	4a32      	ldr	r2, [pc, #200]	; (800a084 <Setup0_Process+0x3ec>)
  SetBit(pInformation->Current_Feature, 5);
 8009fbc:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009fc0:	6812      	ldr	r2, [r2, #0]
  SetBit(pInformation->Current_Feature, 5);
 8009fc2:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009fc4:	69d3      	ldr	r3, [r2, #28]
 8009fc6:	4798      	blx	r3
 8009fc8:	6834      	ldr	r4, [r6, #0]
 8009fca:	e713      	b.n	8009df4 <Setup0_Process+0x15c>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8009fcc:	4a2e      	ldr	r2, [pc, #184]	; (800a088 <Setup0_Process+0x3f0>)
  if ((pInformation->USBwValue0 <=
 8009fce:	78e3      	ldrb	r3, [r4, #3]
 8009fd0:	7852      	ldrb	r2, [r2, #1]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	f4ff aeb3 	bcc.w	8009d3e <Setup0_Process+0xa6>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8009fd8:	78a2      	ldrb	r2, [r4, #2]
 8009fda:	2a00      	cmp	r2, #0
 8009fdc:	f47f aeaf 	bne.w	8009d3e <Setup0_Process+0xa6>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8009fe0:	88a2      	ldrh	r2, [r4, #4]
 8009fe2:	2a00      	cmp	r2, #0
 8009fe4:	f47f aeab 	bne.w	8009d3e <Setup0_Process+0xa6>
    pUser_Standard_Requests->User_SetConfiguration();
 8009fe8:	4a26      	ldr	r2, [pc, #152]	; (800a084 <Setup0_Process+0x3ec>)
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8009fea:	72a3      	strb	r3, [r4, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8009fec:	6813      	ldr	r3, [r2, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	4798      	blx	r3
 8009ff2:	6834      	ldr	r4, [r6, #0]
 8009ff4:	e6fe      	b.n	8009df4 <Setup0_Process+0x15c>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8009ff6:	682b      	ldr	r3, [r5, #0]
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	e719      	b.n	8009e30 <Setup0_Process+0x198>
 8009ffc:	6834      	ldr	r4, [r6, #0]
    if (Result == USB_NOT_READY)
 8009ffe:	2309      	movs	r3, #9
 800a000:	e6a9      	b.n	8009d56 <Setup0_Process+0xbe>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a002:	2801      	cmp	r0, #1
 800a004:	d02d      	beq.n	800a062 <Setup0_Process+0x3ca>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a006:	2802      	cmp	r0, #2
 800a008:	d011      	beq.n	800a02e <Setup0_Process+0x396>
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a00a:	2000      	movs	r0, #0
 800a00c:	e674      	b.n	8009cf8 <Setup0_Process+0x60>
 800a00e:	4a1f      	ldr	r2, [pc, #124]	; (800a08c <Setup0_Process+0x3f4>)
 800a010:	6812      	ldr	r2, [r2, #0]
 800a012:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a016:	e75a      	b.n	8009ece <Setup0_Process+0x236>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800a018:	fb92 f4f0 	sdiv	r4, r2, r0
 800a01c:	fb00 2214 	mls	r2, r0, r4, r2
 800a020:	2a00      	cmp	r2, #0
 800a022:	f47f af54 	bne.w	8009ece <Setup0_Process+0x236>
        Data_Mul_MaxPacketSize = TRUE;
 800a026:	2001      	movs	r0, #1
 800a028:	4a19      	ldr	r2, [pc, #100]	; (800a090 <Setup0_Process+0x3f8>)
 800a02a:	6010      	str	r0, [r2, #0]
 800a02c:	e74f      	b.n	8009ece <Setup0_Process+0x236>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800a02e:	7960      	ldrb	r0, [r4, #5]
 800a030:	f000 020f 	and.w	r2, r0, #15
        Status = _GetEPTxStatus(Related_Endpoint);
 800a034:	0093      	lsls	r3, r2, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 800a036:	0601      	lsls	r1, r0, #24
        Status = _GetEPTxStatus(Related_Endpoint);
 800a038:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a03c:	4912      	ldr	r1, [pc, #72]	; (800a088 <Setup0_Process+0x3f0>)
        Status = _GetEPTxStatus(Related_Endpoint);
 800a03e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800a042:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a044:	7809      	ldrb	r1, [r1, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 800a046:	bf4c      	ite	mi
 800a048:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 800a04c:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a050:	428a      	cmp	r2, r1
 800a052:	d2da      	bcs.n	800a00a <Setup0_Process+0x372>
 800a054:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 800a058:	d1d7      	bne.n	800a00a <Setup0_Process+0x372>
          && (Status != 0))
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f47f aeff 	bne.w	8009e5e <Setup0_Process+0x1c6>
 800a060:	e64a      	b.n	8009cf8 <Setup0_Process+0x60>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800a062:	4d0a      	ldr	r5, [pc, #40]	; (800a08c <Setup0_Process+0x3f4>)
 800a064:	7960      	ldrb	r0, [r4, #5]
 800a066:	682b      	ldr	r3, [r5, #0]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	4798      	blx	r3
 800a06c:	b930      	cbnz	r0, 800a07c <Setup0_Process+0x3e4>
          && (pInformation->Current_Configuration != 0))
 800a06e:	6834      	ldr	r4, [r6, #0]
 800a070:	7aa3      	ldrb	r3, [r4, #10]
 800a072:	2b00      	cmp	r3, #0
 800a074:	f47f aef3 	bne.w	8009e5e <Setup0_Process+0x1c6>
 800a078:	7860      	ldrb	r0, [r4, #1]
 800a07a:	e63e      	b.n	8009cfa <Setup0_Process+0x62>
 800a07c:	6833      	ldr	r3, [r6, #0]
 800a07e:	7858      	ldrb	r0, [r3, #1]
 800a080:	e63b      	b.n	8009cfa <Setup0_Process+0x62>
 800a082:	bf00      	nop
 800a084:	20001304 	.word	0x20001304
 800a088:	2000009c 	.word	0x2000009c
 800a08c:	200012e0 	.word	0x200012e0
 800a090:	20000c08 	.word	0x20000c08

0800a094 <In0_Process>:
{
 800a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a096:	4c29      	ldr	r4, [pc, #164]	; (800a13c <In0_Process+0xa8>)
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a09c:	2a02      	cmp	r2, #2
 800a09e:	d026      	beq.n	800a0ee <In0_Process+0x5a>
 800a0a0:	2a04      	cmp	r2, #4
 800a0a2:	d024      	beq.n	800a0ee <In0_Process+0x5a>
  else if (ControlState == WAIT_STATUS_IN)
 800a0a4:	2a06      	cmp	r2, #6
 800a0a6:	d018      	beq.n	800a0da <In0_Process+0x46>
 800a0a8:	2108      	movs	r1, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a0aa:	4a25      	ldr	r2, [pc, #148]	; (800a140 <In0_Process+0xac>)
  pInformation->ControlState = ControlState;
 800a0ac:	7219      	strb	r1, [r3, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a0b4:	f000 faee 	bl	800a694 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	7a18      	ldrb	r0, [r3, #8]
 800a0bc:	2808      	cmp	r0, #8
 800a0be:	d106      	bne.n	800a0ce <In0_Process+0x3a>
    vSetEPRxStatus(EP_RX_STALL);
 800a0c0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a0c4:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a0c6:	491f      	ldr	r1, [pc, #124]	; (800a144 <In0_Process+0xb0>)
    vSetEPTxStatus(EP_TX_STALL);
 800a0c8:	4b1f      	ldr	r3, [pc, #124]	; (800a148 <In0_Process+0xb4>)
    vSetEPRxStatus(EP_RX_STALL);
 800a0ca:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a0cc:	801a      	strh	r2, [r3, #0]
}
 800a0ce:	f1a0 0009 	sub.w	r0, r0, #9
 800a0d2:	fab0 f080 	clz	r0, r0
 800a0d6:	0940      	lsrs	r0, r0, #5
 800a0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a0da:	785a      	ldrb	r2, [r3, #1]
 800a0dc:	2a05      	cmp	r2, #5
 800a0de:	d00b      	beq.n	800a0f8 <In0_Process+0x64>
    (*pProperty->Process_Status_IN)();
 800a0e0:	4b1a      	ldr	r3, [pc, #104]	; (800a14c <In0_Process+0xb8>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	4798      	blx	r3
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	2108      	movs	r1, #8
 800a0ec:	e7dd      	b.n	800a0aa <In0_Process+0x16>
    DataStageIn();
 800a0ee:	f7ff fcb9 	bl	8009a64 <DataStageIn>
    ControlState = pInformation->ControlState;
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	7a19      	ldrb	r1, [r3, #8]
 800a0f6:	e7d8      	b.n	800a0aa <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a0f8:	781a      	ldrb	r2, [r3, #0]
 800a0fa:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800a0fe:	d1ef      	bne.n	800a0e0 <In0_Process+0x4c>
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a100:	4913      	ldr	r1, [pc, #76]	; (800a150 <In0_Process+0xbc>)
      SetDeviceAddress(pInformation->USBwValue0);
 800a102:	f893 e003 	ldrb.w	lr, [r3, #3]
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a106:	780d      	ldrb	r5, [r1, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800a108:	b175      	cbz	r5, 800a128 <In0_Process+0x94>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a10a:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a10e:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a112:	4910      	ldr	r1, [pc, #64]	; (800a154 <In0_Process+0xc0>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a114:	680b      	ldr	r3, [r1, #0]
 800a116:	ea42 0006 	orr.w	r0, r2, r6
 800a11a:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a11c:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a11e:	4303      	orrs	r3, r0
  for (i = 0; i < nEP; i++)
 800a120:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a122:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a126:	d1f5      	bne.n	800a114 <In0_Process+0x80>
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a128:	490b      	ldr	r1, [pc, #44]	; (800a158 <In0_Process+0xc4>)
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a12a:	4a0c      	ldr	r2, [pc, #48]	; (800a15c <In0_Process+0xc8>)
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a12c:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
 800a130:	600b      	str	r3, [r1, #0]
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a132:	6813      	ldr	r3, [r2, #0]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	4798      	blx	r3
 800a138:	e7d2      	b.n	800a0e0 <In0_Process+0x4c>
 800a13a:	bf00      	nop
 800a13c:	20001308 	.word	0x20001308
 800a140:	2000006c 	.word	0x2000006c
 800a144:	2000130e 	.word	0x2000130e
 800a148:	20001310 	.word	0x20001310
 800a14c:	200012e0 	.word	0x200012e0
 800a150:	2000009c 	.word	0x2000009c
 800a154:	40005c00 	.word	0x40005c00
 800a158:	40005c4c 	.word	0x40005c4c
 800a15c:	20001304 	.word	0x20001304

0800a160 <Out0_Process>:
{
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a162:	4d3c      	ldr	r5, [pc, #240]	; (800a254 <Out0_Process+0xf4>)
 800a164:	682c      	ldr	r4, [r5, #0]
 800a166:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d007      	beq.n	800a17c <Out0_Process+0x1c>
 800a16c:	2b04      	cmp	r3, #4
 800a16e:	d005      	beq.n	800a17c <Out0_Process+0x1c>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800a170:	2b03      	cmp	r3, #3
 800a172:	d01c      	beq.n	800a1ae <Out0_Process+0x4e>
 800a174:	2b05      	cmp	r3, #5
 800a176:	d01a      	beq.n	800a1ae <Out0_Process+0x4e>
  else if (ControlState == WAIT_STATUS_OUT)
 800a178:	2b07      	cmp	r3, #7
 800a17a:	d049      	beq.n	800a210 <Out0_Process+0xb0>
 800a17c:	2308      	movs	r3, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a17e:	4a36      	ldr	r2, [pc, #216]	; (800a258 <Out0_Process+0xf8>)
  pInformation->ControlState = ControlState;
 800a180:	7223      	strb	r3, [r4, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a182:	2000      	movs	r0, #0
 800a184:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a188:	f000 fa84 	bl	800a694 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	7a18      	ldrb	r0, [r3, #8]
 800a190:	2808      	cmp	r0, #8
 800a192:	d106      	bne.n	800a1a2 <Out0_Process+0x42>
    vSetEPRxStatus(EP_RX_STALL);
 800a194:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a198:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a19a:	4930      	ldr	r1, [pc, #192]	; (800a25c <Out0_Process+0xfc>)
    vSetEPTxStatus(EP_TX_STALL);
 800a19c:	4b30      	ldr	r3, [pc, #192]	; (800a260 <Out0_Process+0x100>)
    vSetEPRxStatus(EP_RX_STALL);
 800a19e:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a1a0:	801a      	strh	r2, [r3, #0]
  return Post0_Process();
 800a1a2:	f1a0 0009 	sub.w	r0, r0, #9
 800a1a6:	fab0 f080 	clz	r0, r0
 800a1aa:	0940      	lsrs	r0, r0, #5
}
 800a1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pEPinfo->CopyData && save_rLength)
 800a1ae:	69a3      	ldr	r3, [r4, #24]
  save_rLength = pEPinfo->Usb_rLength;
 800a1b0:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 800a1b2:	b1bb      	cbz	r3, 800a1e4 <Out0_Process+0x84>
 800a1b4:	2a00      	cmp	r2, #0
 800a1b6:	d032      	beq.n	800a21e <Out0_Process+0xbe>
    Length = pEPinfo->PacketSize;
 800a1b8:	8aa6      	ldrh	r6, [r4, #20]
    Buffer = (*pEPinfo->CopyData)(Length);
 800a1ba:	4296      	cmp	r6, r2
 800a1bc:	bf28      	it	cs
 800a1be:	4616      	movcs	r6, r2
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 800a1c4:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a1c6:	8a63      	ldrh	r3, [r4, #18]
    pEPinfo->Usb_rLength -= Length;
 800a1c8:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 800a1ca:	4433      	add	r3, r6
    Buffer = (*pEPinfo->CopyData)(Length);
 800a1cc:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800a1ce:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a1d0:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	f000 fa42 	bl	800a65c <GetEPRxAddr>
 800a1d8:	4632      	mov	r2, r6
 800a1da:	4601      	mov	r1, r0
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f000 f959 	bl	800a494 <PMAToUserBufferCopy>
 800a1e2:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->Usb_rLength != 0)
 800a1e4:	b302      	cbz	r2, 800a228 <Out0_Process+0xc8>
    SetEPTxCount(ENDP0, 0);
 800a1e6:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a1e8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a1ec:	4b1b      	ldr	r3, [pc, #108]	; (800a25c <Out0_Process+0xfc>)
    SetEPTxCount(ENDP0, 0);
 800a1ee:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a1f0:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800a1f2:	f000 fa41 	bl	800a678 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a1f6:	2230      	movs	r2, #48	; 0x30
 800a1f8:	8a23      	ldrh	r3, [r4, #16]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a1fa:	8aa1      	ldrh	r1, [r4, #20]
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a1fc:	4818      	ldr	r0, [pc, #96]	; (800a260 <Out0_Process+0x100>)
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a1fe:	4299      	cmp	r1, r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a200:	8002      	strh	r2, [r0, #0]
 800a202:	682a      	ldr	r2, [r5, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a204:	d922      	bls.n	800a24c <Out0_Process+0xec>
    if (pEPinfo->Usb_rLength > 0)
 800a206:	b31b      	cbz	r3, 800a250 <Out0_Process+0xf0>
      pInformation->ControlState = LAST_OUT_DATA;
 800a208:	2305      	movs	r3, #5
 800a20a:	4614      	mov	r4, r2
 800a20c:	7213      	strb	r3, [r2, #8]
 800a20e:	e7b6      	b.n	800a17e <Out0_Process+0x1e>
    (*pProperty->Process_Status_OUT)();
 800a210:	4b14      	ldr	r3, [pc, #80]	; (800a264 <Out0_Process+0x104>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	4798      	blx	r3
 800a218:	682c      	ldr	r4, [r5, #0]
 800a21a:	2308      	movs	r3, #8
 800a21c:	e7af      	b.n	800a17e <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a21e:	8aa3      	ldrh	r3, [r4, #20]
 800a220:	b933      	cbnz	r3, 800a230 <Out0_Process+0xd0>
    pInformation->ControlState = OUT_DATA;
 800a222:	2303      	movs	r3, #3
 800a224:	7223      	strb	r3, [r4, #8]
 800a226:	e7aa      	b.n	800a17e <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a228:	8aa3      	ldrh	r3, [r4, #20]
 800a22a:	682c      	ldr	r4, [r5, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d0f8      	beq.n	800a222 <Out0_Process+0xc2>
 800a230:	480b      	ldr	r0, [pc, #44]	; (800a260 <Out0_Process+0x100>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a232:	2306      	movs	r3, #6
      USB_StatusIn();
 800a234:	2700      	movs	r7, #0
 800a236:	2630      	movs	r6, #48	; 0x30
 800a238:	4a0b      	ldr	r2, [pc, #44]	; (800a268 <Out0_Process+0x108>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a23a:	7223      	strb	r3, [r4, #8]
      USB_StatusIn();
 800a23c:	6811      	ldr	r1, [r2, #0]
 800a23e:	4a0b      	ldr	r2, [pc, #44]	; (800a26c <Out0_Process+0x10c>)
 800a240:	b289      	uxth	r1, r1
 800a242:	440a      	add	r2, r1
 800a244:	0052      	lsls	r2, r2, #1
 800a246:	6017      	str	r7, [r2, #0]
 800a248:	8006      	strh	r6, [r0, #0]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800a24a:	e798      	b.n	800a17e <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a24c:	4614      	mov	r4, r2
 800a24e:	e7e8      	b.n	800a222 <Out0_Process+0xc2>
    if (pEPinfo->Usb_rLength > 0)
 800a250:	4614      	mov	r4, r2
 800a252:	e7ee      	b.n	800a232 <Out0_Process+0xd2>
 800a254:	20001308 	.word	0x20001308
 800a258:	2000006c 	.word	0x2000006c
 800a25c:	2000130e 	.word	0x2000130e
 800a260:	20001310 	.word	0x20001310
 800a264:	200012e0 	.word	0x200012e0
 800a268:	40005c50 	.word	0x40005c50
 800a26c:	20003002 	.word	0x20003002

0800a270 <SetDeviceAddress>:
{
 800a270:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a272:	4b0c      	ldr	r3, [pc, #48]	; (800a2a4 <SetDeviceAddress+0x34>)
 800a274:	781d      	ldrb	r5, [r3, #0]
  for (i = 0; i < nEP; i++)
 800a276:	b17d      	cbz	r5, 800a298 <SetDeviceAddress+0x28>
 800a278:	2200      	movs	r2, #0
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a27a:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a27e:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a282:	4909      	ldr	r1, [pc, #36]	; (800a2a8 <SetDeviceAddress+0x38>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a284:	680b      	ldr	r3, [r1, #0]
 800a286:	ea42 0406 	orr.w	r4, r2, r6
 800a28a:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a28c:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a28e:	4323      	orrs	r3, r4
  for (i = 0; i < nEP; i++)
 800a290:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a292:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a296:	d1f5      	bne.n	800a284 <SetDeviceAddress+0x14>
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a298:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <SetDeviceAddress+0x3c>)
 800a29a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800a29e:	6018      	str	r0, [r3, #0]
#endif  /* STM32F10X_CL */  
}
 800a2a0:	bcf0      	pop	{r4, r5, r6, r7}
 800a2a2:	4770      	bx	lr
 800a2a4:	2000009c 	.word	0x2000009c
 800a2a8:	40005c00 	.word	0x40005c00
 800a2ac:	40005c4c 	.word	0x40005c4c

0800a2b0 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop

0800a2b4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800a2b4:	b470      	push	{r4, r5, r6}
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 800a2b6:	2602      	movs	r6, #2
  pInformation = &Device_Info;
 800a2b8:	4a06      	ldr	r2, [pc, #24]	; (800a2d4 <USB_Init+0x20>)
 800a2ba:	4d07      	ldr	r5, [pc, #28]	; (800a2d8 <USB_Init+0x24>)
  pProperty = &Device_Property;
 800a2bc:	4c07      	ldr	r4, [pc, #28]	; (800a2dc <USB_Init+0x28>)
 800a2be:	4b08      	ldr	r3, [pc, #32]	; (800a2e0 <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 800a2c0:	4908      	ldr	r1, [pc, #32]	; (800a2e4 <USB_Init+0x30>)
 800a2c2:	4809      	ldr	r0, [pc, #36]	; (800a2e8 <USB_Init+0x34>)
  pInformation->ControlState = 2;
 800a2c4:	7216      	strb	r6, [r2, #8]
  pProperty = &Device_Property;
 800a2c6:	6023      	str	r3, [r4, #0]
  pInformation = &Device_Info;
 800a2c8:	602a      	str	r2, [r5, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800a2ca:	681b      	ldr	r3, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800a2cc:	6008      	str	r0, [r1, #0]
}
 800a2ce:	bc70      	pop	{r4, r5, r6}
  pProperty->Init();
 800a2d0:	4718      	bx	r3
 800a2d2:	bf00      	nop
 800a2d4:	200012e8 	.word	0x200012e8
 800a2d8:	20001308 	.word	0x20001308
 800a2dc:	200012e0 	.word	0x200012e0
 800a2e0:	2000006c 	.word	0x2000006c
 800a2e4:	20001304 	.word	0x20001304
 800a2e8:	200000c0 	.word	0x200000c0

0800a2ec <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800a2ec:	2300      	movs	r3, #0
{
 800a2ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f2:	4e56      	ldr	r6, [pc, #344]	; (800a44c <CTR_LP+0x160>)
 800a2f4:	b084      	sub	sp, #16
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a2f6:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800a464 <CTR_LP+0x178>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a2fa:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800a468 <CTR_LP+0x17c>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800a2fe:	4f54      	ldr	r7, [pc, #336]	; (800a450 <CTR_LP+0x164>)
  __IO uint16_t wEPVal = 0;
 800a300:	f8ad 300e 	strh.w	r3, [sp, #14]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a304:	f8d9 3000 	ldr.w	r3, [r9]
	    SaveRState = _GetENDPOINT(ENDP0);
 800a308:	4c52      	ldr	r4, [pc, #328]	; (800a454 <CTR_LP+0x168>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a30a:	b299      	uxth	r1, r3
 800a30c:	041b      	lsls	r3, r3, #16
	    SaveRState = _GetENDPOINT(ENDP0);
 800a30e:	4d52      	ldr	r5, [pc, #328]	; (800a458 <CTR_LP+0x16c>)
	    SaveTState = SaveRState & EPTX_STAT;
 800a310:	4a52      	ldr	r2, [pc, #328]	; (800a45c <CTR_LP+0x170>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a312:	8031      	strh	r1, [r6, #0]
 800a314:	f140 808e 	bpl.w	800a434 <CTR_LP+0x148>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a318:	8833      	ldrh	r3, [r6, #0]
 800a31a:	f003 030f 	and.w	r3, r3, #15
      wEPVal = _GetENDPOINT(EPindex);
 800a31e:	0099      	lsls	r1, r3, #2
 800a320:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800a324:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a328:	f888 3000 	strb.w	r3, [r8]
    if (EPindex == 0)
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d130      	bne.n	800a392 <CTR_LP+0xa6>
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800a330:	f64b 7abf 	movw	sl, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	b29b      	uxth	r3, r3
 800a338:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800a33a:	882b      	ldrh	r3, [r5, #0]
 800a33c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a340:	8013      	strh	r3, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 800a342:	882b      	ldrh	r3, [r5, #0]
 800a344:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a348:	802b      	strh	r3, [r5, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	ea03 030a 	and.w	r3, r3, sl
 800a350:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a354:	f083 0320 	eor.w	r3, r3, #32
 800a358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a360:	6023      	str	r3, [r4, #0]
      if ((wIstr & ISTR_DIR) == 0)
 800a362:	8833      	ldrh	r3, [r6, #0]
 800a364:	06d8      	lsls	r0, r3, #27
 800a366:	d53c      	bpl.n	800a3e2 <CTR_LP+0xf6>
        wEPVal = _GetENDPOINT(ENDP0);
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	f8ad 300e 	strh.w	r3, [sp, #14]
        if ((wEPVal &EP_SETUP) != 0)
 800a370:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a374:	0519      	lsls	r1, r3, #20
 800a376:	d460      	bmi.n	800a43a <CTR_LP+0x14e>
        else if ((wEPVal & EP_CTR_RX) != 0)
 800a378:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a37c:	041b      	lsls	r3, r3, #16
 800a37e:	d5c1      	bpl.n	800a304 <CTR_LP+0x18>
          _ClearEP_CTR_RX(ENDP0);
 800a380:	f640 718f 	movw	r1, #3983	; 0xf8f
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	9201      	str	r2, [sp, #4]
 800a388:	400b      	ands	r3, r1
 800a38a:	6023      	str	r3, [r4, #0]
          Out0_Process();
 800a38c:	f7ff fee8 	bl	800a160 <Out0_Process>
 800a390:	e02f      	b.n	800a3f2 <CTR_LP+0x106>
      wEPVal = _GetENDPOINT(EPindex);
 800a392:	680a      	ldr	r2, [r1, #0]
 800a394:	b292      	uxth	r2, r2
 800a396:	f8ad 200e 	strh.w	r2, [sp, #14]
      if ((wEPVal & EP_CTR_RX) != 0)
 800a39a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800a39e:	0410      	lsls	r0, r2, #16
 800a3a0:	d414      	bmi.n	800a3cc <CTR_LP+0xe0>
      if ((wEPVal & EP_CTR_TX) != 0)
 800a3a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a3a6:	061a      	lsls	r2, r3, #24
 800a3a8:	d5ac      	bpl.n	800a304 <CTR_LP+0x18>
        _ClearEP_CTR_TX(EPindex);
 800a3aa:	f648 700f 	movw	r0, #36623	; 0x8f0f
 800a3ae:	f898 2000 	ldrb.w	r2, [r8]
 800a3b2:	0093      	lsls	r3, r2, #2
 800a3b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3b8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800a3bc:	6819      	ldr	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800a3be:	3a01      	subs	r2, #1
        _ClearEP_CTR_TX(EPindex);
 800a3c0:	4001      	ands	r1, r0
        (*pEpInt_IN[EPindex-1])();
 800a3c2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
        _ClearEP_CTR_TX(EPindex);
 800a3c6:	6019      	str	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800a3c8:	4790      	blx	r2
 800a3ca:	e79b      	b.n	800a304 <CTR_LP+0x18>
        _ClearEP_CTR_RX(EPindex);
 800a3cc:	f640 748f 	movw	r4, #3983	; 0xf8f
 800a3d0:	680a      	ldr	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a3d2:	4823      	ldr	r0, [pc, #140]	; (800a460 <CTR_LP+0x174>)
        _ClearEP_CTR_RX(EPindex);
 800a3d4:	4022      	ands	r2, r4
        (*pEpInt_OUT[EPindex-1])();
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        _ClearEP_CTR_RX(EPindex);
 800a3dc:	600a      	str	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a3de:	4798      	blx	r3
 800a3e0:	e7df      	b.n	800a3a2 <CTR_LP+0xb6>
        _ClearEP_CTR_TX(ENDP0);
 800a3e2:	f648 710f 	movw	r1, #36623	; 0x8f0f
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	9201      	str	r2, [sp, #4]
 800a3ea:	400b      	ands	r3, r1
 800a3ec:	6023      	str	r3, [r4, #0]
        In0_Process();
 800a3ee:	f7ff fe51 	bl	800a094 <In0_Process>
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	8829      	ldrh	r1, [r5, #0]
 800a3f6:	ea03 0a0a 	and.w	sl, r3, sl
 800a3fa:	9a01      	ldr	r2, [sp, #4]
 800a3fc:	882b      	ldrh	r3, [r5, #0]
 800a3fe:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 800a402:	bf18      	it	ne
 800a404:	f48a 5a80 	eorne.w	sl, sl, #4096	; 0x1000
 800a408:	049e      	lsls	r6, r3, #18
 800a40a:	8813      	ldrh	r3, [r2, #0]
 800a40c:	bf48      	it	mi
 800a40e:	f48a 5a00 	eormi.w	sl, sl, #8192	; 0x2000
 800a412:	06dd      	lsls	r5, r3, #27
 800a414:	8813      	ldrh	r3, [r2, #0]
 800a416:	bf48      	it	mi
 800a418:	f08a 0a10 	eormi.w	sl, sl, #16
 800a41c:	069c      	lsls	r4, r3, #26
 800a41e:	bf48      	it	mi
 800a420:	f08a 0a20 	eormi.w	sl, sl, #32
 800a424:	f44a 4a00 	orr.w	sl, sl, #32768	; 0x8000
 800a428:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800a42c:	4a09      	ldr	r2, [pc, #36]	; (800a454 <CTR_LP+0x168>)
 800a42e:	fa1f f38a 	uxth.w	r3, sl
 800a432:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800a434:	b004      	add	sp, #16
 800a436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800a43a:	f640 718f 	movw	r1, #3983	; 0xf8f
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	9201      	str	r2, [sp, #4]
 800a442:	400b      	ands	r3, r1
 800a444:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800a446:	f7ff fc27 	bl	8009c98 <Setup0_Process>
 800a44a:	e7d2      	b.n	800a3f2 <CTR_LP+0x106>
 800a44c:	20001354 	.word	0x20001354
 800a450:	20000024 	.word	0x20000024
 800a454:	40005c00 	.word	0x40005c00
 800a458:	2000130e 	.word	0x2000130e
 800a45c:	20001310 	.word	0x20001310
 800a460:	20000040 	.word	0x20000040
 800a464:	40005c44 	.word	0x40005c44
 800a468:	200012e4 	.word	0x200012e4

0800a46c <UserToPMABufferCopy>:
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a46c:	3201      	adds	r2, #1
  uint32_t i, temp1;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800a46e:	1052      	asrs	r2, r2, #1
 800a470:	d00e      	beq.n	800a490 <UserToPMABufferCopy+0x24>
 800a472:	2300      	movs	r3, #0
{
 800a474:	b410      	push	{r4}
 800a476:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800a47a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 800a47e:	0049      	lsls	r1, r1, #1
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a480:	f830 4b02 	ldrh.w	r4, [r0], #2
 800a484:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 800a488:	3301      	adds	r3, #1
  for (i = n; i != 0; i--)
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d1f8      	bne.n	800a480 <UserToPMABufferCopy+0x14>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800a48e:	bc10      	pop	{r4}
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop

0800a494 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a494:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a498:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a49a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800a49e:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a4a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 800a4a4:	d005      	beq.n	800a4b2 <PMAToUserBufferCopy+0x1e>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a4a6:	f851 3b04 	ldr.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 800a4aa:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a4ac:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 800a4b0:	d1f9      	bne.n	800a4a6 <PMAToUserBufferCopy+0x12>
 800a4b2:	4770      	bx	lr

0800a4b4 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800a4b4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800a4b8:	4a01      	ldr	r2, [pc, #4]	; (800a4c0 <SetBTABLE+0xc>)
 800a4ba:	4003      	ands	r3, r0
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	4770      	bx	lr
 800a4c0:	40005c50 	.word	0x40005c50

0800a4c4 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800a4c4:	0080      	lsls	r0, r0, #2
 800a4c6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a4ca:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a4ce:	6803      	ldr	r3, [r0, #0]
 800a4d0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a4d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4d8:	4319      	orrs	r1, r3
 800a4da:	b289      	uxth	r1, r1
 800a4dc:	6001      	str	r1, [r0, #0]
 800a4de:	4770      	bx	lr

0800a4e0 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800a4e0:	0080      	lsls	r0, r0, #2
 800a4e2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a4e6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a4ea:	6803      	ldr	r3, [r0, #0]
 800a4ec:	06ca      	lsls	r2, r1, #27
 800a4ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	bf48      	it	mi
 800a4fa:	f083 0310 	eormi.w	r3, r3, #16
 800a4fe:	068a      	lsls	r2, r1, #26
 800a500:	bf48      	it	mi
 800a502:	f083 0320 	eormi.w	r3, r3, #32
 800a506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a50a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a50e:	6003      	str	r3, [r0, #0]
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop

0800a514 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800a514:	0080      	lsls	r0, r0, #2
 800a516:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a51a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a51e:	6803      	ldr	r3, [r0, #0]
 800a520:	04ca      	lsls	r2, r1, #19
 800a522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	bf48      	it	mi
 800a52e:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800a532:	048a      	lsls	r2, r1, #18
 800a534:	bf48      	it	mi
 800a536:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 800a53a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a53e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a542:	6003      	str	r3, [r0, #0]
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop

0800a548 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800a548:	0080      	lsls	r0, r0, #2
 800a54a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a54e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a552:	6803      	ldr	r3, [r0, #0]
 800a554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a56a:	6003      	str	r3, [r0, #0]
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop

0800a570 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800a570:	0080      	lsls	r0, r0, #2
 800a572:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a576:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a57a:	6803      	ldr	r3, [r0, #0]
 800a57c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a584:	b29b      	uxth	r3, r3
 800a586:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a58a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a58e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a592:	6003      	str	r3, [r0, #0]
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop

0800a598 <Clear_Status_Out>:
 800a598:	f640 630f 	movw	r3, #3599	; 0xe0f
 800a59c:	0080      	lsls	r0, r0, #2
 800a59e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a5a2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a5a6:	6802      	ldr	r2, [r0, #0]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b2:	6003      	str	r3, [r0, #0]
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop

0800a5b8 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800a5b8:	0080      	lsls	r0, r0, #2
 800a5ba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a5be:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a5c2:	6803      	ldr	r3, [r0, #0]
 800a5c4:	045b      	lsls	r3, r3, #17
 800a5c6:	d508      	bpl.n	800a5da <ClearDTOG_RX+0x22>
 800a5c8:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a5cc:	6803      	ldr	r3, [r0, #0]
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d8:	6003      	str	r3, [r0, #0]
 800a5da:	4770      	bx	lr

0800a5dc <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800a5dc:	0080      	lsls	r0, r0, #2
 800a5de:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a5e2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a5e6:	6803      	ldr	r3, [r0, #0]
 800a5e8:	065b      	lsls	r3, r3, #25
 800a5ea:	d508      	bpl.n	800a5fe <ClearDTOG_TX+0x22>
 800a5ec:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a5f0:	6803      	ldr	r3, [r0, #0]
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a5fc:	6003      	str	r3, [r0, #0]
 800a5fe:	4770      	bx	lr

0800a600 <SetEPTxAddr>:
 800a600:	4b06      	ldr	r3, [pc, #24]	; (800a61c <SetEPTxAddr+0x1c>)
 800a602:	0849      	lsrs	r1, r1, #1
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	0049      	lsls	r1, r1, #1
 800a608:	b29b      	uxth	r3, r3
 800a60a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a60e:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800a612:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800a616:	0040      	lsls	r0, r0, #1
 800a618:	6001      	str	r1, [r0, #0]
 800a61a:	4770      	bx	lr
 800a61c:	40005c50 	.word	0x40005c50

0800a620 <SetEPRxAddr>:
 800a620:	4a05      	ldr	r2, [pc, #20]	; (800a638 <SetEPRxAddr+0x18>)
 800a622:	4b06      	ldr	r3, [pc, #24]	; (800a63c <SetEPRxAddr+0x1c>)
 800a624:	6812      	ldr	r2, [r2, #0]
 800a626:	0849      	lsrs	r1, r1, #1
 800a628:	b292      	uxth	r2, r2
 800a62a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a62e:	4413      	add	r3, r2
 800a630:	0049      	lsls	r1, r1, #1
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	6019      	str	r1, [r3, #0]
 800a636:	4770      	bx	lr
 800a638:	40005c50 	.word	0x40005c50
 800a63c:	20003004 	.word	0x20003004

0800a640 <GetEPTxAddr>:
 800a640:	4b05      	ldr	r3, [pc, #20]	; (800a658 <GetEPTxAddr+0x18>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	b29b      	uxth	r3, r3
 800a646:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a64a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800a64e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800a652:	0040      	lsls	r0, r0, #1
 800a654:	8800      	ldrh	r0, [r0, #0]
 800a656:	4770      	bx	lr
 800a658:	40005c50 	.word	0x40005c50

0800a65c <GetEPRxAddr>:
 800a65c:	4a04      	ldr	r2, [pc, #16]	; (800a670 <GetEPRxAddr+0x14>)
 800a65e:	4b05      	ldr	r3, [pc, #20]	; (800a674 <GetEPRxAddr+0x18>)
 800a660:	6812      	ldr	r2, [r2, #0]
 800a662:	b292      	uxth	r2, r2
 800a664:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a668:	4403      	add	r3, r0
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	8818      	ldrh	r0, [r3, #0]
 800a66e:	4770      	bx	lr
 800a670:	40005c50 	.word	0x40005c50
 800a674:	20003004 	.word	0x20003004

0800a678 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800a678:	4a04      	ldr	r2, [pc, #16]	; (800a68c <SetEPTxCount+0x14>)
 800a67a:	4b05      	ldr	r3, [pc, #20]	; (800a690 <SetEPTxCount+0x18>)
 800a67c:	6812      	ldr	r2, [r2, #0]
 800a67e:	b292      	uxth	r2, r2
 800a680:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a684:	4403      	add	r3, r0
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	6019      	str	r1, [r3, #0]
 800a68a:	4770      	bx	lr
 800a68c:	40005c50 	.word	0x40005c50
 800a690:	20003002 	.word	0x20003002

0800a694 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800a694:	4a0e      	ldr	r2, [pc, #56]	; (800a6d0 <SetEPRxCount+0x3c>)
 800a696:	4b0f      	ldr	r3, [pc, #60]	; (800a6d4 <SetEPRxCount+0x40>)
 800a698:	6812      	ldr	r2, [r2, #0]
 800a69a:	293e      	cmp	r1, #62	; 0x3e
 800a69c:	b292      	uxth	r2, r2
 800a69e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a6a2:	4403      	add	r3, r0
 800a6a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6a8:	d90a      	bls.n	800a6c0 <SetEPRxCount+0x2c>
 800a6aa:	094a      	lsrs	r2, r1, #5
 800a6ac:	06c8      	lsls	r0, r1, #27
 800a6ae:	bf04      	itt	eq
 800a6b0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a6b4:	b292      	uxtheq	r2, r2
 800a6b6:	0292      	lsls	r2, r2, #10
 800a6b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	4770      	bx	lr
 800a6c0:	084a      	lsrs	r2, r1, #1
 800a6c2:	07c9      	lsls	r1, r1, #31
 800a6c4:	bf48      	it	mi
 800a6c6:	3201      	addmi	r2, #1
 800a6c8:	0292      	lsls	r2, r2, #10
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	40005c50 	.word	0x40005c50
 800a6d4:	20003006 	.word	0x20003006

0800a6d8 <GetEPRxCount>:
 800a6d8:	4a05      	ldr	r2, [pc, #20]	; (800a6f0 <GetEPRxCount+0x18>)
 800a6da:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <GetEPRxCount+0x1c>)
 800a6dc:	6812      	ldr	r2, [r2, #0]
 800a6de:	b292      	uxth	r2, r2
 800a6e0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a6e4:	4403      	add	r3, r0
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a6ee:	4770      	bx	lr
 800a6f0:	40005c50 	.word	0x40005c50
 800a6f4:	20003006 	.word	0x20003006

0800a6f8 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800a6f8:	b2c3      	uxtb	r3, r0
 800a6fa:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800a6fc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop

0800a704 <USB_SIL_Init>:
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800a704:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 800a706:	f44f 4306 	mov.w	r3, #34304	; 0x8600
{
 800a70a:	b410      	push	{r4}
  wInterrupt_Mask = IMR_MSK;
 800a70c:	4903      	ldr	r1, [pc, #12]	; (800a71c <USB_SIL_Init+0x18>)
  _SetISTR(0);
 800a70e:	4c04      	ldr	r4, [pc, #16]	; (800a720 <USB_SIL_Init+0x1c>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800a710:	4a04      	ldr	r2, [pc, #16]	; (800a724 <USB_SIL_Init+0x20>)
  _SetISTR(0);
 800a712:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800a714:	800b      	strh	r3, [r1, #0]
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 800a716:	bc10      	pop	{r4}
  _SetCNTR(wInterrupt_Mask);
 800a718:	6013      	str	r3, [r2, #0]
}
 800a71a:	4770      	bx	lr
 800a71c:	2000130c 	.word	0x2000130c
 800a720:	40005c44 	.word	0x40005c44
 800a724:	40005c40 	.word	0x40005c40

0800a728 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800a728:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800a72a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800a72e:	4628      	mov	r0, r5
{
 800a730:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800a732:	f7ff ffd1 	bl	800a6d8 <GetEPRxCount>
 800a736:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800a738:	4628      	mov	r0, r5
 800a73a:	f7ff ff8f 	bl	800a65c <GetEPRxAddr>
 800a73e:	4622      	mov	r2, r4
 800a740:	4601      	mov	r1, r0
 800a742:	4630      	mov	r0, r6
 800a744:	f7ff fea6 	bl	800a494 <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 800a748:	4620      	mov	r0, r4
 800a74a:	bd70      	pop	{r4, r5, r6, pc}

0800a74c <Set_USBClock>:

/*******************************************************************************
 * Description    : Configures USB Clock input (48MHz)
 *******************************************************************************/
void Set_USBClock(void)
{
 800a74c:	b508      	push	{r3, lr}
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800a74e:	2000      	movs	r0, #0
 800a750:	f7f7 f86c 	bl	800182c <RCC_USBCLKConfig>

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
}
 800a754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 800a758:	2101      	movs	r1, #1
 800a75a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a75e:	f7f7 b877 	b.w	8001850 <RCC_APB1PeriphClockCmd>
 800a762:	bf00      	nop

0800a764 <USB_Interrupts_Config>:

/*******************************************************************************
 * Description    : Configures the USB interrupts
 *******************************************************************************/
void USB_Interrupts_Config(void)
{
 800a764:	b500      	push	{lr}
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800a766:	f44f 60c0 	mov.w	r0, #1536	; 0x600
{
 800a76a:	b083      	sub	sp, #12
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800a76c:	f7f6 fcc2 	bl	80010f4 <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800a770:	4b04      	ldr	r3, [pc, #16]	; (800a784 <USB_Interrupts_Config+0x20>)
 800a772:	a802      	add	r0, sp, #8
 800a774:	f840 3d04 	str.w	r3, [r0, #-4]!
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800a778:	f7f6 fcc6 	bl	8001108 <NVIC_Init>
}
 800a77c:	b003      	add	sp, #12
 800a77e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a782:	bf00      	nop
 800a784:	01000114 	.word	0x01000114

0800a788 <USB_Cable_Config>:

/*******************************************************************************
 * Description    : Software Connection/Disconnection of USB Cable
 *******************************************************************************/
void USB_Cable_Config(FunctionalState NewState)
{
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop

0800a78c <Get_SerialNum>:
 *******************************************************************************/
void Get_SerialNum(void)
{
	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800a78c:	4a3a      	ldr	r2, [pc, #232]	; (800a878 <Get_SerialNum+0xec>)
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800a78e:	493b      	ldr	r1, [pc, #236]	; (800a87c <Get_SerialNum+0xf0>)
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800a790:	4b3b      	ldr	r3, [pc, #236]	; (800a880 <Get_SerialNum+0xf4>)
	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800a792:	6812      	ldr	r2, [r2, #0]
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800a794:	6809      	ldr	r1, [r1, #0]
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800a796:	681b      	ldr	r3, [r3, #0]

	Device_Serial0 += Device_Serial2;

	if (Device_Serial0 != 0)
 800a798:	18d2      	adds	r2, r2, r3
 800a79a:	d06c      	beq.n	800a876 <Get_SerialNum+0xea>
{
 800a79c:	b410      	push	{r4}
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;

		pbuf[2 * idx + 1] = 0;
 800a79e:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800a7a0:	0f10      	lsrs	r0, r2, #28
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7a2:	4b38      	ldr	r3, [pc, #224]	; (800a884 <Get_SerialNum+0xf8>)
		if (((value >> 28)) < 0xA)
 800a7a4:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7a6:	bf94      	ite	ls
 800a7a8:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7aa:	3037      	addhi	r0, #55	; 0x37
 800a7ac:	7098      	strb	r0, [r3, #2]
		if (((value >> 28)) < 0xA)
 800a7ae:	f3c2 6003 	ubfx	r0, r2, #24, #4
 800a7b2:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7b4:	bf94      	ite	ls
 800a7b6:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7b8:	3037      	addhi	r0, #55	; 0x37
 800a7ba:	7118      	strb	r0, [r3, #4]
		if (((value >> 28)) < 0xA)
 800a7bc:	f3c2 5003 	ubfx	r0, r2, #20, #4
 800a7c0:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7c2:	bf94      	ite	ls
 800a7c4:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7c6:	3037      	addhi	r0, #55	; 0x37
 800a7c8:	7198      	strb	r0, [r3, #6]
		if (((value >> 28)) < 0xA)
 800a7ca:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800a7ce:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7d0:	bf94      	ite	ls
 800a7d2:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7d4:	3037      	addhi	r0, #55	; 0x37
 800a7d6:	7218      	strb	r0, [r3, #8]
		if (((value >> 28)) < 0xA)
 800a7d8:	f3c2 3003 	ubfx	r0, r2, #12, #4
 800a7dc:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7de:	bf94      	ite	ls
 800a7e0:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7e2:	3037      	addhi	r0, #55	; 0x37
 800a7e4:	7298      	strb	r0, [r3, #10]
		if (((value >> 28)) < 0xA)
 800a7e6:	f3c2 2003 	ubfx	r0, r2, #8, #4
 800a7ea:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7ec:	bf94      	ite	ls
 800a7ee:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7f0:	3037      	addhi	r0, #55	; 0x37
 800a7f2:	7318      	strb	r0, [r3, #12]
		if (((value >> 28)) < 0xA)
 800a7f4:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800a7f8:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7fa:	bf94      	ite	ls
 800a7fc:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7fe:	3037      	addhi	r0, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800a800:	70dc      	strb	r4, [r3, #3]
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a802:	7398      	strb	r0, [r3, #14]
		pbuf[2 * idx + 1] = 0;
 800a804:	2400      	movs	r4, #0
 800a806:	2000      	movs	r0, #0
 800a808:	715c      	strb	r4, [r3, #5]
 800a80a:	73d8      	strb	r0, [r3, #15]
 800a80c:	2400      	movs	r4, #0
 800a80e:	2000      	movs	r0, #0
 800a810:	71dc      	strb	r4, [r3, #7]
 800a812:	7458      	strb	r0, [r3, #17]
 800a814:	2400      	movs	r4, #0
 800a816:	2000      	movs	r0, #0
 800a818:	725c      	strb	r4, [r3, #9]
 800a81a:	74d8      	strb	r0, [r3, #19]
 800a81c:	2400      	movs	r4, #0
 800a81e:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800a820:	f002 020f 	and.w	r2, r2, #15
 800a824:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a826:	bf94      	ite	ls
 800a828:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a82a:	3237      	addhi	r2, #55	; 0x37
 800a82c:	741a      	strb	r2, [r3, #16]
		if (((value >> 28)) < 0xA)
 800a82e:	0f0a      	lsrs	r2, r1, #28
 800a830:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a832:	bf94      	ite	ls
 800a834:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a836:	3237      	addhi	r2, #55	; 0x37
 800a838:	749a      	strb	r2, [r3, #18]
		if (((value >> 28)) < 0xA)
 800a83a:	f3c1 6203 	ubfx	r2, r1, #24, #4
 800a83e:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a840:	bf94      	ite	ls
 800a842:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a844:	3237      	addhi	r2, #55	; 0x37
 800a846:	751a      	strb	r2, [r3, #20]
		if (((value >> 28)) < 0xA)
 800a848:	f3c1 5203 	ubfx	r2, r1, #20, #4
 800a84c:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a84e:	bf94      	ite	ls
 800a850:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a852:	3237      	addhi	r2, #55	; 0x37
 800a854:	759a      	strb	r2, [r3, #22]
		if (((value >> 28)) < 0xA)
 800a856:	f3c1 4203 	ubfx	r2, r1, #16, #4
 800a85a:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a85c:	bf94      	ite	ls
 800a85e:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a860:	3237      	addhi	r2, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800a862:	72dc      	strb	r4, [r3, #11]
 800a864:	7558      	strb	r0, [r3, #21]
 800a866:	2400      	movs	r4, #0
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a868:	761a      	strb	r2, [r3, #24]
		pbuf[2 * idx + 1] = 0;
 800a86a:	2000      	movs	r0, #0
 800a86c:	2200      	movs	r2, #0
 800a86e:	735c      	strb	r4, [r3, #13]
 800a870:	75d8      	strb	r0, [r3, #23]
 800a872:	765a      	strb	r2, [r3, #25]
}
 800a874:	bc10      	pop	{r4}
 800a876:	4770      	bx	lr
 800a878:	1ffff7e8 	.word	0x1ffff7e8
 800a87c:	1ffff7ec 	.word	0x1ffff7ec
 800a880:	1ffff7f0 	.word	0x1ffff7f0
 800a884:	20000008 	.word	0x20000008

0800a888 <EP1_IN_Callback.part.0>:
	uint8_t head;

	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
	head = serial_tx_buffer_head;
	txUsbLock = 0; // this may be removed
 800a888:	2100      	movs	r1, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a88a:	2001      	movs	r0, #1
void EP1_IN_Callback(void)
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a88e:	4b2a      	ldr	r3, [pc, #168]	; (800a938 <EP1_IN_Callback.part.0+0xb0>)

	if ((head != serial_tx_buffer_tail)) {
 800a890:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a948 <EP1_IN_Callback.part.0+0xc0>
	head = serial_tx_buffer_head;
 800a894:	4a29      	ldr	r2, [pc, #164]	; (800a93c <EP1_IN_Callback.part.0+0xb4>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a896:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 800a898:	7019      	strb	r1, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 800a89a:	f89c 3000 	ldrb.w	r3, [ip]
	head = serial_tx_buffer_head;
 800a89e:	7811      	ldrb	r1, [r2, #0]
	if ((head != serial_tx_buffer_tail)) {
 800a8a0:	4299      	cmp	r1, r3
 800a8a2:	d040      	beq.n	800a926 <EP1_IN_Callback.part.0+0x9e>
		if (head > serial_tx_buffer_tail)
 800a8a4:	f89c 3000 	ldrb.w	r3, [ip]
 800a8a8:	4299      	cmp	r1, r3
			USB_Tx_length = head - serial_tx_buffer_tail;
 800a8aa:	f89c 3000 	ldrb.w	r3, [ip]
		else
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 800a8ae:	bf98      	it	ls
 800a8b0:	3180      	addls	r1, #128	; 0x80
 800a8b2:	1ac9      	subs	r1, r1, r3
 800a8b4:	b289      	uxth	r1, r1

		if (USB_Tx_length != 0) {
 800a8b6:	2900      	cmp	r1, #0
 800a8b8:	d035      	beq.n	800a926 <EP1_IN_Callback.part.0+0x9e>
 800a8ba:	2940      	cmp	r1, #64	; 0x40
				USB_Tx_length = 64;

			// UserToPMABufferCopy(&serial_tx_buffer[serial_tx_buffer_tail], ENDP1_TXADDR, USB_Tx_length);

			{
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a8bc:	4e20      	ldr	r6, [pc, #128]	; (800a940 <EP1_IN_Callback.part.0+0xb8>)
 800a8be:	bf28      	it	cs
 800a8c0:	2140      	movcs	r1, #64	; 0x40
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
				uint32_t i;
				uint16_t temp1;
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);

				for (i = 0; i<n; i++) {
 800a8c2:	2500      	movs	r5, #0
 800a8c4:	4637      	mov	r7, r6
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a8c6:	f89c 2000 	ldrb.w	r2, [ip]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800a8ca:	f101 0e01 	add.w	lr, r1, #1
 800a8ce:	4c1d      	ldr	r4, [pc, #116]	; (800a944 <EP1_IN_Callback.part.0+0xbc>)
 800a8d0:	ea4f 0e6e 	mov.w	lr, lr, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a8d4:	4432      	add	r2, r6
					temp1 = (uint16_t) *pbUsrBuf;
					pbUsrBuf++;
 800a8d6:	1c53      	adds	r3, r2, #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800a8d8:	1b98      	subs	r0, r3, r6
						pbUsrBuf = serial_tx_buffer;

					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a8da:	2880      	cmp	r0, #128	; 0x80
 800a8dc:	bf08      	it	eq
 800a8de:	463b      	moveq	r3, r7
 800a8e0:	7810      	ldrb	r0, [r2, #0]
 800a8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
				for (i = 0; i<n; i++) {
 800a8e6:	3501      	adds	r5, #1
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a8e8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
					pdwVal++;
					pbUsrBuf++;
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800a8ec:	1b9a      	subs	r2, r3, r6
 800a8ee:	2a80      	cmp	r2, #128	; 0x80
 800a8f0:	bf14      	ite	ne
 800a8f2:	461a      	movne	r2, r3
 800a8f4:	463a      	moveq	r2, r7
				for (i = 0; i<n; i++) {
 800a8f6:	45ae      	cmp	lr, r5
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a8f8:	f824 0c04 	strh.w	r0, [r4, #-4]
 800a8fc:	f104 0404 	add.w	r4, r4, #4
				for (i = 0; i<n; i++) {
 800a900:	d8e9      	bhi.n	800a8d6 <EP1_IN_Callback.part.0+0x4e>
						pbUsrBuf = serial_tx_buffer;
					}
			}

		serial_tx_buffer_tail += USB_Tx_length;
 800a902:	f89c 3000 	ldrb.w	r3, [ip]
 800a906:	440b      	add	r3, r1
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	f88c 3000 	strb.w	r3, [ip]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800a90e:	f89c 3000 	ldrb.w	r3, [ip]
 800a912:	061b      	lsls	r3, r3, #24
 800a914:	d408      	bmi.n	800a928 <EP1_IN_Callback.part.0+0xa0>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
		SetEPTxCount(ENDP1, USB_Tx_length);
 800a916:	2001      	movs	r0, #1
 800a918:	f7ff feae 	bl	800a678 <SetEPTxCount>
		SetEPTxValid(ENDP1);
		}
	}
}
 800a91c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SetEPTxValid(ENDP1);
 800a920:	2001      	movs	r0, #1
 800a922:	f7ff be11 	b.w	800a548 <SetEPTxValid>
 800a926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 800a928:	f89c 3000 	ldrb.w	r3, [ip]
 800a92c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800a930:	f88c 3000 	strb.w	r3, [ip]
 800a934:	e7ef      	b.n	800a916 <EP1_IN_Callback.part.0+0x8e>
 800a936:	bf00      	nop
 800a938:	20000c0c 	.word	0x20000c0c
 800a93c:	20000a5a 	.word	0x20000a5a
 800a940:	200010ec 	.word	0x200010ec
 800a944:	40006184 	.word	0x40006184
 800a948:	20000a5b 	.word	0x20000a5b

0800a94c <EP3_OUT_Callback>:
{
 800a94c:	b510      	push	{r4, lr}
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800a94e:	4c07      	ldr	r4, [pc, #28]	; (800a96c <EP3_OUT_Callback+0x20>)
 800a950:	2003      	movs	r0, #3
 800a952:	4621      	mov	r1, r4
 800a954:	f7ff fee8 	bl	800a728 <USB_SIL_Read>
	OnUsbDataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800a958:	b2c1      	uxtb	r1, r0
 800a95a:	4620      	mov	r0, r4
 800a95c:	f7fc fd14 	bl	8007388 <OnUsbDataRx>
}
 800a960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SetEPRxValid(ENDP3);
 800a964:	2003      	movs	r0, #3
 800a966:	f7ff be03 	b.w	800a570 <SetEPRxValid>
 800a96a:	bf00      	nop
 800a96c:	20001314 	.word	0x20001314

0800a970 <EP1_IN_Callback>:
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800a970:	4b04      	ldr	r3, [pc, #16]	; (800a984 <EP1_IN_Callback+0x14>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a978:	2b20      	cmp	r3, #32
 800a97a:	d000      	beq.n	800a97e <EP1_IN_Callback+0xe>
 800a97c:	4770      	bx	lr
 800a97e:	f7ff bf83 	b.w	800a888 <EP1_IN_Callback.part.0>
 800a982:	bf00      	nop
 800a984:	40005c04 	.word	0x40005c04

0800a988 <SOF_Callback>:

/*	\brief Start Of Frame (SOF) callback
 */
void SOF_Callback(void)
{
	if(bDeviceState == CONFIGURED)
 800a988:	4b06      	ldr	r3, [pc, #24]	; (800a9a4 <SOF_Callback+0x1c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b05      	cmp	r3, #5
 800a98e:	d000      	beq.n	800a992 <SOF_Callback+0xa>
 800a990:	4770      	bx	lr
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800a992:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <SOF_Callback+0x20>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d1f8      	bne.n	800a990 <SOF_Callback+0x8>
 800a99e:	f7ff bf73 	b.w	800a888 <EP1_IN_Callback.part.0>
 800a9a2:	bf00      	nop
 800a9a4:	20000c10 	.word	0x20000c10
 800a9a8:	40005c04 	.word	0x40005c04

0800a9ac <USB_Istr>:
* Return         :
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 800a9ac:	4917      	ldr	r1, [pc, #92]	; (800aa0c <USB_Istr+0x60>)
{
 800a9ae:	b570      	push	{r4, r5, r6, lr}
  wIstr = _GetISTR();
 800a9b0:	680b      	ldr	r3, [r1, #0]
 800a9b2:	4c17      	ldr	r4, [pc, #92]	; (800aa10 <USB_Istr+0x64>)
 800a9b4:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800a9b6:	4d17      	ldr	r5, [pc, #92]	; (800aa14 <USB_Istr+0x68>)
  wIstr = _GetISTR();
 800a9b8:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800a9ba:	8822      	ldrh	r2, [r4, #0]
 800a9bc:	882b      	ldrh	r3, [r5, #0]
 800a9be:	401a      	ands	r2, r3
 800a9c0:	0590      	lsls	r0, r2, #22
 800a9c2:	d416      	bmi.n	800a9f2 <USB_Istr+0x46>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800a9c4:	8822      	ldrh	r2, [r4, #0]
 800a9c6:	401a      	ands	r2, r3
 800a9c8:	0412      	lsls	r2, r2, #16
 800a9ca:	d40e      	bmi.n	800a9ea <USB_Istr+0x3e>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800a9cc:	8822      	ldrh	r2, [r4, #0]
 800a9ce:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800a9d2:	4213      	tst	r3, r2
 800a9d4:	d100      	bne.n	800a9d8 <USB_Istr+0x2c>
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
  {
    _SetISTR((uint16_t)CLR_RESET);
 800a9d8:	f64f 31ff 	movw	r1, #64511	; 0xfbff
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800a9dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SetISTR((uint16_t)CLR_RESET);
 800a9e0:	4a0a      	ldr	r2, [pc, #40]	; (800aa0c <USB_Istr+0x60>)
    Device_Property.Reset();
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <USB_Istr+0x6c>)
    _SetISTR((uint16_t)CLR_RESET);
 800a9e4:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	4718      	bx	r3
    CTR_LP();
 800a9ea:	f7ff fc7f 	bl	800a2ec <CTR_LP>
 800a9ee:	882b      	ldrh	r3, [r5, #0]
 800a9f0:	e7ec      	b.n	800a9cc <USB_Istr+0x20>
    _SetISTR((uint16_t)CLR_SOF);
 800a9f2:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 800a9f6:	4a09      	ldr	r2, [pc, #36]	; (800aa1c <USB_Istr+0x70>)
    _SetISTR((uint16_t)CLR_SOF);
 800a9f8:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 800a9fa:	7813      	ldrb	r3, [r2, #0]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	7013      	strb	r3, [r2, #0]
    SOF_Callback();
 800aa02:	f7ff ffc1 	bl	800a988 <SOF_Callback>
 800aa06:	882b      	ldrh	r3, [r5, #0]
 800aa08:	e7dc      	b.n	800a9c4 <USB_Istr+0x18>
 800aa0a:	bf00      	nop
 800aa0c:	40005c44 	.word	0x40005c44
 800aa10:	20001354 	.word	0x20001354
 800aa14:	2000130c 	.word	0x2000130c
 800aa18:	2000006c 	.word	0x2000006c
 800aa1c:	20000c0d 	.word	0x20000c0d

0800aa20 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 800aa20:	4b03      	ldr	r3, [pc, #12]	; (800aa30 <Virtual_Com_Port_SetConfiguration+0x10>)
 800aa22:	7a9b      	ldrb	r3, [r3, #10]
 800aa24:	b113      	cbz	r3, 800aa2c <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800aa26:	2205      	movs	r2, #5
 800aa28:	4b02      	ldr	r3, [pc, #8]	; (800aa34 <Virtual_Com_Port_SetConfiguration+0x14>)
 800aa2a:	601a      	str	r2, [r3, #0]
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	200012e8 	.word	0x200012e8
 800aa34:	20000c10 	.word	0x20000c10

0800aa38 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800aa38:	2204      	movs	r2, #4
 800aa3a:	4b01      	ldr	r3, [pc, #4]	; (800aa40 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	4770      	bx	lr
 800aa40:	20000c10 	.word	0x20000c10

0800aa44 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 800aa44:	4b03      	ldr	r3, [pc, #12]	; (800aa54 <Virtual_Com_Port_Status_In+0x10>)
 800aa46:	781a      	ldrb	r2, [r3, #0]
 800aa48:	2a20      	cmp	r2, #32
  {
    Request = 0;
 800aa4a:	bf04      	itt	eq
 800aa4c:	2200      	moveq	r2, #0
 800aa4e:	701a      	strbeq	r2, [r3, #0]
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	20000c0e 	.word	0x20000c0e

0800aa58 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop

0800aa5c <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800aa5c:	2821      	cmp	r0, #33	; 0x21
 800aa5e:	d004      	beq.n	800aa6a <Virtual_Com_Port_Data_Setup+0xe>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800aa60:	2820      	cmp	r0, #32
 800aa62:	4603      	mov	r3, r0
 800aa64:	d011      	beq.n	800aa8a <Virtual_Com_Port_Data_Setup+0x2e>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800aa66:	2002      	movs	r0, #2
 800aa68:	4770      	bx	lr
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800aa6a:	4b0f      	ldr	r3, [pc, #60]	; (800aaa8 <Virtual_Com_Port_Data_Setup+0x4c>)
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	7813      	ldrb	r3, [r2, #0]
 800aa70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa74:	2b21      	cmp	r3, #33	; 0x21
 800aa76:	d1f6      	bne.n	800aa66 <Virtual_Com_Port_Data_Setup+0xa>
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800aa78:	490c      	ldr	r1, [pc, #48]	; (800aaac <Virtual_Com_Port_Data_Setup+0x50>)
{
 800aa7a:	b510      	push	{r4, lr}
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800aa7c:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800aa7e:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800aa80:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 800aa82:	4620      	mov	r0, r4
 800aa84:	4788      	blx	r1
  return USB_SUCCESS;
 800aa86:	4620      	mov	r0, r4
 800aa88:	bd10      	pop	{r4, pc}
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800aa8a:	4a07      	ldr	r2, [pc, #28]	; (800aaa8 <Virtual_Com_Port_Data_Setup+0x4c>)
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	7811      	ldrb	r1, [r2, #0]
 800aa90:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800aa94:	2921      	cmp	r1, #33	; 0x21
 800aa96:	d003      	beq.n	800aaa0 <Virtual_Com_Port_Data_Setup+0x44>
    Request = SET_LINE_CODING;
 800aa98:	4a05      	ldr	r2, [pc, #20]	; (800aab0 <Virtual_Com_Port_Data_Setup+0x54>)
    return USB_UNSUPPORT;
 800aa9a:	2002      	movs	r0, #2
    Request = SET_LINE_CODING;
 800aa9c:	7013      	strb	r3, [r2, #0]
 800aa9e:	4770      	bx	lr
 800aaa0:	4803      	ldr	r0, [pc, #12]	; (800aab0 <Virtual_Com_Port_Data_Setup+0x54>)
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800aaa2:	4904      	ldr	r1, [pc, #16]	; (800aab4 <Virtual_Com_Port_Data_Setup+0x58>)
    Request = SET_LINE_CODING;
 800aaa4:	7003      	strb	r3, [r0, #0]
 800aaa6:	e7e8      	b.n	800aa7a <Virtual_Com_Port_Data_Setup+0x1e>
 800aaa8:	20001308 	.word	0x20001308
 800aaac:	0800ac41 	.word	0x0800ac41
 800aab0:	20000c0e 	.word	0x20000c0e
 800aab4:	0800aaed 	.word	0x0800aaed

0800aab8 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800aab8:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <Virtual_Com_Port_NoData_Setup+0x20>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aac2:	2b21      	cmp	r3, #33	; 0x21
 800aac4:	d001      	beq.n	800aaca <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800aac6:	2002      	movs	r0, #2
}
 800aac8:	4770      	bx	lr
    if (RequestNo == SET_COMM_FEATURE)
 800aaca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aace:	2802      	cmp	r0, #2
      return USB_SUCCESS;
 800aad0:	bf14      	ite	ne
 800aad2:	2002      	movne	r0, #2
 800aad4:	2000      	moveq	r0, #0
 800aad6:	4770      	bx	lr
 800aad8:	20001308 	.word	0x20001308

0800aadc <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800aadc:	b109      	cbz	r1, 800aae2 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800aade:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 800aae0:	4770      	bx	lr
  else if (Interface > 1)
 800aae2:	2801      	cmp	r0, #1
  return USB_SUCCESS;
 800aae4:	bf8c      	ite	hi
 800aae6:	2002      	movhi	r0, #2
 800aae8:	2000      	movls	r0, #0
 800aaea:	4770      	bx	lr

0800aaec <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800aaec:	b108      	cbz	r0, 800aaf2 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800aaee:	4803      	ldr	r0, [pc, #12]	; (800aafc <Virtual_Com_Port_SetLineCoding+0x10>)
}
 800aaf0:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800aaf2:	2208      	movs	r2, #8
 800aaf4:	4b02      	ldr	r3, [pc, #8]	; (800ab00 <Virtual_Com_Port_SetLineCoding+0x14>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	821a      	strh	r2, [r3, #16]
    return NULL;
 800aafa:	4770      	bx	lr
 800aafc:	200000e4 	.word	0x200000e4
 800ab00:	20001308 	.word	0x20001308

0800ab04 <Virtual_Com_Port_init>:
{
 800ab04:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800ab06:	2400      	movs	r4, #0
  Get_SerialNum();
 800ab08:	f7ff fe40 	bl	800a78c <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 800ab0c:	4b04      	ldr	r3, [pc, #16]	; (800ab20 <Virtual_Com_Port_init+0x1c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	729c      	strb	r4, [r3, #10]
  PowerOn();
 800ab12:	f000 f8a1 	bl	800ac58 <PowerOn>
  USB_SIL_Init();
 800ab16:	f7ff fdf5 	bl	800a704 <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 800ab1a:	4b02      	ldr	r3, [pc, #8]	; (800ab24 <Virtual_Com_Port_init+0x20>)
 800ab1c:	601c      	str	r4, [r3, #0]
 800ab1e:	bd10      	pop	{r4, pc}
 800ab20:	20001308 	.word	0x20001308
 800ab24:	20000c10 	.word	0x20000c10

0800ab28 <Virtual_Com_Port_Reset>:
{
 800ab28:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800ab2a:	2400      	movs	r4, #0
 800ab2c:	4b32      	ldr	r3, [pc, #200]	; (800abf8 <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ab2e:	4a33      	ldr	r2, [pc, #204]	; (800abfc <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 800ab30:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ab32:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 800ab34:	729c      	strb	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ab36:	725a      	strb	r2, [r3, #9]
  pInformation->Current_Interface = 0;
 800ab38:	72dc      	strb	r4, [r3, #11]
  SetBTABLE(BTABLE_ADDRESS);
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff fcba 	bl	800a4b4 <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 800ab40:	4620      	mov	r0, r4
 800ab42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab46:	f7ff fcbd 	bl	800a4c4 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	2110      	movs	r1, #16
 800ab4e:	f7ff fcc7 	bl	800a4e0 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800ab52:	4620      	mov	r0, r4
 800ab54:	2140      	movs	r1, #64	; 0x40
 800ab56:	f7ff fd63 	bl	800a620 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800ab5a:	2180      	movs	r1, #128	; 0x80
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f7ff fd4f 	bl	800a600 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 800ab62:	4620      	mov	r0, r4
 800ab64:	f7ff fd18 	bl	800a598 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800ab68:	4b25      	ldr	r3, [pc, #148]	; (800ac00 <Virtual_Com_Port_Reset+0xd8>)
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800ab70:	f7ff fd90 	bl	800a694 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800ab74:	4620      	mov	r0, r4
 800ab76:	f7ff fcfb 	bl	800a570 <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	2001      	movs	r0, #1
 800ab7e:	f7ff fca1 	bl	800a4c4 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800ab82:	21c0      	movs	r1, #192	; 0xc0
 800ab84:	2001      	movs	r0, #1
 800ab86:	f7ff fd3b 	bl	800a600 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800ab8a:	2120      	movs	r1, #32
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f7ff fca7 	bl	800a4e0 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800ab92:	4621      	mov	r1, r4
 800ab94:	2001      	movs	r0, #1
 800ab96:	f7ff fcbd 	bl	800a514 <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 800ab9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ab9e:	2002      	movs	r0, #2
 800aba0:	f7ff fc90 	bl	800a4c4 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800aba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aba8:	2002      	movs	r0, #2
 800abaa:	f7ff fd29 	bl	800a600 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800abae:	4621      	mov	r1, r4
 800abb0:	2002      	movs	r0, #2
 800abb2:	f7ff fcaf 	bl	800a514 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800abb6:	2120      	movs	r1, #32
 800abb8:	2002      	movs	r0, #2
 800abba:	f7ff fc91 	bl	800a4e0 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 800abbe:	4621      	mov	r1, r4
 800abc0:	2003      	movs	r0, #3
 800abc2:	f7ff fc7f 	bl	800a4c4 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800abc6:	f44f 7188 	mov.w	r1, #272	; 0x110
 800abca:	2003      	movs	r0, #3
 800abcc:	f7ff fd28 	bl	800a620 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800abd0:	2140      	movs	r1, #64	; 0x40
 800abd2:	2003      	movs	r0, #3
 800abd4:	f7ff fd5e 	bl	800a694 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800abd8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800abdc:	2003      	movs	r0, #3
 800abde:	f7ff fc99 	bl	800a514 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800abe2:	4621      	mov	r1, r4
 800abe4:	2003      	movs	r0, #3
 800abe6:	f7ff fc7b 	bl	800a4e0 <SetEPTxStatus>
  SetDeviceAddress(0);
 800abea:	4620      	mov	r0, r4
 800abec:	f7ff fb40 	bl	800a270 <SetDeviceAddress>
  bDeviceState = ATTACHED;
 800abf0:	2201      	movs	r2, #1
 800abf2:	4b04      	ldr	r3, [pc, #16]	; (800ac04 <Virtual_Com_Port_Reset+0xdc>)
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	bd10      	pop	{r4, pc}
 800abf8:	20001308 	.word	0x20001308
 800abfc:	0800c0b0 	.word	0x0800c0b0
 800ac00:	2000006c 	.word	0x2000006c
 800ac04:	20000c10 	.word	0x20000c10

0800ac08 <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800ac08:	4901      	ldr	r1, [pc, #4]	; (800ac10 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 800ac0a:	f7ff b837 	b.w	8009c7c <Standard_GetDescriptorData>
 800ac0e:	bf00      	nop
 800ac10:	20000064 	.word	0x20000064

0800ac14 <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800ac14:	4901      	ldr	r1, [pc, #4]	; (800ac1c <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 800ac16:	f7ff b831 	b.w	8009c7c <Standard_GetDescriptorData>
 800ac1a:	bf00      	nop
 800ac1c:	2000005c 	.word	0x2000005c

0800ac20 <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 800ac20:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <Virtual_Com_Port_GetStringDescriptor+0x18>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d804      	bhi.n	800ac34 <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800ac2a:	4904      	ldr	r1, [pc, #16]	; (800ac3c <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800ac2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac30:	f7ff b824 	b.w	8009c7c <Standard_GetDescriptorData>
}
 800ac34:	2000      	movs	r0, #0
 800ac36:	4770      	bx	lr
 800ac38:	20001308 	.word	0x20001308
 800ac3c:	200000a0 	.word	0x200000a0

0800ac40 <Virtual_Com_Port_GetLineCoding>:
 800ac40:	b108      	cbz	r0, 800ac46 <Virtual_Com_Port_GetLineCoding+0x6>
 800ac42:	4803      	ldr	r0, [pc, #12]	; (800ac50 <Virtual_Com_Port_GetLineCoding+0x10>)
 800ac44:	4770      	bx	lr
 800ac46:	2208      	movs	r2, #8
 800ac48:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <Virtual_Com_Port_GetLineCoding+0x14>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	821a      	strh	r2, [r3, #16]
 800ac4e:	4770      	bx	lr
 800ac50:	200000e4 	.word	0x200000e4
 800ac54:	20001308 	.word	0x20001308

0800ac58 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800ac58:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800ac5a:	2001      	movs	r0, #1
 800ac5c:	f7ff fd94 	bl	800a788 <USB_Cable_Config>
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800ac60:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800ac62:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  _SetCNTR(wRegVal);
 800ac66:	2001      	movs	r0, #1
 800ac68:	4b04      	ldr	r3, [pc, #16]	; (800ac7c <PowerOn+0x24>)
  _SetISTR(0);
 800ac6a:	4d05      	ldr	r5, [pc, #20]	; (800ac80 <PowerOn+0x28>)
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800ac6c:	4c05      	ldr	r4, [pc, #20]	; (800ac84 <PowerOn+0x2c>)
  _SetCNTR(wRegVal);
 800ac6e:	6018      	str	r0, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800ac70:	601a      	str	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 800ac72:	4610      	mov	r0, r2
  _SetISTR(0);
 800ac74:	602a      	str	r2, [r5, #0]
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800ac76:	8021      	strh	r1, [r4, #0]
  _SetCNTR(wInterrupt_Mask);
 800ac78:	6019      	str	r1, [r3, #0]
}
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	40005c40 	.word	0x40005c40
 800ac80:	40005c44 	.word	0x40005c44
 800ac84:	2000130c 	.word	0x2000130c

0800ac88 <NMI_Handler>:
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop

0800ac8c <HardFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
 800ac8c:	e7fe      	b.n	800ac8c <HardFault_Handler>
 800ac8e:	bf00      	nop

0800ac90 <MemManage_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
 800ac90:	e7fe      	b.n	800ac90 <MemManage_Handler>
 800ac92:	bf00      	nop

0800ac94 <BusFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
 800ac94:	e7fe      	b.n	800ac94 <BusFault_Handler>
 800ac96:	bf00      	nop

0800ac98 <UsageFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
 800ac98:	e7fe      	b.n	800ac98 <UsageFault_Handler>
 800ac9a:	bf00      	nop

0800ac9c <SVC_Handler>:
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop

0800aca0 <DebugMon_Handler>:
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop

0800aca4 <PendSV_Handler>:
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop

0800aca8 <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 800aca8:	f7ff be80 	b.w	800a9ac <USB_Istr>

0800acac <__libc_init_array>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	2500      	movs	r5, #0
 800acb0:	4e0c      	ldr	r6, [pc, #48]	; (800ace4 <__libc_init_array+0x38>)
 800acb2:	4c0d      	ldr	r4, [pc, #52]	; (800ace8 <__libc_init_array+0x3c>)
 800acb4:	1ba4      	subs	r4, r4, r6
 800acb6:	10a4      	asrs	r4, r4, #2
 800acb8:	42a5      	cmp	r5, r4
 800acba:	d109      	bne.n	800acd0 <__libc_init_array+0x24>
 800acbc:	f001 f8d4 	bl	800be68 <_init>
 800acc0:	2500      	movs	r5, #0
 800acc2:	4e0a      	ldr	r6, [pc, #40]	; (800acec <__libc_init_array+0x40>)
 800acc4:	4c0a      	ldr	r4, [pc, #40]	; (800acf0 <__libc_init_array+0x44>)
 800acc6:	1ba4      	subs	r4, r4, r6
 800acc8:	10a4      	asrs	r4, r4, #2
 800acca:	42a5      	cmp	r5, r4
 800accc:	d105      	bne.n	800acda <__libc_init_array+0x2e>
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acd4:	4798      	blx	r3
 800acd6:	3501      	adds	r5, #1
 800acd8:	e7ee      	b.n	800acb8 <__libc_init_array+0xc>
 800acda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acde:	4798      	blx	r3
 800ace0:	3501      	adds	r5, #1
 800ace2:	e7f2      	b.n	800acca <__libc_init_array+0x1e>
 800ace4:	0800c534 	.word	0x0800c534
 800ace8:	0800c534 	.word	0x0800c534
 800acec:	0800c534 	.word	0x0800c534
 800acf0:	0800c538 	.word	0x0800c538

0800acf4 <memcmp>:
 800acf4:	b510      	push	{r4, lr}
 800acf6:	3901      	subs	r1, #1
 800acf8:	4402      	add	r2, r0
 800acfa:	4290      	cmp	r0, r2
 800acfc:	d101      	bne.n	800ad02 <memcmp+0xe>
 800acfe:	2000      	movs	r0, #0
 800ad00:	bd10      	pop	{r4, pc}
 800ad02:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad0a:	42a3      	cmp	r3, r4
 800ad0c:	d0f5      	beq.n	800acfa <memcmp+0x6>
 800ad0e:	1b18      	subs	r0, r3, r4
 800ad10:	bd10      	pop	{r4, pc}

0800ad12 <memset>:
 800ad12:	4603      	mov	r3, r0
 800ad14:	4402      	add	r2, r0
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d100      	bne.n	800ad1c <memset+0xa>
 800ad1a:	4770      	bx	lr
 800ad1c:	f803 1b01 	strb.w	r1, [r3], #1
 800ad20:	e7f9      	b.n	800ad16 <memset+0x4>
	...

0800ad24 <ceilf>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800ad2a:	0df5      	lsrs	r5, r6, #23
 800ad2c:	3d7f      	subs	r5, #127	; 0x7f
 800ad2e:	2d16      	cmp	r5, #22
 800ad30:	4601      	mov	r1, r0
 800ad32:	4604      	mov	r4, r0
 800ad34:	dc26      	bgt.n	800ad84 <ceilf+0x60>
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	da0e      	bge.n	800ad58 <ceilf+0x34>
 800ad3a:	4918      	ldr	r1, [pc, #96]	; (800ad9c <ceilf+0x78>)
 800ad3c:	f7f5 feb0 	bl	8000aa0 <__addsf3>
 800ad40:	2100      	movs	r1, #0
 800ad42:	f7f6 f971 	bl	8001028 <__aeabi_fcmpgt>
 800ad46:	b128      	cbz	r0, 800ad54 <ceilf+0x30>
 800ad48:	2c00      	cmp	r4, #0
 800ad4a:	db23      	blt.n	800ad94 <ceilf+0x70>
 800ad4c:	2e00      	cmp	r6, #0
 800ad4e:	bf18      	it	ne
 800ad50:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800ad54:	4621      	mov	r1, r4
 800ad56:	e01b      	b.n	800ad90 <ceilf+0x6c>
 800ad58:	4e11      	ldr	r6, [pc, #68]	; (800ada0 <ceilf+0x7c>)
 800ad5a:	412e      	asrs	r6, r5
 800ad5c:	4230      	tst	r0, r6
 800ad5e:	d017      	beq.n	800ad90 <ceilf+0x6c>
 800ad60:	490e      	ldr	r1, [pc, #56]	; (800ad9c <ceilf+0x78>)
 800ad62:	f7f5 fe9d 	bl	8000aa0 <__addsf3>
 800ad66:	2100      	movs	r1, #0
 800ad68:	f7f6 f95e 	bl	8001028 <__aeabi_fcmpgt>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d0f1      	beq.n	800ad54 <ceilf+0x30>
 800ad70:	2c00      	cmp	r4, #0
 800ad72:	bfc2      	ittt	gt
 800ad74:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800ad78:	fa43 f505 	asrgt.w	r5, r3, r5
 800ad7c:	1964      	addgt	r4, r4, r5
 800ad7e:	ea24 0406 	bic.w	r4, r4, r6
 800ad82:	e7e7      	b.n	800ad54 <ceilf+0x30>
 800ad84:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ad88:	d302      	bcc.n	800ad90 <ceilf+0x6c>
 800ad8a:	f7f5 fe89 	bl	8000aa0 <__addsf3>
 800ad8e:	4601      	mov	r1, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ad98:	e7dc      	b.n	800ad54 <ceilf+0x30>
 800ad9a:	bf00      	nop
 800ad9c:	7149f2ca 	.word	0x7149f2ca
 800ada0:	007fffff 	.word	0x007fffff

0800ada4 <cosf>:
 800ada4:	b507      	push	{r0, r1, r2, lr}
 800ada6:	4a18      	ldr	r2, [pc, #96]	; (800ae08 <cosf+0x64>)
 800ada8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800adac:	4293      	cmp	r3, r2
 800adae:	4601      	mov	r1, r0
 800adb0:	dc03      	bgt.n	800adba <cosf+0x16>
 800adb2:	2100      	movs	r1, #0
 800adb4:	f000 fb52 	bl	800b45c <__kernel_cosf>
 800adb8:	e004      	b.n	800adc4 <cosf+0x20>
 800adba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800adbe:	db04      	blt.n	800adca <cosf+0x26>
 800adc0:	f7f5 fe6c 	bl	8000a9c <__aeabi_fsub>
 800adc4:	b003      	add	sp, #12
 800adc6:	f85d fb04 	ldr.w	pc, [sp], #4
 800adca:	4669      	mov	r1, sp
 800adcc:	f000 f99c 	bl	800b108 <__ieee754_rem_pio2f>
 800add0:	f000 0203 	and.w	r2, r0, #3
 800add4:	2a01      	cmp	r2, #1
 800add6:	d005      	beq.n	800ade4 <cosf+0x40>
 800add8:	2a02      	cmp	r2, #2
 800adda:	d00a      	beq.n	800adf2 <cosf+0x4e>
 800addc:	b972      	cbnz	r2, 800adfc <cosf+0x58>
 800adde:	9901      	ldr	r1, [sp, #4]
 800ade0:	9800      	ldr	r0, [sp, #0]
 800ade2:	e7e7      	b.n	800adb4 <cosf+0x10>
 800ade4:	9901      	ldr	r1, [sp, #4]
 800ade6:	9800      	ldr	r0, [sp, #0]
 800ade8:	f000 fe5a 	bl	800baa0 <__kernel_sinf>
 800adec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800adf0:	e7e8      	b.n	800adc4 <cosf+0x20>
 800adf2:	9901      	ldr	r1, [sp, #4]
 800adf4:	9800      	ldr	r0, [sp, #0]
 800adf6:	f000 fb31 	bl	800b45c <__kernel_cosf>
 800adfa:	e7f7      	b.n	800adec <cosf+0x48>
 800adfc:	2201      	movs	r2, #1
 800adfe:	9901      	ldr	r1, [sp, #4]
 800ae00:	9800      	ldr	r0, [sp, #0]
 800ae02:	f000 fe4d 	bl	800baa0 <__kernel_sinf>
 800ae06:	e7dd      	b.n	800adc4 <cosf+0x20>
 800ae08:	3f490fd8 	.word	0x3f490fd8

0800ae0c <floorf>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800ae12:	0df5      	lsrs	r5, r6, #23
 800ae14:	3d7f      	subs	r5, #127	; 0x7f
 800ae16:	2d16      	cmp	r5, #22
 800ae18:	4601      	mov	r1, r0
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	dc26      	bgt.n	800ae6c <floorf+0x60>
 800ae1e:	2d00      	cmp	r5, #0
 800ae20:	da0e      	bge.n	800ae40 <floorf+0x34>
 800ae22:	4917      	ldr	r1, [pc, #92]	; (800ae80 <floorf+0x74>)
 800ae24:	f7f5 fe3c 	bl	8000aa0 <__addsf3>
 800ae28:	2100      	movs	r1, #0
 800ae2a:	f7f6 f8fd 	bl	8001028 <__aeabi_fcmpgt>
 800ae2e:	b128      	cbz	r0, 800ae3c <floorf+0x30>
 800ae30:	2c00      	cmp	r4, #0
 800ae32:	da23      	bge.n	800ae7c <floorf+0x70>
 800ae34:	4b13      	ldr	r3, [pc, #76]	; (800ae84 <floorf+0x78>)
 800ae36:	2e00      	cmp	r6, #0
 800ae38:	bf18      	it	ne
 800ae3a:	461c      	movne	r4, r3
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	e01b      	b.n	800ae78 <floorf+0x6c>
 800ae40:	4e11      	ldr	r6, [pc, #68]	; (800ae88 <floorf+0x7c>)
 800ae42:	412e      	asrs	r6, r5
 800ae44:	4230      	tst	r0, r6
 800ae46:	d017      	beq.n	800ae78 <floorf+0x6c>
 800ae48:	490d      	ldr	r1, [pc, #52]	; (800ae80 <floorf+0x74>)
 800ae4a:	f7f5 fe29 	bl	8000aa0 <__addsf3>
 800ae4e:	2100      	movs	r1, #0
 800ae50:	f7f6 f8ea 	bl	8001028 <__aeabi_fcmpgt>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d0f1      	beq.n	800ae3c <floorf+0x30>
 800ae58:	2c00      	cmp	r4, #0
 800ae5a:	bfbe      	ittt	lt
 800ae5c:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800ae60:	fa43 f505 	asrlt.w	r5, r3, r5
 800ae64:	1964      	addlt	r4, r4, r5
 800ae66:	ea24 0406 	bic.w	r4, r4, r6
 800ae6a:	e7e7      	b.n	800ae3c <floorf+0x30>
 800ae6c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ae70:	d302      	bcc.n	800ae78 <floorf+0x6c>
 800ae72:	f7f5 fe15 	bl	8000aa0 <__addsf3>
 800ae76:	4601      	mov	r1, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	bd70      	pop	{r4, r5, r6, pc}
 800ae7c:	2400      	movs	r4, #0
 800ae7e:	e7dd      	b.n	800ae3c <floorf+0x30>
 800ae80:	7149f2ca 	.word	0x7149f2ca
 800ae84:	bf800000 	.word	0xbf800000
 800ae88:	007fffff 	.word	0x007fffff

0800ae8c <lroundf>:
 800ae8c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ae90:	2800      	cmp	r0, #0
 800ae92:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800ae96:	b510      	push	{r4, lr}
 800ae98:	bfb4      	ite	lt
 800ae9a:	f04f 34ff 	movlt.w	r4, #4294967295
 800ae9e:	2401      	movge	r4, #1
 800aea0:	2a1e      	cmp	r2, #30
 800aea2:	dc1b      	bgt.n	800aedc <lroundf+0x50>
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	da04      	bge.n	800aeb2 <lroundf+0x26>
 800aea8:	3201      	adds	r2, #1
 800aeaa:	bf18      	it	ne
 800aeac:	2400      	movne	r4, #0
 800aeae:	4620      	mov	r0, r4
 800aeb0:	bd10      	pop	{r4, pc}
 800aeb2:	2a16      	cmp	r2, #22
 800aeb4:	bfd8      	it	le
 800aeb6:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800aeba:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800aebe:	bfd8      	it	le
 800aec0:	4113      	asrle	r3, r2
 800aec2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800aec6:	bfcd      	iteet	gt
 800aec8:	3b96      	subgt	r3, #150	; 0x96
 800aeca:	185b      	addle	r3, r3, r1
 800aecc:	f1c2 0217 	rsble	r2, r2, #23
 800aed0:	fa01 f303 	lslgt.w	r3, r1, r3
 800aed4:	bfd8      	it	le
 800aed6:	40d3      	lsrle	r3, r2
 800aed8:	435c      	muls	r4, r3
 800aeda:	e7e8      	b.n	800aeae <lroundf+0x22>
 800aedc:	f7f6 f8c4 	bl	8001068 <__aeabi_f2iz>
 800aee0:	4604      	mov	r4, r0
 800aee2:	e7e4      	b.n	800aeae <lroundf+0x22>

0800aee4 <sinf>:
 800aee4:	b507      	push	{r0, r1, r2, lr}
 800aee6:	4a19      	ldr	r2, [pc, #100]	; (800af4c <sinf+0x68>)
 800aee8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800aeec:	4293      	cmp	r3, r2
 800aeee:	4601      	mov	r1, r0
 800aef0:	dc04      	bgt.n	800aefc <sinf+0x18>
 800aef2:	2200      	movs	r2, #0
 800aef4:	2100      	movs	r1, #0
 800aef6:	f000 fdd3 	bl	800baa0 <__kernel_sinf>
 800aefa:	e004      	b.n	800af06 <sinf+0x22>
 800aefc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800af00:	db04      	blt.n	800af0c <sinf+0x28>
 800af02:	f7f5 fdcb 	bl	8000a9c <__aeabi_fsub>
 800af06:	b003      	add	sp, #12
 800af08:	f85d fb04 	ldr.w	pc, [sp], #4
 800af0c:	4669      	mov	r1, sp
 800af0e:	f000 f8fb 	bl	800b108 <__ieee754_rem_pio2f>
 800af12:	f000 0003 	and.w	r0, r0, #3
 800af16:	2801      	cmp	r0, #1
 800af18:	d006      	beq.n	800af28 <sinf+0x44>
 800af1a:	2802      	cmp	r0, #2
 800af1c:	d009      	beq.n	800af32 <sinf+0x4e>
 800af1e:	b980      	cbnz	r0, 800af42 <sinf+0x5e>
 800af20:	2201      	movs	r2, #1
 800af22:	9901      	ldr	r1, [sp, #4]
 800af24:	9800      	ldr	r0, [sp, #0]
 800af26:	e7e6      	b.n	800aef6 <sinf+0x12>
 800af28:	9901      	ldr	r1, [sp, #4]
 800af2a:	9800      	ldr	r0, [sp, #0]
 800af2c:	f000 fa96 	bl	800b45c <__kernel_cosf>
 800af30:	e7e9      	b.n	800af06 <sinf+0x22>
 800af32:	2201      	movs	r2, #1
 800af34:	9901      	ldr	r1, [sp, #4]
 800af36:	9800      	ldr	r0, [sp, #0]
 800af38:	f000 fdb2 	bl	800baa0 <__kernel_sinf>
 800af3c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800af40:	e7e1      	b.n	800af06 <sinf+0x22>
 800af42:	9901      	ldr	r1, [sp, #4]
 800af44:	9800      	ldr	r0, [sp, #0]
 800af46:	f000 fa89 	bl	800b45c <__kernel_cosf>
 800af4a:	e7f7      	b.n	800af3c <sinf+0x58>
 800af4c:	3f490fd8 	.word	0x3f490fd8

0800af50 <atan2f>:
 800af50:	f000 b84a 	b.w	800afe8 <__ieee754_atan2f>

0800af54 <sqrtf>:
 800af54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af56:	b08b      	sub	sp, #44	; 0x2c
 800af58:	4604      	mov	r4, r0
 800af5a:	f000 fa2d 	bl	800b3b8 <__ieee754_sqrtf>
 800af5e:	4b20      	ldr	r3, [pc, #128]	; (800afe0 <sqrtf+0x8c>)
 800af60:	4606      	mov	r6, r0
 800af62:	f993 5000 	ldrsb.w	r5, [r3]
 800af66:	1c6b      	adds	r3, r5, #1
 800af68:	d02a      	beq.n	800afc0 <sqrtf+0x6c>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4620      	mov	r0, r4
 800af6e:	f7f6 f865 	bl	800103c <__aeabi_fcmpun>
 800af72:	4607      	mov	r7, r0
 800af74:	bb20      	cbnz	r0, 800afc0 <sqrtf+0x6c>
 800af76:	2100      	movs	r1, #0
 800af78:	4620      	mov	r0, r4
 800af7a:	f7f6 f837 	bl	8000fec <__aeabi_fcmplt>
 800af7e:	b1f8      	cbz	r0, 800afc0 <sqrtf+0x6c>
 800af80:	2301      	movs	r3, #1
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	4b17      	ldr	r3, [pc, #92]	; (800afe4 <sqrtf+0x90>)
 800af86:	4620      	mov	r0, r4
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	9708      	str	r7, [sp, #32]
 800af8c:	f7f5 fa44 	bl	8000418 <__aeabi_f2d>
 800af90:	2200      	movs	r2, #0
 800af92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af9a:	2300      	movs	r3, #0
 800af9c:	b99d      	cbnz	r5, 800afc6 <sqrtf+0x72>
 800af9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800afa2:	4668      	mov	r0, sp
 800afa4:	f000 fdf2 	bl	800bb8c <matherr>
 800afa8:	b1a8      	cbz	r0, 800afd6 <sqrtf+0x82>
 800afaa:	9b08      	ldr	r3, [sp, #32]
 800afac:	b11b      	cbz	r3, 800afb6 <sqrtf+0x62>
 800afae:	f000 ff55 	bl	800be5c <__errno>
 800afb2:	9b08      	ldr	r3, [sp, #32]
 800afb4:	6003      	str	r3, [r0, #0]
 800afb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afba:	f7f5 fd1b 	bl	80009f4 <__aeabi_d2f>
 800afbe:	4606      	mov	r6, r0
 800afc0:	4630      	mov	r0, r6
 800afc2:	b00b      	add	sp, #44	; 0x2c
 800afc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afc6:	4610      	mov	r0, r2
 800afc8:	4619      	mov	r1, r3
 800afca:	f7f5 fba3 	bl	8000714 <__aeabi_ddiv>
 800afce:	2d02      	cmp	r5, #2
 800afd0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800afd4:	d1e5      	bne.n	800afa2 <sqrtf+0x4e>
 800afd6:	f000 ff41 	bl	800be5c <__errno>
 800afda:	2321      	movs	r3, #33	; 0x21
 800afdc:	6003      	str	r3, [r0, #0]
 800afde:	e7e4      	b.n	800afaa <sqrtf+0x56>
 800afe0:	200000ec 	.word	0x200000ec
 800afe4:	0800c13e 	.word	0x0800c13e

0800afe8 <__ieee754_atan2f>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800afee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800aff2:	4603      	mov	r3, r0
 800aff4:	dc05      	bgt.n	800b002 <__ieee754_atan2f+0x1a>
 800aff6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800affa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800affe:	4607      	mov	r7, r0
 800b000:	dd04      	ble.n	800b00c <__ieee754_atan2f+0x24>
 800b002:	4618      	mov	r0, r3
 800b004:	f7f5 fd4c 	bl	8000aa0 <__addsf3>
 800b008:	4603      	mov	r3, r0
 800b00a:	e010      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b00c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b010:	d103      	bne.n	800b01a <__ieee754_atan2f+0x32>
 800b012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b016:	f000 bdbb 	b.w	800bb90 <atanf>
 800b01a:	178c      	asrs	r4, r1, #30
 800b01c:	f004 0402 	and.w	r4, r4, #2
 800b020:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b024:	b92a      	cbnz	r2, 800b032 <__ieee754_atan2f+0x4a>
 800b026:	2c02      	cmp	r4, #2
 800b028:	d023      	beq.n	800b072 <__ieee754_atan2f+0x8a>
 800b02a:	2c03      	cmp	r4, #3
 800b02c:	d023      	beq.n	800b076 <__ieee754_atan2f+0x8e>
 800b02e:	4618      	mov	r0, r3
 800b030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b032:	b91e      	cbnz	r6, 800b03c <__ieee754_atan2f+0x54>
 800b034:	2f00      	cmp	r7, #0
 800b036:	da53      	bge.n	800b0e0 <__ieee754_atan2f+0xf8>
 800b038:	4b2a      	ldr	r3, [pc, #168]	; (800b0e4 <__ieee754_atan2f+0xfc>)
 800b03a:	e7f8      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b03c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b040:	d11b      	bne.n	800b07a <__ieee754_atan2f+0x92>
 800b042:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b046:	d10b      	bne.n	800b060 <__ieee754_atan2f+0x78>
 800b048:	2c02      	cmp	r4, #2
 800b04a:	d005      	beq.n	800b058 <__ieee754_atan2f+0x70>
 800b04c:	2c03      	cmp	r4, #3
 800b04e:	d005      	beq.n	800b05c <__ieee754_atan2f+0x74>
 800b050:	2c01      	cmp	r4, #1
 800b052:	d141      	bne.n	800b0d8 <__ieee754_atan2f+0xf0>
 800b054:	4b24      	ldr	r3, [pc, #144]	; (800b0e8 <__ieee754_atan2f+0x100>)
 800b056:	e7ea      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b058:	4b24      	ldr	r3, [pc, #144]	; (800b0ec <__ieee754_atan2f+0x104>)
 800b05a:	e7e8      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b05c:	4b24      	ldr	r3, [pc, #144]	; (800b0f0 <__ieee754_atan2f+0x108>)
 800b05e:	e7e6      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b060:	2c02      	cmp	r4, #2
 800b062:	d006      	beq.n	800b072 <__ieee754_atan2f+0x8a>
 800b064:	2c03      	cmp	r4, #3
 800b066:	d006      	beq.n	800b076 <__ieee754_atan2f+0x8e>
 800b068:	2c01      	cmp	r4, #1
 800b06a:	d137      	bne.n	800b0dc <__ieee754_atan2f+0xf4>
 800b06c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b070:	e7dd      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b072:	4b20      	ldr	r3, [pc, #128]	; (800b0f4 <__ieee754_atan2f+0x10c>)
 800b074:	e7db      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b076:	4b20      	ldr	r3, [pc, #128]	; (800b0f8 <__ieee754_atan2f+0x110>)
 800b078:	e7d9      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b07a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b07e:	d0d9      	beq.n	800b034 <__ieee754_atan2f+0x4c>
 800b080:	1b92      	subs	r2, r2, r6
 800b082:	15d2      	asrs	r2, r2, #23
 800b084:	2a3c      	cmp	r2, #60	; 0x3c
 800b086:	dc17      	bgt.n	800b0b8 <__ieee754_atan2f+0xd0>
 800b088:	2900      	cmp	r1, #0
 800b08a:	da01      	bge.n	800b090 <__ieee754_atan2f+0xa8>
 800b08c:	323c      	adds	r2, #60	; 0x3c
 800b08e:	db15      	blt.n	800b0bc <__ieee754_atan2f+0xd4>
 800b090:	4618      	mov	r0, r3
 800b092:	f7f5 fec1 	bl	8000e18 <__aeabi_fdiv>
 800b096:	f000 fe8b 	bl	800bdb0 <fabsf>
 800b09a:	f000 fd79 	bl	800bb90 <atanf>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2c01      	cmp	r4, #1
 800b0a2:	d00d      	beq.n	800b0c0 <__ieee754_atan2f+0xd8>
 800b0a4:	2c02      	cmp	r4, #2
 800b0a6:	d00e      	beq.n	800b0c6 <__ieee754_atan2f+0xde>
 800b0a8:	2c00      	cmp	r4, #0
 800b0aa:	d0c0      	beq.n	800b02e <__ieee754_atan2f+0x46>
 800b0ac:	4913      	ldr	r1, [pc, #76]	; (800b0fc <__ieee754_atan2f+0x114>)
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7f5 fcf6 	bl	8000aa0 <__addsf3>
 800b0b4:	490f      	ldr	r1, [pc, #60]	; (800b0f4 <__ieee754_atan2f+0x10c>)
 800b0b6:	e00c      	b.n	800b0d2 <__ieee754_atan2f+0xea>
 800b0b8:	4b11      	ldr	r3, [pc, #68]	; (800b100 <__ieee754_atan2f+0x118>)
 800b0ba:	e7f1      	b.n	800b0a0 <__ieee754_atan2f+0xb8>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	e7ef      	b.n	800b0a0 <__ieee754_atan2f+0xb8>
 800b0c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b0c4:	e7b3      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b0c6:	490d      	ldr	r1, [pc, #52]	; (800b0fc <__ieee754_atan2f+0x114>)
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7f5 fce9 	bl	8000aa0 <__addsf3>
 800b0ce:	4601      	mov	r1, r0
 800b0d0:	4808      	ldr	r0, [pc, #32]	; (800b0f4 <__ieee754_atan2f+0x10c>)
 800b0d2:	f7f5 fce3 	bl	8000a9c <__aeabi_fsub>
 800b0d6:	e797      	b.n	800b008 <__ieee754_atan2f+0x20>
 800b0d8:	4b0a      	ldr	r3, [pc, #40]	; (800b104 <__ieee754_atan2f+0x11c>)
 800b0da:	e7a8      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	e7a6      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b0e0:	4b07      	ldr	r3, [pc, #28]	; (800b100 <__ieee754_atan2f+0x118>)
 800b0e2:	e7a4      	b.n	800b02e <__ieee754_atan2f+0x46>
 800b0e4:	bfc90fdb 	.word	0xbfc90fdb
 800b0e8:	bf490fdb 	.word	0xbf490fdb
 800b0ec:	4016cbe4 	.word	0x4016cbe4
 800b0f0:	c016cbe4 	.word	0xc016cbe4
 800b0f4:	40490fdb 	.word	0x40490fdb
 800b0f8:	c0490fdb 	.word	0xc0490fdb
 800b0fc:	33bbbd2e 	.word	0x33bbbd2e
 800b100:	3fc90fdb 	.word	0x3fc90fdb
 800b104:	3f490fdb 	.word	0x3f490fdb

0800b108 <__ieee754_rem_pio2f>:
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	4a9d      	ldr	r2, [pc, #628]	; (800b384 <__ieee754_rem_pio2f+0x27c>)
 800b10e:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b112:	4295      	cmp	r5, r2
 800b114:	b087      	sub	sp, #28
 800b116:	460c      	mov	r4, r1
 800b118:	4607      	mov	r7, r0
 800b11a:	dc04      	bgt.n	800b126 <__ieee754_rem_pio2f+0x1e>
 800b11c:	2300      	movs	r3, #0
 800b11e:	6020      	str	r0, [r4, #0]
 800b120:	604b      	str	r3, [r1, #4]
 800b122:	2600      	movs	r6, #0
 800b124:	e01a      	b.n	800b15c <__ieee754_rem_pio2f+0x54>
 800b126:	4a98      	ldr	r2, [pc, #608]	; (800b388 <__ieee754_rem_pio2f+0x280>)
 800b128:	4295      	cmp	r5, r2
 800b12a:	dc4b      	bgt.n	800b1c4 <__ieee754_rem_pio2f+0xbc>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	4997      	ldr	r1, [pc, #604]	; (800b38c <__ieee754_rem_pio2f+0x284>)
 800b130:	f025 050f 	bic.w	r5, r5, #15
 800b134:	4e96      	ldr	r6, [pc, #600]	; (800b390 <__ieee754_rem_pio2f+0x288>)
 800b136:	dd23      	ble.n	800b180 <__ieee754_rem_pio2f+0x78>
 800b138:	f7f5 fcb0 	bl	8000a9c <__aeabi_fsub>
 800b13c:	42b5      	cmp	r5, r6
 800b13e:	4607      	mov	r7, r0
 800b140:	d010      	beq.n	800b164 <__ieee754_rem_pio2f+0x5c>
 800b142:	4994      	ldr	r1, [pc, #592]	; (800b394 <__ieee754_rem_pio2f+0x28c>)
 800b144:	f7f5 fcaa 	bl	8000a9c <__aeabi_fsub>
 800b148:	4601      	mov	r1, r0
 800b14a:	6020      	str	r0, [r4, #0]
 800b14c:	4638      	mov	r0, r7
 800b14e:	f7f5 fca5 	bl	8000a9c <__aeabi_fsub>
 800b152:	4990      	ldr	r1, [pc, #576]	; (800b394 <__ieee754_rem_pio2f+0x28c>)
 800b154:	f7f5 fca2 	bl	8000a9c <__aeabi_fsub>
 800b158:	2601      	movs	r6, #1
 800b15a:	6060      	str	r0, [r4, #4]
 800b15c:	4630      	mov	r0, r6
 800b15e:	b007      	add	sp, #28
 800b160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b164:	498c      	ldr	r1, [pc, #560]	; (800b398 <__ieee754_rem_pio2f+0x290>)
 800b166:	f7f5 fc99 	bl	8000a9c <__aeabi_fsub>
 800b16a:	498c      	ldr	r1, [pc, #560]	; (800b39c <__ieee754_rem_pio2f+0x294>)
 800b16c:	4605      	mov	r5, r0
 800b16e:	f7f5 fc95 	bl	8000a9c <__aeabi_fsub>
 800b172:	4601      	mov	r1, r0
 800b174:	6020      	str	r0, [r4, #0]
 800b176:	4628      	mov	r0, r5
 800b178:	f7f5 fc90 	bl	8000a9c <__aeabi_fsub>
 800b17c:	4987      	ldr	r1, [pc, #540]	; (800b39c <__ieee754_rem_pio2f+0x294>)
 800b17e:	e7e9      	b.n	800b154 <__ieee754_rem_pio2f+0x4c>
 800b180:	f7f5 fc8e 	bl	8000aa0 <__addsf3>
 800b184:	42b5      	cmp	r5, r6
 800b186:	4607      	mov	r7, r0
 800b188:	d00e      	beq.n	800b1a8 <__ieee754_rem_pio2f+0xa0>
 800b18a:	4982      	ldr	r1, [pc, #520]	; (800b394 <__ieee754_rem_pio2f+0x28c>)
 800b18c:	f7f5 fc88 	bl	8000aa0 <__addsf3>
 800b190:	4601      	mov	r1, r0
 800b192:	6020      	str	r0, [r4, #0]
 800b194:	4638      	mov	r0, r7
 800b196:	f7f5 fc81 	bl	8000a9c <__aeabi_fsub>
 800b19a:	497e      	ldr	r1, [pc, #504]	; (800b394 <__ieee754_rem_pio2f+0x28c>)
 800b19c:	f7f5 fc80 	bl	8000aa0 <__addsf3>
 800b1a0:	f04f 36ff 	mov.w	r6, #4294967295
 800b1a4:	6060      	str	r0, [r4, #4]
 800b1a6:	e7d9      	b.n	800b15c <__ieee754_rem_pio2f+0x54>
 800b1a8:	497b      	ldr	r1, [pc, #492]	; (800b398 <__ieee754_rem_pio2f+0x290>)
 800b1aa:	f7f5 fc79 	bl	8000aa0 <__addsf3>
 800b1ae:	497b      	ldr	r1, [pc, #492]	; (800b39c <__ieee754_rem_pio2f+0x294>)
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	f7f5 fc75 	bl	8000aa0 <__addsf3>
 800b1b6:	4601      	mov	r1, r0
 800b1b8:	6020      	str	r0, [r4, #0]
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f7f5 fc6e 	bl	8000a9c <__aeabi_fsub>
 800b1c0:	4976      	ldr	r1, [pc, #472]	; (800b39c <__ieee754_rem_pio2f+0x294>)
 800b1c2:	e7eb      	b.n	800b19c <__ieee754_rem_pio2f+0x94>
 800b1c4:	4a76      	ldr	r2, [pc, #472]	; (800b3a0 <__ieee754_rem_pio2f+0x298>)
 800b1c6:	4295      	cmp	r5, r2
 800b1c8:	f300 808c 	bgt.w	800b2e4 <__ieee754_rem_pio2f+0x1dc>
 800b1cc:	f000 fdf0 	bl	800bdb0 <fabsf>
 800b1d0:	4974      	ldr	r1, [pc, #464]	; (800b3a4 <__ieee754_rem_pio2f+0x29c>)
 800b1d2:	4680      	mov	r8, r0
 800b1d4:	f7f5 fd6c 	bl	8000cb0 <__aeabi_fmul>
 800b1d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b1dc:	f7f5 fc60 	bl	8000aa0 <__addsf3>
 800b1e0:	f7f5 ff42 	bl	8001068 <__aeabi_f2iz>
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	f7f5 fd0f 	bl	8000c08 <__aeabi_i2f>
 800b1ea:	4968      	ldr	r1, [pc, #416]	; (800b38c <__ieee754_rem_pio2f+0x284>)
 800b1ec:	4682      	mov	sl, r0
 800b1ee:	f7f5 fd5f 	bl	8000cb0 <__aeabi_fmul>
 800b1f2:	4601      	mov	r1, r0
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	f7f5 fc51 	bl	8000a9c <__aeabi_fsub>
 800b1fa:	4966      	ldr	r1, [pc, #408]	; (800b394 <__ieee754_rem_pio2f+0x28c>)
 800b1fc:	4680      	mov	r8, r0
 800b1fe:	4650      	mov	r0, sl
 800b200:	f7f5 fd56 	bl	8000cb0 <__aeabi_fmul>
 800b204:	2e1f      	cmp	r6, #31
 800b206:	4681      	mov	r9, r0
 800b208:	dc0c      	bgt.n	800b224 <__ieee754_rem_pio2f+0x11c>
 800b20a:	4a67      	ldr	r2, [pc, #412]	; (800b3a8 <__ieee754_rem_pio2f+0x2a0>)
 800b20c:	1e71      	subs	r1, r6, #1
 800b20e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b212:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b216:	4293      	cmp	r3, r2
 800b218:	d004      	beq.n	800b224 <__ieee754_rem_pio2f+0x11c>
 800b21a:	4649      	mov	r1, r9
 800b21c:	4640      	mov	r0, r8
 800b21e:	f7f5 fc3d 	bl	8000a9c <__aeabi_fsub>
 800b222:	e009      	b.n	800b238 <__ieee754_rem_pio2f+0x130>
 800b224:	4649      	mov	r1, r9
 800b226:	4640      	mov	r0, r8
 800b228:	f7f5 fc38 	bl	8000a9c <__aeabi_fsub>
 800b22c:	15ed      	asrs	r5, r5, #23
 800b22e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b232:	1aeb      	subs	r3, r5, r3
 800b234:	2b08      	cmp	r3, #8
 800b236:	dc01      	bgt.n	800b23c <__ieee754_rem_pio2f+0x134>
 800b238:	6020      	str	r0, [r4, #0]
 800b23a:	e024      	b.n	800b286 <__ieee754_rem_pio2f+0x17e>
 800b23c:	4956      	ldr	r1, [pc, #344]	; (800b398 <__ieee754_rem_pio2f+0x290>)
 800b23e:	4650      	mov	r0, sl
 800b240:	f7f5 fd36 	bl	8000cb0 <__aeabi_fmul>
 800b244:	4681      	mov	r9, r0
 800b246:	4601      	mov	r1, r0
 800b248:	4640      	mov	r0, r8
 800b24a:	f7f5 fc27 	bl	8000a9c <__aeabi_fsub>
 800b24e:	4601      	mov	r1, r0
 800b250:	4683      	mov	fp, r0
 800b252:	4640      	mov	r0, r8
 800b254:	f7f5 fc22 	bl	8000a9c <__aeabi_fsub>
 800b258:	4649      	mov	r1, r9
 800b25a:	f7f5 fc1f 	bl	8000a9c <__aeabi_fsub>
 800b25e:	4680      	mov	r8, r0
 800b260:	494e      	ldr	r1, [pc, #312]	; (800b39c <__ieee754_rem_pio2f+0x294>)
 800b262:	4650      	mov	r0, sl
 800b264:	f7f5 fd24 	bl	8000cb0 <__aeabi_fmul>
 800b268:	4641      	mov	r1, r8
 800b26a:	f7f5 fc17 	bl	8000a9c <__aeabi_fsub>
 800b26e:	4601      	mov	r1, r0
 800b270:	4681      	mov	r9, r0
 800b272:	4658      	mov	r0, fp
 800b274:	f7f5 fc12 	bl	8000a9c <__aeabi_fsub>
 800b278:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b27c:	1aed      	subs	r5, r5, r3
 800b27e:	2d19      	cmp	r5, #25
 800b280:	dc15      	bgt.n	800b2ae <__ieee754_rem_pio2f+0x1a6>
 800b282:	46d8      	mov	r8, fp
 800b284:	6020      	str	r0, [r4, #0]
 800b286:	6825      	ldr	r5, [r4, #0]
 800b288:	4640      	mov	r0, r8
 800b28a:	4629      	mov	r1, r5
 800b28c:	f7f5 fc06 	bl	8000a9c <__aeabi_fsub>
 800b290:	4649      	mov	r1, r9
 800b292:	f7f5 fc03 	bl	8000a9c <__aeabi_fsub>
 800b296:	2f00      	cmp	r7, #0
 800b298:	6060      	str	r0, [r4, #4]
 800b29a:	f6bf af5f 	bge.w	800b15c <__ieee754_rem_pio2f+0x54>
 800b29e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b2a2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b2a6:	6025      	str	r5, [r4, #0]
 800b2a8:	6060      	str	r0, [r4, #4]
 800b2aa:	4276      	negs	r6, r6
 800b2ac:	e756      	b.n	800b15c <__ieee754_rem_pio2f+0x54>
 800b2ae:	493f      	ldr	r1, [pc, #252]	; (800b3ac <__ieee754_rem_pio2f+0x2a4>)
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	f7f5 fcfd 	bl	8000cb0 <__aeabi_fmul>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	4601      	mov	r1, r0
 800b2ba:	4658      	mov	r0, fp
 800b2bc:	f7f5 fbee 	bl	8000a9c <__aeabi_fsub>
 800b2c0:	4601      	mov	r1, r0
 800b2c2:	4680      	mov	r8, r0
 800b2c4:	4658      	mov	r0, fp
 800b2c6:	f7f5 fbe9 	bl	8000a9c <__aeabi_fsub>
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	f7f5 fbe6 	bl	8000a9c <__aeabi_fsub>
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	4937      	ldr	r1, [pc, #220]	; (800b3b0 <__ieee754_rem_pio2f+0x2a8>)
 800b2d4:	4650      	mov	r0, sl
 800b2d6:	f7f5 fceb 	bl	8000cb0 <__aeabi_fmul>
 800b2da:	4629      	mov	r1, r5
 800b2dc:	f7f5 fbde 	bl	8000a9c <__aeabi_fsub>
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	e79a      	b.n	800b21a <__ieee754_rem_pio2f+0x112>
 800b2e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b2e8:	db05      	blt.n	800b2f6 <__ieee754_rem_pio2f+0x1ee>
 800b2ea:	4601      	mov	r1, r0
 800b2ec:	f7f5 fbd6 	bl	8000a9c <__aeabi_fsub>
 800b2f0:	6060      	str	r0, [r4, #4]
 800b2f2:	6020      	str	r0, [r4, #0]
 800b2f4:	e715      	b.n	800b122 <__ieee754_rem_pio2f+0x1a>
 800b2f6:	15ee      	asrs	r6, r5, #23
 800b2f8:	3e86      	subs	r6, #134	; 0x86
 800b2fa:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800b2fe:	4628      	mov	r0, r5
 800b300:	f7f5 feb2 	bl	8001068 <__aeabi_f2iz>
 800b304:	f7f5 fc80 	bl	8000c08 <__aeabi_i2f>
 800b308:	4601      	mov	r1, r0
 800b30a:	9003      	str	r0, [sp, #12]
 800b30c:	4628      	mov	r0, r5
 800b30e:	f7f5 fbc5 	bl	8000a9c <__aeabi_fsub>
 800b312:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b316:	f7f5 fccb 	bl	8000cb0 <__aeabi_fmul>
 800b31a:	4680      	mov	r8, r0
 800b31c:	f7f5 fea4 	bl	8001068 <__aeabi_f2iz>
 800b320:	f7f5 fc72 	bl	8000c08 <__aeabi_i2f>
 800b324:	4601      	mov	r1, r0
 800b326:	9004      	str	r0, [sp, #16]
 800b328:	4605      	mov	r5, r0
 800b32a:	4640      	mov	r0, r8
 800b32c:	f7f5 fbb6 	bl	8000a9c <__aeabi_fsub>
 800b330:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b334:	f7f5 fcbc 	bl	8000cb0 <__aeabi_fmul>
 800b338:	2100      	movs	r1, #0
 800b33a:	9005      	str	r0, [sp, #20]
 800b33c:	f7f5 fe4c 	bl	8000fd8 <__aeabi_fcmpeq>
 800b340:	b1e8      	cbz	r0, 800b37e <__ieee754_rem_pio2f+0x276>
 800b342:	2100      	movs	r1, #0
 800b344:	4628      	mov	r0, r5
 800b346:	f7f5 fe47 	bl	8000fd8 <__aeabi_fcmpeq>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	bf14      	ite	ne
 800b34e:	2301      	movne	r3, #1
 800b350:	2302      	moveq	r3, #2
 800b352:	4a18      	ldr	r2, [pc, #96]	; (800b3b4 <__ieee754_rem_pio2f+0x2ac>)
 800b354:	4621      	mov	r1, r4
 800b356:	9201      	str	r2, [sp, #4]
 800b358:	2202      	movs	r2, #2
 800b35a:	a803      	add	r0, sp, #12
 800b35c:	9200      	str	r2, [sp, #0]
 800b35e:	4632      	mov	r2, r6
 800b360:	f000 f910 	bl	800b584 <__kernel_rem_pio2f>
 800b364:	2f00      	cmp	r7, #0
 800b366:	4606      	mov	r6, r0
 800b368:	f6bf aef8 	bge.w	800b15c <__ieee754_rem_pio2f+0x54>
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b372:	6023      	str	r3, [r4, #0]
 800b374:	6863      	ldr	r3, [r4, #4]
 800b376:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b37a:	6063      	str	r3, [r4, #4]
 800b37c:	e795      	b.n	800b2aa <__ieee754_rem_pio2f+0x1a2>
 800b37e:	2303      	movs	r3, #3
 800b380:	e7e7      	b.n	800b352 <__ieee754_rem_pio2f+0x24a>
 800b382:	bf00      	nop
 800b384:	3f490fd8 	.word	0x3f490fd8
 800b388:	4016cbe3 	.word	0x4016cbe3
 800b38c:	3fc90f80 	.word	0x3fc90f80
 800b390:	3fc90fd0 	.word	0x3fc90fd0
 800b394:	37354443 	.word	0x37354443
 800b398:	37354400 	.word	0x37354400
 800b39c:	2e85a308 	.word	0x2e85a308
 800b3a0:	43490f80 	.word	0x43490f80
 800b3a4:	3f22f984 	.word	0x3f22f984
 800b3a8:	0800c144 	.word	0x0800c144
 800b3ac:	2e85a300 	.word	0x2e85a300
 800b3b0:	248d3132 	.word	0x248d3132
 800b3b4:	0800c1c4 	.word	0x0800c1c4

0800b3b8 <__ieee754_sqrtf>:
 800b3b8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b3bc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	d309      	bcc.n	800b3dc <__ieee754_sqrtf+0x24>
 800b3c8:	4601      	mov	r1, r0
 800b3ca:	f7f5 fc71 	bl	8000cb0 <__aeabi_fmul>
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f7f5 fb65 	bl	8000aa0 <__addsf3>
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4620      	mov	r0, r4
 800b3da:	bd70      	pop	{r4, r5, r6, pc}
 800b3dc:	2a00      	cmp	r2, #0
 800b3de:	d0fb      	beq.n	800b3d8 <__ieee754_sqrtf+0x20>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	da06      	bge.n	800b3f2 <__ieee754_sqrtf+0x3a>
 800b3e4:	4601      	mov	r1, r0
 800b3e6:	f7f5 fb59 	bl	8000a9c <__aeabi_fsub>
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	f7f5 fd14 	bl	8000e18 <__aeabi_fdiv>
 800b3f0:	e7f1      	b.n	800b3d6 <__ieee754_sqrtf+0x1e>
 800b3f2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b3f6:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800b3fa:	d204      	bcs.n	800b406 <__ieee754_sqrtf+0x4e>
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	0219      	lsls	r1, r3, #8
 800b400:	d529      	bpl.n	800b456 <__ieee754_sqrtf+0x9e>
 800b402:	3a01      	subs	r2, #1
 800b404:	1aa4      	subs	r4, r4, r2
 800b406:	3c7f      	subs	r4, #127	; 0x7f
 800b408:	07e2      	lsls	r2, r4, #31
 800b40a:	f04f 0200 	mov.w	r2, #0
 800b40e:	ea4f 0164 	mov.w	r1, r4, asr #1
 800b412:	4616      	mov	r6, r2
 800b414:	f04f 0419 	mov.w	r4, #25
 800b418:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b41c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b424:	bf48      	it	mi
 800b426:	005b      	lslmi	r3, r3, #1
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	1835      	adds	r5, r6, r0
 800b42c:	429d      	cmp	r5, r3
 800b42e:	bfde      	ittt	le
 800b430:	182e      	addle	r6, r5, r0
 800b432:	1b5b      	suble	r3, r3, r5
 800b434:	1812      	addle	r2, r2, r0
 800b436:	3c01      	subs	r4, #1
 800b438:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b43c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b440:	d1f3      	bne.n	800b42a <__ieee754_sqrtf+0x72>
 800b442:	b113      	cbz	r3, 800b44a <__ieee754_sqrtf+0x92>
 800b444:	3201      	adds	r2, #1
 800b446:	f022 0201 	bic.w	r2, r2, #1
 800b44a:	1054      	asrs	r4, r2, #1
 800b44c:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b450:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800b454:	e7c0      	b.n	800b3d8 <__ieee754_sqrtf+0x20>
 800b456:	005b      	lsls	r3, r3, #1
 800b458:	3201      	adds	r2, #1
 800b45a:	e7d0      	b.n	800b3fe <__ieee754_sqrtf+0x46>

0800b45c <__kernel_cosf>:
 800b45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b460:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b464:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b468:	4606      	mov	r6, r0
 800b46a:	460f      	mov	r7, r1
 800b46c:	da03      	bge.n	800b476 <__kernel_cosf+0x1a>
 800b46e:	f7f5 fdfb 	bl	8001068 <__aeabi_f2iz>
 800b472:	2800      	cmp	r0, #0
 800b474:	d070      	beq.n	800b558 <__kernel_cosf+0xfc>
 800b476:	4631      	mov	r1, r6
 800b478:	4630      	mov	r0, r6
 800b47a:	f7f5 fc19 	bl	8000cb0 <__aeabi_fmul>
 800b47e:	4605      	mov	r5, r0
 800b480:	4937      	ldr	r1, [pc, #220]	; (800b560 <__kernel_cosf+0x104>)
 800b482:	f7f5 fc15 	bl	8000cb0 <__aeabi_fmul>
 800b486:	4937      	ldr	r1, [pc, #220]	; (800b564 <__kernel_cosf+0x108>)
 800b488:	f7f5 fb0a 	bl	8000aa0 <__addsf3>
 800b48c:	4629      	mov	r1, r5
 800b48e:	f7f5 fc0f 	bl	8000cb0 <__aeabi_fmul>
 800b492:	4935      	ldr	r1, [pc, #212]	; (800b568 <__kernel_cosf+0x10c>)
 800b494:	f7f5 fb02 	bl	8000a9c <__aeabi_fsub>
 800b498:	4629      	mov	r1, r5
 800b49a:	f7f5 fc09 	bl	8000cb0 <__aeabi_fmul>
 800b49e:	4933      	ldr	r1, [pc, #204]	; (800b56c <__kernel_cosf+0x110>)
 800b4a0:	f7f5 fafe 	bl	8000aa0 <__addsf3>
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	f7f5 fc03 	bl	8000cb0 <__aeabi_fmul>
 800b4aa:	4931      	ldr	r1, [pc, #196]	; (800b570 <__kernel_cosf+0x114>)
 800b4ac:	f7f5 faf6 	bl	8000a9c <__aeabi_fsub>
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	f7f5 fbfd 	bl	8000cb0 <__aeabi_fmul>
 800b4b6:	492f      	ldr	r1, [pc, #188]	; (800b574 <__kernel_cosf+0x118>)
 800b4b8:	f7f5 faf2 	bl	8000aa0 <__addsf3>
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7f5 fbf7 	bl	8000cb0 <__aeabi_fmul>
 800b4c2:	4b2d      	ldr	r3, [pc, #180]	; (800b578 <__kernel_cosf+0x11c>)
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	429c      	cmp	r4, r3
 800b4c8:	dc1d      	bgt.n	800b506 <__kernel_cosf+0xaa>
 800b4ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	f7f5 fbee 	bl	8000cb0 <__aeabi_fmul>
 800b4d4:	4641      	mov	r1, r8
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f7f5 fbe9 	bl	8000cb0 <__aeabi_fmul>
 800b4de:	4639      	mov	r1, r7
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7f5 fbe4 	bl	8000cb0 <__aeabi_fmul>
 800b4e8:	4601      	mov	r1, r0
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f7f5 fad6 	bl	8000a9c <__aeabi_fsub>
 800b4f0:	4601      	mov	r1, r0
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f7f5 fad2 	bl	8000a9c <__aeabi_fsub>
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b4fe:	f7f5 facd 	bl	8000a9c <__aeabi_fsub>
 800b502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b506:	4b1d      	ldr	r3, [pc, #116]	; (800b57c <__kernel_cosf+0x120>)
 800b508:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b50c:	429c      	cmp	r4, r3
 800b50e:	bfcc      	ite	gt
 800b510:	4c1b      	ldrgt	r4, [pc, #108]	; (800b580 <__kernel_cosf+0x124>)
 800b512:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800b516:	4621      	mov	r1, r4
 800b518:	f7f5 fac0 	bl	8000a9c <__aeabi_fsub>
 800b51c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b520:	4681      	mov	r9, r0
 800b522:	4628      	mov	r0, r5
 800b524:	f7f5 fbc4 	bl	8000cb0 <__aeabi_fmul>
 800b528:	4621      	mov	r1, r4
 800b52a:	f7f5 fab7 	bl	8000a9c <__aeabi_fsub>
 800b52e:	4641      	mov	r1, r8
 800b530:	4604      	mov	r4, r0
 800b532:	4628      	mov	r0, r5
 800b534:	f7f5 fbbc 	bl	8000cb0 <__aeabi_fmul>
 800b538:	4639      	mov	r1, r7
 800b53a:	4605      	mov	r5, r0
 800b53c:	4630      	mov	r0, r6
 800b53e:	f7f5 fbb7 	bl	8000cb0 <__aeabi_fmul>
 800b542:	4601      	mov	r1, r0
 800b544:	4628      	mov	r0, r5
 800b546:	f7f5 faa9 	bl	8000a9c <__aeabi_fsub>
 800b54a:	4601      	mov	r1, r0
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7f5 faa5 	bl	8000a9c <__aeabi_fsub>
 800b552:	4601      	mov	r1, r0
 800b554:	4648      	mov	r0, r9
 800b556:	e7d2      	b.n	800b4fe <__kernel_cosf+0xa2>
 800b558:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b560:	ad47d74e 	.word	0xad47d74e
 800b564:	310f74f6 	.word	0x310f74f6
 800b568:	3493f27c 	.word	0x3493f27c
 800b56c:	37d00d01 	.word	0x37d00d01
 800b570:	3ab60b61 	.word	0x3ab60b61
 800b574:	3d2aaaab 	.word	0x3d2aaaab
 800b578:	3e999999 	.word	0x3e999999
 800b57c:	3f480000 	.word	0x3f480000
 800b580:	3e900000 	.word	0x3e900000

0800b584 <__kernel_rem_pio2f>:
 800b584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b588:	b0d9      	sub	sp, #356	; 0x164
 800b58a:	9304      	str	r3, [sp, #16]
 800b58c:	9101      	str	r1, [sp, #4]
 800b58e:	4bb4      	ldr	r3, [pc, #720]	; (800b860 <__kernel_rem_pio2f+0x2dc>)
 800b590:	9962      	ldr	r1, [sp, #392]	; 0x188
 800b592:	1ed4      	subs	r4, r2, #3
 800b594:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b598:	2500      	movs	r5, #0
 800b59a:	9302      	str	r3, [sp, #8]
 800b59c:	9b04      	ldr	r3, [sp, #16]
 800b59e:	f04f 0b00 	mov.w	fp, #0
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	9303      	str	r3, [sp, #12]
 800b5a6:	2308      	movs	r3, #8
 800b5a8:	fb94 f4f3 	sdiv	r4, r4, r3
 800b5ac:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b5b0:	1c66      	adds	r6, r4, #1
 800b5b2:	9b02      	ldr	r3, [sp, #8]
 800b5b4:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800b5b8:	9a03      	ldr	r2, [sp, #12]
 800b5ba:	9005      	str	r0, [sp, #20]
 800b5bc:	eb03 0802 	add.w	r8, r3, r2
 800b5c0:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b5c2:	1aa7      	subs	r7, r4, r2
 800b5c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b5c8:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 800b5cc:	4545      	cmp	r5, r8
 800b5ce:	dd10      	ble.n	800b5f2 <__kernel_rem_pio2f+0x6e>
 800b5d0:	2500      	movs	r5, #0
 800b5d2:	f04f 0b00 	mov.w	fp, #0
 800b5d6:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 800b5da:	9b02      	ldr	r3, [sp, #8]
 800b5dc:	429d      	cmp	r5, r3
 800b5de:	dc28      	bgt.n	800b632 <__kernel_rem_pio2f+0xae>
 800b5e0:	9b04      	ldr	r3, [sp, #16]
 800b5e2:	46d9      	mov	r9, fp
 800b5e4:	eb03 0805 	add.w	r8, r3, r5
 800b5e8:	ab1c      	add	r3, sp, #112	; 0x70
 800b5ea:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800b5ee:	2700      	movs	r7, #0
 800b5f0:	e018      	b.n	800b624 <__kernel_rem_pio2f+0xa0>
 800b5f2:	42ef      	cmn	r7, r5
 800b5f4:	d407      	bmi.n	800b606 <__kernel_rem_pio2f+0x82>
 800b5f6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b5fa:	f7f5 fb05 	bl	8000c08 <__aeabi_i2f>
 800b5fe:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 800b602:	3501      	adds	r5, #1
 800b604:	e7e2      	b.n	800b5cc <__kernel_rem_pio2f+0x48>
 800b606:	4658      	mov	r0, fp
 800b608:	e7f9      	b.n	800b5fe <__kernel_rem_pio2f+0x7a>
 800b60a:	9b05      	ldr	r3, [sp, #20]
 800b60c:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 800b610:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b614:	f7f5 fb4c 	bl	8000cb0 <__aeabi_fmul>
 800b618:	4601      	mov	r1, r0
 800b61a:	4648      	mov	r0, r9
 800b61c:	f7f5 fa40 	bl	8000aa0 <__addsf3>
 800b620:	4681      	mov	r9, r0
 800b622:	3701      	adds	r7, #1
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	429f      	cmp	r7, r3
 800b628:	ddef      	ble.n	800b60a <__kernel_rem_pio2f+0x86>
 800b62a:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 800b62e:	3501      	adds	r5, #1
 800b630:	e7d3      	b.n	800b5da <__kernel_rem_pio2f+0x56>
 800b632:	9b02      	ldr	r3, [sp, #8]
 800b634:	aa08      	add	r2, sp, #32
 800b636:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b63a:	9307      	str	r3, [sp, #28]
 800b63c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b63e:	9f02      	ldr	r7, [sp, #8]
 800b640:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b644:	9306      	str	r3, [sp, #24]
 800b646:	46ba      	mov	sl, r7
 800b648:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800b64c:	ab58      	add	r3, sp, #352	; 0x160
 800b64e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b652:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800b656:	ad07      	add	r5, sp, #28
 800b658:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b65c:	f1ba 0f00 	cmp.w	sl, #0
 800b660:	dc57      	bgt.n	800b712 <__kernel_rem_pio2f+0x18e>
 800b662:	4631      	mov	r1, r6
 800b664:	4620      	mov	r0, r4
 800b666:	f000 fba7 	bl	800bdb8 <scalbnf>
 800b66a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800b66e:	4604      	mov	r4, r0
 800b670:	f7f5 fb1e 	bl	8000cb0 <__aeabi_fmul>
 800b674:	f7ff fbca 	bl	800ae0c <floorf>
 800b678:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800b67c:	f7f5 fb18 	bl	8000cb0 <__aeabi_fmul>
 800b680:	4601      	mov	r1, r0
 800b682:	4620      	mov	r0, r4
 800b684:	f7f5 fa0a 	bl	8000a9c <__aeabi_fsub>
 800b688:	4604      	mov	r4, r0
 800b68a:	f7f5 fced 	bl	8001068 <__aeabi_f2iz>
 800b68e:	4680      	mov	r8, r0
 800b690:	f7f5 faba 	bl	8000c08 <__aeabi_i2f>
 800b694:	4601      	mov	r1, r0
 800b696:	4620      	mov	r0, r4
 800b698:	f7f5 fa00 	bl	8000a9c <__aeabi_fsub>
 800b69c:	2e00      	cmp	r6, #0
 800b69e:	4604      	mov	r4, r0
 800b6a0:	dd55      	ble.n	800b74e <__kernel_rem_pio2f+0x1ca>
 800b6a2:	1e7b      	subs	r3, r7, #1
 800b6a4:	aa08      	add	r2, sp, #32
 800b6a6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b6aa:	f1c6 0208 	rsb	r2, r6, #8
 800b6ae:	fa45 f002 	asr.w	r0, r5, r2
 800b6b2:	4480      	add	r8, r0
 800b6b4:	4090      	lsls	r0, r2
 800b6b6:	1a2d      	subs	r5, r5, r0
 800b6b8:	aa08      	add	r2, sp, #32
 800b6ba:	f1c6 0007 	rsb	r0, r6, #7
 800b6be:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800b6c2:	4105      	asrs	r5, r0
 800b6c4:	2d00      	cmp	r5, #0
 800b6c6:	dd50      	ble.n	800b76a <__kernel_rem_pio2f+0x1e6>
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	4691      	mov	r9, r2
 800b6cc:	f108 0801 	add.w	r8, r8, #1
 800b6d0:	4297      	cmp	r7, r2
 800b6d2:	f300 8085 	bgt.w	800b7e0 <__kernel_rem_pio2f+0x25c>
 800b6d6:	2e00      	cmp	r6, #0
 800b6d8:	dd05      	ble.n	800b6e6 <__kernel_rem_pio2f+0x162>
 800b6da:	2e01      	cmp	r6, #1
 800b6dc:	f000 8097 	beq.w	800b80e <__kernel_rem_pio2f+0x28a>
 800b6e0:	2e02      	cmp	r6, #2
 800b6e2:	f000 809e 	beq.w	800b822 <__kernel_rem_pio2f+0x29e>
 800b6e6:	2d02      	cmp	r5, #2
 800b6e8:	d13f      	bne.n	800b76a <__kernel_rem_pio2f+0x1e6>
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b6f0:	f7f5 f9d4 	bl	8000a9c <__aeabi_fsub>
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	f1b9 0f00 	cmp.w	r9, #0
 800b6fa:	d036      	beq.n	800b76a <__kernel_rem_pio2f+0x1e6>
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b702:	f000 fb59 	bl	800bdb8 <scalbnf>
 800b706:	4601      	mov	r1, r0
 800b708:	4620      	mov	r0, r4
 800b70a:	f7f5 f9c7 	bl	8000a9c <__aeabi_fsub>
 800b70e:	4604      	mov	r4, r0
 800b710:	e02b      	b.n	800b76a <__kernel_rem_pio2f+0x1e6>
 800b712:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b716:	4620      	mov	r0, r4
 800b718:	f7f5 faca 	bl	8000cb0 <__aeabi_fmul>
 800b71c:	f7f5 fca4 	bl	8001068 <__aeabi_f2iz>
 800b720:	f7f5 fa72 	bl	8000c08 <__aeabi_i2f>
 800b724:	4641      	mov	r1, r8
 800b726:	4683      	mov	fp, r0
 800b728:	f7f5 fac2 	bl	8000cb0 <__aeabi_fmul>
 800b72c:	4601      	mov	r1, r0
 800b72e:	4620      	mov	r0, r4
 800b730:	f7f5 f9b4 	bl	8000a9c <__aeabi_fsub>
 800b734:	f7f5 fc98 	bl	8001068 <__aeabi_f2iz>
 800b738:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b73c:	f845 0f04 	str.w	r0, [r5, #4]!
 800b740:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800b744:	4658      	mov	r0, fp
 800b746:	f7f5 f9ab 	bl	8000aa0 <__addsf3>
 800b74a:	4604      	mov	r4, r0
 800b74c:	e786      	b.n	800b65c <__kernel_rem_pio2f+0xd8>
 800b74e:	d105      	bne.n	800b75c <__kernel_rem_pio2f+0x1d8>
 800b750:	1e7b      	subs	r3, r7, #1
 800b752:	aa08      	add	r2, sp, #32
 800b754:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b758:	122d      	asrs	r5, r5, #8
 800b75a:	e7b3      	b.n	800b6c4 <__kernel_rem_pio2f+0x140>
 800b75c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b760:	f7f5 fc58 	bl	8001014 <__aeabi_fcmpge>
 800b764:	2800      	cmp	r0, #0
 800b766:	d139      	bne.n	800b7dc <__kernel_rem_pio2f+0x258>
 800b768:	4605      	mov	r5, r0
 800b76a:	2100      	movs	r1, #0
 800b76c:	4620      	mov	r0, r4
 800b76e:	f7f5 fc33 	bl	8000fd8 <__aeabi_fcmpeq>
 800b772:	2800      	cmp	r0, #0
 800b774:	f000 8098 	beq.w	800b8a8 <__kernel_rem_pio2f+0x324>
 800b778:	1e7c      	subs	r4, r7, #1
 800b77a:	4623      	mov	r3, r4
 800b77c:	2200      	movs	r2, #0
 800b77e:	9902      	ldr	r1, [sp, #8]
 800b780:	428b      	cmp	r3, r1
 800b782:	da55      	bge.n	800b830 <__kernel_rem_pio2f+0x2ac>
 800b784:	2a00      	cmp	r2, #0
 800b786:	d16e      	bne.n	800b866 <__kernel_rem_pio2f+0x2e2>
 800b788:	2301      	movs	r3, #1
 800b78a:	f06f 0103 	mvn.w	r1, #3
 800b78e:	fb01 f203 	mul.w	r2, r1, r3
 800b792:	9807      	ldr	r0, [sp, #28]
 800b794:	5882      	ldr	r2, [r0, r2]
 800b796:	2a00      	cmp	r2, #0
 800b798:	d050      	beq.n	800b83c <__kernel_rem_pio2f+0x2b8>
 800b79a:	f06f 0803 	mvn.w	r8, #3
 800b79e:	9a04      	ldr	r2, [sp, #16]
 800b7a0:	1c7d      	adds	r5, r7, #1
 800b7a2:	19d4      	adds	r4, r2, r7
 800b7a4:	aa58      	add	r2, sp, #352	; 0x160
 800b7a6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b7aa:	3cf4      	subs	r4, #244	; 0xf4
 800b7ac:	441f      	add	r7, r3
 800b7ae:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b7b2:	42bd      	cmp	r5, r7
 800b7b4:	f73f af47 	bgt.w	800b646 <__kernel_rem_pio2f+0xc2>
 800b7b8:	9b06      	ldr	r3, [sp, #24]
 800b7ba:	f04f 0a00 	mov.w	sl, #0
 800b7be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7c2:	f7f5 fa21 	bl	8000c08 <__aeabi_i2f>
 800b7c6:	f04f 0b00 	mov.w	fp, #0
 800b7ca:	f844 0f04 	str.w	r0, [r4, #4]!
 800b7ce:	9b03      	ldr	r3, [sp, #12]
 800b7d0:	459a      	cmp	sl, r3
 800b7d2:	dd35      	ble.n	800b840 <__kernel_rem_pio2f+0x2bc>
 800b7d4:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800b7d8:	3501      	adds	r5, #1
 800b7da:	e7ea      	b.n	800b7b2 <__kernel_rem_pio2f+0x22e>
 800b7dc:	2502      	movs	r5, #2
 800b7de:	e773      	b.n	800b6c8 <__kernel_rem_pio2f+0x144>
 800b7e0:	ab08      	add	r3, sp, #32
 800b7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e6:	f1b9 0f00 	cmp.w	r9, #0
 800b7ea:	d109      	bne.n	800b800 <__kernel_rem_pio2f+0x27c>
 800b7ec:	b12b      	cbz	r3, 800b7fa <__kernel_rem_pio2f+0x276>
 800b7ee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b7f2:	a908      	add	r1, sp, #32
 800b7f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	3201      	adds	r2, #1
 800b7fc:	4699      	mov	r9, r3
 800b7fe:	e767      	b.n	800b6d0 <__kernel_rem_pio2f+0x14c>
 800b800:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b804:	a908      	add	r1, sp, #32
 800b806:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b80a:	464b      	mov	r3, r9
 800b80c:	e7f5      	b.n	800b7fa <__kernel_rem_pio2f+0x276>
 800b80e:	1e7a      	subs	r2, r7, #1
 800b810:	ab08      	add	r3, sp, #32
 800b812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b81a:	a908      	add	r1, sp, #32
 800b81c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b820:	e761      	b.n	800b6e6 <__kernel_rem_pio2f+0x162>
 800b822:	1e7a      	subs	r2, r7, #1
 800b824:	ab08      	add	r3, sp, #32
 800b826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b82e:	e7f4      	b.n	800b81a <__kernel_rem_pio2f+0x296>
 800b830:	a908      	add	r1, sp, #32
 800b832:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b836:	3b01      	subs	r3, #1
 800b838:	430a      	orrs	r2, r1
 800b83a:	e7a0      	b.n	800b77e <__kernel_rem_pio2f+0x1fa>
 800b83c:	3301      	adds	r3, #1
 800b83e:	e7a6      	b.n	800b78e <__kernel_rem_pio2f+0x20a>
 800b840:	fb08 f30a 	mul.w	r3, r8, sl
 800b844:	9a05      	ldr	r2, [sp, #20]
 800b846:	58e0      	ldr	r0, [r4, r3]
 800b848:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800b84c:	f7f5 fa30 	bl	8000cb0 <__aeabi_fmul>
 800b850:	4601      	mov	r1, r0
 800b852:	4658      	mov	r0, fp
 800b854:	f7f5 f924 	bl	8000aa0 <__addsf3>
 800b858:	f10a 0a01 	add.w	sl, sl, #1
 800b85c:	4683      	mov	fp, r0
 800b85e:	e7b6      	b.n	800b7ce <__kernel_rem_pio2f+0x24a>
 800b860:	0800c508 	.word	0x0800c508
 800b864:	3c01      	subs	r4, #1
 800b866:	ab08      	add	r3, sp, #32
 800b868:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b86c:	3e08      	subs	r6, #8
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d0f8      	beq.n	800b864 <__kernel_rem_pio2f+0x2e0>
 800b872:	4631      	mov	r1, r6
 800b874:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b878:	f000 fa9e 	bl	800bdb8 <scalbnf>
 800b87c:	46a1      	mov	r9, r4
 800b87e:	4682      	mov	sl, r0
 800b880:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 800b884:	ae44      	add	r6, sp, #272	; 0x110
 800b886:	f1b9 0f00 	cmp.w	r9, #0
 800b88a:	da3f      	bge.n	800b90c <__kernel_rem_pio2f+0x388>
 800b88c:	2700      	movs	r7, #0
 800b88e:	f04f 0b00 	mov.w	fp, #0
 800b892:	4b82      	ldr	r3, [pc, #520]	; (800ba9c <__kernel_rem_pio2f+0x518>)
 800b894:	aa30      	add	r2, sp, #192	; 0xc0
 800b896:	ebb4 0a07 	subs.w	sl, r4, r7
 800b89a:	d462      	bmi.n	800b962 <__kernel_rem_pio2f+0x3de>
 800b89c:	a944      	add	r1, sp, #272	; 0x110
 800b89e:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 800b8a2:	46d9      	mov	r9, fp
 800b8a4:	2600      	movs	r6, #0
 800b8a6:	e053      	b.n	800b950 <__kernel_rem_pio2f+0x3cc>
 800b8a8:	4271      	negs	r1, r6
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f000 fa84 	bl	800bdb8 <scalbnf>
 800b8b0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	f7f5 fbad 	bl	8001014 <__aeabi_fcmpge>
 800b8ba:	b1f8      	cbz	r0, 800b8fc <__kernel_rem_pio2f+0x378>
 800b8bc:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f7f5 f9f5 	bl	8000cb0 <__aeabi_fmul>
 800b8c6:	f7f5 fbcf 	bl	8001068 <__aeabi_f2iz>
 800b8ca:	f7f5 f99d 	bl	8000c08 <__aeabi_i2f>
 800b8ce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b8d2:	4681      	mov	r9, r0
 800b8d4:	f7f5 f9ec 	bl	8000cb0 <__aeabi_fmul>
 800b8d8:	4601      	mov	r1, r0
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f7f5 f8de 	bl	8000a9c <__aeabi_fsub>
 800b8e0:	f7f5 fbc2 	bl	8001068 <__aeabi_f2iz>
 800b8e4:	ab08      	add	r3, sp, #32
 800b8e6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b8ea:	4648      	mov	r0, r9
 800b8ec:	f7f5 fbbc 	bl	8001068 <__aeabi_f2iz>
 800b8f0:	1c7c      	adds	r4, r7, #1
 800b8f2:	ab08      	add	r3, sp, #32
 800b8f4:	3608      	adds	r6, #8
 800b8f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b8fa:	e7ba      	b.n	800b872 <__kernel_rem_pio2f+0x2ee>
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f7f5 fbb3 	bl	8001068 <__aeabi_f2iz>
 800b902:	ab08      	add	r3, sp, #32
 800b904:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b908:	463c      	mov	r4, r7
 800b90a:	e7b2      	b.n	800b872 <__kernel_rem_pio2f+0x2ee>
 800b90c:	ab08      	add	r3, sp, #32
 800b90e:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800b912:	f7f5 f979 	bl	8000c08 <__aeabi_i2f>
 800b916:	4651      	mov	r1, sl
 800b918:	f7f5 f9ca 	bl	8000cb0 <__aeabi_fmul>
 800b91c:	4639      	mov	r1, r7
 800b91e:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 800b922:	4650      	mov	r0, sl
 800b924:	f7f5 f9c4 	bl	8000cb0 <__aeabi_fmul>
 800b928:	f109 39ff 	add.w	r9, r9, #4294967295
 800b92c:	4682      	mov	sl, r0
 800b92e:	e7aa      	b.n	800b886 <__kernel_rem_pio2f+0x302>
 800b930:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b934:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 800b938:	9204      	str	r2, [sp, #16]
 800b93a:	9303      	str	r3, [sp, #12]
 800b93c:	f7f5 f9b8 	bl	8000cb0 <__aeabi_fmul>
 800b940:	4601      	mov	r1, r0
 800b942:	4648      	mov	r0, r9
 800b944:	f7f5 f8ac 	bl	8000aa0 <__addsf3>
 800b948:	4681      	mov	r9, r0
 800b94a:	9a04      	ldr	r2, [sp, #16]
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	3601      	adds	r6, #1
 800b950:	9902      	ldr	r1, [sp, #8]
 800b952:	428e      	cmp	r6, r1
 800b954:	dc01      	bgt.n	800b95a <__kernel_rem_pio2f+0x3d6>
 800b956:	42be      	cmp	r6, r7
 800b958:	ddea      	ble.n	800b930 <__kernel_rem_pio2f+0x3ac>
 800b95a:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 800b95e:	3701      	adds	r7, #1
 800b960:	e799      	b.n	800b896 <__kernel_rem_pio2f+0x312>
 800b962:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800b964:	2b03      	cmp	r3, #3
 800b966:	d826      	bhi.n	800b9b6 <__kernel_rem_pio2f+0x432>
 800b968:	e8df f003 	tbb	[pc, r3]
 800b96c:	2a02021c 	.word	0x2a02021c
 800b970:	4626      	mov	r6, r4
 800b972:	2000      	movs	r0, #0
 800b974:	af30      	add	r7, sp, #192	; 0xc0
 800b976:	2e00      	cmp	r6, #0
 800b978:	da40      	bge.n	800b9fc <__kernel_rem_pio2f+0x478>
 800b97a:	2d00      	cmp	r5, #0
 800b97c:	d044      	beq.n	800ba08 <__kernel_rem_pio2f+0x484>
 800b97e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800b982:	9a01      	ldr	r2, [sp, #4]
 800b984:	af58      	add	r7, sp, #352	; 0x160
 800b986:	4601      	mov	r1, r0
 800b988:	6013      	str	r3, [r2, #0]
 800b98a:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800b98e:	f7f5 f885 	bl	8000a9c <__aeabi_fsub>
 800b992:	2601      	movs	r6, #1
 800b994:	42b4      	cmp	r4, r6
 800b996:	da39      	bge.n	800ba0c <__kernel_rem_pio2f+0x488>
 800b998:	b10d      	cbz	r5, 800b99e <__kernel_rem_pio2f+0x41a>
 800b99a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b99e:	9b01      	ldr	r3, [sp, #4]
 800b9a0:	6058      	str	r0, [r3, #4]
 800b9a2:	e008      	b.n	800b9b6 <__kernel_rem_pio2f+0x432>
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	ae30      	add	r6, sp, #192	; 0xc0
 800b9a8:	2c00      	cmp	r4, #0
 800b9aa:	da21      	bge.n	800b9f0 <__kernel_rem_pio2f+0x46c>
 800b9ac:	b10d      	cbz	r5, 800b9b2 <__kernel_rem_pio2f+0x42e>
 800b9ae:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b9b2:	9b01      	ldr	r3, [sp, #4]
 800b9b4:	6018      	str	r0, [r3, #0]
 800b9b6:	f008 0007 	and.w	r0, r8, #7
 800b9ba:	b059      	add	sp, #356	; 0x164
 800b9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c0:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800b9c4:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 800b9c8:	4637      	mov	r7, r6
 800b9ca:	46a1      	mov	r9, r4
 800b9cc:	f1b9 0f00 	cmp.w	r9, #0
 800b9d0:	dc22      	bgt.n	800ba18 <__kernel_rem_pio2f+0x494>
 800b9d2:	4627      	mov	r7, r4
 800b9d4:	2f01      	cmp	r7, #1
 800b9d6:	dc38      	bgt.n	800ba4a <__kernel_rem_pio2f+0x4c6>
 800b9d8:	2000      	movs	r0, #0
 800b9da:	2c01      	cmp	r4, #1
 800b9dc:	dc4c      	bgt.n	800ba78 <__kernel_rem_pio2f+0x4f4>
 800b9de:	2d00      	cmp	r5, #0
 800b9e0:	d150      	bne.n	800ba84 <__kernel_rem_pio2f+0x500>
 800b9e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b9e4:	9a01      	ldr	r2, [sp, #4]
 800b9e6:	6013      	str	r3, [r2, #0]
 800b9e8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800b9ea:	6053      	str	r3, [r2, #4]
 800b9ec:	6090      	str	r0, [r2, #8]
 800b9ee:	e7e2      	b.n	800b9b6 <__kernel_rem_pio2f+0x432>
 800b9f0:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800b9f4:	f7f5 f854 	bl	8000aa0 <__addsf3>
 800b9f8:	3c01      	subs	r4, #1
 800b9fa:	e7d5      	b.n	800b9a8 <__kernel_rem_pio2f+0x424>
 800b9fc:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800ba00:	f7f5 f84e 	bl	8000aa0 <__addsf3>
 800ba04:	3e01      	subs	r6, #1
 800ba06:	e7b6      	b.n	800b976 <__kernel_rem_pio2f+0x3f2>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	e7ba      	b.n	800b982 <__kernel_rem_pio2f+0x3fe>
 800ba0c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800ba10:	f7f5 f846 	bl	8000aa0 <__addsf3>
 800ba14:	3601      	adds	r6, #1
 800ba16:	e7bd      	b.n	800b994 <__kernel_rem_pio2f+0x410>
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	4610      	mov	r0, r2
 800ba22:	9303      	str	r3, [sp, #12]
 800ba24:	9202      	str	r2, [sp, #8]
 800ba26:	f7f5 f83b 	bl	8000aa0 <__addsf3>
 800ba2a:	9a02      	ldr	r2, [sp, #8]
 800ba2c:	4601      	mov	r1, r0
 800ba2e:	4683      	mov	fp, r0
 800ba30:	4610      	mov	r0, r2
 800ba32:	f7f5 f833 	bl	8000a9c <__aeabi_fsub>
 800ba36:	9b03      	ldr	r3, [sp, #12]
 800ba38:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	f7f5 f82f 	bl	8000aa0 <__addsf3>
 800ba42:	6038      	str	r0, [r7, #0]
 800ba44:	f847 bd04 	str.w	fp, [r7, #-4]!
 800ba48:	e7c0      	b.n	800b9cc <__kernel_rem_pio2f+0x448>
 800ba4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ba4e:	f8d6 b000 	ldr.w	fp, [r6]
 800ba52:	4618      	mov	r0, r3
 800ba54:	4659      	mov	r1, fp
 800ba56:	9302      	str	r3, [sp, #8]
 800ba58:	f7f5 f822 	bl	8000aa0 <__addsf3>
 800ba5c:	9b02      	ldr	r3, [sp, #8]
 800ba5e:	4601      	mov	r1, r0
 800ba60:	4681      	mov	r9, r0
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7f5 f81a 	bl	8000a9c <__aeabi_fsub>
 800ba68:	4659      	mov	r1, fp
 800ba6a:	f7f5 f819 	bl	8000aa0 <__addsf3>
 800ba6e:	3f01      	subs	r7, #1
 800ba70:	6030      	str	r0, [r6, #0]
 800ba72:	f846 9d04 	str.w	r9, [r6, #-4]!
 800ba76:	e7ad      	b.n	800b9d4 <__kernel_rem_pio2f+0x450>
 800ba78:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800ba7c:	f7f5 f810 	bl	8000aa0 <__addsf3>
 800ba80:	3c01      	subs	r4, #1
 800ba82:	e7aa      	b.n	800b9da <__kernel_rem_pio2f+0x456>
 800ba84:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800ba86:	9a01      	ldr	r2, [sp, #4]
 800ba88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba8c:	6013      	str	r3, [r2, #0]
 800ba8e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800ba90:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ba94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba98:	6053      	str	r3, [r2, #4]
 800ba9a:	e7a7      	b.n	800b9ec <__kernel_rem_pio2f+0x468>
 800ba9c:	0800c4dc 	.word	0x0800c4dc

0800baa0 <__kernel_sinf>:
 800baa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800baa8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800baac:	4604      	mov	r4, r0
 800baae:	460f      	mov	r7, r1
 800bab0:	4691      	mov	r9, r2
 800bab2:	da03      	bge.n	800babc <__kernel_sinf+0x1c>
 800bab4:	f7f5 fad8 	bl	8001068 <__aeabi_f2iz>
 800bab8:	2800      	cmp	r0, #0
 800baba:	d035      	beq.n	800bb28 <__kernel_sinf+0x88>
 800babc:	4621      	mov	r1, r4
 800babe:	4620      	mov	r0, r4
 800bac0:	f7f5 f8f6 	bl	8000cb0 <__aeabi_fmul>
 800bac4:	4605      	mov	r5, r0
 800bac6:	4601      	mov	r1, r0
 800bac8:	4620      	mov	r0, r4
 800baca:	f7f5 f8f1 	bl	8000cb0 <__aeabi_fmul>
 800bace:	4929      	ldr	r1, [pc, #164]	; (800bb74 <__kernel_sinf+0xd4>)
 800bad0:	4606      	mov	r6, r0
 800bad2:	4628      	mov	r0, r5
 800bad4:	f7f5 f8ec 	bl	8000cb0 <__aeabi_fmul>
 800bad8:	4927      	ldr	r1, [pc, #156]	; (800bb78 <__kernel_sinf+0xd8>)
 800bada:	f7f4 ffdf 	bl	8000a9c <__aeabi_fsub>
 800bade:	4629      	mov	r1, r5
 800bae0:	f7f5 f8e6 	bl	8000cb0 <__aeabi_fmul>
 800bae4:	4925      	ldr	r1, [pc, #148]	; (800bb7c <__kernel_sinf+0xdc>)
 800bae6:	f7f4 ffdb 	bl	8000aa0 <__addsf3>
 800baea:	4629      	mov	r1, r5
 800baec:	f7f5 f8e0 	bl	8000cb0 <__aeabi_fmul>
 800baf0:	4923      	ldr	r1, [pc, #140]	; (800bb80 <__kernel_sinf+0xe0>)
 800baf2:	f7f4 ffd3 	bl	8000a9c <__aeabi_fsub>
 800baf6:	4629      	mov	r1, r5
 800baf8:	f7f5 f8da 	bl	8000cb0 <__aeabi_fmul>
 800bafc:	4921      	ldr	r1, [pc, #132]	; (800bb84 <__kernel_sinf+0xe4>)
 800bafe:	f7f4 ffcf 	bl	8000aa0 <__addsf3>
 800bb02:	4680      	mov	r8, r0
 800bb04:	f1b9 0f00 	cmp.w	r9, #0
 800bb08:	d111      	bne.n	800bb2e <__kernel_sinf+0x8e>
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	f7f5 f8cf 	bl	8000cb0 <__aeabi_fmul>
 800bb12:	491d      	ldr	r1, [pc, #116]	; (800bb88 <__kernel_sinf+0xe8>)
 800bb14:	f7f4 ffc2 	bl	8000a9c <__aeabi_fsub>
 800bb18:	4631      	mov	r1, r6
 800bb1a:	f7f5 f8c9 	bl	8000cb0 <__aeabi_fmul>
 800bb1e:	4601      	mov	r1, r0
 800bb20:	4620      	mov	r0, r4
 800bb22:	f7f4 ffbd 	bl	8000aa0 <__addsf3>
 800bb26:	4604      	mov	r4, r0
 800bb28:	4620      	mov	r0, r4
 800bb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb2e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bb32:	4638      	mov	r0, r7
 800bb34:	f7f5 f8bc 	bl	8000cb0 <__aeabi_fmul>
 800bb38:	4641      	mov	r1, r8
 800bb3a:	4681      	mov	r9, r0
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	f7f5 f8b7 	bl	8000cb0 <__aeabi_fmul>
 800bb42:	4601      	mov	r1, r0
 800bb44:	4648      	mov	r0, r9
 800bb46:	f7f4 ffa9 	bl	8000a9c <__aeabi_fsub>
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	f7f5 f8b0 	bl	8000cb0 <__aeabi_fmul>
 800bb50:	4639      	mov	r1, r7
 800bb52:	f7f4 ffa3 	bl	8000a9c <__aeabi_fsub>
 800bb56:	490c      	ldr	r1, [pc, #48]	; (800bb88 <__kernel_sinf+0xe8>)
 800bb58:	4605      	mov	r5, r0
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7f5 f8a8 	bl	8000cb0 <__aeabi_fmul>
 800bb60:	4601      	mov	r1, r0
 800bb62:	4628      	mov	r0, r5
 800bb64:	f7f4 ff9c 	bl	8000aa0 <__addsf3>
 800bb68:	4601      	mov	r1, r0
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f7f4 ff96 	bl	8000a9c <__aeabi_fsub>
 800bb70:	e7d9      	b.n	800bb26 <__kernel_sinf+0x86>
 800bb72:	bf00      	nop
 800bb74:	2f2ec9d3 	.word	0x2f2ec9d3
 800bb78:	32d72f34 	.word	0x32d72f34
 800bb7c:	3638ef1b 	.word	0x3638ef1b
 800bb80:	39500d01 	.word	0x39500d01
 800bb84:	3c088889 	.word	0x3c088889
 800bb88:	3e2aaaab 	.word	0x3e2aaaab

0800bb8c <matherr>:
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	4770      	bx	lr

0800bb90 <atanf>:
 800bb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb94:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800bb98:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	4607      	mov	r7, r0
 800bba0:	db0e      	blt.n	800bbc0 <atanf+0x30>
 800bba2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bba6:	dd04      	ble.n	800bbb2 <atanf+0x22>
 800bba8:	4601      	mov	r1, r0
 800bbaa:	f7f4 ff79 	bl	8000aa0 <__addsf3>
 800bbae:	4604      	mov	r4, r0
 800bbb0:	e003      	b.n	800bbba <atanf+0x2a>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	f300 80d2 	bgt.w	800bd5c <atanf+0x1cc>
 800bbb8:	4c69      	ldr	r4, [pc, #420]	; (800bd60 <atanf+0x1d0>)
 800bbba:	4620      	mov	r0, r4
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	4b68      	ldr	r3, [pc, #416]	; (800bd64 <atanf+0x1d4>)
 800bbc2:	429d      	cmp	r5, r3
 800bbc4:	dc0e      	bgt.n	800bbe4 <atanf+0x54>
 800bbc6:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800bbca:	da08      	bge.n	800bbde <atanf+0x4e>
 800bbcc:	4966      	ldr	r1, [pc, #408]	; (800bd68 <atanf+0x1d8>)
 800bbce:	f7f4 ff67 	bl	8000aa0 <__addsf3>
 800bbd2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bbd6:	f7f5 fa27 	bl	8001028 <__aeabi_fcmpgt>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d1ed      	bne.n	800bbba <atanf+0x2a>
 800bbde:	f04f 36ff 	mov.w	r6, #4294967295
 800bbe2:	e01c      	b.n	800bc1e <atanf+0x8e>
 800bbe4:	f000 f8e4 	bl	800bdb0 <fabsf>
 800bbe8:	4b60      	ldr	r3, [pc, #384]	; (800bd6c <atanf+0x1dc>)
 800bbea:	4604      	mov	r4, r0
 800bbec:	429d      	cmp	r5, r3
 800bbee:	dc7c      	bgt.n	800bcea <atanf+0x15a>
 800bbf0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800bbf4:	429d      	cmp	r5, r3
 800bbf6:	dc67      	bgt.n	800bcc8 <atanf+0x138>
 800bbf8:	4601      	mov	r1, r0
 800bbfa:	f7f4 ff51 	bl	8000aa0 <__addsf3>
 800bbfe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc02:	f7f4 ff4b 	bl	8000a9c <__aeabi_fsub>
 800bc06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f7f4 ff47 	bl	8000aa0 <__addsf3>
 800bc12:	4601      	mov	r1, r0
 800bc14:	4628      	mov	r0, r5
 800bc16:	f7f5 f8ff 	bl	8000e18 <__aeabi_fdiv>
 800bc1a:	2600      	movs	r6, #0
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	4621      	mov	r1, r4
 800bc20:	4620      	mov	r0, r4
 800bc22:	f7f5 f845 	bl	8000cb0 <__aeabi_fmul>
 800bc26:	4601      	mov	r1, r0
 800bc28:	4680      	mov	r8, r0
 800bc2a:	f7f5 f841 	bl	8000cb0 <__aeabi_fmul>
 800bc2e:	4605      	mov	r5, r0
 800bc30:	494f      	ldr	r1, [pc, #316]	; (800bd70 <atanf+0x1e0>)
 800bc32:	f7f5 f83d 	bl	8000cb0 <__aeabi_fmul>
 800bc36:	494f      	ldr	r1, [pc, #316]	; (800bd74 <atanf+0x1e4>)
 800bc38:	f7f4 ff32 	bl	8000aa0 <__addsf3>
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	f7f5 f837 	bl	8000cb0 <__aeabi_fmul>
 800bc42:	494d      	ldr	r1, [pc, #308]	; (800bd78 <atanf+0x1e8>)
 800bc44:	f7f4 ff2c 	bl	8000aa0 <__addsf3>
 800bc48:	4629      	mov	r1, r5
 800bc4a:	f7f5 f831 	bl	8000cb0 <__aeabi_fmul>
 800bc4e:	494b      	ldr	r1, [pc, #300]	; (800bd7c <atanf+0x1ec>)
 800bc50:	f7f4 ff26 	bl	8000aa0 <__addsf3>
 800bc54:	4629      	mov	r1, r5
 800bc56:	f7f5 f82b 	bl	8000cb0 <__aeabi_fmul>
 800bc5a:	4949      	ldr	r1, [pc, #292]	; (800bd80 <atanf+0x1f0>)
 800bc5c:	f7f4 ff20 	bl	8000aa0 <__addsf3>
 800bc60:	4629      	mov	r1, r5
 800bc62:	f7f5 f825 	bl	8000cb0 <__aeabi_fmul>
 800bc66:	4947      	ldr	r1, [pc, #284]	; (800bd84 <atanf+0x1f4>)
 800bc68:	f7f4 ff1a 	bl	8000aa0 <__addsf3>
 800bc6c:	4641      	mov	r1, r8
 800bc6e:	f7f5 f81f 	bl	8000cb0 <__aeabi_fmul>
 800bc72:	4945      	ldr	r1, [pc, #276]	; (800bd88 <atanf+0x1f8>)
 800bc74:	4680      	mov	r8, r0
 800bc76:	4628      	mov	r0, r5
 800bc78:	f7f5 f81a 	bl	8000cb0 <__aeabi_fmul>
 800bc7c:	4943      	ldr	r1, [pc, #268]	; (800bd8c <atanf+0x1fc>)
 800bc7e:	f7f4 ff0d 	bl	8000a9c <__aeabi_fsub>
 800bc82:	4629      	mov	r1, r5
 800bc84:	f7f5 f814 	bl	8000cb0 <__aeabi_fmul>
 800bc88:	4941      	ldr	r1, [pc, #260]	; (800bd90 <atanf+0x200>)
 800bc8a:	f7f4 ff07 	bl	8000a9c <__aeabi_fsub>
 800bc8e:	4629      	mov	r1, r5
 800bc90:	f7f5 f80e 	bl	8000cb0 <__aeabi_fmul>
 800bc94:	493f      	ldr	r1, [pc, #252]	; (800bd94 <atanf+0x204>)
 800bc96:	f7f4 ff01 	bl	8000a9c <__aeabi_fsub>
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	f7f5 f808 	bl	8000cb0 <__aeabi_fmul>
 800bca0:	493d      	ldr	r1, [pc, #244]	; (800bd98 <atanf+0x208>)
 800bca2:	f7f4 fefb 	bl	8000a9c <__aeabi_fsub>
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7f5 f802 	bl	8000cb0 <__aeabi_fmul>
 800bcac:	1c73      	adds	r3, r6, #1
 800bcae:	4601      	mov	r1, r0
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	d139      	bne.n	800bd28 <atanf+0x198>
 800bcb4:	f7f4 fef4 	bl	8000aa0 <__addsf3>
 800bcb8:	4621      	mov	r1, r4
 800bcba:	f7f4 fff9 	bl	8000cb0 <__aeabi_fmul>
 800bcbe:	4601      	mov	r1, r0
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f7f4 feeb 	bl	8000a9c <__aeabi_fsub>
 800bcc6:	e772      	b.n	800bbae <atanf+0x1e>
 800bcc8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bccc:	f7f4 fee6 	bl	8000a9c <__aeabi_fsub>
 800bcd0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f7f4 fee2 	bl	8000aa0 <__addsf3>
 800bcdc:	4601      	mov	r1, r0
 800bcde:	4628      	mov	r0, r5
 800bce0:	f7f5 f89a 	bl	8000e18 <__aeabi_fdiv>
 800bce4:	2601      	movs	r6, #1
 800bce6:	4604      	mov	r4, r0
 800bce8:	e799      	b.n	800bc1e <atanf+0x8e>
 800bcea:	4b2c      	ldr	r3, [pc, #176]	; (800bd9c <atanf+0x20c>)
 800bcec:	429d      	cmp	r5, r3
 800bcee:	dc14      	bgt.n	800bd1a <atanf+0x18a>
 800bcf0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bcf4:	f7f4 fed2 	bl	8000a9c <__aeabi_fsub>
 800bcf8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bcfc:	4605      	mov	r5, r0
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f7f4 ffd6 	bl	8000cb0 <__aeabi_fmul>
 800bd04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bd08:	f7f4 feca 	bl	8000aa0 <__addsf3>
 800bd0c:	4601      	mov	r1, r0
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f7f5 f882 	bl	8000e18 <__aeabi_fdiv>
 800bd14:	2602      	movs	r6, #2
 800bd16:	4604      	mov	r4, r0
 800bd18:	e781      	b.n	800bc1e <atanf+0x8e>
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	4820      	ldr	r0, [pc, #128]	; (800bda0 <atanf+0x210>)
 800bd1e:	f7f5 f87b 	bl	8000e18 <__aeabi_fdiv>
 800bd22:	2603      	movs	r6, #3
 800bd24:	4604      	mov	r4, r0
 800bd26:	e77a      	b.n	800bc1e <atanf+0x8e>
 800bd28:	f7f4 feba 	bl	8000aa0 <__addsf3>
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	f7f4 ffbf 	bl	8000cb0 <__aeabi_fmul>
 800bd32:	4b1c      	ldr	r3, [pc, #112]	; (800bda4 <atanf+0x214>)
 800bd34:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800bd38:	f7f4 feb0 	bl	8000a9c <__aeabi_fsub>
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	f7f4 fead 	bl	8000a9c <__aeabi_fsub>
 800bd42:	4b19      	ldr	r3, [pc, #100]	; (800bda8 <atanf+0x218>)
 800bd44:	4601      	mov	r1, r0
 800bd46:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bd4a:	f7f4 fea7 	bl	8000a9c <__aeabi_fsub>
 800bd4e:	2f00      	cmp	r7, #0
 800bd50:	4604      	mov	r4, r0
 800bd52:	f6bf af32 	bge.w	800bbba <atanf+0x2a>
 800bd56:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800bd5a:	e72e      	b.n	800bbba <atanf+0x2a>
 800bd5c:	4c13      	ldr	r4, [pc, #76]	; (800bdac <atanf+0x21c>)
 800bd5e:	e72c      	b.n	800bbba <atanf+0x2a>
 800bd60:	bfc90fdb 	.word	0xbfc90fdb
 800bd64:	3edfffff 	.word	0x3edfffff
 800bd68:	7149f2ca 	.word	0x7149f2ca
 800bd6c:	3f97ffff 	.word	0x3f97ffff
 800bd70:	3c8569d7 	.word	0x3c8569d7
 800bd74:	3d4bda59 	.word	0x3d4bda59
 800bd78:	3d886b35 	.word	0x3d886b35
 800bd7c:	3dba2e6e 	.word	0x3dba2e6e
 800bd80:	3e124925 	.word	0x3e124925
 800bd84:	3eaaaaab 	.word	0x3eaaaaab
 800bd88:	bd15a221 	.word	0xbd15a221
 800bd8c:	3d6ef16b 	.word	0x3d6ef16b
 800bd90:	3d9d8795 	.word	0x3d9d8795
 800bd94:	3de38e38 	.word	0x3de38e38
 800bd98:	3e4ccccd 	.word	0x3e4ccccd
 800bd9c:	401bffff 	.word	0x401bffff
 800bda0:	bf800000 	.word	0xbf800000
 800bda4:	0800c524 	.word	0x0800c524
 800bda8:	0800c514 	.word	0x0800c514
 800bdac:	3fc90fdb 	.word	0x3fc90fdb

0800bdb0 <fabsf>:
 800bdb0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bdb4:	4770      	bx	lr
	...

0800bdb8 <scalbnf>:
 800bdb8:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	d028      	beq.n	800be16 <scalbnf+0x5e>
 800bdc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bdc8:	d304      	bcc.n	800bdd4 <scalbnf+0x1c>
 800bdca:	4601      	mov	r1, r0
 800bdcc:	f7f4 fe68 	bl	8000aa0 <__addsf3>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	e020      	b.n	800be16 <scalbnf+0x5e>
 800bdd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdd8:	d215      	bcs.n	800be06 <scalbnf+0x4e>
 800bdda:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800bdde:	f7f4 ff67 	bl	8000cb0 <__aeabi_fmul>
 800bde2:	4b18      	ldr	r3, [pc, #96]	; (800be44 <scalbnf+0x8c>)
 800bde4:	4602      	mov	r2, r0
 800bde6:	429c      	cmp	r4, r3
 800bde8:	db22      	blt.n	800be30 <scalbnf+0x78>
 800bdea:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bdee:	3b19      	subs	r3, #25
 800bdf0:	4423      	add	r3, r4
 800bdf2:	2bfe      	cmp	r3, #254	; 0xfe
 800bdf4:	dd09      	ble.n	800be0a <scalbnf+0x52>
 800bdf6:	4611      	mov	r1, r2
 800bdf8:	4813      	ldr	r0, [pc, #76]	; (800be48 <scalbnf+0x90>)
 800bdfa:	f000 f829 	bl	800be50 <copysignf>
 800bdfe:	4912      	ldr	r1, [pc, #72]	; (800be48 <scalbnf+0x90>)
 800be00:	f7f4 ff56 	bl	8000cb0 <__aeabi_fmul>
 800be04:	e7e4      	b.n	800bdd0 <scalbnf+0x18>
 800be06:	0ddb      	lsrs	r3, r3, #23
 800be08:	e7f2      	b.n	800bdf0 <scalbnf+0x38>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	dd05      	ble.n	800be1a <scalbnf+0x62>
 800be0e:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800be12:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800be16:	4610      	mov	r0, r2
 800be18:	bd10      	pop	{r4, pc}
 800be1a:	f113 0f16 	cmn.w	r3, #22
 800be1e:	da09      	bge.n	800be34 <scalbnf+0x7c>
 800be20:	f24c 3350 	movw	r3, #50000	; 0xc350
 800be24:	429c      	cmp	r4, r3
 800be26:	4611      	mov	r1, r2
 800be28:	dce6      	bgt.n	800bdf8 <scalbnf+0x40>
 800be2a:	4808      	ldr	r0, [pc, #32]	; (800be4c <scalbnf+0x94>)
 800be2c:	f000 f810 	bl	800be50 <copysignf>
 800be30:	4906      	ldr	r1, [pc, #24]	; (800be4c <scalbnf+0x94>)
 800be32:	e7e5      	b.n	800be00 <scalbnf+0x48>
 800be34:	3319      	adds	r3, #25
 800be36:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800be3a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800be3e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800be42:	e7dd      	b.n	800be00 <scalbnf+0x48>
 800be44:	ffff3cb0 	.word	0xffff3cb0
 800be48:	7149f2ca 	.word	0x7149f2ca
 800be4c:	0da24260 	.word	0x0da24260

0800be50 <copysignf>:
 800be50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800be54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800be58:	4308      	orrs	r0, r1
 800be5a:	4770      	bx	lr

0800be5c <__errno>:
 800be5c:	4b01      	ldr	r3, [pc, #4]	; (800be64 <__errno+0x8>)
 800be5e:	6818      	ldr	r0, [r3, #0]
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	200000f0 	.word	0x200000f0

0800be68 <_init>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	bf00      	nop
 800be6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6e:	bc08      	pop	{r3}
 800be70:	469e      	mov	lr, r3
 800be72:	4770      	bx	lr

0800be74 <_fini>:
 800be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be76:	bf00      	nop
 800be78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7a:	bc08      	pop	{r3}
 800be7c:	469e      	mov	lr, r3
 800be7e:	4770      	bx	lr
=======

stm32grbl11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  0800be08  0800be08  0001be08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c4bc  0800c4bc  0001c4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c4c0  0800c4c0  0001c4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  20000000  0800c4c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001174  200001e4  0800c6a8  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  20001358  0800c6a8  00021358  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000272a6  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006658  00000000  00000000  000474b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f7fb  00000000  00000000  0004db0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010e8  00000000  00000000  0005d308  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000035f0  00000000  00000000  0005e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c1e9  00000000  00000000  000619e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000053a9  00000000  00000000  0006dbc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00072f72  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000032e8  00000000  00000000  00072ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bdf0 	.word	0x0800bdf0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800bdf0 	.word	0x0800bdf0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	; 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	d1ed      	bne.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fmul>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d06f      	beq.n	8000da8 <__aeabi_fmul+0xf8>
 8000cc8:	441a      	add	r2, r3
 8000cca:	ea80 0c01 	eor.w	ip, r0, r1
 8000cce:	0240      	lsls	r0, r0, #9
 8000cd0:	bf18      	it	ne
 8000cd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cd6:	d01e      	beq.n	8000d16 <__aeabi_fmul+0x66>
 8000cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ce4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf0:	bf3e      	ittt	cc
 8000cf2:	0049      	lslcc	r1, r1, #1
 8000cf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	ea40 0001 	orr.w	r0, r0, r1
 8000cfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d02:	2afd      	cmp	r2, #253	; 0xfd
 8000d04:	d81d      	bhi.n	8000d42 <__aeabi_fmul+0x92>
 8000d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d0e:	bf08      	it	eq
 8000d10:	f020 0001 	biceq.w	r0, r0, #1
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d1e:	bf08      	it	eq
 8000d20:	0249      	lsleq	r1, r1, #9
 8000d22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d2a:	3a7f      	subs	r2, #127	; 0x7f
 8000d2c:	bfc2      	ittt	gt
 8000d2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d36:	4770      	bxgt	lr
 8000d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	dc5d      	bgt.n	8000e00 <__aeabi_fmul+0x150>
 8000d44:	f112 0f19 	cmn.w	r2, #25
 8000d48:	bfdc      	itt	le
 8000d4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d4e:	4770      	bxle	lr
 8000d50:	f1c2 0200 	rsb	r2, r2, #0
 8000d54:	0041      	lsls	r1, r0, #1
 8000d56:	fa21 f102 	lsr.w	r1, r1, r2
 8000d5a:	f1c2 0220 	rsb	r2, r2, #32
 8000d5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d62:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d66:	f140 0000 	adc.w	r0, r0, #0
 8000d6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d6e:	bf08      	it	eq
 8000d70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d74:	4770      	bx	lr
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fmul+0xce>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xe6>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e78f      	b.n	8000cc8 <__aeabi_fmul+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	bf18      	it	ne
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d00a      	beq.n	8000dce <__aeabi_fmul+0x11e>
 8000db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dbc:	bf18      	it	ne
 8000dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	d1d8      	bne.n	8000d76 <__aeabi_fmul+0xc6>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	bf17      	itett	ne
 8000dd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd8:	4608      	moveq	r0, r1
 8000dda:	f091 0f00 	teqne	r1, #0
 8000dde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000de2:	d014      	beq.n	8000e0e <__aeabi_fmul+0x15e>
 8000de4:	ea92 0f0c 	teq	r2, ip
 8000de8:	d101      	bne.n	8000dee <__aeabi_fmul+0x13e>
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	d10f      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dee:	ea93 0f0c 	teq	r3, ip
 8000df2:	d103      	bne.n	8000dfc <__aeabi_fmul+0x14c>
 8000df4:	024b      	lsls	r3, r1, #9
 8000df6:	bf18      	it	ne
 8000df8:	4608      	movne	r0, r1
 8000dfa:	d108      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dfc:	ea80 0001 	eor.w	r0, r0, r1
 8000e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bx	lr
 8000e0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_fdiv>:
 8000e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e20:	bf1e      	ittt	ne
 8000e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e26:	ea92 0f0c 	teqne	r2, ip
 8000e2a:	ea93 0f0c 	teqne	r3, ip
 8000e2e:	d069      	beq.n	8000f04 <__aeabi_fdiv+0xec>
 8000e30:	eba2 0203 	sub.w	r2, r2, r3
 8000e34:	ea80 0c01 	eor.w	ip, r0, r1
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e3e:	d037      	beq.n	8000eb0 <__aeabi_fdiv+0x98>
 8000e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	428b      	cmp	r3, r1
 8000e52:	bf38      	it	cc
 8000e54:	005b      	lslcc	r3, r3, #1
 8000e56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	bf24      	itt	cs
 8000e62:	1a5b      	subcs	r3, r3, r1
 8000e64:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e7a:	bf24      	itt	cs
 8000e7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e88:	bf24      	itt	cs
 8000e8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	bf18      	it	ne
 8000e96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e9a:	d1e0      	bne.n	8000e5e <__aeabi_fdiv+0x46>
 8000e9c:	2afd      	cmp	r2, #253	; 0xfd
 8000e9e:	f63f af50 	bhi.w	8000d42 <__aeabi_fmul+0x92>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea8:	bf08      	it	eq
 8000eaa:	f020 0001 	biceq.w	r0, r0, #1
 8000eae:	4770      	bx	lr
 8000eb0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eb4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb8:	327f      	adds	r2, #127	; 0x7f
 8000eba:	bfc2      	ittt	gt
 8000ebc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ec4:	4770      	bxgt	lr
 8000ec6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	3a01      	subs	r2, #1
 8000ed0:	e737      	b.n	8000d42 <__aeabi_fmul+0x92>
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0040      	lsleq	r0, r0, #1
 8000ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee2:	3a01      	subeq	r2, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fdiv+0xc2>
 8000ee6:	ea40 000c 	orr.w	r0, r0, ip
 8000eea:	f093 0f00 	teq	r3, #0
 8000eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0049      	lsleq	r1, r1, #1
 8000ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efa:	3b01      	subeq	r3, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xda>
 8000efe:	ea41 010c 	orr.w	r1, r1, ip
 8000f02:	e795      	b.n	8000e30 <__aeabi_fdiv+0x18>
 8000f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f08:	ea92 0f0c 	teq	r2, ip
 8000f0c:	d108      	bne.n	8000f20 <__aeabi_fdiv+0x108>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	f47f af7d 	bne.w	8000e0e <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	f47f af70 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e776      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f20:	ea93 0f0c 	teq	r3, ip
 8000f24:	d104      	bne.n	8000f30 <__aeabi_fdiv+0x118>
 8000f26:	024b      	lsls	r3, r1, #9
 8000f28:	f43f af4c 	beq.w	8000dc4 <__aeabi_fmul+0x114>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e76e      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f34:	bf18      	it	ne
 8000f36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	d1ca      	bne.n	8000ed2 <__aeabi_fdiv+0xba>
 8000f3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f40:	f47f af5c 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f48:	f47f af3c 	bne.w	8000dc4 <__aeabi_fmul+0x114>
 8000f4c:	e75f      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f4e:	bf00      	nop

08000f50 <__gesf2>:
 8000f50:	f04f 3cff 	mov.w	ip, #4294967295
 8000f54:	e006      	b.n	8000f64 <__cmpsf2+0x4>
 8000f56:	bf00      	nop

08000f58 <__lesf2>:
 8000f58:	f04f 0c01 	mov.w	ip, #1
 8000f5c:	e002      	b.n	8000f64 <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__cmpsf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	bf18      	it	ne
 8000f76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f7a:	d011      	beq.n	8000fa0 <__cmpsf2+0x40>
 8000f7c:	b001      	add	sp, #4
 8000f7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f82:	bf18      	it	ne
 8000f84:	ea90 0f01 	teqne	r0, r1
 8000f88:	bf58      	it	pl
 8000f8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f8e:	bf88      	it	hi
 8000f90:	17c8      	asrhi	r0, r1, #31
 8000f92:	bf38      	it	cc
 8000f94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f98:	bf18      	it	ne
 8000f9a:	f040 0001 	orrne.w	r0, r0, #1
 8000f9e:	4770      	bx	lr
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	d102      	bne.n	8000fac <__cmpsf2+0x4c>
 8000fa6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000faa:	d105      	bne.n	8000fb8 <__cmpsf2+0x58>
 8000fac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb0:	d1e4      	bne.n	8000f7c <__cmpsf2+0x1c>
 8000fb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fb6:	d0e1      	beq.n	8000f7c <__cmpsf2+0x1c>
 8000fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_cfrcmple>:
 8000fc0:	4684      	mov	ip, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4661      	mov	r1, ip
 8000fc6:	e7ff      	b.n	8000fc8 <__aeabi_cfcmpeq>

08000fc8 <__aeabi_cfcmpeq>:
 8000fc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fca:	f7ff ffc9 	bl	8000f60 <__cmpsf2>
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	bf48      	it	mi
 8000fd2:	f110 0f00 	cmnmi.w	r0, #0
 8000fd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fd8 <__aeabi_fcmpeq>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff fff4 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2001      	moveq	r0, #1
 8000fe4:	2000      	movne	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmplt>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffea 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000ff4:	bf34      	ite	cc
 8000ff6:	2001      	movcc	r0, #1
 8000ff8:	2000      	movcs	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmple>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffe0 	bl	8000fc8 <__aeabi_cfcmpeq>
 8001008:	bf94      	ite	ls
 800100a:	2001      	movls	r0, #1
 800100c:	2000      	movhi	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmpge>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffd2 	bl	8000fc0 <__aeabi_cfrcmple>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpgt>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffc8 	bl	8000fc0 <__aeabi_cfrcmple>
 8001030:	bf34      	ite	cc
 8001032:	2001      	movcc	r0, #1
 8001034:	2000      	movcs	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpun>:
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x14>
 800104a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800104e:	d108      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 8001050:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001054:	d102      	bne.n	800105c <__aeabi_fcmpun+0x20>
 8001056:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105a:	d102      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	f04f 0001 	mov.w	r0, #1
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2iz>:
 8001068:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30f      	bcc.n	8001092 <__aeabi_f2iz+0x2a>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d90d      	bls.n	8001098 <__aeabi_f2iz+0x30>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	bf18      	it	ne
 800108e:	4240      	negne	r0, r0
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2iz+0x3a>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d105      	bne.n	80010ae <__aeabi_f2iz+0x46>
 80010a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010a6:	bf08      	it	eq
 80010a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr

080010b4 <__aeabi_f2uiz>:
 80010b4:	0042      	lsls	r2, r0, #1
 80010b6:	d20e      	bcs.n	80010d6 <__aeabi_f2uiz+0x22>
 80010b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010bc:	d30b      	bcc.n	80010d6 <__aeabi_f2uiz+0x22>
 80010be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c6:	d409      	bmi.n	80010dc <__aeabi_f2uiz+0x28>
 80010c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d0:	fa23 f002 	lsr.w	r0, r3, r2
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2uiz+0x32>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d102      	bne.n	80010ec <__aeabi_f2uiz+0x38>
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ea:	4770      	bx	lr
 80010ec:	f04f 0000 	mov.w	r0, #0
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010f4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <NVIC_PriorityGroupConfig+0x10>)
 80010fa:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80010fe:	60d8      	str	r0, [r3, #12]
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001108:	78c3      	ldrb	r3, [r0, #3]
 800110a:	b95b      	cbnz	r3, 8001124 <NVIC_Init+0x1c>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800110c:	2101      	movs	r1, #1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800110e:	7803      	ldrb	r3, [r0, #0]
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <NVIC_Init+0x5c>)
 8001112:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001114:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001118:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800111e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }
}
 8001122:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <NVIC_Init+0x60>)
    tmpsub = tmpsub >> tmppriority;
 8001126:	210f      	movs	r1, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001128:	68da      	ldr	r2, [r3, #12]
{
 800112a:	b470      	push	{r4, r5, r6}
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800112c:	43d2      	mvns	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800112e:	2401      	movs	r4, #1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001130:	7885      	ldrb	r5, [r0, #2]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001132:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001134:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8001138:	f1c2 0604 	rsb	r6, r2, #4
    tmpsub = tmpsub >> tmppriority;
 800113c:	fa21 f202 	lsr.w	r2, r1, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001140:	402a      	ands	r2, r5
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001142:	40b3      	lsls	r3, r6
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001144:	7801      	ldrb	r1, [r0, #0]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001146:	4313      	orrs	r3, r2
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <NVIC_Init+0x5c>)
    tmppriority = tmppriority << 0x04;
 800114a:	011b      	lsls	r3, r3, #4
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800114c:	f001 051f 	and.w	r5, r1, #31
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001150:	1850      	adds	r0, r2, r1
 8001152:	b2db      	uxtb	r3, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001154:	40ac      	lsls	r4, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001156:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800115a:	0949      	lsrs	r1, r1, #5
 800115c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
}
 8001160:	bc70      	pop	{r4, r5, r6}
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800116c:	7983      	ldrb	r3, [r0, #6]
 800116e:	b333      	cbz	r3, 80011be <EXTI_Init+0x52>
{
 8001170:	b430      	push	{r4, r5}
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001172:	6804      	ldr	r4, [r0, #0]
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <EXTI_Init+0x78>)
 8001176:	43e1      	mvns	r1, r4
 8001178:	681d      	ldr	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800117a:	7902      	ldrb	r2, [r0, #4]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800117c:	400d      	ands	r5, r1
 800117e:	601d      	str	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001180:	685d      	ldr	r5, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001182:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001186:	4029      	ands	r1, r5
 8001188:	6059      	str	r1, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 800118a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800118e:	6815      	ldr	r5, [r2, #0]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001190:	7941      	ldrb	r1, [r0, #5]
    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001192:	432c      	orrs	r4, r5
 8001194:	6014      	str	r4, [r2, #0]
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001196:	6802      	ldr	r2, [r0, #0]
 8001198:	689c      	ldr	r4, [r3, #8]
 800119a:	43d0      	mvns	r0, r2
 800119c:	4004      	ands	r4, r0
 800119e:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a0:	68dc      	ldr	r4, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011a2:	2910      	cmp	r1, #16
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a4:	ea00 0004 	and.w	r0, r0, r4
 80011a8:	60d8      	str	r0, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011aa:	d013      	beq.n	80011d4 <EXTI_Init+0x68>
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80011ac:	bc30      	pop	{r4, r5}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80011ae:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80011b2:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	4770      	bx	lr
    tmp += EXTI_InitStruct->EXTI_Mode;
 80011be:	7903      	ldrb	r3, [r0, #4]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011c0:	6801      	ldr	r1, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 80011c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011c6:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	ea22 0201 	bic.w	r2, r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d4:	6899      	ldr	r1, [r3, #8]
}
 80011d6:	bc30      	pop	{r4, r5}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d8:	4311      	orrs	r1, r2
 80011da:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
}
 80011e2:	4770      	bx	lr
 80011e4:	40010400 	.word	0x40010400

080011e8 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <EXTI_GetITStatus+0x18>)
 80011ea:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4003      	ands	r3, r0
 80011f0:	d004      	beq.n	80011fc <EXTI_GetITStatus+0x14>
 80011f2:	4202      	tst	r2, r0
 80011f4:	bf14      	ite	ne
 80011f6:	2001      	movne	r0, #1
 80011f8:	2000      	moveq	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	4618      	mov	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80011fe:	4770      	bx	lr
 8001200:	40010400 	.word	0x40010400

08001204 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001204:	4b01      	ldr	r3, [pc, #4]	; (800120c <EXTI_ClearITPendingBit+0x8>)
 8001206:	6158      	str	r0, [r3, #20]
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40010400 	.word	0x40010400

08001210 <FLASH_Unlock>:
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <FLASH_Unlock+0xc>)
 8001212:	4903      	ldr	r1, [pc, #12]	; (8001220 <FLASH_Unlock+0x10>)
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <FLASH_Unlock+0x14>)
 8001216:	6059      	str	r1, [r3, #4]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	4770      	bx	lr
 800121c:	40022000 	.word	0x40022000
 8001220:	45670123 	.word	0x45670123
 8001224:	cdef89ab 	.word	0xcdef89ab

08001228 <FLASH_ErasePage>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001228:	4938      	ldr	r1, [pc, #224]	; (800130c <FLASH_ErasePage+0xe4>)
 800122a:	68cb      	ldr	r3, [r1, #12]
 800122c:	f013 0f01 	tst.w	r3, #1
 8001230:	68cb      	ldr	r3, [r1, #12]
 8001232:	d103      	bne.n	800123c <FLASH_ErasePage+0x14>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001234:	075b      	lsls	r3, r3, #29
 8001236:	d538      	bpl.n	80012aa <FLASH_ErasePage+0x82>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001238:	2002      	movs	r0, #2
 800123a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800123c:	07db      	lsls	r3, r3, #31
 800123e:	d42c      	bmi.n	800129a <FLASH_ErasePage+0x72>
 8001240:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <FLASH_ErasePage+0xe4>)
 8001246:	68d1      	ldr	r1, [r2, #12]
 8001248:	0749      	lsls	r1, r1, #29
 800124a:	d505      	bpl.n	8001258 <FLASH_ErasePage+0x30>
      flashstatus = FLASH_ERROR_PG;
 800124c:	2002      	movs	r0, #2
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
  {
    status = FLASH_GetBank1Status();
    Timeout--;
 800124e:	3b01      	subs	r3, #1
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf08      	it	eq
 8001254:	2005      	moveq	r0, #5
 8001256:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001258:	68d2      	ldr	r2, [r2, #12]
 800125a:	06d2      	lsls	r2, r2, #27
 800125c:	d41a      	bmi.n	8001294 <FLASH_ErasePage+0x6c>
  if(Timeout == 0x00 )
 800125e:	2b01      	cmp	r3, #1
 8001260:	d021      	beq.n	80012a6 <FLASH_ErasePage+0x7e>
    FLASH->CR|= CR_PER_Set;
 8001262:	4a2a      	ldr	r2, [pc, #168]	; (800130c <FLASH_ErasePage+0xe4>)
 8001264:	6913      	ldr	r3, [r2, #16]
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 800126c:	6150      	str	r0, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 800126e:	6913      	ldr	r3, [r2, #16]
 8001270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001274:	6113      	str	r3, [r2, #16]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001276:	68d3      	ldr	r3, [r2, #12]
 8001278:	f013 0f01 	tst.w	r3, #1
 800127c:	68d3      	ldr	r3, [r2, #12]
 800127e:	d119      	bne.n	80012b4 <FLASH_ErasePage+0x8c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001280:	075b      	lsls	r3, r3, #29
 8001282:	d53b      	bpl.n	80012fc <FLASH_ErasePage+0xd4>
      flashstatus = FLASH_ERROR_PG;
 8001284:	2002      	movs	r0, #2
    FLASH->CR &= CR_PER_Reset;
 8001286:	f641 71fd 	movw	r1, #8189	; 0x1ffd
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <FLASH_ErasePage+0xe4>)
 800128c:	6913      	ldr	r3, [r2, #16]
 800128e:	400b      	ands	r3, r1
 8001290:	6113      	str	r3, [r2, #16]
 8001292:	4770      	bx	lr
        flashstatus = FLASH_ERROR_WRP;
 8001294:	2003      	movs	r0, #3
    Timeout--;
 8001296:	3b01      	subs	r3, #1
 8001298:	e7da      	b.n	8001250 <FLASH_ErasePage+0x28>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <FLASH_ErasePage+0xe8>)
 800129c:	68ca      	ldr	r2, [r1, #12]
 800129e:	07d2      	lsls	r2, r2, #31
 80012a0:	d5d0      	bpl.n	8001244 <FLASH_ErasePage+0x1c>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80012a2:	3b01      	subs	r3, #1
 80012a4:	d1fa      	bne.n	800129c <FLASH_ErasePage+0x74>
    status = FLASH_TIMEOUT;
 80012a6:	2005      	movs	r0, #5
 80012a8:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012aa:	68cb      	ldr	r3, [r1, #12]
 80012ac:	06d9      	lsls	r1, r3, #27
 80012ae:	d5d8      	bpl.n	8001262 <FLASH_ErasePage+0x3a>
        flashstatus = FLASH_ERROR_WRP;
 80012b0:	2003      	movs	r0, #3
 80012b2:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012b4:	07d9      	lsls	r1, r3, #31
 80012b6:	d409      	bmi.n	80012cc <FLASH_ErasePage+0xa4>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012b8:	68d3      	ldr	r3, [r2, #12]
 80012ba:	075b      	lsls	r3, r3, #29
 80012bc:	d4e2      	bmi.n	8001284 <FLASH_ErasePage+0x5c>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012be:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80012c0:	f013 0f10 	tst.w	r3, #16
 80012c4:	bf14      	ite	ne
 80012c6:	2003      	movne	r0, #3
 80012c8:	2004      	moveq	r0, #4
 80012ca:	e7dc      	b.n	8001286 <FLASH_ErasePage+0x5e>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <FLASH_ErasePage+0xe8>)
 80012ce:	68d1      	ldr	r1, [r2, #12]
 80012d0:	07c9      	lsls	r1, r1, #31
 80012d2:	d408      	bmi.n	80012e6 <FLASH_ErasePage+0xbe>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012d4:	68d1      	ldr	r1, [r2, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	0749      	lsls	r1, r1, #29
 80012da:	d508      	bpl.n	80012ee <FLASH_ErasePage+0xc6>
      flashstatus = FLASH_ERROR_PG;
 80012dc:	2002      	movs	r0, #2
    status = FLASH_TIMEOUT;
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf08      	it	eq
 80012e2:	2005      	moveq	r0, #5
 80012e4:	e7cf      	b.n	8001286 <FLASH_ErasePage+0x5e>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80012e6:	3b01      	subs	r3, #1
 80012e8:	d1f1      	bne.n	80012ce <FLASH_ErasePage+0xa6>
    status = FLASH_TIMEOUT;
 80012ea:	2005      	movs	r0, #5
 80012ec:	e7cb      	b.n	8001286 <FLASH_ErasePage+0x5e>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012ee:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80012f0:	f012 0f10 	tst.w	r2, #16
 80012f4:	bf14      	ite	ne
 80012f6:	2003      	movne	r0, #3
 80012f8:	2004      	moveq	r0, #4
 80012fa:	e7f0      	b.n	80012de <FLASH_ErasePage+0xb6>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012fc:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 80012fe:	f013 0f10 	tst.w	r3, #16
 8001302:	bf0c      	ite	eq
 8001304:	2004      	moveq	r0, #4
 8001306:	2003      	movne	r0, #3
 8001308:	e7bd      	b.n	8001286 <FLASH_ErasePage+0x5e>
 800130a:	bf00      	nop
 800130c:	40022000 	.word	0x40022000
 8001310:	000affff 	.word	0x000affff

08001314 <FLASH_ProgramHalfWord>:
{
 8001314:	b410      	push	{r4}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001316:	4c39      	ldr	r4, [pc, #228]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001318:	68e3      	ldr	r3, [r4, #12]
 800131a:	f013 0f01 	tst.w	r3, #1
 800131e:	68e3      	ldr	r3, [r4, #12]
 8001320:	d104      	bne.n	800132c <FLASH_ProgramHalfWord+0x18>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001322:	075b      	lsls	r3, r3, #29
 8001324:	d538      	bpl.n	8001398 <FLASH_ProgramHalfWord+0x84>
      flashstatus = FLASH_ERROR_PG;
 8001326:	2002      	movs	r0, #2
}
 8001328:	bc10      	pop	{r4}
 800132a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800132c:	07db      	lsls	r3, r3, #31
 800132e:	d429      	bmi.n	8001384 <FLASH_ProgramHalfWord+0x70>
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001334:	4a31      	ldr	r2, [pc, #196]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001336:	68d4      	ldr	r4, [r2, #12]
 8001338:	0764      	lsls	r4, r4, #29
 800133a:	d505      	bpl.n	8001348 <FLASH_ProgramHalfWord+0x34>
      flashstatus = FLASH_ERROR_PG;
 800133c:	2002      	movs	r0, #2
    Timeout--;
 800133e:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf08      	it	eq
 8001344:	2005      	moveq	r0, #5
 8001346:	e7ef      	b.n	8001328 <FLASH_ProgramHalfWord+0x14>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	06d2      	lsls	r2, r2, #27
 800134c:	d417      	bmi.n	800137e <FLASH_ProgramHalfWord+0x6a>
  if(Timeout == 0x00 )
 800134e:	2b01      	cmp	r3, #1
 8001350:	d01f      	beq.n	8001392 <FLASH_ProgramHalfWord+0x7e>
    FLASH->CR |= CR_PG_Set;
 8001352:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001354:	6913      	ldr	r3, [r2, #16]
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 800135c:	8001      	strh	r1, [r0, #0]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800135e:	68d3      	ldr	r3, [r2, #12]
 8001360:	f013 0f01 	tst.w	r3, #1
 8001364:	68d3      	ldr	r3, [r2, #12]
 8001366:	d11c      	bne.n	80013a2 <FLASH_ProgramHalfWord+0x8e>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001368:	075b      	lsls	r3, r3, #29
 800136a:	d53f      	bpl.n	80013ec <FLASH_ProgramHalfWord+0xd8>
      flashstatus = FLASH_ERROR_PG;
 800136c:	2002      	movs	r0, #2
    FLASH->CR &= CR_PG_Reset;
 800136e:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8001372:	4a22      	ldr	r2, [pc, #136]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
}
 8001374:	bc10      	pop	{r4}
    FLASH->CR &= CR_PG_Reset;
 8001376:	6913      	ldr	r3, [r2, #16]
 8001378:	400b      	ands	r3, r1
 800137a:	6113      	str	r3, [r2, #16]
}
 800137c:	4770      	bx	lr
        flashstatus = FLASH_ERROR_WRP;
 800137e:	2003      	movs	r0, #3
    Timeout--;
 8001380:	3b01      	subs	r3, #1
 8001382:	e7dd      	b.n	8001340 <FLASH_ProgramHalfWord+0x2c>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001384:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001388:	68e2      	ldr	r2, [r4, #12]
 800138a:	07d2      	lsls	r2, r2, #31
 800138c:	d5d2      	bpl.n	8001334 <FLASH_ProgramHalfWord+0x20>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 800138e:	3b01      	subs	r3, #1
 8001390:	d1fa      	bne.n	8001388 <FLASH_ProgramHalfWord+0x74>
    status = FLASH_TIMEOUT;
 8001392:	2005      	movs	r0, #5
}
 8001394:	bc10      	pop	{r4}
 8001396:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001398:	68e3      	ldr	r3, [r4, #12]
 800139a:	06dc      	lsls	r4, r3, #27
 800139c:	d5d9      	bpl.n	8001352 <FLASH_ProgramHalfWord+0x3e>
        flashstatus = FLASH_ERROR_WRP;
 800139e:	2003      	movs	r0, #3
 80013a0:	e7c2      	b.n	8001328 <FLASH_ProgramHalfWord+0x14>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80013a2:	07d9      	lsls	r1, r3, #31
 80013a4:	d409      	bmi.n	80013ba <FLASH_ProgramHalfWord+0xa6>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80013a6:	68d3      	ldr	r3, [r2, #12]
 80013a8:	075b      	lsls	r3, r3, #29
 80013aa:	d4df      	bmi.n	800136c <FLASH_ProgramHalfWord+0x58>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013ac:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80013ae:	f013 0f10 	tst.w	r3, #16
 80013b2:	bf14      	ite	ne
 80013b4:	2003      	movne	r0, #3
 80013b6:	2004      	moveq	r0, #4
 80013b8:	e7d9      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80013ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013be:	68d1      	ldr	r1, [r2, #12]
 80013c0:	07cc      	lsls	r4, r1, #31
 80013c2:	d408      	bmi.n	80013d6 <FLASH_ProgramHalfWord+0xc2>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80013c4:	68d1      	ldr	r1, [r2, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	0749      	lsls	r1, r1, #29
 80013ca:	d508      	bpl.n	80013de <FLASH_ProgramHalfWord+0xca>
      flashstatus = FLASH_ERROR_PG;
 80013cc:	2002      	movs	r0, #2
    status = FLASH_TIMEOUT;
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf08      	it	eq
 80013d2:	2005      	moveq	r0, #5
 80013d4:	e7cb      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80013d6:	3b01      	subs	r3, #1
 80013d8:	d1f1      	bne.n	80013be <FLASH_ProgramHalfWord+0xaa>
    status = FLASH_TIMEOUT;
 80013da:	2005      	movs	r0, #5
 80013dc:	e7c7      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013de:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80013e0:	f012 0f10 	tst.w	r2, #16
 80013e4:	bf14      	ite	ne
 80013e6:	2003      	movne	r0, #3
 80013e8:	2004      	moveq	r0, #4
 80013ea:	e7f0      	b.n	80013ce <FLASH_ProgramHalfWord+0xba>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013ec:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 80013ee:	f013 0f10 	tst.w	r3, #16
 80013f2:	bf0c      	ite	eq
 80013f4:	2004      	moveq	r0, #4
 80013f6:	2003      	movne	r0, #3
 80013f8:	e7b9      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
 80013fa:	bf00      	nop
 80013fc:	40022000 	.word	0x40022000

08001400 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001400:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001402:	78cd      	ldrb	r5, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001404:	06eb      	lsls	r3, r5, #27
 8001406:	bf48      	it	mi
 8001408:	788b      	ldrbmi	r3, [r1, #2]
 800140a:	f005 040f 	and.w	r4, r5, #15
 800140e:	bf48      	it	mi
 8001410:	431c      	orrmi	r4, r3
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001412:	880b      	ldrh	r3, [r1, #0]
 8001414:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001418:	d032      	beq.n	8001480 <GPIO_Init+0x80>
 800141a:	2d48      	cmp	r5, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 800141c:	6802      	ldr	r2, [r0, #0]
 800141e:	f000 8081 	beq.w	8001524 <GPIO_Init+0x124>
 8001422:	2d28      	cmp	r5, #40	; 0x28
 8001424:	f000 80b6 	beq.w	8001594 <GPIO_Init+0x194>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8001428:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800142a:	bf44      	itt	mi
 800142c:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001430:	4322      	orrmi	r2, r4
      if (currentpin == pos)
 8001432:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 8001434:	bf44      	itt	mi
 8001436:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800143a:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
      if (currentpin == pos)
 800143e:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 8001440:	bf44      	itt	mi
 8001442:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001446:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
      if (currentpin == pos)
 800144a:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 800144c:	bf44      	itt	mi
 800144e:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001452:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
      if (currentpin == pos)
 8001456:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 8001458:	bf44      	itt	mi
 800145a:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800145e:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
      if (currentpin == pos)
 8001462:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 8001464:	bf44      	itt	mi
 8001466:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800146a:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
      if (currentpin == pos)
 800146e:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 8001470:	bf44      	itt	mi
 8001472:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001476:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
      if (currentpin == pos)
 800147a:	0619      	lsls	r1, r3, #24
 800147c:	d471      	bmi.n	8001562 <GPIO_Init+0x162>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800147e:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001480:	2bff      	cmp	r3, #255	; 0xff
 8001482:	d930      	bls.n	80014e6 <GPIO_Init+0xe6>
 8001484:	2d28      	cmp	r5, #40	; 0x28
  {
    tmpreg = GPIOx->CRH;
 8001486:	6842      	ldr	r2, [r0, #4]
 8001488:	d02f      	beq.n	80014ea <GPIO_Init+0xea>
 800148a:	2d48      	cmp	r5, #72	; 0x48
 800148c:	d06c      	beq.n	8001568 <GPIO_Init+0x168>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800148e:	05d9      	lsls	r1, r3, #23
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8001490:	bf44      	itt	mi
 8001492:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001496:	4322      	orrmi	r2, r4
      if (currentpin == pos)
 8001498:	059d      	lsls	r5, r3, #22
        tmpreg &= ~pinmask;
 800149a:	bf44      	itt	mi
 800149c:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80014a0:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
      if (currentpin == pos)
 80014a4:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 80014a6:	bf44      	itt	mi
 80014a8:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80014ac:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
      if (currentpin == pos)
 80014b0:	051d      	lsls	r5, r3, #20
        tmpreg &= ~pinmask;
 80014b2:	bf44      	itt	mi
 80014b4:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80014b8:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
      if (currentpin == pos)
 80014bc:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 80014be:	bf44      	itt	mi
 80014c0:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80014c4:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
      if (currentpin == pos)
 80014c8:	049d      	lsls	r5, r3, #18
        tmpreg &= ~pinmask;
 80014ca:	bf44      	itt	mi
 80014cc:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80014d0:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
      if (currentpin == pos)
 80014d4:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 80014d6:	bf44      	itt	mi
 80014d8:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80014dc:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
      if (currentpin == pos)
 80014e0:	041d      	lsls	r5, r3, #16
 80014e2:	d43b      	bmi.n	800155c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80014e4:	6042      	str	r2, [r0, #4]
  }
}
 80014e6:	bc30      	pop	{r4, r5}
 80014e8:	4770      	bx	lr
      if (currentpin == pos)
 80014ea:	05d9      	lsls	r1, r3, #23
 80014ec:	f100 80d6 	bmi.w	800169c <GPIO_Init+0x29c>
 80014f0:	059d      	lsls	r5, r3, #22
 80014f2:	f100 80cb 	bmi.w	800168c <GPIO_Init+0x28c>
 80014f6:	0559      	lsls	r1, r3, #21
 80014f8:	f100 80c0 	bmi.w	800167c <GPIO_Init+0x27c>
 80014fc:	051d      	lsls	r5, r3, #20
 80014fe:	f100 80b5 	bmi.w	800166c <GPIO_Init+0x26c>
 8001502:	04d9      	lsls	r1, r3, #19
 8001504:	f100 80aa 	bmi.w	800165c <GPIO_Init+0x25c>
 8001508:	049d      	lsls	r5, r3, #18
 800150a:	f100 809f 	bmi.w	800164c <GPIO_Init+0x24c>
 800150e:	0459      	lsls	r1, r3, #17
 8001510:	f100 8094 	bmi.w	800163c <GPIO_Init+0x23c>
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	d5e5      	bpl.n	80014e4 <GPIO_Init+0xe4>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800151c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001520:	6143      	str	r3, [r0, #20]
 8001522:	e7df      	b.n	80014e4 <GPIO_Init+0xe4>
      if (currentpin == pos)
 8001524:	07d9      	lsls	r1, r3, #31
 8001526:	f100 80e3 	bmi.w	80016f0 <GPIO_Init+0x2f0>
 800152a:	0799      	lsls	r1, r3, #30
 800152c:	f100 80d9 	bmi.w	80016e2 <GPIO_Init+0x2e2>
 8001530:	0759      	lsls	r1, r3, #29
 8001532:	f100 80cf 	bmi.w	80016d4 <GPIO_Init+0x2d4>
 8001536:	0719      	lsls	r1, r3, #28
 8001538:	f100 80c5 	bmi.w	80016c6 <GPIO_Init+0x2c6>
 800153c:	06d9      	lsls	r1, r3, #27
 800153e:	f100 80bb 	bmi.w	80016b8 <GPIO_Init+0x2b8>
 8001542:	0699      	lsls	r1, r3, #26
 8001544:	f100 80b1 	bmi.w	80016aa <GPIO_Init+0x2aa>
 8001548:	0659      	lsls	r1, r3, #25
 800154a:	f100 80d7 	bmi.w	80016fc <GPIO_Init+0x2fc>
 800154e:	0619      	lsls	r1, r3, #24
 8001550:	d595      	bpl.n	800147e <GPIO_Init+0x7e>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001552:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 8001554:	f364 721f 	bfi	r2, r4, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001558:	6101      	str	r1, [r0, #16]
 800155a:	e790      	b.n	800147e <GPIO_Init+0x7e>
        tmpreg |= (currentmode << pos);
 800155c:	f364 721f 	bfi	r2, r4, #28, #4
 8001560:	e7c0      	b.n	80014e4 <GPIO_Init+0xe4>
        tmpreg |= (currentmode << pos);
 8001562:	f364 721f 	bfi	r2, r4, #28, #4
 8001566:	e78a      	b.n	800147e <GPIO_Init+0x7e>
      if (currentpin == pos)
 8001568:	05d9      	lsls	r1, r3, #23
 800156a:	d448      	bmi.n	80015fe <GPIO_Init+0x1fe>
 800156c:	059d      	lsls	r5, r3, #22
 800156e:	d43e      	bmi.n	80015ee <GPIO_Init+0x1ee>
 8001570:	0559      	lsls	r1, r3, #21
 8001572:	d434      	bmi.n	80015de <GPIO_Init+0x1de>
 8001574:	051d      	lsls	r5, r3, #20
 8001576:	d42a      	bmi.n	80015ce <GPIO_Init+0x1ce>
 8001578:	04d9      	lsls	r1, r3, #19
 800157a:	d44f      	bmi.n	800161c <GPIO_Init+0x21c>
 800157c:	049d      	lsls	r5, r3, #18
 800157e:	d445      	bmi.n	800160c <GPIO_Init+0x20c>
 8001580:	0459      	lsls	r1, r3, #17
 8001582:	d453      	bmi.n	800162c <GPIO_Init+0x22c>
 8001584:	041d      	lsls	r5, r3, #16
 8001586:	d5ad      	bpl.n	80014e4 <GPIO_Init+0xe4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800158c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001590:	6103      	str	r3, [r0, #16]
 8001592:	e7a7      	b.n	80014e4 <GPIO_Init+0xe4>
      if (currentpin == pos)
 8001594:	07d9      	lsls	r1, r3, #31
 8001596:	f100 80e2 	bmi.w	800175e <GPIO_Init+0x35e>
 800159a:	0799      	lsls	r1, r3, #30
 800159c:	f100 80d8 	bmi.w	8001750 <GPIO_Init+0x350>
 80015a0:	0759      	lsls	r1, r3, #29
 80015a2:	f100 80ce 	bmi.w	8001742 <GPIO_Init+0x342>
 80015a6:	0719      	lsls	r1, r3, #28
 80015a8:	f100 80c4 	bmi.w	8001734 <GPIO_Init+0x334>
 80015ac:	06d9      	lsls	r1, r3, #27
 80015ae:	f100 80ba 	bmi.w	8001726 <GPIO_Init+0x326>
 80015b2:	0699      	lsls	r1, r3, #26
 80015b4:	f100 80b0 	bmi.w	8001718 <GPIO_Init+0x318>
 80015b8:	0659      	lsls	r1, r3, #25
 80015ba:	f100 80a6 	bmi.w	800170a <GPIO_Init+0x30a>
 80015be:	0619      	lsls	r1, r3, #24
 80015c0:	f57f af5d 	bpl.w	800147e <GPIO_Init+0x7e>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015c4:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80015c6:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015ca:	6141      	str	r1, [r0, #20]
 80015cc:	e757      	b.n	800147e <GPIO_Init+0x7e>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 80015d2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80015d6:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015da:	6101      	str	r1, [r0, #16]
 80015dc:	e7cc      	b.n	8001578 <GPIO_Init+0x178>
 80015de:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 80015e2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80015e6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ea:	6101      	str	r1, [r0, #16]
 80015ec:	e7c2      	b.n	8001574 <GPIO_Init+0x174>
 80015ee:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80015f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80015f6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015fa:	6101      	str	r1, [r0, #16]
 80015fc:	e7b8      	b.n	8001570 <GPIO_Init+0x170>
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 8001602:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001606:	4322      	orrs	r2, r4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001608:	6101      	str	r1, [r0, #16]
 800160a:	e7af      	b.n	800156c <GPIO_Init+0x16c>
 800160c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001610:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001614:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001618:	6101      	str	r1, [r0, #16]
 800161a:	e7b1      	b.n	8001580 <GPIO_Init+0x180>
 800161c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001620:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001624:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001628:	6101      	str	r1, [r0, #16]
 800162a:	e7a7      	b.n	800157c <GPIO_Init+0x17c>
 800162c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001634:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001638:	6101      	str	r1, [r0, #16]
 800163a:	e7a3      	b.n	8001584 <GPIO_Init+0x184>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800163c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001644:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001648:	6141      	str	r1, [r0, #20]
 800164a:	e763      	b.n	8001514 <GPIO_Init+0x114>
 800164c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001650:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001654:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001658:	6141      	str	r1, [r0, #20]
 800165a:	e758      	b.n	800150e <GPIO_Init+0x10e>
 800165c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001660:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001664:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001668:	6141      	str	r1, [r0, #20]
 800166a:	e74d      	b.n	8001508 <GPIO_Init+0x108>
 800166c:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 8001670:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001674:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001678:	6141      	str	r1, [r0, #20]
 800167a:	e742      	b.n	8001502 <GPIO_Init+0x102>
 800167c:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8001680:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001684:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001688:	6141      	str	r1, [r0, #20]
 800168a:	e737      	b.n	80014fc <GPIO_Init+0xfc>
 800168c:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8001690:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001694:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001698:	6141      	str	r1, [r0, #20]
 800169a:	e72c      	b.n	80014f6 <GPIO_Init+0xf6>
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80016a0:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80016a4:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80016a6:	6141      	str	r1, [r0, #20]
 80016a8:	e722      	b.n	80014f0 <GPIO_Init+0xf0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016aa:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 80016ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80016b0:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016b4:	6101      	str	r1, [r0, #16]
 80016b6:	e747      	b.n	8001548 <GPIO_Init+0x148>
 80016b8:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 80016ba:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80016be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016c2:	6101      	str	r1, [r0, #16]
 80016c4:	e73d      	b.n	8001542 <GPIO_Init+0x142>
 80016c6:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 80016c8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80016cc:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016d0:	6101      	str	r1, [r0, #16]
 80016d2:	e733      	b.n	800153c <GPIO_Init+0x13c>
 80016d4:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 80016d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80016da:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016de:	6101      	str	r1, [r0, #16]
 80016e0:	e729      	b.n	8001536 <GPIO_Init+0x136>
 80016e2:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 80016e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80016e8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016ec:	6101      	str	r1, [r0, #16]
 80016ee:	e71f      	b.n	8001530 <GPIO_Init+0x130>
 80016f0:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 80016f2:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80016f6:	4322      	orrs	r2, r4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016f8:	6101      	str	r1, [r0, #16]
 80016fa:	e716      	b.n	800152a <GPIO_Init+0x12a>
 80016fc:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80016fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001702:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001706:	6101      	str	r1, [r0, #16]
 8001708:	e721      	b.n	800154e <GPIO_Init+0x14e>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800170a:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800170c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001710:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001714:	6141      	str	r1, [r0, #20]
 8001716:	e752      	b.n	80015be <GPIO_Init+0x1be>
 8001718:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800171a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800171e:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001722:	6141      	str	r1, [r0, #20]
 8001724:	e748      	b.n	80015b8 <GPIO_Init+0x1b8>
 8001726:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 8001728:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800172c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001730:	6141      	str	r1, [r0, #20]
 8001732:	e73e      	b.n	80015b2 <GPIO_Init+0x1b2>
 8001734:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 8001736:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800173a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800173e:	6141      	str	r1, [r0, #20]
 8001740:	e734      	b.n	80015ac <GPIO_Init+0x1ac>
 8001742:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 8001744:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001748:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800174c:	6141      	str	r1, [r0, #20]
 800174e:	e72a      	b.n	80015a6 <GPIO_Init+0x1a6>
 8001750:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 8001752:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001756:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800175a:	6141      	str	r1, [r0, #20]
 800175c:	e720      	b.n	80015a0 <GPIO_Init+0x1a0>
 800175e:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 8001760:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001764:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001766:	6141      	str	r1, [r0, #20]
 8001768:	e717      	b.n	800159a <GPIO_Init+0x19a>
 800176a:	bf00      	nop

0800176c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800176c:	6880      	ldr	r0, [r0, #8]
}
 800176e:	b280      	uxth	r0, r0
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8001774:	68c0      	ldr	r0, [r0, #12]
}
 8001776:	b280      	uxth	r0, r0
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800177c:	6101      	str	r1, [r0, #16]
 800177e:	4770      	bx	lr

08001780 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001780:	6141      	str	r1, [r0, #20]
 8001782:	4770      	bx	lr

08001784 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001784:	b90a      	cbnz	r2, 800178a <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8001786:	6141      	str	r1, [r0, #20]
 8001788:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800178a:	6101      	str	r1, [r0, #16]
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001790:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001794:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 8001798:	bfb4      	ite	lt
 800179a:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 800179c:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800179e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80017a2:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 80017a4:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80017a6:	d01e      	beq.n	80017e6 <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80017a8:	02c2      	lsls	r2, r0, #11
 80017aa:	d513      	bpl.n	80017d4 <GPIO_PinRemapConfig+0x44>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017ac:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80017ae:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017b2:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 80017b4:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017b8:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 80017bc:	b119      	cbz	r1, 80017c6 <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017be:	0d42      	lsrs	r2, r0, #21
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	4094      	lsls	r4, r2
 80017c4:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80017c8:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 80017ca:	bfb4      	ite	lt
 80017cc:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 80017ce:	6053      	strge	r3, [r2, #4]
  }  
}
 80017d0:	bc30      	pop	{r4, r5}
 80017d2:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017d4:	0d42      	lsrs	r2, r0, #21
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	fa04 f202 	lsl.w	r2, r4, r2
 80017dc:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017e0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80017e4:	e7ea      	b.n	80017bc <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80017e6:	4d04      	ldr	r5, [pc, #16]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80017e8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80017ec:	686a      	ldr	r2, [r5, #4]
 80017ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f2:	606a      	str	r2, [r5, #4]
 80017f4:	e7e2      	b.n	80017bc <GPIO_PinRemapConfig+0x2c>
 80017f6:	bf00      	nop
 80017f8:	40010000 	.word	0x40010000

080017fc <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80017fc:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80017fe:	240f      	movs	r4, #15
 8001800:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8001804:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001808:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800180c:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001810:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001812:	0089      	lsls	r1, r1, #2
 8001814:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001816:	ea22 0204 	bic.w	r2, r2, r4
 800181a:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	fa00 f101 	lsl.w	r1, r0, r1
 8001822:	4311      	orrs	r1, r2
 8001824:	6099      	str	r1, [r3, #8]
}
 8001826:	bc10      	pop	{r4}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800182c:	4b01      	ldr	r3, [pc, #4]	; (8001834 <RCC_USBCLKConfig+0x8>)
 800182e:	6018      	str	r0, [r3, #0]
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	424200d8 	.word	0x424200d8

08001838 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <RCC_APB2PeriphClockCmd+0x14>)
 800183a:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 800183c:	b919      	cbnz	r1, 8001846 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800183e:	ea23 0000 	bic.w	r0, r3, r0
 8001842:	6190      	str	r0, [r2, #24]
 8001844:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8001846:	4318      	orrs	r0, r3
 8001848:	6190      	str	r0, [r2, #24]
 800184a:	4770      	bx	lr
 800184c:	40021000 	.word	0x40021000

08001850 <RCC_APB1PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <RCC_APB1PeriphClockCmd+0x14>)
 8001852:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 8001854:	b919      	cbnz	r1, 800185e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001856:	ea23 0000 	bic.w	r0, r3, r0
 800185a:	61d0      	str	r0, [r2, #28]
 800185c:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 800185e:	4318      	orrs	r0, r3
 8001860:	61d0      	str	r0, [r2, #28]
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000

08001868 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <TIM_TimeBaseInit+0xa0>)
  tmpcr1 = TIMx->CR1;  
 800186a:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800186c:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 800186e:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001870:	d012      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 8001872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001876:	4290      	cmp	r0, r2
 8001878:	d00e      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 800187a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800187e:	d00b      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 8001880:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001884:	4290      	cmp	r0, r2
 8001886:	d007      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 8001888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800188c:	4290      	cmp	r0, r2
 800188e:	d003      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001894:	4290      	cmp	r0, r2
 8001896:	d103      	bne.n	80018a0 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001898:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800189a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800189e:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <TIM_TimeBaseInit+0xa4>)
 80018a2:	4290      	cmp	r0, r2
 80018a4:	d027      	beq.n	80018f6 <TIM_TimeBaseInit+0x8e>
 80018a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018aa:	4290      	cmp	r0, r2
 80018ac:	d023      	beq.n	80018f6 <TIM_TimeBaseInit+0x8e>
{
 80018ae:	b470      	push	{r4, r5, r6}
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80018b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80018b4:	88ce      	ldrh	r6, [r1, #6]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018b6:	888d      	ldrh	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018b8:	880c      	ldrh	r4, [r1, #0]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80018ba:	b29b      	uxth	r3, r3
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018bc:	f502 328c 	add.w	r2, r2, #71680	; 0x11800
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80018c0:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018c2:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 80018c4:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018c6:	8585      	strh	r5, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018c8:	8504      	strh	r4, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018ca:	d00e      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <TIM_TimeBaseInit+0xa8>)
 80018ce:	4298      	cmp	r0, r3
 80018d0:	d00b      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018d2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80018d6:	4298      	cmp	r0, r3
 80018d8:	d007      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018de:	4298      	cmp	r0, r3
 80018e0:	d003      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018e6:	4298      	cmp	r0, r3
 80018e8:	d101      	bne.n	80018ee <TIM_TimeBaseInit+0x86>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80018ea:	7a0b      	ldrb	r3, [r1, #8]
 80018ec:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018f2:	8283      	strh	r3, [r0, #20]
}
 80018f4:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 80018f6:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018f8:	888b      	ldrh	r3, [r1, #4]
 80018fa:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018fc:	880b      	ldrh	r3, [r1, #0]
 80018fe:	8503      	strh	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001900:	2301      	movs	r3, #1
 8001902:	8283      	strh	r3, [r0, #20]
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40001000 	.word	0x40001000
 8001910:	40013400 	.word	0x40013400

08001914 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001914:	8c02      	ldrh	r2, [r0, #32]
{
 8001916:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001918:	f022 0201 	bic.w	r2, r2, #1
 800191c:	0412      	lsls	r2, r2, #16
 800191e:	0c12      	lsrs	r2, r2, #16
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001920:	890d      	ldrh	r5, [r1, #8]
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001922:	8402      	strh	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 8001924:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001926:	884e      	ldrh	r6, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 8001928:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800192a:	8b02      	ldrh	r2, [r0, #24]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800192c:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001930:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001932:	041b      	lsls	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001934:	f022 0273 	bic.w	r2, r2, #115	; 0x73
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001938:	4e18      	ldr	r6, [pc, #96]	; (800199c <TIM_OC1Init+0x88>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800193a:	0c1b      	lsrs	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800193c:	0412      	lsls	r2, r2, #16
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800193e:	880f      	ldrh	r7, [r1, #0]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001940:	432b      	orrs	r3, r5
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001942:	0c12      	lsrs	r2, r2, #16
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001944:	42b0      	cmp	r0, r6
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001946:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8001948:	b2a4      	uxth	r4, r4
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800194a:	ea42 0207 	orr.w	r2, r2, r7
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800194e:	d015      	beq.n	800197c <TIM_OC1Init+0x68>
 8001950:	4d13      	ldr	r5, [pc, #76]	; (80019a0 <TIM_OC1Init+0x8c>)
 8001952:	42a8      	cmp	r0, r5
 8001954:	d012      	beq.n	800197c <TIM_OC1Init+0x68>
 8001956:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800195a:	42a8      	cmp	r0, r5
 800195c:	d00e      	beq.n	800197c <TIM_OC1Init+0x68>
 800195e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001962:	42a8      	cmp	r0, r5
 8001964:	d00a      	beq.n	800197c <TIM_OC1Init+0x68>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800196a:	42a8      	cmp	r0, r5
 800196c:	d006      	beq.n	800197c <TIM_OC1Init+0x68>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800196e:	88c9      	ldrh	r1, [r1, #6]
  TIMx->CR2 = tmpcr2;
 8001970:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001972:	8302      	strh	r2, [r0, #24]
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001974:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001976:	8681      	strh	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001978:	8403      	strh	r3, [r0, #32]
}
 800197a:	4770      	bx	lr
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800197c:	894e      	ldrh	r6, [r1, #10]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800197e:	898d      	ldrh	r5, [r1, #12]
 8001980:	89cf      	ldrh	r7, [r1, #14]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001982:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001986:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001988:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800198c:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800198e:	433d      	orrs	r5, r7
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001990:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001994:	432c      	orrs	r4, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001996:	4333      	orrs	r3, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001998:	b2a4      	uxth	r4, r4
 800199a:	e7e8      	b.n	800196e <TIM_OC1Init+0x5a>
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40013400 	.word	0x40013400

080019a4 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019aa:	6003      	str	r3, [r0, #0]
 80019ac:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80019ae:	7203      	strb	r3, [r0, #8]
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80019b4:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 80019b6:	b929      	cbnz	r1, 80019c4 <TIM_Cmd+0x10>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	0c1b      	lsrs	r3, r3, #16
 80019c0:	8003      	strh	r3, [r0, #0]
 80019c2:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	8003      	strh	r3, [r0, #0]
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80019d0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 80019d4:	b921      	cbnz	r1, 80019e0 <TIM_CtrlPWMOutputs+0x10>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 80019d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019da:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80019de:	4770      	bx	lr
    TIMx->BDTR |= TIM_BDTR_MOE;
 80019e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80019ee:	4770      	bx	lr

080019f0 <TIM_ITConfig>:
 80019f0:	8983      	ldrh	r3, [r0, #12]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b91a      	cbnz	r2, 80019fe <TIM_ITConfig+0xe>
 80019f6:	ea23 0101 	bic.w	r1, r3, r1
 80019fa:	8181      	strh	r1, [r0, #12]
 80019fc:	4770      	bx	lr
 80019fe:	4319      	orrs	r1, r3
 8001a00:	8181      	strh	r1, [r0, #12]
 8001a02:	4770      	bx	lr

08001a04 <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001a04:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001a06:	f023 0308 	bic.w	r3, r3, #8
 8001a0a:	041b      	lsls	r3, r3, #16
 8001a0c:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001a0e:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001a10:	8301      	strh	r1, [r0, #24]
 8001a12:	4770      	bx	lr

08001a14 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001a14:	43c9      	mvns	r1, r1
 8001a16:	b289      	uxth	r1, r1
 8001a18:	8201      	strh	r1, [r0, #16]
 8001a1a:	4770      	bx	lr

08001a1c <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001a20:	2708      	movs	r7, #8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a22:	2510      	movs	r5, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a24:	f04f 0803 	mov.w	r8, #3
{
 8001a28:	b082      	sub	sp, #8
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001a2a:	4c14      	ldr	r4, [pc, #80]	; (8001a7c <coolant_init+0x60>)
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001a2c:	ae02      	add	r6, sp, #8
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 8001a2e:	4638      	mov	r0, r7
 8001a30:	2101      	movs	r1, #1
 8001a32:	f7ff ff01 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001a36:	f826 5d04 	strh.w	r5, [r6, #-4]!
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001a3a:	4631      	mov	r1, r6
 8001a3c:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a3e:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a42:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001a46:	f7ff fcdb 	bl	8001400 <GPIO_Init>
	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 8001a4a:	4638      	mov	r0, r7
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	f7ff fef3 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001a52:	4631      	mov	r1, r6
 8001a54:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a56:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a5a:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001a5e:	f8ad 7004 	strh.w	r7, [sp, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001a62:	f7ff fccd 	bl	8001400 <GPIO_Init>
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001a66:	4629      	mov	r1, r5
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f7ff fe89 	bl	8001780 <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001a6e:	4639      	mov	r1, r7
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fe85 	bl	8001780 <GPIO_ResetBits>
}
 8001a76:	b002      	add	sp, #8
 8001a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a7c:	40010c00 	.word	0x40010c00

08001a80 <coolant_get_state>:
{
 8001a80:	b510      	push	{r4, lr}
    if (bit_istrue(
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <coolant_get_state+0x20>)
 8001a84:	f7ff fe76 	bl	8001774 <GPIO_ReadOutputData>
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 8001a88:	f3c0 1400 	ubfx	r4, r0, #4, #1
      if (bit_istrue(
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <coolant_get_state+0x20>)
 8001a8e:	f7ff fe71 	bl	8001774 <GPIO_ReadOutputData>
 8001a92:	0703      	lsls	r3, r0, #28
      cl_state |= COOLANT_STATE_MIST;
 8001a94:	bf48      	it	mi
 8001a96:	f044 0402 	orrmi.w	r4, r4, #2
}
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	bd10      	pop	{r4, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40010c00 	.word	0x40010c00

08001aa4 <coolant_stop>:
{
 8001aa4:	b510      	push	{r4, lr}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001aa6:	4c05      	ldr	r4, [pc, #20]	; (8001abc <coolant_stop+0x18>)
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff fe68 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001ab0:	4620      	mov	r0, r4
#endif
    #endif
  #endif
#endif
}
 8001ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001ab6:	2108      	movs	r1, #8
 8001ab8:	f7ff be62 	b.w	8001780 <GPIO_ResetBits>
 8001abc:	40010c00 	.word	0x40010c00

08001ac0 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8001ac0:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 8001ac2:	4d0f      	ldr	r5, [pc, #60]	; (8001b00 <coolant_set_state+0x40>)
 8001ac4:	786b      	ldrb	r3, [r5, #1]
 8001ac6:	b93b      	cbnz	r3, 8001ad8 <coolant_set_state+0x18>
 8001ac8:	4604      	mov	r4, r0
  
  if (mode == COOLANT_DISABLE) {
 8001aca:	b130      	cbz	r0, 8001ada <coolant_set_state+0x1a>
    coolant_stop(); 
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001acc:	0642      	lsls	r2, r0, #25
 8001ace:	d40d      	bmi.n	8001aec <coolant_set_state+0x2c>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 8001ad0:	0623      	lsls	r3, r4, #24
 8001ad2:	d410      	bmi.n	8001af6 <coolant_set_state+0x36>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	732b      	strb	r3, [r5, #12]
 8001ad8:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001ada:	2110      	movs	r1, #16
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <coolant_set_state+0x44>)
 8001ade:	f7ff fe4f 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001ae2:	2108      	movs	r1, #8
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <coolant_set_state+0x44>)
 8001ae6:	f7ff fe4b 	bl	8001780 <GPIO_ResetBits>
 8001aea:	e7f3      	b.n	8001ad4 <coolant_set_state+0x14>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001aec:	2110      	movs	r1, #16
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <coolant_set_state+0x44>)
 8001af0:	f7ff fe44 	bl	800177c <GPIO_SetBits>
 8001af4:	e7ec      	b.n	8001ad0 <coolant_set_state+0x10>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001af6:	2108      	movs	r1, #8
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <coolant_set_state+0x44>)
 8001afa:	f7ff fe3f 	bl	800177c <GPIO_SetBits>
 8001afe:	e7e9      	b.n	8001ad4 <coolant_set_state+0x14>
 8001b00:	200010b0 	.word	0x200010b0
 8001b04:	40010c00 	.word	0x40010c00

08001b08 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8001b08:	b538      	push	{r3, r4, r5, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8001b0a:	4c12      	ldr	r4, [pc, #72]	; (8001b54 <coolant_sync+0x4c>)
 8001b0c:	7823      	ldrb	r3, [r4, #0]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d004      	beq.n	8001b1c <coolant_sync+0x14>
 8001b12:	4605      	mov	r5, r0
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8001b14:	f004 f9a6 	bl	8005e64 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.  
 8001b18:	7863      	ldrb	r3, [r4, #1]
 8001b1a:	b103      	cbz	r3, 8001b1e <coolant_sync+0x16>
 8001b1c:	bd38      	pop	{r3, r4, r5, pc}
  if (mode == COOLANT_DISABLE) {
 8001b1e:	b135      	cbz	r5, 8001b2e <coolant_sync+0x26>
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001b20:	066a      	lsls	r2, r5, #25
 8001b22:	d40d      	bmi.n	8001b40 <coolant_sync+0x38>
      if (mode & COOLANT_MIST_ENABLE) {
 8001b24:	062b      	lsls	r3, r5, #24
 8001b26:	d410      	bmi.n	8001b4a <coolant_sync+0x42>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001b28:	2300      	movs	r3, #0
 8001b2a:	7323      	strb	r3, [r4, #12]
 8001b2c:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001b2e:	2110      	movs	r1, #16
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <coolant_sync+0x50>)
 8001b32:	f7ff fe25 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001b36:	2108      	movs	r1, #8
 8001b38:	4807      	ldr	r0, [pc, #28]	; (8001b58 <coolant_sync+0x50>)
 8001b3a:	f7ff fe21 	bl	8001780 <GPIO_ResetBits>
 8001b3e:	e7f3      	b.n	8001b28 <coolant_sync+0x20>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001b40:	2110      	movs	r1, #16
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <coolant_sync+0x50>)
 8001b44:	f7ff fe1a 	bl	800177c <GPIO_SetBits>
 8001b48:	e7ec      	b.n	8001b24 <coolant_sync+0x1c>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <coolant_sync+0x50>)
 8001b4e:	f7ff fe15 	bl	800177c <GPIO_SetBits>
 8001b52:	e7e9      	b.n	8001b28 <coolant_sync+0x20>
 8001b54:	200010b0 	.word	0x200010b0
 8001b58:	40010c00 	.word	0x40010c00

08001b5c <eeprom_init>:
		nSize -= 4;
		nAddress += 4;
	}
}
void eeprom_init()
{
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <eeprom_init+0x30>)
 8001b5e:	490c      	ldr	r1, [pc, #48]	; (8001b90 <eeprom_init+0x34>)
 8001b60:	b410      	push	{r4}
 8001b62:	1c5c      	adds	r4, r3, #1
 8001b64:	1b09      	subs	r1, r1, r4
 8001b66:	f503 6080 	add.w	r0, r3, #1024	; 0x400
	uint16_t VarIdx = 0;
	uint8_t *pTmp = EE_Buffer;

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8001b6a:	5cca      	ldrb	r2, [r1, r3]
 8001b6c:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8001b70:	4298      	cmp	r0, r3
 8001b72:	d1fa      	bne.n	8001b6a <eeprom_init+0xe>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 8001b74:	7823      	ldrb	r3, [r4, #0]
 8001b76:	2b0a      	cmp	r3, #10
 8001b78:	d006      	beq.n	8001b88 <eeprom_init+0x2c>
 8001b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7e:	21ff      	movs	r1, #255	; 0xff
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <eeprom_init+0x38>)
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
		{
			*pTmp++ = 0xFF;
		}
	}
}
 8001b82:	bc10      	pop	{r4}
 8001b84:	f009 b889 	b.w	800ac9a <memset>
 8001b88:	bc10      	pop	{r4}
 8001b8a:	4770      	bx	lr
 8001b8c:	20000c13 	.word	0x20000c13
 8001b90:	0801fc01 	.word	0x0801fc01
 8001b94:	20000c14 	.word	0x20000c14

08001b98 <eeprom_get_char>:
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 8001b98:	4b01      	ldr	r3, [pc, #4]	; (8001ba0 <eeprom_get_char+0x8>)
#endif
}
 8001b9a:	5c18      	ldrb	r0, [r3, r0]
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000c14 	.word	0x20000c14

08001ba4 <eeprom_put_char>:
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 8001ba4:	4b01      	ldr	r3, [pc, #4]	; (8001bac <eeprom_put_char+0x8>)
 8001ba6:	5419      	strb	r1, [r3, r0]
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000c14 	.word	0x20000c14

08001bb0 <memcpy_to_eeprom_with_checksum>:
}

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8001bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb4:	4606      	mov	r6, r0
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	d040      	beq.n	8001c3c <memcpy_to_eeprom_with_checksum+0x8c>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	4f21      	ldr	r7, [pc, #132]	; (8001c44 <memcpy_to_eeprom_with_checksum+0x94>)
 8001bbe:	1e44      	subs	r4, r0, #1
 8001bc0:	443c      	add	r4, r7
 8001bc2:	188d      	adds	r5, r1, r2
 8001bc4:	2b00      	cmp	r3, #0
    checksum = (checksum << 1) || (checksum >> 7);
 8001bc6:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001bca:	bf18      	it	ne
 8001bcc:	2301      	movne	r3, #1
    checksum += *source;
 8001bce:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001bd2:	4403      	add	r3, r0
  for(; size > 0; size--) { 
 8001bd4:	42a9      	cmp	r1, r5
    checksum += *source;
 8001bd6:	b2db      	uxtb	r3, r3
	EE_Buffer[addr] = new_value;
 8001bd8:	f804 0f01 	strb.w	r0, [r4, #1]!
  for(; size > 0; size--) { 
 8001bdc:	d1f2      	bne.n	8001bc4 <memcpy_to_eeprom_with_checksum+0x14>
 8001bde:	4416      	add	r6, r2
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <memcpy_to_eeprom_with_checksum+0x98>)
	EE_Buffer[addr] = new_value;
 8001be2:	55bb      	strb	r3, [r7, r6]
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001be4:	f7ff fb20 	bl	8001228 <FLASH_ErasePage>
	if (FlashStatus != FLASH_COMPLETE)
 8001be8:	2804      	cmp	r0, #4
 8001bea:	d001      	beq.n	8001bf0 <memcpy_to_eeprom_with_checksum+0x40>
 8001bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*pBuffer != 0xffff)
 8001bf0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8001bf4:	4d15      	ldr	r5, [pc, #84]	; (8001c4c <memcpy_to_eeprom_with_checksum+0x9c>)
	if (FlashStatus != FLASH_COMPLETE)
 8001bf6:	4c14      	ldr	r4, [pc, #80]	; (8001c48 <memcpy_to_eeprom_with_checksum+0x98>)
	while (nSize > 0)
 8001bf8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001c50 <memcpy_to_eeprom_with_checksum+0xa0>
 8001bfc:	1eae      	subs	r6, r5, #2
		if (*pBuffer != 0xffff)
 8001bfe:	f835 1c04 	ldrh.w	r1, [r5, #-4]
 8001c02:	42b9      	cmp	r1, r7
 8001c04:	d002      	beq.n	8001c0c <memcpy_to_eeprom_with_checksum+0x5c>
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 8001c06:	4620      	mov	r0, r4
 8001c08:	f7ff fb84 	bl	8001314 <FLASH_ProgramHalfWord>
		if (*pBuffer != 0xffff)
 8001c0c:	8831      	ldrh	r1, [r6, #0]
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001c0e:	1ca0      	adds	r0, r4, #2
		if (*pBuffer != 0xffff)
 8001c10:	42b9      	cmp	r1, r7
		nAddress += 4;
 8001c12:	f104 0404 	add.w	r4, r4, #4
		if (*pBuffer != 0xffff)
 8001c16:	d009      	beq.n	8001c2c <memcpy_to_eeprom_with_checksum+0x7c>
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001c18:	f7ff fb7c 	bl	8001314 <FLASH_ProgramHalfWord>
	while (nSize > 0)
 8001c1c:	4544      	cmp	r4, r8
 8001c1e:	f105 0504 	add.w	r5, r5, #4
 8001c22:	f106 0604 	add.w	r6, r6, #4
 8001c26:	d1ea      	bne.n	8001bfe <memcpy_to_eeprom_with_checksum+0x4e>
 8001c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c2c:	4544      	cmp	r4, r8
 8001c2e:	f105 0504 	add.w	r5, r5, #4
 8001c32:	f106 0604 	add.w	r6, r6, #4
 8001c36:	d1e2      	bne.n	8001bfe <memcpy_to_eeprom_with_checksum+0x4e>
 8001c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  unsigned char checksum = 0;
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	4f01      	ldr	r7, [pc, #4]	; (8001c44 <memcpy_to_eeprom_with_checksum+0x94>)
 8001c40:	e7ce      	b.n	8001be0 <memcpy_to_eeprom_with_checksum+0x30>
 8001c42:	bf00      	nop
 8001c44:	20000c14 	.word	0x20000c14
 8001c48:	0801fc00 	.word	0x0801fc00
 8001c4c:	20000c18 	.word	0x20000c18
 8001c50:	08020000 	.word	0x08020000

08001c54 <memcpy_from_eeprom_with_checksum>:
  eeprom_flush();
#endif
#endif
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8001c54:	b4f0      	push	{r4, r5, r6, r7}
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
 8001c56:	b1ca      	cbz	r2, 8001c8c <memcpy_from_eeprom_with_checksum+0x38>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	4f0e      	ldr	r7, [pc, #56]	; (8001c94 <memcpy_from_eeprom_with_checksum+0x40>)
 8001c5c:	1e4d      	subs	r5, r1, #1
 8001c5e:	443d      	add	r5, r7
 8001c60:	1886      	adds	r6, r0, r2
 8001c62:	2b00      	cmp	r3, #0
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
 8001c64:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001c68:	bf18      	it	ne
 8001c6a:	2301      	movne	r3, #1
	return EE_Buffer[addr];
 8001c6c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    checksum += data;    
    *(destination++) = data; 
 8001c70:	f800 4b01 	strb.w	r4, [r0], #1
    checksum += data;    
 8001c74:	4423      	add	r3, r4
  for(; size > 0; size--) { 
 8001c76:	42b0      	cmp	r0, r6
    checksum += data;    
 8001c78:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 8001c7a:	d1f2      	bne.n	8001c62 <memcpy_from_eeprom_with_checksum+0xe>
 8001c7c:	4411      	add	r1, r2
  }
  return(checksum == eeprom_get_char(source));
 8001c7e:	5c78      	ldrb	r0, [r7, r1]
}
 8001c80:	bcf0      	pop	{r4, r5, r6, r7}
 8001c82:	1ac0      	subs	r0, r0, r3
 8001c84:	fab0 f080 	clz	r0, r0
 8001c88:	0940      	lsrs	r0, r0, #5
 8001c8a:	4770      	bx	lr
  unsigned char data, checksum = 0;
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	4f01      	ldr	r7, [pc, #4]	; (8001c94 <memcpy_from_eeprom_with_checksum+0x40>)
 8001c90:	e7f5      	b.n	8001c7e <memcpy_from_eeprom_with_checksum+0x2a>
 8001c92:	bf00      	nop
 8001c94:	20000c14 	.word	0x20000c14

08001c98 <gc_init>:

#define FAIL(status) return(status);


void gc_init()
{
 8001c98:	b508      	push	{r3, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2250      	movs	r2, #80	; 0x50
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <gc_init+0x24>)
 8001ca0:	f008 fffb 	bl	800ac9a <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 8001ca4:	4906      	ldr	r1, [pc, #24]	; (8001cc0 <gc_init+0x28>)
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f005 fd8e 	bl	80077c8 <settings_read_coord_data>
 8001cac:	b100      	cbz	r0, 8001cb0 <gc_init+0x18>
 8001cae:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001cb0:	2007      	movs	r0, #7
  }
}
 8001cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001cb6:	f004 bbcb 	b.w	8006450 <report_status_message>
 8001cba:	bf00      	nop
 8001cbc:	20001014 	.word	0x20001014
 8001cc0:	20001040 	.word	0x20001040

08001cc4 <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8001cc4:	4901      	ldr	r1, [pc, #4]	; (8001ccc <gc_sync_position+0x8>)
 8001cc6:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <gc_sync_position+0xc>)
 8001cc8:	f007 bcf6 	b.w	80096b8 <system_convert_array_steps_to_mpos>
 8001ccc:	200010d8 	.word	0x200010d8
 8001cd0:	20001030 	.word	0x20001030

08001cd4 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8001cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd8:	4607      	mov	r7, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001cda:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8001f84 <gc_execute_line+0x2b0>
 8001cde:	2248      	movs	r2, #72	; 0x48
 8001ce0:	2100      	movs	r1, #0
{
 8001ce2:	b0a1      	sub	sp, #132	; 0x84
  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001ce4:	4648      	mov	r0, r9
 8001ce6:	f008 ffd8 	bl	800ac9a <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 8001cea:	4ba2      	ldr	r3, [pc, #648]	; (8001f74 <gc_execute_line+0x2a0>)
 8001cec:	cb03      	ldmia	r3!, {r0, r1}
 8001cee:	881c      	ldrh	r4, [r3, #0]
 8001cf0:	789a      	ldrb	r2, [r3, #2]
 8001cf2:	f8c9 0001 	str.w	r0, [r9, #1]
 8001cf6:	f8c9 1005 	str.w	r1, [r9, #5]
 8001cfa:	f8a9 4009 	strh.w	r4, [r9, #9]
 8001cfe:	f889 200b 	strb.w	r2, [r9, #11]
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  uint16_t value_words = 0; // Tracks value words.
  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8001d02:	783b      	ldrb	r3, [r7, #0]
 8001d04:	2b24      	cmp	r3, #36	; 0x24
 8001d06:	f000 8124 	beq.w	8001f52 <gc_execute_line+0x27e>
 8001d0a:	2310      	movs	r3, #16
  char letter;
  float value;
  uint8_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d10:	2304      	movs	r3, #4
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 8001d12:	9209      	str	r2, [sp, #36]	; 0x24
 8001d14:	930a      	str	r3, [sp, #40]	; 0x28
            word_bit = MODAL_GROUP_M8;
            switch(int_value) {
              #ifdef ENABLE_M7
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
              #endif
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8001d16:	f04f 0800 	mov.w	r8, #0
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001d1a:	5cbd      	ldrb	r5, [r7, r2]
 8001d1c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8001d20:	4644      	mov	r4, r8
 8001d22:	f8cd 8020 	str.w	r8, [sp, #32]
 8001d26:	f8cd 8018 	str.w	r8, [sp, #24]
 8001d2a:	f8cd 801c 	str.w	r8, [sp, #28]
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	f000 80ec 	beq.w	8001f0c <gc_execute_line+0x238>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8001d34:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 8001d38:	b2f3      	uxtb	r3, r6
 8001d3a:	2b19      	cmp	r3, #25
 8001d3c:	f200 82ad 	bhi.w	800229a <gc_execute_line+0x5c6>
    char_counter++;
 8001d40:	1c53      	adds	r3, r2, #1
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001d42:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 8001d46:	aa18      	add	r2, sp, #96	; 0x60
 8001d48:	4638      	mov	r0, r7
    char_counter++;
 8001d4a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001d4e:	f002 f855 	bl	8003dfc <read_float>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	f000 82a6 	beq.w	80022a4 <gc_execute_line+0x5d0>
    int_value = truncf(value);
 8001d58:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8001d5c:	4658      	mov	r0, fp
 8001d5e:	f7ff f9a9 	bl	80010b4 <__aeabi_f2uiz>
 8001d62:	fa5f fa80 	uxtb.w	sl, r0
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001d66:	4650      	mov	r0, sl
 8001d68:	f7fe ff4e 	bl	8000c08 <__aeabi_i2f>
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	4658      	mov	r0, fp
 8001d70:	f7fe fe94 	bl	8000a9c <__aeabi_fsub>
 8001d74:	4980      	ldr	r1, [pc, #512]	; (8001f78 <gc_execute_line+0x2a4>)
 8001d76:	f7fe ff9b 	bl	8000cb0 <__aeabi_fmul>
 8001d7a:	f009 f84b 	bl	800ae14 <lroundf>
    switch(letter) {
 8001d7e:	2d47      	cmp	r5, #71	; 0x47
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001d80:	b282      	uxth	r2, r0
    switch(letter) {
 8001d82:	d028      	beq.n	8001dd6 <gc_execute_line+0x102>
 8001d84:	2d4d      	cmp	r5, #77	; 0x4d
 8001d86:	f040 808b 	bne.w	8001ea0 <gc_execute_line+0x1cc>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	f040 82c9 	bne.w	8002322 <gc_execute_line+0x64e>
 8001d90:	f1ba 0f1e 	cmp.w	sl, #30
 8001d94:	f200 810d 	bhi.w	8001fb2 <gc_execute_line+0x2de>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	4a78      	ldr	r2, [pc, #480]	; (8001f7c <gc_execute_line+0x2a8>)
 8001d9c:	fa03 f30a 	lsl.w	r3, r3, sl
 8001da0:	4213      	tst	r3, r2
 8001da2:	f040 809c 	bne.w	8001ede <gc_execute_line+0x20a>
 8001da6:	f413 7f60 	tst.w	r3, #896	; 0x380
 8001daa:	f040 80c2 	bne.w	8001f32 <gc_execute_line+0x25e>
 8001dae:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001db2:	f000 80fe 	beq.w	8001fb2 <gc_execute_line+0x2de>
            switch(int_value) {
 8001db6:	f1ba 0f04 	cmp.w	sl, #4
 8001dba:	f000 8206 	beq.w	80021ca <gc_execute_line+0x4f6>
 8001dbe:	f1ba 0f05 	cmp.w	sl, #5
 8001dc2:	f000 828e 	beq.w	80022e2 <gc_execute_line+0x60e>
 8001dc6:	f1ba 0f03 	cmp.w	sl, #3
 8001dca:	f000 820c 	beq.w	80021e6 <gc_execute_line+0x512>
 8001dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	e08e      	b.n	8001ef4 <gc_execute_line+0x220>
        switch(int_value) {
 8001dd6:	f1ba 0f5e 	cmp.w	sl, #94	; 0x5e
 8001dda:	f200 80ea 	bhi.w	8001fb2 <gc_execute_line+0x2de>
 8001dde:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8001de2:	00d3      	.short	0x00d3
 8001de4:	00d300d3 	.word	0x00d300d3
 8001de8:	015100d3 	.word	0x015100d3
 8001dec:	00e800e8 	.word	0x00e800e8
 8001df0:	00e800e8 	.word	0x00e800e8
 8001df4:	013700e8 	.word	0x013700e8
 8001df8:	00e800e8 	.word	0x00e800e8
 8001dfc:	00e800e8 	.word	0x00e800e8
 8001e00:	00e800e8 	.word	0x00e800e8
 8001e04:	014b014b 	.word	0x014b014b
 8001e08:	0116014b 	.word	0x0116014b
 8001e0c:	00e80116 	.word	0x00e80116
 8001e10:	00e800e8 	.word	0x00e800e8
 8001e14:	00e800e8 	.word	0x00e800e8
 8001e18:	013700e8 	.word	0x013700e8
 8001e1c:	013700e8 	.word	0x013700e8
 8001e20:	00e800e8 	.word	0x00e800e8
 8001e24:	00e800e8 	.word	0x00e800e8
 8001e28:	00e800e8 	.word	0x00e800e8
 8001e2c:	00d300e8 	.word	0x00d300e8
 8001e30:	00f400e8 	.word	0x00f400e8
 8001e34:	00e800e8 	.word	0x00e800e8
 8001e38:	00e80126 	.word	0x00e80126
 8001e3c:	00e800e8 	.word	0x00e800e8
 8001e40:	00e800e8 	.word	0x00e800e8
 8001e44:	00e80126 	.word	0x00e80126
 8001e48:	00e800e8 	.word	0x00e800e8
 8001e4c:	011c0151 	.word	0x011c0151
 8001e50:	011c011c 	.word	0x011c011c
 8001e54:	011c011c 	.word	0x011c011c
 8001e58:	00e8011c 	.word	0x00e8011c
 8001e5c:	00e80122 	.word	0x00e80122
 8001e60:	00e800e8 	.word	0x00e800e8
 8001e64:	00e800e8 	.word	0x00e800e8
 8001e68:	00e800e8 	.word	0x00e800e8
 8001e6c:	00e800e8 	.word	0x00e800e8
 8001e70:	00e800e8 	.word	0x00e800e8
 8001e74:	00e800e8 	.word	0x00e800e8
 8001e78:	00e800e8 	.word	0x00e800e8
 8001e7c:	00e800e8 	.word	0x00e800e8
 8001e80:	010200e8 	.word	0x010200e8
 8001e84:	00e800e8 	.word	0x00e800e8
 8001e88:	00e800e8 	.word	0x00e800e8
 8001e8c:	00e800e8 	.word	0x00e800e8
 8001e90:	00e800e8 	.word	0x00e800e8
 8001e94:	010700e8 	.word	0x010700e8
 8001e98:	01370107 	.word	0x01370107
 8001e9c:	01100110 	.word	0x01100110
      default:

        /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
           legal g-code words and stores their value. Error-checking is performed later since some
           words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
        switch(letter){
 8001ea0:	2e19      	cmp	r6, #25
 8001ea2:	f200 8086 	bhi.w	8001fb2 <gc_execute_line+0x2de>
 8001ea6:	e8df f016 	tbh	[pc, r6, lsl #1]
 8001eaa:	017f      	.short	0x017f
 8001eac:	00840084 	.word	0x00840084
 8001eb0:	00840084 	.word	0x00840084
 8001eb4:	0084010d 	.word	0x0084010d
 8001eb8:	01380084 	.word	0x01380084
 8001ebc:	012f011d 	.word	0x012f011d
 8001ec0:	00840141 	.word	0x00840141
 8001ec4:	00840146 	.word	0x00840146
 8001ec8:	0084014e 	.word	0x0084014e
 8001ecc:	01580153 	.word	0x01580153
 8001ed0:	0084015e 	.word	0x0084015e
 8001ed4:	00840084 	.word	0x00840084
 8001ed8:	0175016b 	.word	0x0175016b
 8001edc:	00fd      	.short	0x00fd
            switch(int_value) {
 8001ede:	f1ba 0f00 	cmp.w	sl, #0
 8001ee2:	d06b      	beq.n	8001fbc <gc_execute_line+0x2e8>
 8001ee4:	f1ba 0f01 	cmp.w	sl, #1
 8001ee8:	d040      	beq.n	8001f6c <gc_execute_line+0x298>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 8001eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eee:	230b      	movs	r3, #11
 8001ef0:	f889 a008 	strb.w	sl, [r9, #8]
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001ef4:	fa44 f303 	asr.w	r3, r4, r3
 8001ef8:	07d9      	lsls	r1, r3, #31
 8001efa:	f100 820c 	bmi.w	8002316 <gc_execute_line+0x642>
        command_words |= bit(word_bit);
 8001efe:	4314      	orrs	r4, r2
 8001f00:	f89d 205f 	ldrb.w	r2, [sp, #95]	; 0x5f
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001f04:	5cbd      	ldrb	r5, [r7, r2]
 8001f06:	2d00      	cmp	r5, #0
 8001f08:	f47f af14 	bne.w	8001d34 <gc_execute_line+0x60>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

  // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
  // command has been sent. If so, set axis command to current motion mode.
  if (axis_words) {
 8001f0c:	9b06      	ldr	r3, [sp, #24]
 8001f0e:	b123      	cbz	r3, 8001f1a <gc_execute_line+0x246>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8001f10:	9b07      	ldr	r3, [sp, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf08      	it	eq
 8001f16:	2302      	moveq	r3, #2
 8001f18:	9307      	str	r3, [sp, #28]
  }

  // Check for valid line number N value.
  if (bit_istrue(value_words,bit(WORD_N))) {
 8001f1a:	f018 0f20 	tst.w	r8, #32
 8001f1e:	f000 8174 	beq.w	800220a <gc_execute_line+0x536>
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <gc_execute_line+0x2ac>)
 8001f24:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f340 816e 	ble.w	800220a <gc_execute_line+0x536>
 8001f2e:	241b      	movs	r4, #27
 8001f30:	e040      	b.n	8001fb4 <gc_execute_line+0x2e0>
            switch(int_value) {
 8001f32:	f1ba 0f08 	cmp.w	sl, #8
 8001f36:	f000 8141 	beq.w	80021bc <gc_execute_line+0x4e8>
 8001f3a:	f1ba 0f09 	cmp.w	sl, #9
 8001f3e:	f000 81b6 	beq.w	80022ae <gc_execute_line+0x5da>
 8001f42:	f1ba 0f07 	cmp.w	sl, #7
 8001f46:	f000 8147 	beq.w	80021d8 <gc_execute_line+0x504>
 8001f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4e:	230d      	movs	r3, #13
 8001f50:	e7d0      	b.n	8001ef4 <gc_execute_line+0x220>
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f889 3001 	strb.w	r3, [r9, #1]
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8001f58:	9309      	str	r3, [sp, #36]	; 0x24
 8001f5a:	2311      	movs	r3, #17
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f60:	2305      	movs	r3, #5
 8001f62:	f889 2002 	strb.w	r2, [r9, #2]
 8001f66:	930a      	str	r3, [sp, #40]	; 0x28
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 8001f68:	2203      	movs	r2, #3
 8001f6a:	e6d4      	b.n	8001d16 <gc_execute_line+0x42>
            switch(int_value) {
 8001f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f70:	230b      	movs	r3, #11
 8001f72:	e7bf      	b.n	8001ef4 <gc_execute_line+0x220>
 8001f74:	20001014 	.word	0x20001014
 8001f78:	42c80000 	.word	0x42c80000
 8001f7c:	40000007 	.word	0x40000007
 8001f80:	00989680 	.word	0x00989680
 8001f84:	20001064 	.word	0x20001064
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8001f88:	9b07      	ldr	r3, [sp, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 8300 	bne.w	8002590 <gc_execute_line+0x8bc>
            if (int_value == 38){
 8001f90:	f1ba 0f26 	cmp.w	sl, #38	; 0x26
            gc_block.modal.motion = int_value;
 8001f94:	f889 a001 	strb.w	sl, [r9, #1]
            if (int_value == 38){
 8001f98:	f040 81bf 	bne.w	800231a <gc_execute_line+0x646>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8001f9c:	f1a2 0314 	sub.w	r3, r2, #20
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b1e      	cmp	r3, #30
 8001fa4:	d805      	bhi.n	8001fb2 <gc_execute_line+0x2de>
 8001fa6:	49c5      	ldr	r1, [pc, #788]	; (80022bc <gc_execute_line+0x5e8>)
 8001fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8001fac:	07dd      	lsls	r5, r3, #31
 8001fae:	f100 8121 	bmi.w	80021f4 <gc_execute_line+0x520>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
      if (gc_block.values.l != 20) {
        if (gc_block.values.l == 2) {
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8001fb2:	2414      	movs	r4, #20
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
}
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	b021      	add	sp, #132	; 0x84
 8001fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc2:	f889 3008 	strb.w	r3, [r9, #8]
 8001fc6:	230b      	movs	r3, #11
 8001fc8:	e794      	b.n	8001ef4 <gc_execute_line+0x220>
        switch(int_value) {
 8001fca:	2107      	movs	r1, #7
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	f040 81a8 	bne.w	8002322 <gc_execute_line+0x64e>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001fd2:	fa44 f301 	asr.w	r3, r4, r1
 8001fd6:	07d8      	lsls	r0, r3, #31
 8001fd8:	f100 819d 	bmi.w	8002316 <gc_execute_line+0x642>
        command_words |= bit(word_bit);
 8001fdc:	2301      	movs	r3, #1
 8001fde:	408b      	lsls	r3, r1
 8001fe0:	431c      	orrs	r4, r3
 8001fe2:	b2a4      	uxth	r4, r4
        break;
 8001fe4:	e78c      	b.n	8001f00 <gc_execute_line+0x22c>
            gc_block.modal.motion = int_value;
 8001fe6:	2350      	movs	r3, #80	; 0x50
 8001fe8:	2101      	movs	r1, #1
 8001fea:	f889 3001 	strb.w	r3, [r9, #1]
 8001fee:	e7ed      	b.n	8001fcc <gc_execute_line+0x2f8>
            if (mantissa == 0) {
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	f040 8187 	bne.w	8002304 <gc_execute_line+0x630>
              gc_block.modal.distance = int_value - 90;
 8001ff6:	f1aa 0a5a 	sub.w	sl, sl, #90	; 0x5a
 8001ffa:	f889 a004 	strb.w	sl, [r9, #4]
 8001ffe:	2103      	movs	r1, #3
 8002000:	e7e7      	b.n	8001fd2 <gc_execute_line+0x2fe>
            gc_block.modal.feed_rate = 94 - int_value;
 8002002:	f1ca 0a5e 	rsb	sl, sl, #94	; 0x5e
 8002006:	f889 a002 	strb.w	sl, [r9, #2]
            break;
 800200a:	2105      	movs	r1, #5
 800200c:	e7de      	b.n	8001fcc <gc_execute_line+0x2f8>
            gc_block.modal.units = 21 - int_value;
 800200e:	f1ca 0a15 	rsb	sl, sl, #21
 8002012:	f889 a003 	strb.w	sl, [r9, #3]
            break;
 8002016:	2106      	movs	r1, #6
 8002018:	e7d8      	b.n	8001fcc <gc_execute_line+0x2f8>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 800201a:	f1aa 0a36 	sub.w	sl, sl, #54	; 0x36
 800201e:	f889 a007 	strb.w	sl, [r9, #7]
            break;
 8002022:	2109      	movs	r1, #9
 8002024:	e7d2      	b.n	8001fcc <gc_execute_line+0x2f8>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 8002026:	2a00      	cmp	r2, #0
 8002028:	d1c3      	bne.n	8001fb2 <gc_execute_line+0x2de>
 800202a:	210a      	movs	r1, #10
 800202c:	e7d1      	b.n	8001fd2 <gc_execute_line+0x2fe>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 800202e:	9b07      	ldr	r3, [sp, #28]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f040 82ad 	bne.w	8002590 <gc_execute_line+0x8bc>
            if (int_value == 49) { // G49
 8002036:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800203a:	f000 817c 	beq.w	8002336 <gc_execute_line+0x662>
            } else if (mantissa == 10) { // G43.1
 800203e:	2a0a      	cmp	r2, #10
 8002040:	d1b7      	bne.n	8001fb2 <gc_execute_line+0x2de>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8002042:	2301      	movs	r3, #1
 8002044:	f889 3006 	strb.w	r3, [r9, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8002048:	2303      	movs	r3, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 800204a:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 800204c:	9307      	str	r3, [sp, #28]
 800204e:	e7c0      	b.n	8001fd2 <gc_execute_line+0x2fe>
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 8002050:	2a00      	cmp	r2, #0
 8002052:	f040 814d 	bne.w	80022f0 <gc_execute_line+0x61c>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8002056:	9b07      	ldr	r3, [sp, #28]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 8299 	bne.w	8002590 <gc_execute_line+0x8bc>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800205e:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 8002062:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002066:	f000 8163 	beq.w	8002330 <gc_execute_line+0x65c>
 800206a:	f1ba 0f1e 	cmp.w	sl, #30
 800206e:	f000 815f 	beq.w	8002330 <gc_execute_line+0x65c>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8002072:	2301      	movs	r3, #1
 8002074:	9307      	str	r3, [sp, #28]
 8002076:	e00f      	b.n	8002098 <gc_execute_line+0x3c4>
            gc_block.modal.plane_select = int_value - 17;
 8002078:	f1aa 0a11 	sub.w	sl, sl, #17
 800207c:	f889 a005 	strb.w	sl, [r9, #5]
            break;
 8002080:	2102      	movs	r1, #2
 8002082:	e7a3      	b.n	8001fcc <gc_execute_line+0x2f8>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002084:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 8002088:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800208c:	f000 8120 	beq.w	80022d0 <gc_execute_line+0x5fc>
 8002090:	f1ba 0f1e 	cmp.w	sl, #30
 8002094:	f000 811c 	beq.w	80022d0 <gc_execute_line+0x5fc>
 8002098:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
 800209c:	f000 8118 	beq.w	80022d0 <gc_execute_line+0x5fc>
 80020a0:	2100      	movs	r1, #0
 80020a2:	e793      	b.n	8001fcc <gc_execute_line+0x2f8>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 80020a4:	9b06      	ldr	r3, [sp, #24]
 80020a6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	9306      	str	r3, [sp, #24]
 80020b0:	230c      	movs	r3, #12
 80020b2:	f8c9 b040 	str.w	fp, [r9, #64]	; 0x40
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80020b6:	fa48 f303 	asr.w	r3, r8, r3
 80020ba:	07db      	lsls	r3, r3, #31
 80020bc:	d41f      	bmi.n	80020fe <gc_execute_line+0x42a>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 80020be:	ea45 0808 	orr.w	r8, r5, r8
 80020c2:	e71d      	b.n	8001f00 <gc_execute_line+0x22c>
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 80020c4:	2501      	movs	r5, #1
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c9 b00c 	str.w	fp, [r9, #12]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80020cc:	fa48 f303 	asr.w	r3, r8, r3
 80020d0:	07da      	lsls	r2, r3, #31
 80020d2:	d414      	bmi.n	80020fe <gc_execute_line+0x42a>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 80020d4:	4658      	mov	r0, fp
 80020d6:	2100      	movs	r1, #0
 80020d8:	f7fe ff88 	bl	8000fec <__aeabi_fcmplt>
 80020dc:	2800      	cmp	r0, #0
 80020de:	d0ee      	beq.n	80020be <gc_execute_line+0x3ea>
 80020e0:	2404      	movs	r4, #4
 80020e2:	e767      	b.n	8001fb4 <gc_execute_line+0x2e0>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 80020e4:	9b08      	ldr	r3, [sp, #32]
 80020e6:	f8c9 b014 	str.w	fp, [r9, #20]
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	9308      	str	r3, [sp, #32]
 80020f0:	2302      	movs	r3, #2
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80020f2:	fa48 f303 	asr.w	r3, r8, r3
 80020f6:	07db      	lsls	r3, r3, #31
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 80020f8:	f04f 0504 	mov.w	r5, #4
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80020fc:	d5df      	bpl.n	80020be <gc_execute_line+0x3ea>
 80020fe:	2419      	movs	r4, #25
}
 8002100:	4620      	mov	r0, r4
 8002102:	b021      	add	sp, #132	; 0x84
 8002104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8002108:	9b08      	ldr	r3, [sp, #32]
 800210a:	f8c9 b018 	str.w	fp, [r9, #24]
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	9308      	str	r3, [sp, #32]
 8002114:	2508      	movs	r5, #8
 8002116:	2303      	movs	r3, #3
 8002118:	e7cd      	b.n	80020b6 <gc_execute_line+0x3e2>
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 800211a:	9b08      	ldr	r3, [sp, #32]
 800211c:	f8c9 b010 	str.w	fp, [r9, #16]
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	9308      	str	r3, [sp, #32]
 8002126:	2502      	movs	r5, #2
 8002128:	2301      	movs	r3, #1
 800212a:	e7c4      	b.n	80020b6 <gc_execute_line+0x3e2>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 800212c:	f889 a020 	strb.w	sl, [r9, #32]
 8002130:	2510      	movs	r5, #16
 8002132:	2304      	movs	r3, #4
 8002134:	e7bf      	b.n	80020b6 <gc_execute_line+0x3e2>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 8002136:	4658      	mov	r0, fp
 8002138:	f7fe ff96 	bl	8001068 <__aeabi_f2iz>
 800213c:	2520      	movs	r5, #32
 800213e:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 8002142:	2305      	movs	r3, #5
 8002144:	e7c2      	b.n	80020cc <gc_execute_line+0x3f8>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 8002146:	f8c9 b028 	str.w	fp, [r9, #40]	; 0x28
 800214a:	2540      	movs	r5, #64	; 0x40
 800214c:	2306      	movs	r3, #6
 800214e:	e7bd      	b.n	80020cc <gc_execute_line+0x3f8>
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 8002150:	f8c9 b02c 	str.w	fp, [r9, #44]	; 0x2c
 8002154:	2580      	movs	r5, #128	; 0x80
 8002156:	2307      	movs	r3, #7
 8002158:	e7ad      	b.n	80020b6 <gc_execute_line+0x3e2>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 800215a:	f8c9 b030 	str.w	fp, [r9, #48]	; 0x30
 800215e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002162:	2308      	movs	r3, #8
 8002164:	e7b2      	b.n	80020cc <gc_execute_line+0x3f8>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8002166:	4956      	ldr	r1, [pc, #344]	; (80022c0 <gc_execute_line+0x5ec>)
 8002168:	4658      	mov	r0, fp
 800216a:	f7fe ff5d 	bl	8001028 <__aeabi_fcmpgt>
 800216e:	2800      	cmp	r0, #0
 8002170:	f040 8215 	bne.w	800259e <gc_execute_line+0x8ca>
					gc_block.values.t = int_value;
 8002174:	f889 a034 	strb.w	sl, [r9, #52]	; 0x34
				break;
 8002178:	f44f 7500 	mov.w	r5, #512	; 0x200
 800217c:	2309      	movs	r3, #9
 800217e:	e7a5      	b.n	80020cc <gc_execute_line+0x3f8>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 8002180:	9b06      	ldr	r3, [sp, #24]
 8002182:	f8c9 b038 	str.w	fp, [r9, #56]	; 0x38
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	9306      	str	r3, [sp, #24]
 800218c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002190:	230a      	movs	r3, #10
 8002192:	e790      	b.n	80020b6 <gc_execute_line+0x3e2>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 8002194:	9b06      	ldr	r3, [sp, #24]
 8002196:	f8c9 b03c 	str.w	fp, [r9, #60]	; 0x3c
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	9306      	str	r3, [sp, #24]
 80021a0:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80021a4:	230b      	movs	r3, #11
 80021a6:	e786      	b.n	80020b6 <gc_execute_line+0x3e2>
		  case 'A': word_bit = WORD_A; gc_block.values.xyz[A_AXIS] = value; axis_words |= (1<<A_AXIS); break;
 80021a8:	9b06      	ldr	r3, [sp, #24]
 80021aa:	f8c9 b044 	str.w	fp, [r9, #68]	; 0x44
 80021ae:	f043 0308 	orr.w	r3, r3, #8
 80021b2:	9306      	str	r3, [sp, #24]
 80021b4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 80021b8:	230d      	movs	r3, #13
 80021ba:	e77c      	b.n	80020b6 <gc_execute_line+0x3e2>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 80021bc:	2340      	movs	r3, #64	; 0x40
 80021be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c2:	f889 3009 	strb.w	r3, [r9, #9]
 80021c6:	230d      	movs	r3, #13
 80021c8:	e694      	b.n	8001ef4 <gc_execute_line+0x220>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 80021ca:	2320      	movs	r3, #32
 80021cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021d0:	f889 300a 	strb.w	r3, [r9, #10]
 80021d4:	230c      	movs	r3, #12
 80021d6:	e68d      	b.n	8001ef4 <gc_execute_line+0x220>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021de:	f889 3009 	strb.w	r3, [r9, #9]
 80021e2:	230d      	movs	r3, #13
 80021e4:	e686      	b.n	8001ef4 <gc_execute_line+0x220>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 80021e6:	2310      	movs	r3, #16
 80021e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ec:	f889 300a 	strb.w	r3, [r9, #10]
 80021f0:	230c      	movs	r3, #12
 80021f2:	e67f      	b.n	8001ef4 <gc_execute_line+0x220>
              gc_block.modal.motion += (mantissa/10)+100;
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <gc_execute_line+0x5f0>)
 80021f6:	2101      	movs	r1, #1
 80021f8:	fba3 2302 	umull	r2, r3, r3, r2
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	3b76      	subs	r3, #118	; 0x76
 8002200:	f889 3001 	strb.w	r3, [r9, #1]
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8002204:	2302      	movs	r3, #2
 8002206:	9307      	str	r3, [sp, #28]
 8002208:	e6e3      	b.n	8001fd2 <gc_execute_line+0x2fe>
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 800220a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	f040 808a 	bne.w	8002326 <gc_execute_line+0x652>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 8002212:	f899 3002 	ldrb.w	r3, [r9, #2]
 8002216:	2b01      	cmp	r3, #1
 8002218:	f000 8106 	beq.w	8002428 <gc_execute_line+0x754>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <gc_execute_line+0x5f4>)
 800221e:	785b      	ldrb	r3, [r3, #1]
 8002220:	b93b      	cbnz	r3, 8002232 <gc_execute_line+0x55e>
        if (bit_istrue(value_words,bit(WORD_F))) {
 8002222:	f018 0f01 	tst.w	r8, #1
 8002226:	f040 80a5 	bne.w	8002374 <gc_execute_line+0x6a0>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 800222a:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <gc_execute_line+0x5f4>)
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f8c9 300c 	str.w	r3, [r9, #12]
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 8002232:	f418 7f80 	tst.w	r8, #256	; 0x100
 8002236:	d103      	bne.n	8002240 <gc_execute_line+0x56c>
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <gc_execute_line+0x5f4>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 8002240:	f899 5000 	ldrb.w	r5, [r9]
 8002244:	2d04      	cmp	r5, #4
 8002246:	f000 80b4 	beq.w	80023b2 <gc_execute_line+0x6de>
  switch (gc_block.modal.plane_select) {
 800224a:	f899 3005 	ldrb.w	r3, [r9, #5]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80a6 	beq.w	80023a0 <gc_execute_line+0x6cc>
 8002254:	2b01      	cmp	r3, #1
 8002256:	f040 809a 	bne.w	800238e <gc_execute_line+0x6ba>
 800225a:	2600      	movs	r6, #0
 800225c:	2702      	movs	r7, #2
      axis_linear = Y_AXIS;
 800225e:	9310      	str	r3, [sp, #64]	; 0x40
  switch (gc_block.modal.plane_select) {
 8002260:	2305      	movs	r3, #5
      axis_1 = X_AXIS;
 8002262:	960f      	str	r6, [sp, #60]	; 0x3c
      axis_0 = Z_AXIS;
 8002264:	970e      	str	r7, [sp, #56]	; 0x38
  switch (gc_block.modal.plane_select) {
 8002266:	930d      	str	r3, [sp, #52]	; 0x34
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002268:	f899 3003 	ldrb.w	r3, [r9, #3]
 800226c:	2b01      	cmp	r3, #1
 800226e:	f000 80a6 	beq.w	80023be <gc_execute_line+0x6ea>
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 8002272:	9b07      	ldr	r3, [sp, #28]
 8002274:	2b03      	cmp	r3, #3
 8002276:	f000 80cc 	beq.w	8002412 <gc_execute_line+0x73e>
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 800227a:	f8df b050 	ldr.w	fp, [pc, #80]	; 80022cc <gc_execute_line+0x5f8>
 800227e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 8002282:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8002286:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 800228a:	05a3      	lsls	r3, r4, #22
 800228c:	d567      	bpl.n	800235e <gc_execute_line+0x68a>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 800228e:	f899 0007 	ldrb.w	r0, [r9, #7]
 8002292:	2806      	cmp	r0, #6
 8002294:	d957      	bls.n	8002346 <gc_execute_line+0x672>
 8002296:	241d      	movs	r4, #29
 8002298:	e68c      	b.n	8001fb4 <gc_execute_line+0x2e0>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 800229a:	2401      	movs	r4, #1
}
 800229c:	4620      	mov	r0, r4
 800229e:	b021      	add	sp, #132	; 0x84
 80022a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 80022a4:	2402      	movs	r4, #2
}
 80022a6:	4620      	mov	r0, r4
 80022a8:	b021      	add	sp, #132	; 0x84
 80022aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b4:	f889 3009 	strb.w	r3, [r9, #9]
 80022b8:	230d      	movs	r3, #13
 80022ba:	e61b      	b.n	8001ef4 <gc_execute_line+0x220>
 80022bc:	40100401 	.word	0x40100401
 80022c0:	437f0000 	.word	0x437f0000
 80022c4:	cccccccd 	.word	0xcccccccd
 80022c8:	20001014 	.word	0x20001014
 80022cc:	20001040 	.word	0x20001040
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 80022d0:	b112      	cbz	r2, 80022d8 <gc_execute_line+0x604>
 80022d2:	2a0a      	cmp	r2, #10
 80022d4:	f47f ae6d 	bne.w	8001fb2 <gc_execute_line+0x2de>
              gc_block.non_modal_command += mantissa;
 80022d8:	4450      	add	r0, sl
 80022da:	f889 0000 	strb.w	r0, [r9]
 80022de:	2100      	movs	r1, #0
 80022e0:	e677      	b.n	8001fd2 <gc_execute_line+0x2fe>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e8:	f889 300a 	strb.w	r3, [r9, #10]
 80022ec:	230c      	movs	r3, #12
 80022ee:	e601      	b.n	8001ef4 <gc_execute_line+0x220>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80022f0:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 80022f4:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80022f8:	d0eb      	beq.n	80022d2 <gc_execute_line+0x5fe>
 80022fa:	f1ba 0f1e 	cmp.w	sl, #30
 80022fe:	f47f aecb 	bne.w	8002098 <gc_execute_line+0x3c4>
 8002302:	e7e6      	b.n	80022d2 <gc_execute_line+0x5fe>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 8002304:	2a0a      	cmp	r2, #10
 8002306:	f47f ae54 	bne.w	8001fb2 <gc_execute_line+0x2de>
 800230a:	f1ba 0f5a 	cmp.w	sl, #90	; 0x5a
 800230e:	f43f ae50 	beq.w	8001fb2 <gc_execute_line+0x2de>
 8002312:	2104      	movs	r1, #4
 8002314:	e65d      	b.n	8001fd2 <gc_execute_line+0x2fe>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8002316:	2415      	movs	r4, #21
 8002318:	e64c      	b.n	8001fb4 <gc_execute_line+0x2e0>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 800231a:	2302      	movs	r3, #2
 800231c:	2101      	movs	r1, #1
 800231e:	9307      	str	r3, [sp, #28]
 8002320:	e654      	b.n	8001fcc <gc_execute_line+0x2f8>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8002322:	2417      	movs	r4, #23
 8002324:	e646      	b.n	8001fb4 <gc_execute_line+0x2e0>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8002326:	f018 0f01 	tst.w	r8, #1
 800232a:	d123      	bne.n	8002374 <gc_execute_line+0x6a0>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 800232c:	2416      	movs	r4, #22
 800232e:	e641      	b.n	8001fb4 <gc_execute_line+0x2e0>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8002330:	2301      	movs	r3, #1
 8002332:	9307      	str	r3, [sp, #28]
 8002334:	e7d0      	b.n	80022d8 <gc_execute_line+0x604>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 8002336:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800233a:	2108      	movs	r1, #8
 800233c:	f889 3006 	strb.w	r3, [r9, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8002340:	2303      	movs	r3, #3
 8002342:	9307      	str	r3, [sp, #28]
 8002344:	e645      	b.n	8001fd2 <gc_execute_line+0x2fe>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002346:	4ba9      	ldr	r3, [pc, #676]	; (80025ec <gc_execute_line+0x918>)
 8002348:	799b      	ldrb	r3, [r3, #6]
 800234a:	4283      	cmp	r3, r0
 800234c:	d007      	beq.n	800235e <gc_execute_line+0x68a>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 800234e:	4651      	mov	r1, sl
 8002350:	f005 fa3a 	bl	80077c8 <settings_read_coord_data>
 8002354:	2800      	cmp	r0, #0
 8002356:	f000 8119 	beq.w	800258c <gc_execute_line+0x8b8>
 800235a:	f899 5000 	ldrb.w	r5, [r9]
  switch (gc_block.non_modal_command) {
 800235e:	2d0a      	cmp	r5, #10
 8002360:	f000 80e8 	beq.w	8002534 <gc_execute_line+0x860>
 8002364:	2d5c      	cmp	r5, #92	; 0x5c
 8002366:	d170      	bne.n	800244a <gc_execute_line+0x776>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002368:	9b06      	ldr	r3, [sp, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 8146 	bne.w	80025fc <gc_execute_line+0x928>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002370:	241a      	movs	r4, #26
 8002372:	e61f      	b.n	8001fb4 <gc_execute_line+0x2e0>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 8002374:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002378:	2b01      	cmp	r3, #1
 800237a:	f47f af5a 	bne.w	8002232 <gc_execute_line+0x55e>
 800237e:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002382:	499b      	ldr	r1, [pc, #620]	; (80025f0 <gc_execute_line+0x91c>)
 8002384:	f7fe fc94 	bl	8000cb0 <__aeabi_fmul>
 8002388:	f8c9 000c 	str.w	r0, [r9, #12]
 800238c:	e751      	b.n	8002232 <gc_execute_line+0x55e>
 800238e:	2306      	movs	r3, #6
 8002390:	2602      	movs	r6, #2
 8002392:	2701      	movs	r7, #1
 8002394:	930d      	str	r3, [sp, #52]	; 0x34
      axis_linear = X_AXIS;
 8002396:	2300      	movs	r3, #0
      axis_1 = Z_AXIS;
 8002398:	960f      	str	r6, [sp, #60]	; 0x3c
      axis_0 = Y_AXIS;
 800239a:	970e      	str	r7, [sp, #56]	; 0x38
      axis_linear = X_AXIS;
 800239c:	9310      	str	r3, [sp, #64]	; 0x40
 800239e:	e763      	b.n	8002268 <gc_execute_line+0x594>
  switch (gc_block.modal.plane_select) {
 80023a0:	461f      	mov	r7, r3
      axis_0 = X_AXIS;
 80023a2:	930e      	str	r3, [sp, #56]	; 0x38
  switch (gc_block.modal.plane_select) {
 80023a4:	2303      	movs	r3, #3
 80023a6:	2601      	movs	r6, #1
 80023a8:	930d      	str	r3, [sp, #52]	; 0x34
      axis_linear = Z_AXIS;
 80023aa:	2302      	movs	r3, #2
      axis_1 = Y_AXIS;
 80023ac:	960f      	str	r6, [sp, #60]	; 0x3c
      axis_linear = Z_AXIS;
 80023ae:	9310      	str	r3, [sp, #64]	; 0x40
 80023b0:	e75a      	b.n	8002268 <gc_execute_line+0x594>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 80023b2:	f018 0f40 	tst.w	r8, #64	; 0x40
 80023b6:	f040 80ed 	bne.w	8002594 <gc_execute_line+0x8c0>
 80023ba:	241c      	movs	r4, #28
 80023bc:	e5fa      	b.n	8001fb4 <gc_execute_line+0x2e0>
      if (bit_istrue(axis_words,bit(idx)) ) {
 80023be:	9b06      	ldr	r3, [sp, #24]
 80023c0:	07da      	lsls	r2, r3, #31
 80023c2:	d507      	bpl.n	80023d4 <gc_execute_line+0x700>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 80023c4:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 80023c8:	4989      	ldr	r1, [pc, #548]	; (80025f0 <gc_execute_line+0x91c>)
 80023ca:	f7fe fc71 	bl	8000cb0 <__aeabi_fmul>
 80023ce:	9b06      	ldr	r3, [sp, #24]
 80023d0:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
      if (bit_istrue(axis_words,bit(idx)) ) {
 80023d4:	0798      	lsls	r0, r3, #30
 80023d6:	d507      	bpl.n	80023e8 <gc_execute_line+0x714>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 80023d8:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 80023dc:	4984      	ldr	r1, [pc, #528]	; (80025f0 <gc_execute_line+0x91c>)
 80023de:	f7fe fc67 	bl	8000cb0 <__aeabi_fmul>
 80023e2:	9b06      	ldr	r3, [sp, #24]
 80023e4:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
      if (bit_istrue(axis_words,bit(idx)) ) {
 80023e8:	0759      	lsls	r1, r3, #29
 80023ea:	d507      	bpl.n	80023fc <gc_execute_line+0x728>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 80023ec:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 80023f0:	497f      	ldr	r1, [pc, #508]	; (80025f0 <gc_execute_line+0x91c>)
 80023f2:	f7fe fc5d 	bl	8000cb0 <__aeabi_fmul>
 80023f6:	9b06      	ldr	r3, [sp, #24]
 80023f8:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
      if (bit_istrue(axis_words,bit(idx)) ) {
 80023fc:	071a      	lsls	r2, r3, #28
 80023fe:	f57f af38 	bpl.w	8002272 <gc_execute_line+0x59e>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002402:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 8002406:	497a      	ldr	r1, [pc, #488]	; (80025f0 <gc_execute_line+0x91c>)
 8002408:	f7fe fc52 	bl	8000cb0 <__aeabi_fmul>
 800240c:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 8002410:	e72f      	b.n	8002272 <gc_execute_line+0x59e>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 8002412:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002416:	2b01      	cmp	r3, #1
 8002418:	f47f af2f 	bne.w	800227a <gc_execute_line+0x5a6>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 800241c:	9b06      	ldr	r3, [sp, #24]
 800241e:	2b04      	cmp	r3, #4
 8002420:	f43f af2b 	beq.w	800227a <gc_execute_line+0x5a6>
 8002424:	2425      	movs	r4, #37	; 0x25
 8002426:	e5c5      	b.n	8001fb4 <gc_execute_line+0x2e0>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002428:	9b07      	ldr	r3, [sp, #28]
 800242a:	2b02      	cmp	r3, #2
 800242c:	f47f af01 	bne.w	8002232 <gc_execute_line+0x55e>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 8002430:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002434:	2b50      	cmp	r3, #80	; 0x50
 8002436:	f43f aefc 	beq.w	8002232 <gc_execute_line+0x55e>
 800243a:	2b00      	cmp	r3, #0
 800243c:	f43f aef9 	beq.w	8002232 <gc_execute_line+0x55e>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 8002440:	f018 0f01 	tst.w	r8, #1
 8002444:	f43f af72 	beq.w	800232c <gc_execute_line+0x658>
 8002448:	e6f3      	b.n	8002232 <gc_execute_line+0x55e>
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 800244a:	9b07      	ldr	r3, [sp, #28]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d04c      	beq.n	80024ea <gc_execute_line+0x816>
        if (axis_words) {
 8002450:	9a06      	ldr	r2, [sp, #24]
 8002452:	2a00      	cmp	r2, #0
 8002454:	d049      	beq.n	80024ea <gc_execute_line+0x816>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 8002456:	4965      	ldr	r1, [pc, #404]	; (80025ec <gc_execute_line+0x918>)
 8002458:	f899 3004 	ldrb.w	r3, [r9, #4]
 800245c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800245e:	910c      	str	r1, [sp, #48]	; 0x30
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 8117 	bne.w	8002694 <gc_execute_line+0x9c0>
 8002466:	2d35      	cmp	r5, #53	; 0x35
 8002468:	4613      	mov	r3, r2
 800246a:	f000 809e 	beq.w	80025aa <gc_execute_line+0x8d6>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800246e:	07d0      	lsls	r0, r2, #31
 8002470:	f140 81c2 	bpl.w	80027f8 <gc_execute_line+0xb24>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002474:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002478:	981c      	ldr	r0, [sp, #112]	; 0x70
 800247a:	f7fe fb11 	bl	8000aa0 <__addsf3>
 800247e:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <gc_execute_line+0x918>)
 8002480:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002482:	f7fe fb0d 	bl	8000aa0 <__addsf3>
 8002486:	9b06      	ldr	r3, [sp, #24]
 8002488:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800248c:	0799      	lsls	r1, r3, #30
 800248e:	f140 81ae 	bpl.w	80027ee <gc_execute_line+0xb1a>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002492:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002496:	981d      	ldr	r0, [sp, #116]	; 0x74
 8002498:	f7fe fb02 	bl	8000aa0 <__addsf3>
 800249c:	4b53      	ldr	r3, [pc, #332]	; (80025ec <gc_execute_line+0x918>)
 800249e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80024a0:	f7fe fafe 	bl	8000aa0 <__addsf3>
 80024a4:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80024a8:	9b06      	ldr	r3, [sp, #24]
 80024aa:	075a      	lsls	r2, r3, #29
 80024ac:	f140 8129 	bpl.w	8002702 <gc_execute_line+0xa2e>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80024b0:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 80024b4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80024b6:	f7fe faf3 	bl	8000aa0 <__addsf3>
 80024ba:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <gc_execute_line+0x918>)
 80024bc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024be:	f7fe faef 	bl	8000aa0 <__addsf3>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80024c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80024c4:	f7fe faec 	bl	8000aa0 <__addsf3>
 80024c8:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80024cc:	9b06      	ldr	r3, [sp, #24]
 80024ce:	071b      	lsls	r3, r3, #28
 80024d0:	f140 8112 	bpl.w	80026f8 <gc_execute_line+0xa24>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80024d4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80024d6:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 80024da:	f7fe fae1 	bl	8000aa0 <__addsf3>
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <gc_execute_line+0x918>)
 80024e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80024e2:	f7fe fadd 	bl	8000aa0 <__addsf3>
 80024e6:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
      switch (gc_block.non_modal_command) {
 80024ea:	2d1e      	cmp	r5, #30
 80024ec:	f000 813c 	beq.w	8002768 <gc_execute_line+0xa94>
 80024f0:	2d35      	cmp	r5, #53	; 0x35
 80024f2:	d075      	beq.n	80025e0 <gc_execute_line+0x90c>
 80024f4:	2d1c      	cmp	r5, #28
 80024f6:	f000 814b 	beq.w	8002790 <gc_execute_line+0xabc>
 80024fa:	f899 5001 	ldrb.w	r5, [r9, #1]
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 80024fe:	2d50      	cmp	r5, #80	; 0x50
 8002500:	f000 813f 	beq.w	8002782 <gc_execute_line+0xaae>
 8002504:	2300      	movs	r3, #0
 8002506:	930c      	str	r3, [sp, #48]	; 0x30
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 8002508:	9b07      	ldr	r3, [sp, #28]
 800250a:	2b02      	cmp	r3, #2
 800250c:	f000 810d 	beq.w	800272a <gc_execute_line+0xa56>
      switch (gc_block.modal.motion) {
 8002510:	9a09      	ldr	r2, [sp, #36]	; 0x24
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002512:	2a00      	cmp	r2, #0
 8002514:	d045      	beq.n	80025a2 <gc_execute_line+0x8ce>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 8002516:	f028 0821 	bic.w	r8, r8, #33	; 0x21
 800251a:	fa1f f388 	uxth.w	r3, r8
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A))); } // Remove axis words.
 800251e:	9907      	ldr	r1, [sp, #28]
 8002520:	b119      	cbz	r1, 800252a <gc_execute_line+0x856>
 8002522:	f423 5870 	bic.w	r8, r3, #15360	; 0x3c00
 8002526:	fa1f f388 	uxth.w	r3, r8
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 816f 	beq.w	800280e <gc_execute_line+0xb3a>
 8002530:	2424      	movs	r4, #36	; 0x24
 8002532:	e53f      	b.n	8001fb4 <gc_execute_line+0x2e0>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002534:	9b06      	ldr	r3, [sp, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f43f af1a 	beq.w	8002370 <gc_execute_line+0x69c>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 800253c:	f018 0f50 	tst.w	r8, #80	; 0x50
 8002540:	f43f af3b 	beq.w	80023ba <gc_execute_line+0x6e6>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 8002544:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002548:	f7fe fdb4 	bl	80010b4 <__aeabi_f2uiz>
 800254c:	b2c0      	uxtb	r0, r0
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 800254e:	2806      	cmp	r0, #6
 8002550:	f63f aea1 	bhi.w	8002296 <gc_execute_line+0x5c2>
      if (gc_block.values.l != 20) {
 8002554:	f899 3020 	ldrb.w	r3, [r9, #32]
 8002558:	2b14      	cmp	r3, #20
 800255a:	d006      	beq.n	800256a <gc_execute_line+0x896>
        if (gc_block.values.l == 2) {
 800255c:	2b02      	cmp	r3, #2
 800255e:	f47f ad28 	bne.w	8001fb2 <gc_execute_line+0x2de>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 8002562:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002566:	f47f ad24 	bne.w	8001fb2 <gc_execute_line+0x2de>
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 800256a:	f028 0850 	bic.w	r8, r8, #80	; 0x50
 800256e:	fa1f f888 	uxth.w	r8, r8
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 8002572:	2800      	cmp	r0, #0
 8002574:	f000 84b0 	beq.w	8002ed8 <gc_execute_line+0x1204>
 8002578:	3801      	subs	r0, #1
 800257a:	b2c3      	uxtb	r3, r0
 800257c:	930c      	str	r3, [sp, #48]	; 0x30
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 800257e:	491d      	ldr	r1, [pc, #116]	; (80025f4 <gc_execute_line+0x920>)
 8002580:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002582:	f005 f921 	bl	80077c8 <settings_read_coord_data>
 8002586:	2800      	cmp	r0, #0
 8002588:	f040 843e 	bne.w	8002e08 <gc_execute_line+0x1134>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 800258c:	2407      	movs	r4, #7
 800258e:	e511      	b.n	8001fb4 <gc_execute_line+0x2e0>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8002590:	2418      	movs	r4, #24
 8002592:	e50f      	b.n	8001fb4 <gc_execute_line+0x2e0>
    bit_false(value_words,bit(WORD_P));
 8002594:	f028 0840 	bic.w	r8, r8, #64	; 0x40
 8002598:	fa1f f888 	uxth.w	r8, r8
 800259c:	e655      	b.n	800224a <gc_execute_line+0x576>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 800259e:	2426      	movs	r4, #38	; 0x26
 80025a0:	e508      	b.n	8001fb4 <gc_execute_line+0x2e0>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <gc_execute_line+0x924>)
 80025a4:	ea08 0303 	and.w	r3, r8, r3
 80025a8:	e7b9      	b.n	800251e <gc_execute_line+0x84a>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80025aa:	07d8      	lsls	r0, r3, #31
 80025ac:	d404      	bmi.n	80025b8 <gc_execute_line+0x8e4>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <gc_execute_line+0x918>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 80025b6:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80025b8:	0799      	lsls	r1, r3, #30
 80025ba:	d404      	bmi.n	80025c6 <gc_execute_line+0x8f2>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <gc_execute_line+0x918>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80025c4:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80025c6:	075a      	lsls	r2, r3, #29
 80025c8:	d404      	bmi.n	80025d4 <gc_execute_line+0x900>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <gc_execute_line+0x918>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 80025d2:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80025d4:	071d      	lsls	r5, r3, #28
 80025d6:	d403      	bmi.n	80025e0 <gc_execute_line+0x90c>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <gc_execute_line+0x918>)
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 80025e0:	f899 5001 	ldrb.w	r5, [r9, #1]
 80025e4:	2d01      	cmp	r5, #1
 80025e6:	d98d      	bls.n	8002504 <gc_execute_line+0x830>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 80025e8:	241e      	movs	r4, #30
 80025ea:	e4e3      	b.n	8001fb4 <gc_execute_line+0x2e0>
 80025ec:	20001014 	.word	0x20001014
 80025f0:	41cb3333 	.word	0x41cb3333
 80025f4:	20001074 	.word	0x20001074
 80025f8:	fffffcde 	.word	0xfffffcde
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 80025fc:	4b8a      	ldr	r3, [pc, #552]	; (8002828 <gc_execute_line+0xb54>)
 80025fe:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002600:	9b06      	ldr	r3, [sp, #24]
 8002602:	07d9      	lsls	r1, r3, #31
 8002604:	f140 8087 	bpl.w	8002716 <gc_execute_line+0xa42>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002608:	4b87      	ldr	r3, [pc, #540]	; (8002828 <gc_execute_line+0xb54>)
 800260a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800260c:	69d8      	ldr	r0, [r3, #28]
 800260e:	f7fe fa45 	bl	8000a9c <__aeabi_fsub>
 8002612:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002616:	f7fe fa41 	bl	8000a9c <__aeabi_fsub>
 800261a:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
        if (bit_istrue(axis_words,bit(idx)) ) {
 800261e:	9b06      	ldr	r3, [sp, #24]
 8002620:	079a      	lsls	r2, r3, #30
 8002622:	d573      	bpl.n	800270c <gc_execute_line+0xa38>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002624:	4b80      	ldr	r3, [pc, #512]	; (8002828 <gc_execute_line+0xb54>)
 8002626:	991d      	ldr	r1, [sp, #116]	; 0x74
 8002628:	6a18      	ldr	r0, [r3, #32]
 800262a:	f7fe fa37 	bl	8000a9c <__aeabi_fsub>
 800262e:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002632:	f7fe fa33 	bl	8000a9c <__aeabi_fsub>
 8002636:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
        if (bit_istrue(axis_words,bit(idx)) ) {
 800263a:	9b06      	ldr	r3, [sp, #24]
 800263c:	075b      	lsls	r3, r3, #29
 800263e:	d524      	bpl.n	800268a <gc_execute_line+0x9b6>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002640:	4b79      	ldr	r3, [pc, #484]	; (8002828 <gc_execute_line+0xb54>)
 8002642:	991e      	ldr	r1, [sp, #120]	; 0x78
 8002644:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002646:	f7fe fa29 	bl	8000a9c <__aeabi_fsub>
 800264a:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 800264e:	f7fe fa25 	bl	8000a9c <__aeabi_fsub>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002652:	4629      	mov	r1, r5
 8002654:	f7fe fa22 	bl	8000a9c <__aeabi_fsub>
 8002658:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
        if (bit_istrue(axis_words,bit(idx)) ) {
 800265c:	9b06      	ldr	r3, [sp, #24]
 800265e:	071d      	lsls	r5, r3, #28
 8002660:	d55e      	bpl.n	8002720 <gc_execute_line+0xa4c>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002662:	4b71      	ldr	r3, [pc, #452]	; (8002828 <gc_execute_line+0xb54>)
 8002664:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8002666:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002668:	f7fe fa18 	bl	8000a9c <__aeabi_fsub>
 800266c:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8002670:	f7fe fa14 	bl	8000a9c <__aeabi_fsub>
 8002674:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8002678:	2300      	movs	r3, #0
 800267a:	930c      	str	r3, [sp, #48]	; 0x30
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 800267c:	f899 5001 	ldrb.w	r5, [r9, #1]
 8002680:	2d50      	cmp	r5, #80	; 0x50
 8002682:	f47f af41 	bne.w	8002508 <gc_execute_line+0x834>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002686:	241f      	movs	r4, #31
 8002688:	e494      	b.n	8001fb4 <gc_execute_line+0x2e0>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800268a:	4b67      	ldr	r3, [pc, #412]	; (8002828 <gc_execute_line+0xb54>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002692:	e7e3      	b.n	800265c <gc_execute_line+0x988>
 8002694:	2d35      	cmp	r5, #53	; 0x35
 8002696:	4613      	mov	r3, r2
 8002698:	d087      	beq.n	80025aa <gc_execute_line+0x8d6>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800269a:	07d0      	lsls	r0, r2, #31
 800269c:	f140 80a2 	bpl.w	80027e4 <gc_execute_line+0xb10>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026a0:	4b61      	ldr	r3, [pc, #388]	; (8002828 <gc_execute_line+0xb54>)
 80026a2:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 80026a6:	69d8      	ldr	r0, [r3, #28]
 80026a8:	f7fe f9fa 	bl	8000aa0 <__addsf3>
 80026ac:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026b0:	9b06      	ldr	r3, [sp, #24]
 80026b2:	0799      	lsls	r1, r3, #30
 80026b4:	f140 8091 	bpl.w	80027da <gc_execute_line+0xb06>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026b8:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <gc_execute_line+0xb54>)
 80026ba:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 80026be:	6a18      	ldr	r0, [r3, #32]
 80026c0:	f7fe f9ee 	bl	8000aa0 <__addsf3>
 80026c4:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026c8:	9b06      	ldr	r3, [sp, #24]
 80026ca:	075a      	lsls	r2, r3, #29
 80026cc:	f140 809a 	bpl.w	8002804 <gc_execute_line+0xb30>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026d0:	4b55      	ldr	r3, [pc, #340]	; (8002828 <gc_execute_line+0xb54>)
 80026d2:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 80026d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026d8:	f7fe f9e2 	bl	8000aa0 <__addsf3>
 80026dc:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026e0:	9b06      	ldr	r3, [sp, #24]
 80026e2:	071b      	lsls	r3, r3, #28
 80026e4:	d508      	bpl.n	80026f8 <gc_execute_line+0xa24>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026e6:	4b50      	ldr	r3, [pc, #320]	; (8002828 <gc_execute_line+0xb54>)
 80026e8:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 80026ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026ee:	f7fe f9d7 	bl	8000aa0 <__addsf3>
 80026f2:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 80026f6:	e6f8      	b.n	80024ea <gc_execute_line+0x816>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80026f8:	4b4b      	ldr	r3, [pc, #300]	; (8002828 <gc_execute_line+0xb54>)
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 8002700:	e6f3      	b.n	80024ea <gc_execute_line+0x816>
 8002702:	4b49      	ldr	r3, [pc, #292]	; (8002828 <gc_execute_line+0xb54>)
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800270a:	e6df      	b.n	80024cc <gc_execute_line+0x7f8>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800270c:	4b46      	ldr	r3, [pc, #280]	; (8002828 <gc_execute_line+0xb54>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8002714:	e791      	b.n	800263a <gc_execute_line+0x966>
 8002716:	4b44      	ldr	r3, [pc, #272]	; (8002828 <gc_execute_line+0xb54>)
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 800271e:	e77e      	b.n	800261e <gc_execute_line+0x94a>
 8002720:	4b41      	ldr	r3, [pc, #260]	; (8002828 <gc_execute_line+0xb54>)
 8002722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002724:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 8002728:	e7a6      	b.n	8002678 <gc_execute_line+0x9a4>
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 800272a:	b1ad      	cbz	r5, 8002758 <gc_execute_line+0xa84>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 800272c:	2100      	movs	r1, #0
 800272e:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002732:	f7fe fc51 	bl	8000fd8 <__aeabi_fcmpeq>
 8002736:	2800      	cmp	r0, #0
 8002738:	f47f adf8 	bne.w	800232c <gc_execute_line+0x658>
      switch (gc_block.modal.motion) {
 800273c:	2d8c      	cmp	r5, #140	; 0x8c
 800273e:	f000 827d 	beq.w	8002c3c <gc_execute_line+0xf68>
 8002742:	f200 8273 	bhi.w	8002c2c <gc_execute_line+0xf58>
 8002746:	2d02      	cmp	r5, #2
 8002748:	f000 8240 	beq.w	8002bcc <gc_execute_line+0xef8>
 800274c:	2d03      	cmp	r5, #3
 800274e:	f000 823f 	beq.w	8002bd0 <gc_execute_line+0xefc>
 8002752:	2d01      	cmp	r5, #1
 8002754:	f47f aedc 	bne.w	8002510 <gc_execute_line+0x83c>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8002758:	9b06      	ldr	r3, [sp, #24]
 800275a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800275c:	2b00      	cmp	r3, #0
 800275e:	9b07      	ldr	r3, [sp, #28]
 8002760:	bf08      	it	eq
 8002762:	2300      	moveq	r3, #0
 8002764:	9307      	str	r3, [sp, #28]
 8002766:	e6d4      	b.n	8002512 <gc_execute_line+0x83e>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002768:	4930      	ldr	r1, [pc, #192]	; (800282c <gc_execute_line+0xb58>)
 800276a:	2007      	movs	r0, #7
 800276c:	f005 f82c 	bl	80077c8 <settings_read_coord_data>
 8002770:	2800      	cmp	r0, #0
 8002772:	f43f af0b 	beq.w	800258c <gc_execute_line+0x8b8>
          if (axis_words) {
 8002776:	9b06      	ldr	r3, [sp, #24]
 8002778:	b993      	cbnz	r3, 80027a0 <gc_execute_line+0xacc>
 800277a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 800277c:	930c      	str	r3, [sp, #48]	; 0x30
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 800277e:	9307      	str	r3, [sp, #28]
 8002780:	e6c7      	b.n	8002512 <gc_execute_line+0x83e>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002782:	9b06      	ldr	r3, [sp, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f47f af7e 	bne.w	8002686 <gc_execute_line+0x9b2>
 800278a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800278c:	930c      	str	r3, [sp, #48]	; 0x30
 800278e:	e6c0      	b.n	8002512 <gc_execute_line+0x83e>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002790:	4926      	ldr	r1, [pc, #152]	; (800282c <gc_execute_line+0xb58>)
 8002792:	2006      	movs	r0, #6
 8002794:	f005 f818 	bl	80077c8 <settings_read_coord_data>
 8002798:	2800      	cmp	r0, #0
 800279a:	f43f aef7 	beq.w	800258c <gc_execute_line+0x8b8>
 800279e:	e7ea      	b.n	8002776 <gc_execute_line+0xaa2>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 80027a0:	07d8      	lsls	r0, r3, #31
 80027a2:	d404      	bmi.n	80027ae <gc_execute_line+0xada>
 80027a4:	4b20      	ldr	r3, [pc, #128]	; (8002828 <gc_execute_line+0xb54>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f8c9 3010 	str.w	r3, [r9, #16]
 80027ac:	9b06      	ldr	r3, [sp, #24]
 80027ae:	0799      	lsls	r1, r3, #30
 80027b0:	d404      	bmi.n	80027bc <gc_execute_line+0xae8>
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <gc_execute_line+0xb54>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f8c9 3014 	str.w	r3, [r9, #20]
 80027ba:	9b06      	ldr	r3, [sp, #24]
 80027bc:	075a      	lsls	r2, r3, #29
 80027be:	d404      	bmi.n	80027ca <gc_execute_line+0xaf6>
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <gc_execute_line+0xb54>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f8c9 3018 	str.w	r3, [r9, #24]
 80027c8:	9b06      	ldr	r3, [sp, #24]
 80027ca:	071d      	lsls	r5, r3, #28
 80027cc:	f53f af54 	bmi.w	8002678 <gc_execute_line+0x9a4>
 80027d0:	4b15      	ldr	r3, [pc, #84]	; (8002828 <gc_execute_line+0xb54>)
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f8c9 301c 	str.w	r3, [r9, #28]
 80027d8:	e74e      	b.n	8002678 <gc_execute_line+0x9a4>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <gc_execute_line+0xb54>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80027e2:	e771      	b.n	80026c8 <gc_execute_line+0x9f4>
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <gc_execute_line+0xb54>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 80027ec:	e760      	b.n	80026b0 <gc_execute_line+0x9dc>
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <gc_execute_line+0xb54>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80027f6:	e657      	b.n	80024a8 <gc_execute_line+0x7d4>
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <gc_execute_line+0xb54>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8002800:	4613      	mov	r3, r2
 8002802:	e643      	b.n	800248c <gc_execute_line+0x7b8>
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <gc_execute_line+0xb54>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800280c:	e768      	b.n	80026e0 <gc_execute_line+0xa0c>
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 800280e:	9319      	str	r3, [sp, #100]	; 0x64
 8002810:	931a      	str	r3, [sp, #104]	; 0x68
 8002812:	931b      	str	r3, [sp, #108]	; 0x6c
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002814:	b162      	cbz	r2, 8002830 <gc_execute_line+0xb5c>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 8002816:	f024 0449 	bic.w	r4, r4, #73	; 0x49
 800281a:	2c00      	cmp	r4, #0
 800281c:	f000 832b 	beq.w	8002e76 <gc_execute_line+0x11a2>
 8002820:	2410      	movs	r4, #16
 8002822:	f7ff bbc7 	b.w	8001fb4 <gc_execute_line+0x2e0>
 8002826:	bf00      	nop
 8002828:	20001014 	.word	0x20001014
 800282c:	20001074 	.word	0x20001074
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8002830:	4bb3      	ldr	r3, [pc, #716]	; (8002b00 <gc_execute_line+0xe2c>)
 8002832:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002836:	079c      	lsls	r4, r3, #30
 8002838:	d514      	bpl.n	8002864 <gc_execute_line+0xb90>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 800283a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800283e:	3b01      	subs	r3, #1
 8002840:	2b02      	cmp	r3, #2
 8002842:	d904      	bls.n	800284e <gc_execute_line+0xb7a>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 8002844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284a:	b2db      	uxtb	r3, r3
 800284c:	9309      	str	r3, [sp, #36]	; 0x24
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 800284e:	9b06      	ldr	r3, [sp, #24]
 8002850:	b11b      	cbz	r3, 800285a <gc_execute_line+0xb86>
 8002852:	9b07      	ldr	r3, [sp, #28]
 8002854:	2b02      	cmp	r3, #2
 8002856:	f000 81b1 	beq.w	8002bbc <gc_execute_line+0xee8>
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 800285a:	4baa      	ldr	r3, [pc, #680]	; (8002b04 <gc_execute_line+0xe30>)
 800285c:	7a5b      	ldrb	r3, [r3, #9]
 800285e:	2b10      	cmp	r3, #16
 8002860:	f000 8328 	beq.w	8002eb4 <gc_execute_line+0x11e0>
 8002864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002866:	f003 0440 	and.w	r4, r3, #64	; 0x40
  gc_state.line_number = gc_block.values.n;
 800286a:	49a6      	ldr	r1, [pc, #664]	; (8002b04 <gc_execute_line+0xe30>)
 800286c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002870:	f899 3002 	ldrb.w	r3, [r9, #2]
  gc_state.line_number = gc_block.values.n;
 8002874:	618a      	str	r2, [r1, #24]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002876:	704b      	strb	r3, [r1, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 8002878:	b113      	cbz	r3, 8002880 <gc_execute_line+0xbac>
 800287a:	2308      	movs	r3, #8
 800287c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002880:	f8d9 300c 	ldr.w	r3, [r9, #12]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002884:	4a9f      	ldr	r2, [pc, #636]	; (8002b04 <gc_execute_line+0xe30>)
 8002886:	f8d9 5030 	ldr.w	r5, [r9, #48]	; 0x30
 800288a:	68d0      	ldr	r0, [r2, #12]
 800288c:	4629      	mov	r1, r5
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 800288e:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 8002890:	9319      	str	r3, [sp, #100]	; 0x64
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002892:	f7fe fba1 	bl	8000fd8 <__aeabi_fcmpeq>
 8002896:	2800      	cmp	r0, #0
 8002898:	f000 80a6 	beq.w	80029e8 <gc_execute_line+0xd14>
 800289c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800289e:	0698      	lsls	r0, r3, #26
 80028a0:	f100 80a2 	bmi.w	80029e8 <gc_execute_line+0xd14>
 80028a4:	4b97      	ldr	r3, [pc, #604]	; (8002b04 <gc_execute_line+0xe30>)
 80028a6:	7a58      	ldrb	r0, [r3, #9]
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80028a8:	b904      	cbnz	r4, 80028ac <gc_execute_line+0xbd8>
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 80028aa:	951a      	str	r5, [sp, #104]	; 0x68
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80028ac:	f899 300a 	ldrb.w	r3, [r9, #10]
  gc_state.tool = gc_block.values.t;
 80028b0:	f899 2034 	ldrb.w	r2, [r9, #52]	; 0x34
 80028b4:	4993      	ldr	r1, [pc, #588]	; (8002b04 <gc_execute_line+0xe30>)
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80028b6:	4283      	cmp	r3, r0
  gc_state.tool = gc_block.values.t;
 80028b8:	750a      	strb	r2, [r1, #20]
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80028ba:	d007      	beq.n	80028cc <gc_execute_line+0xbf8>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 80028bc:	4618      	mov	r0, r3
 80028be:	991a      	ldr	r1, [sp, #104]	; 0x68
 80028c0:	f005 fafe 	bl	8007ec0 <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 80028c4:	f899 300a 	ldrb.w	r3, [r9, #10]
 80028c8:	4a8e      	ldr	r2, [pc, #568]	; (8002b04 <gc_execute_line+0xe30>)
 80028ca:	7253      	strb	r3, [r2, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80028cc:	4a8d      	ldr	r2, [pc, #564]	; (8002b04 <gc_execute_line+0xe30>)
 80028ce:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 80028d2:	7a52      	ldrb	r2, [r2, #9]
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80028d4:	f899 0009 	ldrb.w	r0, [r9, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80028d8:	4313      	orrs	r3, r2
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80028da:	4a8a      	ldr	r2, [pc, #552]	; (8002b04 <gc_execute_line+0xe30>)
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80028dc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80028e0:	7a12      	ldrb	r2, [r2, #8]
 80028e2:	4282      	cmp	r2, r0
 80028e4:	d009      	beq.n	80028fa <gc_execute_line+0xc26>
    coolant_sync(gc_block.modal.coolant);
 80028e6:	f7ff f90f 	bl	8001b08 <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 80028ea:	f899 3009 	ldrb.w	r3, [r9, #9]
 80028ee:	4a85      	ldr	r2, [pc, #532]	; (8002b04 <gc_execute_line+0xe30>)
 80028f0:	b113      	cbz	r3, 80028f8 <gc_execute_line+0xc24>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 80028f2:	7a12      	ldrb	r2, [r2, #8]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	4a83      	ldr	r2, [pc, #524]	; (8002b04 <gc_execute_line+0xe30>)
 80028f8:	7213      	strb	r3, [r2, #8]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80028fa:	4a82      	ldr	r2, [pc, #520]	; (8002b04 <gc_execute_line+0xe30>)
 80028fc:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8002900:	7a11      	ldrb	r1, [r2, #8]
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002902:	f899 2000 	ldrb.w	r2, [r9]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002906:	430b      	orrs	r3, r1
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002908:	2a04      	cmp	r2, #4
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 800290a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 800290e:	f000 8148 	beq.w	8002ba2 <gc_execute_line+0xece>
  gc_state.modal.units = gc_block.modal.units;
 8002912:	f899 3003 	ldrb.w	r3, [r9, #3]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002916:	497b      	ldr	r1, [pc, #492]	; (8002b04 <gc_execute_line+0xe30>)
 8002918:	f899 2005 	ldrb.w	r2, [r9, #5]
  gc_state.modal.units = gc_block.modal.units;
 800291c:	708b      	strb	r3, [r1, #2]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 800291e:	9b07      	ldr	r3, [sp, #28]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002920:	710a      	strb	r2, [r1, #4]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002922:	2b03      	cmp	r3, #3
 8002924:	f000 8127 	beq.w	8002b76 <gc_execute_line+0xea2>
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002928:	4b76      	ldr	r3, [pc, #472]	; (8002b04 <gc_execute_line+0xe30>)
 800292a:	f899 4007 	ldrb.w	r4, [r9, #7]
 800292e:	799b      	ldrb	r3, [r3, #6]
 8002930:	42a3      	cmp	r3, r4
 8002932:	d007      	beq.n	8002944 <gc_execute_line+0xc70>
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 8002934:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 8002938:	4d72      	ldr	r5, [pc, #456]	; (8002b04 <gc_execute_line+0xe30>)
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 800293a:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 800293e:	71ac      	strb	r4, [r5, #6]
    system_flag_wco_change();
 8002940:	f006 feb0 	bl	80096a4 <system_flag_wco_change>
  switch(gc_block.non_modal_command) {
 8002944:	f899 3000 	ldrb.w	r3, [r9]
  gc_state.modal.distance = gc_block.modal.distance;
 8002948:	f899 2004 	ldrb.w	r2, [r9, #4]
 800294c:	496d      	ldr	r1, [pc, #436]	; (8002b04 <gc_execute_line+0xe30>)
  switch(gc_block.non_modal_command) {
 800294e:	2b26      	cmp	r3, #38	; 0x26
  gc_state.modal.distance = gc_block.modal.distance;
 8002950:	70ca      	strb	r2, [r1, #3]
  switch(gc_block.non_modal_command) {
 8002952:	f000 8096 	beq.w	8002a82 <gc_execute_line+0xdae>
 8002956:	d97c      	bls.n	8002a52 <gc_execute_line+0xd7e>
 8002958:	2b5c      	cmp	r3, #92	; 0x5c
 800295a:	d072      	beq.n	8002a42 <gc_execute_line+0xd6e>
 800295c:	2b66      	cmp	r3, #102	; 0x66
 800295e:	d065      	beq.n	8002a2c <gc_execute_line+0xd58>
 8002960:	2b28      	cmp	r3, #40	; 0x28
 8002962:	d05e      	beq.n	8002a22 <gc_execute_line+0xd4e>
  gc_state.modal.motion = gc_block.modal.motion;
 8002964:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002968:	4a66      	ldr	r2, [pc, #408]	; (8002b04 <gc_execute_line+0xe30>)
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 800296a:	2b50      	cmp	r3, #80	; 0x50
  gc_state.modal.motion = gc_block.modal.motion;
 800296c:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 800296e:	d003      	beq.n	8002978 <gc_execute_line+0xca4>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002970:	9a07      	ldr	r2, [sp, #28]
 8002972:	2a02      	cmp	r2, #2
 8002974:	f000 808a 	beq.w	8002a8c <gc_execute_line+0xdb8>
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 8002978:	f899 4008 	ldrb.w	r4, [r9, #8]
 800297c:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <gc_execute_line+0xe30>)
 800297e:	71dc      	strb	r4, [r3, #7]
  if (gc_state.modal.program_flow) {
 8002980:	2c00      	cmp	r4, #0
 8002982:	f43f ab17 	beq.w	8001fb4 <gc_execute_line+0x2e0>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8002986:	f003 fa6d 	bl	8005e64 <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 800298a:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <gc_execute_line+0xe30>)
 800298c:	79db      	ldrb	r3, [r3, #7]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d03d      	beq.n	8002a0e <gc_execute_line+0xd3a>
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002992:	2101      	movs	r1, #1
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002994:	2400      	movs	r4, #0
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002996:	2264      	movs	r2, #100	; 0x64
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002998:	485a      	ldr	r0, [pc, #360]	; (8002b04 <gc_execute_line+0xe30>)
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 800299a:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <gc_execute_line+0xe34>)
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 800299c:	7001      	strb	r1, [r0, #0]
      if (sys.state != STATE_CHECK_MODE) {
 800299e:	7819      	ldrb	r1, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 80029a0:	7104      	strb	r4, [r0, #4]
      if (sys.state != STATE_CHECK_MODE) {
 80029a2:	2902      	cmp	r1, #2
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 80029a4:	70c4      	strb	r4, [r0, #3]
      gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 80029a6:	7044      	strb	r4, [r0, #1]
      gc_state.modal.coord_select = 0; // G54
 80029a8:	7184      	strb	r4, [r0, #6]
      gc_state.modal.spindle = SPINDLE_DISABLE;
 80029aa:	7244      	strb	r4, [r0, #9]
      gc_state.modal.coolant = COOLANT_DISABLE;
 80029ac:	7204      	strb	r4, [r0, #8]
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 80029ae:	721a      	strb	r2, [r3, #8]
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 80029b0:	725a      	strb	r2, [r3, #9]
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 80029b2:	729a      	strb	r2, [r3, #10]
      if (sys.state != STATE_CHECK_MODE) {
 80029b4:	d010      	beq.n	80029d8 <gc_execute_line+0xd04>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80029b6:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 80029ba:	4620      	mov	r0, r4
 80029bc:	f004 ff04 	bl	80077c8 <settings_read_coord_data>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	f43f ade3 	beq.w	800258c <gc_execute_line+0x8b8>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 80029c6:	f006 fe6d 	bl	80096a4 <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 80029ca:	4620      	mov	r0, r4
 80029cc:	2100      	movs	r1, #0
 80029ce:	f005 f9f5 	bl	8007dbc <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7ff f874 	bl	8001ac0 <coolant_set_state>
      report_feedback_message(MESSAGE_PROGRAM_END);
 80029d8:	2008      	movs	r0, #8
 80029da:	f003 fd67 	bl	80064ac <report_feedback_message>
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 80029de:	2400      	movs	r4, #0
 80029e0:	4b48      	ldr	r3, [pc, #288]	; (8002b04 <gc_execute_line+0xe30>)
 80029e2:	71dc      	strb	r4, [r3, #7]
 80029e4:	f7ff bae6 	b.w	8001fb4 <gc_execute_line+0x2e0>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80029e8:	4b46      	ldr	r3, [pc, #280]	; (8002b04 <gc_execute_line+0xe30>)
 80029ea:	7a58      	ldrb	r0, [r3, #9]
 80029ec:	b160      	cbz	r0, 8002a08 <gc_execute_line+0xd34>
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 80029ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029f0:	0619      	lsls	r1, r3, #24
 80029f2:	d409      	bmi.n	8002a08 <gc_execute_line+0xd34>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80029f4:	2c00      	cmp	r4, #0
 80029f6:	f000 80d9 	beq.w	8002bac <gc_execute_line+0xed8>
            spindle_sync(gc_state.modal.spindle, 0.0);
 80029fa:	2100      	movs	r1, #0
 80029fc:	f005 fa60 	bl	8007ec0 <spindle_sync>
 8002a00:	4b40      	ldr	r3, [pc, #256]	; (8002b04 <gc_execute_line+0xe30>)
 8002a02:	f8d9 5030 	ldr.w	r5, [r9, #48]	; 0x30
 8002a06:	7a58      	ldrb	r0, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 8002a08:	4b3e      	ldr	r3, [pc, #248]	; (8002b04 <gc_execute_line+0xe30>)
 8002a0a:	60dd      	str	r5, [r3, #12]
 8002a0c:	e74c      	b.n	80028a8 <gc_execute_line+0xbd4>
      if (sys.state != STATE_CHECK_MODE) {
 8002a0e:	4b3e      	ldr	r3, [pc, #248]	; (8002b08 <gc_execute_line+0xe34>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d0e3      	beq.n	80029de <gc_execute_line+0xd0a>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8002a16:	2008      	movs	r0, #8
 8002a18:	f006 feae 	bl	8009778 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8002a1c:	f003 f830 	bl	8005a80 <protocol_execute_realtime>
 8002a20:	e7dd      	b.n	80029de <gc_execute_line+0xd0a>
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 8002a22:	493a      	ldr	r1, [pc, #232]	; (8002b0c <gc_execute_line+0xe38>)
 8002a24:	2007      	movs	r0, #7
 8002a26:	f004 fdf7 	bl	8007618 <settings_write_coord_data>
      break;
 8002a2a:	e79b      	b.n	8002964 <gc_execute_line+0xc90>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <gc_execute_line+0xe3c>)
 8002a30:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 8002a34:	63cb      	str	r3, [r1, #60]	; 0x3c
 8002a36:	6053      	str	r3, [r2, #4]
 8002a38:	6093      	str	r3, [r2, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
      system_flag_wco_change();
 8002a3c:	f006 fe32 	bl	80096a4 <system_flag_wco_change>
      break;
 8002a40:	e790      	b.n	8002964 <gc_execute_line+0xc90>
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8002a42:	4c33      	ldr	r4, [pc, #204]	; (8002b10 <gc_execute_line+0xe3c>)
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <gc_execute_line+0xe40>)
 8002a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      system_flag_wco_change();
 8002a4c:	f006 fe2a 	bl	80096a4 <system_flag_wco_change>
      break;
 8002a50:	e788      	b.n	8002964 <gc_execute_line+0xc90>
  switch(gc_block.non_modal_command) {
 8002a52:	2b1c      	cmp	r3, #28
 8002a54:	d034      	beq.n	8002ac0 <gc_execute_line+0xdec>
 8002a56:	2b1e      	cmp	r3, #30
 8002a58:	d032      	beq.n	8002ac0 <gc_execute_line+0xdec>
 8002a5a:	2b0a      	cmp	r3, #10
 8002a5c:	d182      	bne.n	8002964 <gc_execute_line+0xc90>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8002a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a60:	4c2d      	ldr	r4, [pc, #180]	; (8002b18 <gc_execute_line+0xe44>)
 8002a62:	4628      	mov	r0, r5
 8002a64:	4621      	mov	r1, r4
 8002a66:	f004 fdd7 	bl	8007618 <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <gc_execute_line+0xe30>)
 8002a6c:	799b      	ldrb	r3, [r3, #6]
 8002a6e:	42ab      	cmp	r3, r5
 8002a70:	f47f af78 	bne.w	8002964 <gc_execute_line+0xc90>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 8002a74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a78:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
        system_flag_wco_change();
 8002a7c:	f006 fe12 	bl	80096a4 <system_flag_wco_change>
 8002a80:	e770      	b.n	8002964 <gc_execute_line+0xc90>
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8002a82:	4922      	ldr	r1, [pc, #136]	; (8002b0c <gc_execute_line+0xe38>)
 8002a84:	2006      	movs	r0, #6
 8002a86:	f004 fdc7 	bl	8007618 <settings_write_coord_data>
      break;
 8002a8a:	e76b      	b.n	8002964 <gc_execute_line+0xc90>
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d06b      	beq.n	8002b68 <gc_execute_line+0xe94>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d05c      	beq.n	8002b4e <gc_execute_line+0xe7a>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002a94:	3b02      	subs	r3, #2
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d942      	bls.n	8002b20 <gc_execute_line+0xe4c>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002a9a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002a9e:	4d1d      	ldr	r5, [pc, #116]	; (8002b14 <gc_execute_line+0xe40>)
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002aa6:	a919      	add	r1, sp, #100	; 0x64
 8002aa8:	4628      	mov	r0, r5
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002aaa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002aae:	f001 f8e3 	bl	8003c78 <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002ab2:	b9e0      	cbnz	r0, 8002aee <gc_execute_line+0xe1a>
 8002ab4:	4c15      	ldr	r4, [pc, #84]	; (8002b0c <gc_execute_line+0xe38>)
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8002ab6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002abe:	e75b      	b.n	8002978 <gc_execute_line+0xca4>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002ac0:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002acc:	9b07      	ldr	r3, [sp, #28]
 8002ace:	b11b      	cbz	r3, 8002ad8 <gc_execute_line+0xe04>
 8002ad0:	a919      	add	r1, sp, #100	; 0x64
 8002ad2:	4810      	ldr	r0, [pc, #64]	; (8002b14 <gc_execute_line+0xe40>)
 8002ad4:	f000 fe64 	bl	80037a0 <mc_line>
      mc_line(gc_block.values.ijk, pl_data);
 8002ad8:	4d0f      	ldr	r5, [pc, #60]	; (8002b18 <gc_execute_line+0xe44>)
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002ada:	4c0c      	ldr	r4, [pc, #48]	; (8002b0c <gc_execute_line+0xe38>)
      mc_line(gc_block.values.ijk, pl_data);
 8002adc:	4628      	mov	r0, r5
 8002ade:	a919      	add	r1, sp, #100	; 0x64
 8002ae0:	f000 fe5e 	bl	80037a0 <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002ae4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8002aec:	e73a      	b.n	8002964 <gc_execute_line+0xc90>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8002aee:	2801      	cmp	r0, #1
 8002af0:	f47f af42 	bne.w	8002978 <gc_execute_line+0xca4>
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8002af4:	4909      	ldr	r1, [pc, #36]	; (8002b1c <gc_execute_line+0xe48>)
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <gc_execute_line+0xe38>)
 8002af8:	f006 fdde 	bl	80096b8 <system_convert_array_steps_to_mpos>
 8002afc:	e73c      	b.n	8002978 <gc_execute_line+0xca4>
 8002afe:	bf00      	nop
 8002b00:	2000126c 	.word	0x2000126c
 8002b04:	20001014 	.word	0x20001014
 8002b08:	200010b0 	.word	0x200010b0
 8002b0c:	20001030 	.word	0x20001030
 8002b10:	20001050 	.word	0x20001050
 8002b14:	2000109c 	.word	0x2000109c
 8002b18:	20001074 	.word	0x20001074
 8002b1c:	200010d8 	.word	0x200010d8
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8002b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b22:	4db3      	ldr	r5, [pc, #716]	; (8002df0 <gc_execute_line+0x111c>)
 8002b24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b28:	9304      	str	r3, [sp, #16]
 8002b2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b2c:	4cb1      	ldr	r4, [pc, #708]	; (8002df4 <gc_execute_line+0x1120>)
 8002b2e:	9303      	str	r3, [sp, #12]
 8002b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b32:	f8d9 602c 	ldr.w	r6, [r9, #44]	; 0x2c
 8002b36:	9302      	str	r3, [sp, #8]
 8002b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b3a:	a919      	add	r1, sp, #100	; 0x64
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	4622      	mov	r2, r4
 8002b40:	f1a5 0328 	sub.w	r3, r5, #40	; 0x28
 8002b44:	4628      	mov	r0, r5
 8002b46:	9600      	str	r6, [sp, #0]
 8002b48:	f000 fe5e 	bl	8003808 <mc_arc>
 8002b4c:	e7b3      	b.n	8002ab6 <gc_execute_line+0xde2>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002b4e:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
        mc_line(gc_block.values.xyz, pl_data);
 8002b52:	4da7      	ldr	r5, [pc, #668]	; (8002df0 <gc_execute_line+0x111c>)
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002b54:	f043 0301 	orr.w	r3, r3, #1
        mc_line(gc_block.values.xyz, pl_data);
 8002b58:	a919      	add	r1, sp, #100	; 0x64
 8002b5a:	4628      	mov	r0, r5
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002b5c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8002b60:	4ca4      	ldr	r4, [pc, #656]	; (8002df4 <gc_execute_line+0x1120>)
        mc_line(gc_block.values.xyz, pl_data);
 8002b62:	f000 fe1d 	bl	80037a0 <mc_line>
 8002b66:	e7a6      	b.n	8002ab6 <gc_execute_line+0xde2>
        mc_line(gc_block.values.xyz, pl_data);
 8002b68:	4da1      	ldr	r5, [pc, #644]	; (8002df0 <gc_execute_line+0x111c>)
 8002b6a:	a919      	add	r1, sp, #100	; 0x64
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	f000 fe17 	bl	80037a0 <mc_line>
 8002b72:	4ca0      	ldr	r4, [pc, #640]	; (8002df4 <gc_execute_line+0x1120>)
 8002b74:	e79f      	b.n	8002ab6 <gc_execute_line+0xde2>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8002b76:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002b7a:	714b      	strb	r3, [r1, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 8002b7c:	b913      	cbnz	r3, 8002b84 <gc_execute_line+0xeb0>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 8002b84:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 8002b88:	4b9b      	ldr	r3, [pc, #620]	; (8002df8 <gc_execute_line+0x1124>)
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b8e:	f7fe fa23 	bl	8000fd8 <__aeabi_fcmpeq>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	f47f aec8 	bne.w	8002928 <gc_execute_line+0xc54>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 8002b98:	4b97      	ldr	r3, [pc, #604]	; (8002df8 <gc_execute_line+0x1124>)
 8002b9a:	64dc      	str	r4, [r3, #76]	; 0x4c
      system_flag_wco_change();
 8002b9c:	f006 fd82 	bl	80096a4 <system_flag_wco_change>
 8002ba0:	e6c2      	b.n	8002928 <gc_execute_line+0xc54>
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002ba2:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002ba6:	f001 f831 	bl	8003c0c <mc_dwell>
 8002baa:	e6b2      	b.n	8002912 <gc_execute_line+0xc3e>
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 8002bac:	4629      	mov	r1, r5
 8002bae:	f005 f987 	bl	8007ec0 <spindle_sync>
 8002bb2:	4b91      	ldr	r3, [pc, #580]	; (8002df8 <gc_execute_line+0x1124>)
 8002bb4:	f8d9 5030 	ldr.w	r5, [r9, #48]	; 0x30
 8002bb8:	7a58      	ldrb	r0, [r3, #9]
 8002bba:	e725      	b.n	8002a08 <gc_execute_line+0xd34>
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc6:	f003 0440 	and.w	r4, r3, #64	; 0x40
 8002bca:	e64e      	b.n	800286a <gc_execute_line+0xb96>
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 8002bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bce:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002bd0:	9b06      	ldr	r3, [sp, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f43f abcc 	beq.w	8002370 <gc_execute_line+0x69c>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002bda:	4213      	tst	r3, r2
 8002bdc:	d102      	bne.n	8002be4 <gc_execute_line+0xf10>
 8002bde:	2420      	movs	r4, #32
 8002be0:	f7ff b9e8 	b.w	8001fb4 <gc_execute_line+0x2e0>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002be4:	4b84      	ldr	r3, [pc, #528]	; (8002df8 <gc_execute_line+0x1124>)
 8002be6:	eb09 0287 	add.w	r2, r9, r7, lsl #2
 8002bea:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002bee:	69d9      	ldr	r1, [r3, #28]
 8002bf0:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002bf2:	f7fd ff53 	bl	8000a9c <__aeabi_fsub>
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002bf6:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <gc_execute_line+0x1124>)
 8002bf8:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8002bfc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002c00:	900a      	str	r0, [sp, #40]	; 0x28
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002c02:	69d9      	ldr	r1, [r3, #28]
 8002c04:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002c06:	f7fd ff49 	bl	8000a9c <__aeabi_fsub>
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002c0a:	f018 0580 	ands.w	r5, r8, #128	; 0x80
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002c0e:	900b      	str	r0, [sp, #44]	; 0x2c
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002c10:	d05b      	beq.n	8002cca <gc_execute_line+0xff6>
            bit_false(value_words,bit(WORD_R));
 8002c12:	f028 0880 	bic.w	r8, r8, #128	; 0x80
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002c16:	2210      	movs	r2, #16
 8002c18:	4975      	ldr	r1, [pc, #468]	; (8002df0 <gc_execute_line+0x111c>)
 8002c1a:	4876      	ldr	r0, [pc, #472]	; (8002df4 <gc_execute_line+0x1120>)
            bit_false(value_words,bit(WORD_R));
 8002c1c:	fa1f f888 	uxth.w	r8, r8
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002c20:	f008 f82c 	bl	800ac7c <memcmp>
 8002c24:	bb18      	cbnz	r0, 8002c6e <gc_execute_line+0xf9a>
 8002c26:	2421      	movs	r4, #33	; 0x21
 8002c28:	f7ff b9c4 	b.w	8001fb4 <gc_execute_line+0x2e0>
      switch (gc_block.modal.motion) {
 8002c2c:	2d8e      	cmp	r5, #142	; 0x8e
 8002c2e:	d005      	beq.n	8002c3c <gc_execute_line+0xf68>
 8002c30:	d302      	bcc.n	8002c38 <gc_execute_line+0xf64>
 8002c32:	2d8f      	cmp	r5, #143	; 0x8f
 8002c34:	f47f ac6c 	bne.w	8002510 <gc_execute_line+0x83c>
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 8002c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c3a:	9309      	str	r3, [sp, #36]	; 0x24
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8002c3c:	f105 0372 	add.w	r3, r5, #114	; 0x72
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d804      	bhi.n	8002c50 <gc_execute_line+0xf7c>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 8002c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c48:	f043 0308 	orr.w	r3, r3, #8
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002c50:	9b06      	ldr	r3, [sp, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f43f ab8c 	beq.w	8002370 <gc_execute_line+0x69c>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	4965      	ldr	r1, [pc, #404]	; (8002df0 <gc_execute_line+0x111c>)
 8002c5c:	4865      	ldr	r0, [pc, #404]	; (8002df4 <gc_execute_line+0x1120>)
 8002c5e:	f008 f80d 	bl	800ac7c <memcmp>
 8002c62:	2800      	cmp	r0, #0
 8002c64:	d0df      	beq.n	8002c26 <gc_execute_line+0xf52>
 8002c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c68:	f003 0201 	and.w	r2, r3, #1
 8002c6c:	e451      	b.n	8002512 <gc_execute_line+0x83e>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 8002c6e:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d106      	bne.n	8002c84 <gc_execute_line+0xfb0>
 8002c76:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002c7a:	4960      	ldr	r1, [pc, #384]	; (8002dfc <gc_execute_line+0x1128>)
 8002c7c:	f7fe f818 	bl	8000cb0 <__aeabi_fmul>
 8002c80:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002c84:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8002c88:	4608      	mov	r0, r1
 8002c8a:	f7fe f811 	bl	8000cb0 <__aeabi_fmul>
 8002c8e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002c92:	f7fe f80d 	bl	8000cb0 <__aeabi_fmul>
 8002c96:	4605      	mov	r5, r0
 8002c98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	f7fe f808 	bl	8000cb0 <__aeabi_fmul>
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f7fd fefa 	bl	8000a9c <__aeabi_fsub>
 8002ca8:	4605      	mov	r5, r0
 8002caa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002cac:	4601      	mov	r1, r0
 8002cae:	f7fd ffff 	bl	8000cb0 <__aeabi_fmul>
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	f7fd fef1 	bl	8000a9c <__aeabi_fsub>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002cba:	2100      	movs	r1, #0
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002cbc:	4605      	mov	r5, r0
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002cbe:	f7fe f995 	bl	8000fec <__aeabi_fcmplt>
 8002cc2:	b148      	cbz	r0, 8002cd8 <gc_execute_line+0x1004>
 8002cc4:	2422      	movs	r4, #34	; 0x22
 8002cc6:	f7ff b975 	b.w	8001fb4 <gc_execute_line+0x2e0>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002cca:	9b08      	ldr	r3, [sp, #32]
 8002ccc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002cce:	4213      	tst	r3, r2
 8002cd0:	d14a      	bne.n	8002d68 <gc_execute_line+0x1094>
 8002cd2:	2423      	movs	r4, #35	; 0x23
 8002cd4:	f7ff b96e 	b.w	8001fb4 <gc_execute_line+0x2e0>
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f008 f8ff 	bl	800aedc <sqrtf>
 8002cde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002ce4:	f001 f95a 	bl	8003f9c <hypot_f>
 8002ce8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002cec:	4601      	mov	r1, r0
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f7fe f892 	bl	8000e18 <__aeabi_fdiv>
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002cf4:	f899 3001 	ldrb.w	r3, [r9, #1]
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002cf8:	4605      	mov	r5, r0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002cfa:	2b03      	cmp	r3, #3
            if (gc_block.values.r < 0) {
 8002cfc:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002d00:	bf08      	it	eq
 8002d02:	f100 4500 	addeq.w	r5, r0, #2147483648	; 0x80000000
            if (gc_block.values.r < 0) {
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	9308      	str	r3, [sp, #32]
 8002d0c:	f7fe f96e 	bl	8000fec <__aeabi_fcmplt>
 8002d10:	9b08      	ldr	r3, [sp, #32]
 8002d12:	b128      	cbz	r0, 8002d20 <gc_execute_line+0x104c>
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002d14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
                h_x2_div_d = -h_x2_div_d;
 8002d18:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002d1c:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 8002d20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d22:	4628      	mov	r0, r5
 8002d24:	f7fd ffc4 	bl	8000cb0 <__aeabi_fmul>
 8002d28:	4601      	mov	r1, r0
 8002d2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d2c:	f7fd feb6 	bl	8000a9c <__aeabi_fsub>
 8002d30:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002d34:	f7fd ffbc 	bl	8000cb0 <__aeabi_fmul>
 8002d38:	3702      	adds	r7, #2
 8002d3a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8002d3e:	60b8      	str	r0, [r7, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 8002d40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d42:	4628      	mov	r0, r5
 8002d44:	f7fd ffb4 	bl	8000cb0 <__aeabi_fmul>
 8002d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d4a:	f7fd fea9 	bl	8000aa0 <__addsf3>
 8002d4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002d52:	f7fd ffad 	bl	8000cb0 <__aeabi_fmul>
 8002d56:	3602      	adds	r6, #2
 8002d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d5a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8002d5e:	f003 0201 	and.w	r2, r3, #1
 8002d62:	60b0      	str	r0, [r6, #8]
 8002d64:	f7ff bbd5 	b.w	8002512 <gc_execute_line+0x83e>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002d68:	f899 3003 	ldrb.w	r3, [r9, #3]
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002d6c:	f028 080e 	bic.w	r8, r8, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002d70:	2b01      	cmp	r3, #1
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002d72:	fa1f f888 	uxth.w	r8, r8
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002d76:	f000 80b4 	beq.w	8002ee2 <gc_execute_line+0x120e>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8002d7a:	1cb5      	adds	r5, r6, #2
 8002d7c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8002d80:	68a9      	ldr	r1, [r5, #8]
 8002d82:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002d84:	f7fd fe8a 	bl	8000a9c <__aeabi_fsub>
 8002d88:	4606      	mov	r6, r0
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8002d8a:	3702      	adds	r7, #2
 8002d8c:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d94:	f7fd fe82 	bl	8000a9c <__aeabi_fsub>
            float target_r = hypot_f(x,y);
 8002d98:	4631      	mov	r1, r6
 8002d9a:	f001 f8ff 	bl	8003f9c <hypot_f>
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002d9e:	68a9      	ldr	r1, [r5, #8]
            float target_r = hypot_f(x,y);
 8002da0:	4606      	mov	r6, r0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002da2:	68b8      	ldr	r0, [r7, #8]
 8002da4:	f001 f8fa 	bl	8003f9c <hypot_f>
 8002da8:	4607      	mov	r7, r0
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002daa:	4630      	mov	r0, r6
 8002dac:	4639      	mov	r1, r7
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002dae:	f8c9 702c 	str.w	r7, [r9, #44]	; 0x2c
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002db2:	f7fd fe73 	bl	8000a9c <__aeabi_fsub>
 8002db6:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
            if (delta_r > 0.005f) {
 8002dba:	4628      	mov	r0, r5
 8002dbc:	4910      	ldr	r1, [pc, #64]	; (8002e00 <gc_execute_line+0x112c>)
 8002dbe:	f7fe f933 	bl	8001028 <__aeabi_fcmpgt>
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	f43f af4f 	beq.w	8002c66 <gc_execute_line+0xf92>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8002dc8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f7fe f92b 	bl	8001028 <__aeabi_fcmpgt>
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	f47f af27 	bne.w	8002c26 <gc_execute_line+0xf52>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8002dd8:	490a      	ldr	r1, [pc, #40]	; (8002e04 <gc_execute_line+0x1130>)
 8002dda:	4638      	mov	r0, r7
 8002ddc:	f7fd ff68 	bl	8000cb0 <__aeabi_fmul>
 8002de0:	4601      	mov	r1, r0
 8002de2:	4628      	mov	r0, r5
 8002de4:	f7fe f920 	bl	8001028 <__aeabi_fcmpgt>
 8002de8:	2800      	cmp	r0, #0
 8002dea:	f47f af1c 	bne.w	8002c26 <gc_execute_line+0xf52>
 8002dee:	e73a      	b.n	8002c66 <gc_execute_line+0xf92>
 8002df0:	2000109c 	.word	0x2000109c
 8002df4:	20001030 	.word	0x20001030
 8002df8:	20001014 	.word	0x20001014
 8002dfc:	41cb3333 	.word	0x41cb3333
 8002e00:	3ba3d70a 	.word	0x3ba3d70a
 8002e04:	3a83126f 	.word	0x3a83126f
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e08:	2201      	movs	r2, #1
 8002e0a:	9211      	str	r2, [sp, #68]	; 0x44
 8002e0c:	2200      	movs	r2, #0
          if (gc_block.values.l == 20) {
 8002e0e:	f899 3020 	ldrb.w	r3, [r9, #32]
 8002e12:	9414      	str	r4, [sp, #80]	; 0x50
 8002e14:	9312      	str	r3, [sp, #72]	; 0x48
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e16:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <gc_execute_line+0x1250>)
 8002e18:	9615      	str	r6, [sp, #84]	; 0x54
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e20:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <gc_execute_line+0x1254>)
 8002e22:	4d42      	ldr	r5, [pc, #264]	; (8002f2c <gc_execute_line+0x1258>)
 8002e24:	461e      	mov	r6, r3
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002e26:	9b06      	ldr	r3, [sp, #24]
 8002e28:	fa43 f104 	asr.w	r1, r3, r4
 8002e2c:	07c8      	lsls	r0, r1, #31
 8002e2e:	d504      	bpl.n	8002e3a <gc_execute_line+0x1166>
          if (gc_block.values.l == 20) {
 8002e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e32:	2b14      	cmp	r3, #20
 8002e34:	d00c      	beq.n	8002e50 <gc_execute_line+0x117c>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002e36:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002e38:	6029      	str	r1, [r5, #0]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d017      	beq.n	8002e70 <gc_execute_line+0x119c>
 8002e40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002e42:	3401      	adds	r4, #1
 8002e44:	3101      	adds	r1, #1
 8002e46:	b2cb      	uxtb	r3, r1
 8002e48:	9311      	str	r3, [sp, #68]	; 0x44
 8002e4a:	3604      	adds	r6, #4
 8002e4c:	3504      	adds	r5, #4
 8002e4e:	e7ea      	b.n	8002e26 <gc_execute_line+0x1152>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002e50:	6a31      	ldr	r1, [r6, #32]
 8002e52:	6830      	ldr	r0, [r6, #0]
 8002e54:	f7fd fe22 	bl	8000a9c <__aeabi_fsub>
 8002e58:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002e5a:	f7fd fe1f 	bl	8000a9c <__aeabi_fsub>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e5e:	2c02      	cmp	r4, #2
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002e60:	6028      	str	r0, [r5, #0]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e62:	d1ea      	bne.n	8002e3a <gc_execute_line+0x1166>
 8002e64:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002e66:	f7fd fe19 	bl	8000a9c <__aeabi_fsub>
 8002e6a:	f8c9 0018 	str.w	r0, [r9, #24]
 8002e6e:	e7e7      	b.n	8002e40 <gc_execute_line+0x116c>
 8002e70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8002e72:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8002e74:	e402      	b.n	800267c <gc_execute_line+0x9a8>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 8002e76:	f899 3000 	ldrb.w	r3, [r9]
 8002e7a:	2b35      	cmp	r3, #53	; 0x35
 8002e7c:	d002      	beq.n	8002e84 <gc_execute_line+0x11b0>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f47f acce 	bne.w	8002820 <gc_execute_line+0xb4c>
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <gc_execute_line+0x1250>)
 8002e86:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <gc_execute_line+0x1250>)
 8002e88:	7a11      	ldrb	r1, [r2, #8]
 8002e8a:	7a5b      	ldrb	r3, [r3, #9]
      pl_data->spindle_speed = gc_state.spindle_speed;
 8002e8c:	68d2      	ldr	r2, [r2, #12]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002e8e:	430b      	orrs	r3, r1
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8002e90:	a819      	add	r0, sp, #100	; 0x64
 8002e92:	4927      	ldr	r1, [pc, #156]	; (8002f30 <gc_execute_line+0x125c>)
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002e94:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
      pl_data->spindle_speed = gc_state.spindle_speed;
 8002e98:	921a      	str	r2, [sp, #104]	; 0x68
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8002e9a:	f000 f84f 	bl	8002f3c <jog_execute>
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	f47f a887 	bne.w	8001fb4 <gc_execute_line+0x2e0>
 8002ea6:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <gc_execute_line+0x1260>)
 8002ea8:	4d1f      	ldr	r5, [pc, #124]	; (8002f28 <gc_execute_line+0x1254>)
 8002eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002eb0:	f7ff b880 	b.w	8001fb4 <gc_execute_line+0x2e0>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <gc_execute_line+0x1250>)
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002eb8:	781b      	ldrb	r3, [r3, #0]
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	2b02      	cmp	r3, #2
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002ebe:	4613      	mov	r3, r2
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002ec0:	d82a      	bhi.n	8002f18 <gc_execute_line+0x1244>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002ec2:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8002ec6:	f43f acd0 	beq.w	800286a <gc_execute_line+0xb96>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8002eca:	f043 0320 	orr.w	r3, r3, #32
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed2:	f003 0440 	and.w	r4, r3, #64	; 0x40
 8002ed6:	e4c8      	b.n	800286a <gc_execute_line+0xb96>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002ed8:	f899 3007 	ldrb.w	r3, [r9, #7]
 8002edc:	930c      	str	r3, [sp, #48]	; 0x30
 8002ede:	f7ff bb4e 	b.w	800257e <gc_execute_line+0x8aa>
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <gc_execute_line+0x1258>)
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 8002ee4:	960d      	str	r6, [sp, #52]	; 0x34
 8002ee6:	4626      	mov	r6, r4
 8002ee8:	461c      	mov	r4, r3
 8002eea:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <gc_execute_line+0x1264>)
 8002eec:	9b08      	ldr	r3, [sp, #32]
 8002eee:	fa43 f105 	asr.w	r1, r3, r5
 8002ef2:	f011 0f01 	tst.w	r1, #1
 8002ef6:	f105 0501 	add.w	r5, r5, #1
 8002efa:	d006      	beq.n	8002f0a <gc_execute_line+0x1236>
 8002efc:	4611      	mov	r1, r2
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	9211      	str	r2, [sp, #68]	; 0x44
 8002f02:	f7fd fed5 	bl	8000cb0 <__aeabi_fmul>
 8002f06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002f08:	6020      	str	r0, [r4, #0]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8002f0a:	2d04      	cmp	r5, #4
 8002f0c:	f104 0404 	add.w	r4, r4, #4
 8002f10:	d1ec      	bne.n	8002eec <gc_execute_line+0x1218>
 8002f12:	4634      	mov	r4, r6
 8002f14:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002f16:	e730      	b.n	8002d7a <gc_execute_line+0x10a6>
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002f18:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8002f1c:	f47f aca5 	bne.w	800286a <gc_execute_line+0xb96>
 8002f20:	e7d3      	b.n	8002eca <gc_execute_line+0x11f6>
 8002f22:	bf00      	nop
 8002f24:	20001014 	.word	0x20001014
 8002f28:	20001030 	.word	0x20001030
 8002f2c:	20001074 	.word	0x20001074
 8002f30:	20001064 	.word	0x20001064
 8002f34:	2000109c 	.word	0x2000109c
 8002f38:	41cb3333 	.word	0x41cb3333

08002f3c <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	4605      	mov	r5, r0
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f40:	7a03      	ldrb	r3, [r0, #8]
  pl_data->feed_rate = gc_block->values.f;
 8002f42:	68c8      	ldr	r0, [r1, #12]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f44:	f043 0304 	orr.w	r3, r3, #4
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <jog_execute+0x58>)
  pl_data->feed_rate = gc_block->values.f;
 8002f4a:	6028      	str	r0, [r5, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f4c:	722b      	strb	r3, [r5, #8]
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f4e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002f52:	f101 0438 	add.w	r4, r1, #56	; 0x38
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f56:	069b      	lsls	r3, r3, #26
 8002f58:	d506      	bpl.n	8002f68 <jog_execute+0x2c>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f006 fbd0 	bl	8009700 <system_check_travel_limits>
 8002f60:	b110      	cbz	r0, 8002f68 <jog_execute+0x2c>
 8002f62:	240f      	movs	r4, #15
      st_wake_up();  // NOTE: Manual start. No state machine required.
    }
  }

  return(STATUS_OK);
}
 8002f64:	4620      	mov	r0, r4
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
  if (sys.state == STATE_IDLE) {
 8002f68:	4e0b      	ldr	r6, [pc, #44]	; (8002f98 <jog_execute+0x5c>)
  mc_line(gc_block->values.xyz, pl_data);
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f000 fc17 	bl	80037a0 <mc_line>
  if (sys.state == STATE_IDLE) {
 8002f72:	7834      	ldrb	r4, [r6, #0]
 8002f74:	b114      	cbz	r4, 8002f7c <jog_execute+0x40>
  return(STATUS_OK);
 8002f76:	2400      	movs	r4, #0
}
 8002f78:	4620      	mov	r0, r4
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8002f7c:	f001 fa1c 	bl	80043b8 <plan_get_current_block>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d0f8      	beq.n	8002f76 <jog_execute+0x3a>
      sys.state = STATE_JOG;
 8002f84:	2320      	movs	r3, #32
 8002f86:	7033      	strb	r3, [r6, #0]
      st_prep_buffer();
 8002f88:	f005 fbe2 	bl	8008750 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8002f8c:	f005 f844 	bl	8008018 <st_wake_up>
}
 8002f90:	4620      	mov	r0, r4
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	2000126c 	.word	0x2000126c
 8002f98:	200010b0 	.word	0x200010b0

08002f9c <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 8002f9c:	b530      	push	{r4, r5, lr}
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002f9e:	2101      	movs	r1, #1
{
 8002fa0:	b085      	sub	sp, #20
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002fa2:	2009      	movs	r0, #9
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002fa4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002fa8:	f7fe fc46 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8002fac:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002fae:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002fb0:	a904      	add	r1, sp, #16
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002fb2:	4d20      	ldr	r5, [pc, #128]	; (8003034 <limits_init+0x98>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002fb4:	f821 4d10 	strh.w	r4, [r1, #-16]!
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002fb8:	481f      	ldr	r0, [pc, #124]	; (8003038 <limits_init+0x9c>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8002fba:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002fbe:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002fc2:	f7fe fa1d 	bl	8001400 <GPIO_Init>
	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002fc6:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8002fca:	071b      	lsls	r3, r3, #28
 8002fcc:	d406      	bmi.n	8002fdc <limits_init+0x40>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8002fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <limits_init+0xa0>)
 8002fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	else
	{
		limits_disable();
	}
#endif
}
 8002fd8:	b005      	add	sp, #20
 8002fda:	bd30      	pop	{r4, r5, pc}
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8002fdc:	210c      	movs	r1, #12
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7fe fc0c 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 8002fe4:	210d      	movs	r1, #13
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7fe fc08 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8002fec:	210e      	movs	r1, #14
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f7fe fc04 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, A_LIMIT_BIT);
 8002ff4:	210f      	movs	r1, #15
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7fe fc00 	bl	80017fc <GPIO_EXTILineConfig>
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8002ffc:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8003000:	2200      	movs	r2, #0
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003002:	f013 0f40 	tst.w	r3, #64	; 0x40
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8003006:	bf14      	ite	ne
 8003008:	2108      	movne	r1, #8
 800300a:	210c      	moveq	r1, #12
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800300c:	2301      	movs	r3, #1
		EXTI_Init(&EXTI_InitStructure);
 800300e:	a802      	add	r0, sp, #8
 8003010:	f88d 100d 	strb.w	r1, [sp, #13]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8003014:	f88d 200c 	strb.w	r2, [sp, #12]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003018:	f88d 300e 	strb.w	r3, [sp, #14]
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 800301c:	9402      	str	r4, [sp, #8]
		EXTI_Init(&EXTI_InitStructure);
 800301e:	f7fe f8a5 	bl	800116c <EXTI_Init>
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <limits_init+0xa4>)
 8003024:	a804      	add	r0, sp, #16
 8003026:	f840 3d0c 	str.w	r3, [r0, #-12]!
		NVIC_Init(&NVIC_InitStructure);
 800302a:	f7fe f86d 	bl	8001108 <NVIC_Init>
}
 800302e:	b005      	add	sp, #20
 8003030:	bd30      	pop	{r4, r5, pc}
 8003032:	bf00      	nop
 8003034:	2000126c 	.word	0x2000126c
 8003038:	40010c00 	.word	0x40010c00
 800303c:	e000e100 	.word	0xe000e100
 8003040:	01020228 	.word	0x01020228

08003044 <limits_disable>:
 8003044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003048:	4b01      	ldr	r3, [pc, #4]	; (8003050 <limits_disable+0xc>)
 800304a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800304e:	4770      	bx	lr
 8003050:	e000e100 	.word	0xe000e100

08003054 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8003054:	b510      	push	{r4, lr}
#if defined(AVRTARGET) || defined(STM32F103C8)
#if defined(AVRTARGET)
  uint8_t pin = (LIMIT_PIN & LIMIT_MASK);
#endif
#if defined(STM32F103C8)
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003056:	4813      	ldr	r0, [pc, #76]	; (80030a4 <limits_get_state+0x50>)
 8003058:	f7fe fb88 	bl	800176c <GPIO_ReadInputData>
#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <limits_get_state+0x54>)
 800305e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003062:	065b      	lsls	r3, r3, #25
 8003064:	bf5c      	itt	pl
 8003066:	f480 4070 	eorpl.w	r0, r0, #61440	; 0xf000
 800306a:	b280      	uxthpl	r0, r0
  if (pin) {
 800306c:	b1c8      	cbz	r0, 80030a2 <limits_get_state+0x4e>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800306e:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <limits_get_state+0x58>)
 8003070:	8813      	ldrh	r3, [r2, #0]
 8003072:	8854      	ldrh	r4, [r2, #2]
 8003074:	4218      	tst	r0, r3
 8003076:	bf07      	ittee	eq
 8003078:	2300      	moveq	r3, #0
 800307a:	2102      	moveq	r1, #2
 800307c:	2301      	movne	r3, #1
 800307e:	2103      	movne	r1, #3
 8003080:	4220      	tst	r0, r4
 8003082:	bf08      	it	eq
 8003084:	4619      	moveq	r1, r3
 8003086:	8894      	ldrh	r4, [r2, #4]
 8003088:	f041 0304 	orr.w	r3, r1, #4
 800308c:	4220      	tst	r0, r4
 800308e:	bf08      	it	eq
 8003090:	460b      	moveq	r3, r1
 8003092:	88d2      	ldrh	r2, [r2, #6]
 8003094:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8003098:	4210      	tst	r0, r2
 800309a:	f043 0008 	orr.w	r0, r3, #8
 800309e:	bf08      	it	eq
 80030a0:	4618      	moveq	r0, r3
    }
  }
#endif
  return(limit_state);
}
 80030a2:	bd10      	pop	{r4, pc}
 80030a4:	40010c00 	.word	0x40010c00
 80030a8:	2000126c 	.word	0x2000126c
 80030ac:	0800c028 	.word	0x0800c028

080030b0 <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 80030b0:	b508      	push	{r3, lr}
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 80030b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030b6:	f7fe f897 	bl	80011e8 <EXTI_GetITStatus>
 80030ba:	bb88      	cbnz	r0, 8003120 <EXTI15_10_IRQHandler+0x70>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 80030bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030c0:	f7fe f892 	bl	80011e8 <EXTI_GetITStatus>
 80030c4:	bb38      	cbnz	r0, 8003116 <EXTI15_10_IRQHandler+0x66>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 80030c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030ca:	f7fe f88d 	bl	80011e8 <EXTI_GetITStatus>
 80030ce:	b9e8      	cbnz	r0, 800310c <EXTI15_10_IRQHandler+0x5c>
	{
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
	}
// --- YSV 22-06-2018
	#if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
	if (EXTI_GetITStatus(1 << A_LIMIT_BIT) != RESET)
 80030d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030d4:	f7fe f888 	bl	80011e8 <EXTI_GetITStatus>
 80030d8:	b998      	cbnz	r0, 8003102 <EXTI15_10_IRQHandler+0x52>

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 80030da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <EXTI15_10_IRQHandler+0x7c>)
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <EXTI15_10_IRQHandler+0x80>)
 80030e2:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d002      	beq.n	80030f2 <EXTI15_10_IRQHandler+0x42>
    if (!(sys_rt_exec_alarm)) {
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <EXTI15_10_IRQHandler+0x84>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b103      	cbz	r3, 80030f4 <EXTI15_10_IRQHandler+0x44>
 80030f2:	bd08      	pop	{r3, pc}
      if (limits_get_state()) {
        mc_reset(); // Initiate system kill.
        system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
      }
#else
      mc_reset(); // Initiate system kill.
 80030f4:	f000 fe52 	bl	8003d9c <mc_reset>
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif
    }
  }
}
 80030f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 80030fc:	2001      	movs	r0, #1
 80030fe:	f006 bb4f 	b.w	80097a0 <system_set_exec_alarm>
		EXTI_ClearITPendingBit(1 << A_LIMIT_BIT);
 8003102:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003106:	f7fe f87d 	bl	8001204 <EXTI_ClearITPendingBit>
 800310a:	e7e6      	b.n	80030da <EXTI15_10_IRQHandler+0x2a>
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 800310c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003110:	f7fe f878 	bl	8001204 <EXTI_ClearITPendingBit>
 8003114:	e7dc      	b.n	80030d0 <EXTI15_10_IRQHandler+0x20>
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 8003116:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800311a:	f7fe f873 	bl	8001204 <EXTI_ClearITPendingBit>
 800311e:	e7d2      	b.n	80030c6 <EXTI15_10_IRQHandler+0x16>
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 8003120:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003124:	f7fe f86e 	bl	8001204 <EXTI_ClearITPendingBit>
 8003128:	e7c8      	b.n	80030bc <EXTI15_10_IRQHandler+0xc>
 800312a:	bf00      	nop
 800312c:	e000e100 	.word	0xe000e100
 8003130:	200010b0 	.word	0x200010b0
 8003134:	200010e8 	.word	0x200010e8

08003138 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 8003138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.abort) { return; } // Block if system reset has been issued.
 800313c:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 80033f8 <limits_go_home+0x2c0>
{
 8003140:	b095      	sub	sp, #84	; 0x54
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003142:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003146:	b113      	cbz	r3, 800314e <limits_go_home+0x16>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 8003148:	b015      	add	sp, #84	; 0x54
 800314a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800314e:	4604      	mov	r4, r0
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003150:	2506      	movs	r5, #6
 8003152:	49a2      	ldr	r1, [pc, #648]	; (80033dc <limits_go_home+0x2a4>)
 8003154:	9007      	str	r0, [sp, #28]
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003156:	f004 0401 	and.w	r4, r4, #1
 800315a:	6808      	ldr	r0, [r1, #0]
 800315c:	6849      	ldr	r1, [r1, #4]
  memset(pl_data,0,sizeof(plan_line_data_t));
 800315e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003160:	aa0b      	add	r2, sp, #44	; 0x2c
 8003162:	930d      	str	r3, [sp, #52]	; 0x34
 8003164:	930e      	str	r3, [sp, #56]	; 0x38
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003166:	f004 03ff 	and.w	r3, r4, #255	; 0xff
 800316a:	c203      	stmia	r2!, {r0, r1}
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 800316c:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003170:	9309      	str	r3, [sp, #36]	; 0x24
 8003172:	2c00      	cmp	r4, #0
 8003174:	f040 80da 	bne.w	800332c <limits_go_home+0x1f4>
  float max_travel = 0.0f;
 8003178:	f04f 0900 	mov.w	r9, #0
 800317c:	4e98      	ldr	r6, [pc, #608]	; (80033e0 <limits_go_home+0x2a8>)
    if (bit_istrue(cycle_mask,bit(idx))) {
 800317e:	9b07      	ldr	r3, [sp, #28]
 8003180:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003184:	9306      	str	r3, [sp, #24]
 8003186:	b153      	cbz	r3, 800319e <limits_go_home+0x66>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003188:	4996      	ldr	r1, [pc, #600]	; (80033e4 <limits_go_home+0x2ac>)
 800318a:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800318c:	f7fd fd90 	bl	8000cb0 <__aeabi_fmul>
 8003190:	4605      	mov	r5, r0
 8003192:	4601      	mov	r1, r0
 8003194:	4648      	mov	r0, r9
 8003196:	f7fd ff3d 	bl	8001014 <__aeabi_fcmpge>
 800319a:	b900      	cbnz	r0, 800319e <limits_go_home+0x66>
 800319c:	46a9      	mov	r9, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 800319e:	9b07      	ldr	r3, [sp, #28]
 80031a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031a4:	9305      	str	r3, [sp, #20]
 80031a6:	b153      	cbz	r3, 80031be <limits_go_home+0x86>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80031a8:	498e      	ldr	r1, [pc, #568]	; (80033e4 <limits_go_home+0x2ac>)
 80031aa:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80031ac:	f7fd fd80 	bl	8000cb0 <__aeabi_fmul>
 80031b0:	4605      	mov	r5, r0
 80031b2:	4601      	mov	r1, r0
 80031b4:	4648      	mov	r0, r9
 80031b6:	f7fd ff2d 	bl	8001014 <__aeabi_fcmpge>
 80031ba:	b900      	cbnz	r0, 80031be <limits_go_home+0x86>
 80031bc:	46a9      	mov	r9, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 80031be:	9b07      	ldr	r3, [sp, #28]
 80031c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80031c4:	9304      	str	r3, [sp, #16]
 80031c6:	b153      	cbz	r3, 80031de <limits_go_home+0xa6>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80031c8:	4986      	ldr	r1, [pc, #536]	; (80033e4 <limits_go_home+0x2ac>)
 80031ca:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80031cc:	f7fd fd70 	bl	8000cb0 <__aeabi_fmul>
 80031d0:	4605      	mov	r5, r0
 80031d2:	4601      	mov	r1, r0
 80031d4:	4648      	mov	r0, r9
 80031d6:	f7fd ff1d 	bl	8001014 <__aeabi_fcmpge>
 80031da:	b900      	cbnz	r0, 80031de <limits_go_home+0xa6>
 80031dc:	46a9      	mov	r9, r5
 80031de:	b2e3      	uxtb	r3, r4
 80031e0:	9303      	str	r3, [sp, #12]
  float homing_rate = settings.homing_seek_rate;
 80031e2:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80031e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80031e8:	461a      	mov	r2, r3
 80031ea:	2304      	movs	r3, #4
  bool approach = true;
 80031ec:	2401      	movs	r4, #1
 80031ee:	4691      	mov	r9, r2
 80031f0:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 80033f0 <limits_go_home+0x2b8>
 80031f4:	4d7c      	ldr	r5, [pc, #496]	; (80033e8 <limits_go_home+0x2b0>)
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80031f6:	4f7d      	ldr	r7, [pc, #500]	; (80033ec <limits_go_home+0x2b4>)
  float homing_rate = settings.homing_seek_rate;
 80031f8:	9302      	str	r3, [sp, #8]
    system_convert_array_steps_to_mpos(target,sys_position);
 80031fa:	497d      	ldr	r1, [pc, #500]	; (80033f0 <limits_go_home+0x2b8>)
 80031fc:	a810      	add	r0, sp, #64	; 0x40
 80031fe:	f006 fa5b 	bl	80096b8 <system_convert_array_steps_to_mpos>
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003202:	9b03      	ldr	r3, [sp, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 818b 	beq.w	8003520 <limits_go_home+0x3e8>
          sys_position[idx] = 0;
 800320a:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800320c:	f8b6 205a 	ldrh.w	r2, [r6, #90]	; 0x5a
          sys_position[idx] = 0;
 8003210:	f8ca 1000 	str.w	r1, [sl]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003214:	07d3      	lsls	r3, r2, #31
 8003216:	f140 819d 	bpl.w	8003554 <limits_go_home+0x41c>
          if (approach) { target[idx] = -max_travel; }
 800321a:	2c00      	cmp	r4, #0
 800321c:	f040 819d 	bne.w	800355a <limits_go_home+0x422>
          else { target[idx] = max_travel; }
 8003220:	9b01      	ldr	r3, [sp, #4]
 8003222:	9310      	str	r3, [sp, #64]	; 0x40
        axislock |= step_pin[idx];
 8003224:	2102      	movs	r1, #2
        n_active_axis++;
 8003226:	2001      	movs	r0, #1
        axislock |= step_pin[idx];
 8003228:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
      if (bit_istrue(cycle_mask,bit(idx))) {
 800322c:	9b06      	ldr	r3, [sp, #24]
 800322e:	b18b      	cbz	r3, 8003254 <limits_go_home+0x11c>
          sys_position[idx] = 0;
 8003230:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003232:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
          sys_position[idx] = 0;
 8003236:	f8ca 3004 	str.w	r3, [sl, #4]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800323a:	0780      	lsls	r0, r0, #30
 800323c:	f140 8182 	bpl.w	8003544 <limits_go_home+0x40c>
          if (approach) { target[idx] = -max_travel; }
 8003240:	2c00      	cmp	r4, #0
 8003242:	f040 8182 	bne.w	800354a <limits_go_home+0x412>
          else { target[idx] = max_travel; }
 8003246:	9b01      	ldr	r3, [sp, #4]
 8003248:	9311      	str	r3, [sp, #68]	; 0x44
        n_active_axis++;
 800324a:	4608      	mov	r0, r1
        axislock |= step_pin[idx];
 800324c:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 8003250:	ea4b 0b0e 	orr.w	fp, fp, lr
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003254:	9b05      	ldr	r3, [sp, #20]
 8003256:	b193      	cbz	r3, 800327e <limits_go_home+0x146>
          sys_position[idx] = 0;
 8003258:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800325a:	f8b6 105a 	ldrh.w	r1, [r6, #90]	; 0x5a
        n_active_axis++;
 800325e:	3001      	adds	r0, #1
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003260:	0749      	lsls	r1, r1, #29
        n_active_axis++;
 8003262:	b2c0      	uxtb	r0, r0
          sys_position[idx] = 0;
 8003264:	f8ca 3008 	str.w	r3, [sl, #8]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003268:	f140 817c 	bpl.w	8003564 <limits_go_home+0x42c>
          if (approach) { target[idx] = -max_travel; }
 800326c:	2c00      	cmp	r4, #0
 800326e:	f040 817c 	bne.w	800356a <limits_go_home+0x432>
          else { target[idx] = max_travel; }
 8003272:	9b01      	ldr	r3, [sp, #4]
 8003274:	9312      	str	r3, [sp, #72]	; 0x48
        axislock |= step_pin[idx];
 8003276:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800327a:	ea4b 0b01 	orr.w	fp, fp, r1
      if (bit_istrue(cycle_mask,bit(idx))) {
 800327e:	9b04      	ldr	r3, [sp, #16]
 8003280:	b193      	cbz	r3, 80032a8 <limits_go_home+0x170>
          sys_position[idx] = 0;
 8003282:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003284:	f8b6 105a 	ldrh.w	r1, [r6, #90]	; 0x5a
        n_active_axis++;
 8003288:	3001      	adds	r0, #1
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800328a:	070a      	lsls	r2, r1, #28
        n_active_axis++;
 800328c:	b2c0      	uxtb	r0, r0
          sys_position[idx] = 0;
 800328e:	f8ca 300c 	str.w	r3, [sl, #12]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003292:	f140 816f 	bpl.w	8003574 <limits_go_home+0x43c>
          if (approach) { target[idx] = -max_travel; }
 8003296:	2c00      	cmp	r4, #0
 8003298:	f040 816f 	bne.w	800357a <limits_go_home+0x442>
          else { target[idx] = max_travel; }
 800329c:	9b01      	ldr	r3, [sp, #4]
 800329e:	9313      	str	r3, [sp, #76]	; 0x4c
        axislock |= step_pin[idx];
 80032a0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80032a4:	ea4b 0b03 	orr.w	fp, fp, r3
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 80032a8:	f7fd fcaa 	bl	8000c00 <__aeabi_ui2f>
 80032ac:	f007 fe16 	bl	800aedc <sqrtf>
    sys.homing_axis_lock = axislock;
 80032b0:	f8a8 b006 	strh.w	fp, [r8, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 80032b4:	4601      	mov	r1, r0
 80032b6:	4648      	mov	r0, r9
 80032b8:	f7fd fcfa 	bl	8000cb0 <__aeabi_fmul>
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 80032bc:	a90d      	add	r1, sp, #52	; 0x34
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 80032be:	900d      	str	r0, [sp, #52]	; 0x34
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 80032c0:	a810      	add	r0, sp, #64	; 0x40
 80032c2:	f001 f967 	bl	8004594 <plan_buffer_line>
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 80032c6:	2304      	movs	r3, #4
 80032c8:	f888 3004 	strb.w	r3, [r8, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 80032cc:	f005 fa40 	bl	8008750 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 80032d0:	f004 fea2 	bl	8008018 <st_wake_up>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 80032d4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 80033fc <limits_go_home+0x2c4>
      if (approach) {
 80032d8:	2c00      	cmp	r4, #0
 80032da:	f040 8091 	bne.w	8003400 <limits_go_home+0x2c8>
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 80032de:	f005 fa37 	bl	8008750 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 80032e2:	782b      	ldrb	r3, [r5, #0]
 80032e4:	f013 0f34 	tst.w	r3, #52	; 0x34
 80032e8:	f040 80d7 	bne.w	800349a <limits_go_home+0x362>
    } while (STEP_MASK & axislock);
 80032ec:	f01b 0f0f 	tst.w	fp, #15
 80032f0:	d1f2      	bne.n	80032d8 <limits_go_home+0x1a0>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 80032f2:	f005 f8b5 	bl	8008460 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 80032f6:	f8b6 0064 	ldrh.w	r0, [r6, #100]	; 0x64
 80032fa:	f000 fe3f 	bl	8003f7c <delay_ms>
 80032fe:	f084 0201 	eor.w	r2, r4, #1
    if (approach) {
 8003302:	2c00      	cmp	r4, #0
 8003304:	f040 8110 	bne.w	8003528 <limits_go_home+0x3f0>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8003308:	6eb4      	ldr	r4, [r6, #104]	; 0x68
 800330a:	493a      	ldr	r1, [pc, #232]	; (80033f4 <limits_go_home+0x2bc>)
 800330c:	4620      	mov	r0, r4
 800330e:	9208      	str	r2, [sp, #32]
 8003310:	f7fd fcce 	bl	8000cb0 <__aeabi_fmul>
 8003314:	9b02      	ldr	r3, [sp, #8]
 8003316:	9001      	str	r0, [sp, #4]
 8003318:	1e59      	subs	r1, r3, #1
  } while (n_cycle-- > 0);
 800331a:	f011 03ff 	ands.w	r3, r1, #255	; 0xff
      homing_rate = settings.homing_feed_rate;
 800331e:	f8d6 905c 	ldr.w	r9, [r6, #92]	; 0x5c
  } while (n_cycle-- > 0);
 8003322:	9302      	str	r3, [sp, #8]
 8003324:	9a08      	ldr	r2, [sp, #32]
 8003326:	d010      	beq.n	800334a <limits_go_home+0x212>
  float max_travel = 0.0f;
 8003328:	4614      	mov	r4, r2
 800332a:	e766      	b.n	80031fa <limits_go_home+0xc2>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 800332c:	4e2c      	ldr	r6, [pc, #176]	; (80033e0 <limits_go_home+0x2a8>)
 800332e:	492d      	ldr	r1, [pc, #180]	; (80033e4 <limits_go_home+0x2ac>)
 8003330:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003332:	f7fd fcbd 	bl	8000cb0 <__aeabi_fmul>
 8003336:	2100      	movs	r1, #0
 8003338:	4681      	mov	r9, r0
 800333a:	f7fd fe6b 	bl	8001014 <__aeabi_fcmpge>
 800333e:	2800      	cmp	r0, #0
 8003340:	f47f af1d 	bne.w	800317e <limits_go_home+0x46>
 8003344:	f04f 0900 	mov.w	r9, #0
 8003348:	e719      	b.n	800317e <limits_go_home+0x46>
  } while (n_cycle-- > 0);
 800334a:	46a1      	mov	r9, r4
    if (cycle_mask & bit(idx)) {
 800334c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 800334e:	f8b6 405a 	ldrh.w	r4, [r6, #90]	; 0x5a
    if (cycle_mask & bit(idx)) {
 8003352:	b16b      	cbz	r3, 8003370 <limits_go_home+0x238>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003354:	07e0      	lsls	r0, r4, #31
 8003356:	f140 811d 	bpl.w	8003594 <limits_go_home+0x45c>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 800335a:	6b31      	ldr	r1, [r6, #48]	; 0x30
 800335c:	4648      	mov	r0, r9
 800335e:	f7fd fb9f 	bl	8000aa0 <__addsf3>
 8003362:	6831      	ldr	r1, [r6, #0]
 8003364:	f7fd fca4 	bl	8000cb0 <__aeabi_fmul>
 8003368:	f007 fd54 	bl	800ae14 <lroundf>
        sys_position[idx] = set_axis_position;
 800336c:	f8ca 0000 	str.w	r0, [sl]
    if (cycle_mask & bit(idx)) {
 8003370:	9b06      	ldr	r3, [sp, #24]
 8003372:	b16b      	cbz	r3, 8003390 <limits_go_home+0x258>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003374:	07a1      	lsls	r1, r4, #30
 8003376:	f140 8115 	bpl.w	80035a4 <limits_go_home+0x46c>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 800337a:	6b71      	ldr	r1, [r6, #52]	; 0x34
 800337c:	4648      	mov	r0, r9
 800337e:	f7fd fb8f 	bl	8000aa0 <__addsf3>
 8003382:	6871      	ldr	r1, [r6, #4]
 8003384:	f7fd fc94 	bl	8000cb0 <__aeabi_fmul>
 8003388:	f007 fd44 	bl	800ae14 <lroundf>
        sys_position[idx] = set_axis_position;
 800338c:	f8ca 0004 	str.w	r0, [sl, #4]
    if (cycle_mask & bit(idx)) {
 8003390:	9b05      	ldr	r3, [sp, #20]
 8003392:	b16b      	cbz	r3, 80033b0 <limits_go_home+0x278>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003394:	0762      	lsls	r2, r4, #29
 8003396:	f140 810d 	bpl.w	80035b4 <limits_go_home+0x47c>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 800339a:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800339c:	4648      	mov	r0, r9
 800339e:	f7fd fb7f 	bl	8000aa0 <__addsf3>
 80033a2:	68b1      	ldr	r1, [r6, #8]
 80033a4:	f7fd fc84 	bl	8000cb0 <__aeabi_fmul>
 80033a8:	f007 fd34 	bl	800ae14 <lroundf>
        sys_position[idx] = set_axis_position;
 80033ac:	f8ca 0008 	str.w	r0, [sl, #8]
    if (cycle_mask & bit(idx)) {
 80033b0:	9b04      	ldr	r3, [sp, #16]
 80033b2:	b16b      	cbz	r3, 80033d0 <limits_go_home+0x298>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 80033b4:	0723      	lsls	r3, r4, #28
 80033b6:	f140 8105 	bpl.w	80035c4 <limits_go_home+0x48c>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 80033ba:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80033bc:	4648      	mov	r0, r9
 80033be:	f7fd fb6f 	bl	8000aa0 <__addsf3>
 80033c2:	68f1      	ldr	r1, [r6, #12]
 80033c4:	f7fd fc74 	bl	8000cb0 <__aeabi_fmul>
 80033c8:	f007 fd24 	bl	800ae14 <lroundf>
        sys_position[idx] = set_axis_position;
 80033cc:	f8ca 000c 	str.w	r0, [sl, #12]
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 80033d0:	2300      	movs	r3, #0
 80033d2:	f888 3004 	strb.w	r3, [r8, #4]
}
 80033d6:	b015      	add	sp, #84	; 0x54
 80033d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033dc:	0800c030 	.word	0x0800c030
 80033e0:	2000126c 	.word	0x2000126c
 80033e4:	bfc00000 	.word	0xbfc00000
 80033e8:	200010c5 	.word	0x200010c5
 80033ec:	0800c028 	.word	0x0800c028
 80033f0:	200010d8 	.word	0x200010d8
 80033f4:	40a00000 	.word	0x40a00000
 80033f8:	200010b0 	.word	0x200010b0
 80033fc:	40010c00 	.word	0x40010c00
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003400:	4648      	mov	r0, r9
 8003402:	f7fe f9b3 	bl	800176c <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003406:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800340a:	065b      	lsls	r3, r3, #25
 800340c:	bf5c      	itt	pl
 800340e:	f480 4070 	eorpl.w	r0, r0, #61440	; 0xf000
 8003412:	b280      	uxthpl	r0, r0
  if (pin) {
 8003414:	2800      	cmp	r0, #0
 8003416:	d037      	beq.n	8003488 <limits_go_home+0x350>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003418:	883b      	ldrh	r3, [r7, #0]
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	4218      	tst	r0, r3
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	4210      	tst	r0, r2
 8003426:	88ba      	ldrh	r2, [r7, #4]
 8003428:	bf18      	it	ne
 800342a:	f043 0302 	orrne.w	r3, r3, #2
 800342e:	4210      	tst	r0, r2
 8003430:	88fa      	ldrh	r2, [r7, #6]
 8003432:	bf18      	it	ne
 8003434:	f043 0304 	orrne.w	r3, r3, #4
 8003438:	4210      	tst	r0, r2
          if (axislock & step_pin[idx]) {
 800343a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800343e:	bf18      	it	ne
 8003440:	f043 0308 	orrne.w	r3, r3, #8
          if (axislock & step_pin[idx]) {
 8003444:	ea1b 0f02 	tst.w	fp, r2
 8003448:	d003      	beq.n	8003452 <limits_go_home+0x31a>
            if (limit_state & (1 << idx)) {
 800344a:	07d9      	lsls	r1, r3, #31
                axislock &= ~(step_pin[idx]);
 800344c:	bf48      	it	mi
 800344e:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 8003452:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8003456:	ea1b 0f02 	tst.w	fp, r2
 800345a:	d003      	beq.n	8003464 <limits_go_home+0x32c>
            if (limit_state & (1 << idx)) {
 800345c:	0798      	lsls	r0, r3, #30
                axislock &= ~(step_pin[idx]);
 800345e:	bf48      	it	mi
 8003460:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 8003464:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8003468:	ea1b 0f02 	tst.w	fp, r2
 800346c:	d003      	beq.n	8003476 <limits_go_home+0x33e>
            if (limit_state & (1 << idx)) {
 800346e:	0759      	lsls	r1, r3, #29
                axislock &= ~(step_pin[idx]);
 8003470:	bf48      	it	mi
 8003472:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 8003476:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800347a:	ea1b 0f02 	tst.w	fp, r2
 800347e:	d003      	beq.n	8003488 <limits_go_home+0x350>
            if (limit_state & (1 << idx)) {
 8003480:	08db      	lsrs	r3, r3, #3
                axislock &= ~(step_pin[idx]);
 8003482:	bf18      	it	ne
 8003484:	ea2b 0b02 	bicne.w	fp, fp, r2
        sys.homing_axis_lock = axislock;
 8003488:	f8a8 b006 	strh.w	fp, [r8, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 800348c:	f005 f960 	bl	8008750 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8003490:	782b      	ldrb	r3, [r5, #0]
 8003492:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003496:	f43f af29 	beq.w	80032ec <limits_go_home+0x1b4>
        uint8_t rt_exec = sys_rt_exec_state;
 800349a:	f895 9000 	ldrb.w	r9, [r5]
 800349e:	fa5f f989 	uxtb.w	r9, r9
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80034a2:	f019 0f10 	tst.w	r9, #16
 80034a6:	d16d      	bne.n	8003584 <limits_go_home+0x44c>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 80034a8:	f019 0f20 	tst.w	r9, #32
 80034ac:	d10c      	bne.n	80034c8 <limits_go_home+0x390>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80034ae:	b184      	cbz	r4, 80034d2 <limits_go_home+0x39a>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 80034b0:	f019 0f04 	tst.w	r9, #4
 80034b4:	d16a      	bne.n	800358c <limits_go_home+0x454>
        if (sys_rt_exec_alarm) {
 80034b6:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <limits_go_home+0x4a8>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 808a 	bne.w	80035d4 <limits_go_home+0x49c>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80034c0:	2004      	movs	r0, #4
 80034c2:	f006 f963 	bl	800978c <system_clear_exec_state_flag>
          break;
 80034c6:	e714      	b.n	80032f2 <limits_go_home+0x1ba>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 80034c8:	2007      	movs	r0, #7
 80034ca:	f006 f969 	bl	80097a0 <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80034ce:	2c00      	cmp	r4, #0
 80034d0:	d1ee      	bne.n	80034b0 <limits_go_home+0x378>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 80034d2:	4844      	ldr	r0, [pc, #272]	; (80035e4 <limits_go_home+0x4ac>)
 80034d4:	f7fe f94a 	bl	800176c <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 80034d8:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80034dc:	065b      	lsls	r3, r3, #25
 80034de:	bf5c      	itt	pl
 80034e0:	f480 4070 	eorpl.w	r0, r0, #61440	; 0xf000
 80034e4:	b280      	uxthpl	r0, r0
  if (pin) {
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d0e5      	beq.n	80034b6 <limits_go_home+0x37e>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80034ea:	883b      	ldrh	r3, [r7, #0]
 80034ec:	887a      	ldrh	r2, [r7, #2]
 80034ee:	4218      	tst	r0, r3
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	4210      	tst	r0, r2
 80034f8:	88ba      	ldrh	r2, [r7, #4]
 80034fa:	bf18      	it	ne
 80034fc:	f043 0302 	orrne.w	r3, r3, #2
 8003500:	4210      	tst	r0, r2
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	bf18      	it	ne
 8003506:	f043 0304 	orrne.w	r3, r3, #4
 800350a:	4210      	tst	r0, r2
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 800350c:	9a07      	ldr	r2, [sp, #28]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800350e:	bf18      	it	ne
 8003510:	f043 0308 	orrne.w	r3, r3, #8
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003514:	421a      	tst	r2, r3
 8003516:	d0ce      	beq.n	80034b6 <limits_go_home+0x37e>
 8003518:	2008      	movs	r0, #8
 800351a:	f006 f941 	bl	80097a0 <system_set_exec_alarm>
 800351e:	e7ca      	b.n	80034b6 <limits_go_home+0x37e>
 8003520:	469b      	mov	fp, r3
    n_active_axis = 0;
 8003522:	4618      	mov	r0, r3
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003524:	2101      	movs	r1, #1
 8003526:	e681      	b.n	800322c <limits_go_home+0xf4>
 8003528:	9b02      	ldr	r3, [sp, #8]
      homing_rate = settings.homing_seek_rate;
 800352a:	f8d6 9060 	ldr.w	r9, [r6, #96]	; 0x60
 800352e:	1e59      	subs	r1, r3, #1
      max_travel = settings.homing_pulloff;
 8003530:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003532:	9301      	str	r3, [sp, #4]
  } while (n_cycle-- > 0);
 8003534:	f011 03ff 	ands.w	r3, r1, #255	; 0xff
 8003538:	9302      	str	r3, [sp, #8]
 800353a:	f47f aef5 	bne.w	8003328 <limits_go_home+0x1f0>
 800353e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003542:	e703      	b.n	800334c <limits_go_home+0x214>
          if (approach) { target[idx] = max_travel; }
 8003544:	2c00      	cmp	r4, #0
 8003546:	f47f ae7e 	bne.w	8003246 <limits_go_home+0x10e>
          if (approach) { target[idx] = -max_travel; }
 800354a:	9b01      	ldr	r3, [sp, #4]
 800354c:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 8003550:	9011      	str	r0, [sp, #68]	; 0x44
 8003552:	e67a      	b.n	800324a <limits_go_home+0x112>
          if (approach) { target[idx] = max_travel; }
 8003554:	2c00      	cmp	r4, #0
 8003556:	f47f ae63 	bne.w	8003220 <limits_go_home+0xe8>
          if (approach) { target[idx] = -max_travel; }
 800355a:	9b01      	ldr	r3, [sp, #4]
 800355c:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8003560:	9210      	str	r2, [sp, #64]	; 0x40
 8003562:	e65f      	b.n	8003224 <limits_go_home+0xec>
          if (approach) { target[idx] = max_travel; }
 8003564:	2c00      	cmp	r4, #0
 8003566:	f47f ae84 	bne.w	8003272 <limits_go_home+0x13a>
          if (approach) { target[idx] = -max_travel; }
 800356a:	9b01      	ldr	r3, [sp, #4]
 800356c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003570:	9112      	str	r1, [sp, #72]	; 0x48
 8003572:	e680      	b.n	8003276 <limits_go_home+0x13e>
          if (approach) { target[idx] = max_travel; }
 8003574:	2c00      	cmp	r4, #0
 8003576:	f47f ae91 	bne.w	800329c <limits_go_home+0x164>
          if (approach) { target[idx] = -max_travel; }
 800357a:	9b01      	ldr	r3, [sp, #4]
 800357c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003580:	9313      	str	r3, [sp, #76]	; 0x4c
 8003582:	e68d      	b.n	80032a0 <limits_go_home+0x168>
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003584:	2006      	movs	r0, #6
 8003586:	f006 f90b 	bl	80097a0 <system_set_exec_alarm>
 800358a:	e78d      	b.n	80034a8 <limits_go_home+0x370>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 800358c:	2009      	movs	r0, #9
 800358e:	f006 f907 	bl	80097a0 <system_set_exec_alarm>
 8003592:	e790      	b.n	80034b6 <limits_go_home+0x37e>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003594:	6831      	ldr	r1, [r6, #0]
 8003596:	f109 4000 	add.w	r0, r9, #2147483648	; 0x80000000
 800359a:	f7fd fb89 	bl	8000cb0 <__aeabi_fmul>
 800359e:	f007 fc39 	bl	800ae14 <lroundf>
 80035a2:	e6e3      	b.n	800336c <limits_go_home+0x234>
 80035a4:	6871      	ldr	r1, [r6, #4]
 80035a6:	f109 4000 	add.w	r0, r9, #2147483648	; 0x80000000
 80035aa:	f7fd fb81 	bl	8000cb0 <__aeabi_fmul>
 80035ae:	f007 fc31 	bl	800ae14 <lroundf>
 80035b2:	e6eb      	b.n	800338c <limits_go_home+0x254>
 80035b4:	68b1      	ldr	r1, [r6, #8]
 80035b6:	f109 4000 	add.w	r0, r9, #2147483648	; 0x80000000
 80035ba:	f7fd fb79 	bl	8000cb0 <__aeabi_fmul>
 80035be:	f007 fc29 	bl	800ae14 <lroundf>
 80035c2:	e6f3      	b.n	80033ac <limits_go_home+0x274>
 80035c4:	68f1      	ldr	r1, [r6, #12]
 80035c6:	f109 4000 	add.w	r0, r9, #2147483648	; 0x80000000
 80035ca:	f7fd fb71 	bl	8000cb0 <__aeabi_fmul>
 80035ce:	f007 fc21 	bl	800ae14 <lroundf>
 80035d2:	e6fb      	b.n	80033cc <limits_go_home+0x294>
          mc_reset(); // Stop motors, if they are running.
 80035d4:	f000 fbe2 	bl	8003d9c <mc_reset>
          protocol_execute_realtime();
 80035d8:	f002 fa52 	bl	8005a80 <protocol_execute_realtime>
          return;
 80035dc:	e5b4      	b.n	8003148 <limits_go_home+0x10>
 80035de:	bf00      	nop
 80035e0:	200010e8 	.word	0x200010e8
 80035e4:	40010c00 	.word	0x40010c00

080035e8 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 80035e8:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 80035ea:	f006 f889 	bl	8009700 <system_check_travel_limits>
 80035ee:	b1c8      	cbz	r0, 8003624 <limits_soft_check+0x3c>
    sys.soft_limit = true;
 80035f0:	2301      	movs	r3, #1
 80035f2:	4c0d      	ldr	r4, [pc, #52]	; (8003628 <limits_soft_check+0x40>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 80035f4:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 80035f6:	70e3      	strb	r3, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 80035f8:	2808      	cmp	r0, #8
 80035fa:	d008      	beq.n	800360e <limits_soft_check+0x26>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 80035fc:	f000 fbce 	bl	8003d9c <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 8003600:	2002      	movs	r0, #2
 8003602:	f006 f8cd 	bl	80097a0 <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 8003606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 800360a:	f002 ba39 	b.w	8005a80 <protocol_execute_realtime>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 800360e:	f006 f8b3 	bl	8009778 <system_set_exec_state_flag>
 8003612:	e002      	b.n	800361a <limits_soft_check+0x32>
      } while ( sys.state != STATE_IDLE );
 8003614:	7823      	ldrb	r3, [r4, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <limits_soft_check+0x14>
        protocol_execute_realtime();
 800361a:	f002 fa31 	bl	8005a80 <protocol_execute_realtime>
        if (sys.abort) { return; }
 800361e:	7863      	ldrb	r3, [r4, #1]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f7      	beq.n	8003614 <limits_soft_check+0x2c>
 8003624:	bd10      	pop	{r4, pc}
 8003626:	bf00      	nop
 8003628:	200010b0 	.word	0x200010b0

0800362c <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 800362c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined (STM32F103C8)
    //GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003630:	2101      	movs	r1, #1
{
 8003632:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003634:	2010      	movs	r0, #16
 8003636:	f7fe f8ff 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800363a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800363e:	2310      	movs	r3, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8003640:	2202      	movs	r2, #2
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8003642:	a902      	add	r1, sp, #8
 8003644:	f821 0d04 	strh.w	r0, [r1, #-4]!
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003648:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800364c:	f500 4070 	add.w	r0, r0, #61440	; 0xf000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003650:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8003654:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003658:	f7fd fed2 	bl	8001400 <GPIO_Init>
#endif
	//Set_System();
#ifndef USEUSB
	USART1_Configuration(115200);
#else
	Set_USBClock();
 800365c:	f007 f83a 	bl	800a6d4 <Set_USBClock>
	USB_Interrupts_Config();
 8003660:	f007 f844 	bl	800a6ec <USB_Interrupts_Config>
	USB_Init();
 8003664:	f006 fdea 	bl	800a23c <USB_Init>
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 8003668:	f7fd fdd2 	bl	8001210 <FLASH_Unlock>
	eeprom_init();
 800366c:	f7fe fa76 	bl	8001b5c <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 8003670:	492b      	ldr	r1, [pc, #172]	; (8003720 <main+0xf4>)

    // Reset system variables.
    uint8_t prior_state = sys.state;
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
    sys.state = prior_state;
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8003672:	f04f 0864 	mov.w	r8, #100	; 0x64
	SysTick->CTRL &= 0xfffffffb;
 8003676:	680a      	ldr	r2, [r1, #0]
    sys.state = STATE_IDLE;
 8003678:	4d2a      	ldr	r5, [pc, #168]	; (8003724 <main+0xf8>)
	SysTick->CTRL &= 0xfffffffb;
 800367a:	f022 0204 	bic.w	r2, r2, #4
 800367e:	600a      	str	r2, [r1, #0]
  serial_init();   // Setup serial baud rate and interrupts
 8003680:	f003 fe92 	bl	80073a8 <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 8003684:	f004 fa18 	bl	8007ab8 <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 8003688:	f004 ff8e 	bl	80085a8 <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 800368c:	f005 fdc4 	bl	8009218 <system_init>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003690:	2100      	movs	r1, #0
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003692:	460c      	mov	r4, r1
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8003694:	4a24      	ldr	r2, [pc, #144]	; (8003728 <main+0xfc>)
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003696:	4825      	ldr	r0, [pc, #148]	; (800372c <main+0x100>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8003698:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 800369c:	4e24      	ldr	r6, [pc, #144]	; (8003730 <main+0x104>)
 800369e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 800373c <main+0x110>
 80036a2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8003740 <main+0x114>
 80036a6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8003744 <main+0x118>
 80036aa:	4f22      	ldr	r7, [pc, #136]	; (8003734 <main+0x108>)
 80036ac:	f3c2 1200 	ubfx	r2, r2, #4, #1
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 80036b0:	6001      	str	r1, [r0, #0]
 80036b2:	6041      	str	r1, [r0, #4]
 80036b4:	6081      	str	r1, [r0, #8]
 80036b6:	60c1      	str	r1, [r0, #12]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
    sys_probe_state = 0;
    sys_rt_exec_state = 0;
    sys_rt_exec_alarm = 0;
    sys_rt_exec_motion_override = 0;
 80036b8:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <main+0x10c>)
    sys_probe_state = 0;
 80036ba:	f88b 4000 	strb.w	r4, [fp]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80036be:	60ac      	str	r4, [r5, #8]
    sys_rt_exec_state = 0;
 80036c0:	f88a 4000 	strb.w	r4, [sl]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80036c4:	602c      	str	r4, [r5, #0]
    sys_rt_exec_alarm = 0;
 80036c6:	f889 4000 	strb.w	r4, [r9]
    sys.state = prior_state;
 80036ca:	702a      	strb	r2, [r5, #0]
    sys_rt_exec_motion_override = 0;
 80036cc:	701c      	strb	r4, [r3, #0]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80036ce:	606c      	str	r4, [r5, #4]
 80036d0:	60ec      	str	r4, [r5, #12]
 80036d2:	612c      	str	r4, [r5, #16]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 80036d4:	f885 8008 	strb.w	r8, [r5, #8]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 80036d8:	f885 8009 	strb.w	r8, [r5, #9]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 80036dc:	f885 800a 	strb.w	r8, [r5, #10]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 80036e0:	6034      	str	r4, [r6, #0]
 80036e2:	6074      	str	r4, [r6, #4]
 80036e4:	60b4      	str	r4, [r6, #8]
 80036e6:	60f4      	str	r4, [r6, #12]
    sys_rt_exec_accessory_override = 0;
 80036e8:	703c      	strb	r4, [r7, #0]

    // Reset Grbl primary systems.
    serial_reset_read_buffer(); // Clear serial read buffer
 80036ea:	f003 ff73 	bl	80075d4 <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 80036ee:	f7fe fad3 	bl	8001c98 <gc_init>
    spindle_init();
 80036f2:	f004 fa7d 	bl	8007bf0 <spindle_init>
    coolant_init();
 80036f6:	f7fe f991 	bl	8001a1c <coolant_init>
    limits_init();
 80036fa:	f7ff fc4f 	bl	8002f9c <limits_init>
    probe_init();
 80036fe:	f001 fc25 	bl	8004f4c <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 8003702:	f000 fe17 	bl	8004334 <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 8003706:	f004 feab 	bl	8008460 <st_reset>

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 800370a:	f001 f9a5 	bl	8004a58 <plan_sync_position>
    gc_sync_position();
 800370e:	f7fe fad9 	bl	8001cc4 <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 8003712:	f002 ff29 	bl	8006568 <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 8003716:	f002 fde1 	bl	80062dc <protocol_main_loop>
 800371a:	782a      	ldrb	r2, [r5, #0]
 800371c:	e7cc      	b.n	80036b8 <main+0x8c>
 800371e:	bf00      	nop
 8003720:	e000e010 	.word	0xe000e010
 8003724:	200010b0 	.word	0x200010b0
 8003728:	2000126c 	.word	0x2000126c
 800372c:	200010d8 	.word	0x200010d8
 8003730:	200010c8 	.word	0x200010c8
 8003734:	200010c4 	.word	0x200010c4
 8003738:	200010ac 	.word	0x200010ac
 800373c:	200010c6 	.word	0x200010c6
 8003740:	200010c5 	.word	0x200010c5
 8003744:	200010e8 	.word	0x200010e8

08003748 <_delay_ms>:
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x)
{
	u32 temp;
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 8003748:	f242 3128 	movw	r1, #9000	; 0x2328
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <_delay_ms+0x2c>)
{
 800374e:	b430      	push	{r4, r5}
	SysTick->VAL = 0x00;                                            // Empty the counter
 8003750:	2500      	movs	r5, #0
	SysTick->CTRL = 0x01;                                           // Start from bottom
 8003752:	2401      	movs	r4, #1
	do
	{
		temp = SysTick->CTRL;
 8003754:	461a      	mov	r2, r3
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 8003756:	fb01 f000 	mul.w	r0, r1, r0
 800375a:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0x00;                                            // Empty the counter
 800375c:	609d      	str	r5, [r3, #8]
	SysTick->CTRL = 0x01;                                           // Start from bottom
 800375e:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL;
 8003760:	6813      	ldr	r3, [r2, #0]
	} while ((temp & 0x01) && !(temp&(1 << 16)));                             // Wait time arrive
 8003762:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8003766:	2b01      	cmp	r3, #1
 8003768:	d0fa      	beq.n	8003760 <_delay_ms+0x18>
	SysTick->CTRL = 0x00;                                            // Close the counter
 800376a:	2300      	movs	r3, #0
	SysTick->VAL = 0X00;                                            // Empty the counter
}
 800376c:	bc30      	pop	{r4, r5}
	SysTick->CTRL = 0x00;                                            // Close the counter
 800376e:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0X00;                                            // Empty the counter
 8003770:	6093      	str	r3, [r2, #8]
}
 8003772:	4770      	bx	lr
 8003774:	e000e010 	.word	0xe000e010

08003778 <LedBlink>:
void LedBlink(void)
{
 8003778:	b510      	push	{r4, lr}
	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 800377a:	4c07      	ldr	r4, [pc, #28]	; (8003798 <LedBlink+0x20>)
 800377c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003780:	7822      	ldrb	r2, [r4, #0]
 8003782:	4806      	ldr	r0, [pc, #24]	; (800379c <LedBlink+0x24>)
 8003784:	f7fd fffe 	bl	8001784 <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 8003788:	7823      	ldrb	r3, [r4, #0]
 800378a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800378e:	bf18      	it	ne
 8003790:	2301      	movne	r3, #1
 8003792:	7023      	strb	r3, [r4, #0]
 8003794:	bd10      	pop	{r4, pc}
 8003796:	bf00      	nop
 8003798:	20000000 	.word	0x20000000
 800379c:	40011000 	.word	0x40011000

080037a0 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80037a2:	4d17      	ldr	r5, [pc, #92]	; (8003800 <mc_line+0x60>)
{
 80037a4:	460e      	mov	r6, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80037a6:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
{
 80037aa:	4607      	mov	r7, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80037ac:	0699      	lsls	r1, r3, #26
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80037ae:	4c15      	ldr	r4, [pc, #84]	; (8003804 <mc_line+0x64>)
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80037b0:	d504      	bpl.n	80037bc <mc_line+0x1c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80037b2:	7823      	ldrb	r3, [r4, #0]
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d00a      	beq.n	80037ce <mc_line+0x2e>
 80037b8:	f7ff ff16 	bl	80035e8 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 80037bc:	7823      	ldrb	r3, [r4, #0]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d105      	bne.n	80037ce <mc_line+0x2e>
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
    if (sys.abort) { return; } // Bail, if system abort.
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 80037c4:	f000 fe26 	bl	8004414 <plan_check_full_buffer>
 80037c8:	b138      	cbz	r0, 80037da <mc_line+0x3a>
 80037ca:	f001 fc2d 	bl	8005028 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 80037ce:	f002 f957 	bl	8005a80 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 80037d2:	7863      	ldrb	r3, [r4, #1]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f5      	beq.n	80037c4 <mc_line+0x24>
 80037d8:	e7f3      	b.n	80037c2 <mc_line+0x22>
    else { break; }
  } while (1);

  // Plan and queue motion into planner buffer
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 80037da:	4638      	mov	r0, r7
 80037dc:	4631      	mov	r1, r6
 80037de:	f000 fed9 	bl	8004594 <plan_buffer_line>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d1ed      	bne.n	80037c2 <mc_line+0x22>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 80037e6:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 80037ea:	079a      	lsls	r2, r3, #30
 80037ec:	d5e9      	bpl.n	80037c2 <mc_line+0x22>
			// Correctly set spindle state, if there is a coincident position passed. Forces a buffer
			// sync while in M3 laser mode only.
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 80037ee:	7a33      	ldrb	r3, [r6, #8]
 80037f0:	06db      	lsls	r3, r3, #27
 80037f2:	d5e6      	bpl.n	80037c2 <mc_line+0x22>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 80037f4:	6871      	ldr	r1, [r6, #4]
 80037f6:	2010      	movs	r0, #16
			}
		}
	}
}
 80037f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 80037fc:	f004 bb60 	b.w	8007ec0 <spindle_sync>
 8003800:	2000126c 	.word	0x2000126c
 8003804:	200010b0 	.word	0x200010b0

08003808 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8003808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800380c:	461f      	mov	r7, r3
 800380e:	b091      	sub	sp, #68	; 0x44
 8003810:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8003814:	4683      	mov	fp, r0
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003816:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800381a:	00a3      	lsls	r3, r4, #2
 800381c:	18d6      	adds	r6, r2, r3
{
 800381e:	900f      	str	r0, [sp, #60]	; 0x3c
 8003820:	910b      	str	r1, [sp, #44]	; 0x2c
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003822:	4628      	mov	r0, r5
 8003824:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8003828:	9602      	str	r6, [sp, #8]
 800382a:	18fe      	adds	r6, r7, r3
 800382c:	9207      	str	r2, [sp, #28]
 800382e:	960c      	str	r6, [sp, #48]	; 0x30
 8003830:	f7fd f936 	bl	8000aa0 <__addsf3>
{
 8003834:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003838:	9a07      	ldr	r2, [sp, #28]
 800383a:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
 800383e:	00b3      	lsls	r3, r6, #2
 8003840:	441f      	add	r7, r3
 8003842:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003846:	4682      	mov	sl, r0
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003848:	441a      	add	r2, r3
  float center_axis0 = position[axis_0] + offset[axis_0];
 800384a:	9003      	str	r0, [sp, #12]
  float center_axis1 = position[axis_1] + offset[axis_1];
 800384c:	4640      	mov	r0, r8
 800384e:	9204      	str	r2, [sp, #16]
 8003850:	970d      	str	r7, [sp, #52]	; 0x34
 8003852:	f7fd f925 	bl	8000aa0 <__addsf3>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
 8003856:	4651      	mov	r1, sl
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003858:	4681      	mov	r9, r0
 800385a:	9005      	str	r0, [sp, #20]
  float rt_axis0 = target[axis_0] - center_axis0;
 800385c:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8003860:	f7fd f91c 	bl	8000a9c <__aeabi_fsub>
  float rt_axis1 = target[axis_1] - center_axis1;
 8003864:	4649      	mov	r1, r9
  float rt_axis0 = target[axis_0] - center_axis0;
 8003866:	4604      	mov	r4, r0
  float rt_axis1 = target[axis_1] - center_axis1;
 8003868:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 800386c:	f7fd f916 	bl	8000a9c <__aeabi_fsub>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003870:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  float rt_axis1 = target[axis_1] - center_axis1;
 8003874:	4606      	mov	r6, r0

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003876:	4621      	mov	r1, r4
 8003878:	4628      	mov	r0, r5
 800387a:	f7fd fa19 	bl	8000cb0 <__aeabi_fmul>
  float r_axis1 = -offset[axis_1];
 800387e:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003882:	4607      	mov	r7, r0
 8003884:	4631      	mov	r1, r6
 8003886:	4640      	mov	r0, r8
 8003888:	f7fd fa12 	bl	8000cb0 <__aeabi_fmul>
 800388c:	4601      	mov	r1, r0
 800388e:	4638      	mov	r0, r7
 8003890:	f7fd f906 	bl	8000aa0 <__addsf3>
 8003894:	4631      	mov	r1, r6
 8003896:	4681      	mov	r9, r0
 8003898:	4628      	mov	r0, r5
 800389a:	f7fd fa09 	bl	8000cb0 <__aeabi_fmul>
 800389e:	4621      	mov	r1, r4
 80038a0:	4606      	mov	r6, r0
 80038a2:	4640      	mov	r0, r8
 80038a4:	f7fd fa04 	bl	8000cb0 <__aeabi_fmul>
 80038a8:	4601      	mov	r1, r0
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7fd f8f6 	bl	8000a9c <__aeabi_fsub>
 80038b0:	4649      	mov	r1, r9
 80038b2:	f007 fb11 	bl	800aed8 <atan2f>
{
 80038b6:	f89d 7078 	ldrb.w	r7, [sp, #120]	; 0x78
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 80038ba:	4606      	mov	r6, r0
{
 80038bc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80038be:	f89d 9074 	ldrb.w	r9, [sp, #116]	; 0x74
  if (is_clockwise_arc) { // Correct atan2 output per direction
 80038c2:	2f00      	cmp	r7, #0
 80038c4:	f000 80d0 	beq.w	8003a68 <mc_arc+0x260>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 80038c8:	f7fc fda6 	bl	8000418 <__aeabi_f2d>
 80038cc:	a3a8      	add	r3, pc, #672	; (adr r3, 8003b70 <mc_arc+0x368>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	4682      	mov	sl, r0
 80038d4:	468b      	mov	fp, r1
 80038d6:	f7fd f879 	bl	80009cc <__aeabi_dcmpge>
 80038da:	2800      	cmp	r0, #0
 80038dc:	f040 80e9 	bne.w	8003ab2 <mc_arc+0x2aa>
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 80038e0:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8003b94 <mc_arc+0x38c>
 80038e4:	4621      	mov	r1, r4
 80038e6:	f8db 704c 	ldr.w	r7, [fp, #76]	; 0x4c
 80038ea:	4620      	mov	r0, r4
 80038ec:	f7fd f8d8 	bl	8000aa0 <__addsf3>
 80038f0:	4639      	mov	r1, r7
 80038f2:	f7fd f8d3 	bl	8000a9c <__aeabi_fsub>
 80038f6:	4639      	mov	r1, r7
 80038f8:	f7fd f9da 	bl	8000cb0 <__aeabi_fmul>
 80038fc:	f007 faee 	bl	800aedc <sqrtf>
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003900:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003904:	4607      	mov	r7, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003906:	4620      	mov	r0, r4
 8003908:	f7fd f9d2 	bl	8000cb0 <__aeabi_fmul>
 800390c:	4631      	mov	r1, r6
 800390e:	f7fd f9cf 	bl	8000cb0 <__aeabi_fmul>
 8003912:	4639      	mov	r1, r7
 8003914:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003918:	f7fd fa7e 	bl	8000e18 <__aeabi_fdiv>
 800391c:	f007 fa3a 	bl	800ad94 <floorf>
 8003920:	f7fd fbc8 	bl	80010b4 <__aeabi_f2uiz>
 8003924:	b283      	uxth	r3, r0
 8003926:	9301      	str	r3, [sp, #4]

  if (segments) {
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 816b 	beq.w	8003c04 <mc_arc+0x3fc>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 800392e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      pl_data->feed_rate *= segments; 
 8003930:	9801      	ldr	r0, [sp, #4]
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003932:	7a1c      	ldrb	r4, [r3, #8]
 8003934:	0722      	lsls	r2, r4, #28
 8003936:	f100 80ae 	bmi.w	8003a96 <mc_arc+0x28e>
 800393a:	f7fd f965 	bl	8000c08 <__aeabi_i2f>
 800393e:	4607      	mov	r7, r0
 8003940:	4639      	mov	r1, r7
 8003942:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003946:	f7fd fa67 	bl	8000e18 <__aeabi_fdiv>
 800394a:	4604      	mov	r4, r0
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
    }
    
    float theta_per_segment = angular_travel/segments;
 800394c:	4601      	mov	r1, r0
 800394e:	4630      	mov	r0, r6
 8003950:	f7fd f9ae 	bl	8000cb0 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003954:	9b07      	ldr	r3, [sp, #28]
 8003956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003958:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    float theta_per_segment = angular_travel/segments;
 800395c:	4607      	mov	r7, r0
 800395e:	900e      	str	r0, [sp, #56]	; 0x38
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003960:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8003964:	f7fd f89a 	bl	8000a9c <__aeabi_fsub>
 8003968:	4621      	mov	r1, r4
 800396a:	f7fd f9a1 	bl	8000cb0 <__aeabi_fmul>
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 800396e:	4639      	mov	r1, r7
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003970:	9006      	str	r0, [sp, #24]
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003972:	4638      	mov	r0, r7
 8003974:	f7fd f99c 	bl	8000cb0 <__aeabi_fmul>
 8003978:	4601      	mov	r1, r0
 800397a:	4604      	mov	r4, r0
 800397c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003980:	f7fd f88c 	bl	8000a9c <__aeabi_fsub>
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003984:	4980      	ldr	r1, [pc, #512]	; (8003b88 <mc_arc+0x380>)
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003986:	4606      	mov	r6, r0
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003988:	4638      	mov	r0, r7
 800398a:	f7fd f991 	bl	8000cb0 <__aeabi_fmul>
 800398e:	4621      	mov	r1, r4
 8003990:	4607      	mov	r7, r0
 8003992:	487e      	ldr	r0, [pc, #504]	; (8003b8c <mc_arc+0x384>)
 8003994:	f7fd f882 	bl	8000a9c <__aeabi_fsub>
 8003998:	4601      	mov	r1, r0
 800399a:	4638      	mov	r0, r7
 800399c:	f7fd f988 	bl	8000cb0 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80039a0:	9b07      	ldr	r3, [sp, #28]
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80039a2:	9008      	str	r0, [sp, #32]
    cos_T *= 0.5;
 80039a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80039a8:	4630      	mov	r0, r6
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80039aa:	eb03 0789 	add.w	r7, r3, r9, lsl #2
    cos_T *= 0.5;
 80039ae:	f7fd f97f 	bl	8000cb0 <__aeabi_fmul>
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80039b2:	9b01      	ldr	r3, [sp, #4]
    cos_T *= 0.5;
 80039b4:	9009      	str	r0, [sp, #36]	; 0x24
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	f000 8124 	beq.w	8003c04 <mc_arc+0x3fc>
 80039bc:	2601      	movs	r6, #1
 80039be:	f04f 0900 	mov.w	r9, #0
 80039c2:	4c73      	ldr	r4, [pc, #460]	; (8003b90 <mc_arc+0x388>)

      if (count < N_ARC_CORRECTION) {
 80039c4:	f1b9 0f0b 	cmp.w	r9, #11
 80039c8:	f200 80e6 	bhi.w	8003b98 <mc_arc+0x390>
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 80039cc:	4629      	mov	r1, r5
 80039ce:	9808      	ldr	r0, [sp, #32]
 80039d0:	f7fd f96e 	bl	8000cb0 <__aeabi_fmul>
 80039d4:	4641      	mov	r1, r8
 80039d6:	4682      	mov	sl, r0
 80039d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039da:	f7fd f969 	bl	8000cb0 <__aeabi_fmul>
 80039de:	4601      	mov	r1, r0
 80039e0:	4650      	mov	r0, sl
 80039e2:	f7fd f85d 	bl	8000aa0 <__addsf3>
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 80039e6:	4629      	mov	r1, r5
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 80039e8:	4682      	mov	sl, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 80039ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039ec:	f7fd f960 	bl	8000cb0 <__aeabi_fmul>
 80039f0:	4641      	mov	r1, r8
 80039f2:	4605      	mov	r5, r0
 80039f4:	9808      	ldr	r0, [sp, #32]
 80039f6:	f7fd f95b 	bl	8000cb0 <__aeabi_fmul>
 80039fa:	4601      	mov	r1, r0
 80039fc:	4628      	mov	r0, r5
 80039fe:	f7fd f84d 	bl	8000a9c <__aeabi_fsub>
        r_axis1 = r_axisi;
 8003a02:	46d0      	mov	r8, sl
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003a04:	4605      	mov	r5, r0
        count++;
 8003a06:	f109 0901 	add.w	r9, r9, #1
 8003a0a:	fa5f f989 	uxtb.w	r9, r9
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
        count = 0;
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 8003a0e:	9903      	ldr	r1, [sp, #12]
 8003a10:	4628      	mov	r0, r5
 8003a12:	f7fd f845 	bl	8000aa0 <__addsf3>
 8003a16:	9b02      	ldr	r3, [sp, #8]
      position[axis_1] = center_axis1 + r_axis1;
 8003a18:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 8003a1a:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 8003a1c:	4640      	mov	r0, r8
 8003a1e:	f7fd f83f 	bl	8000aa0 <__addsf3>
 8003a22:	9b04      	ldr	r3, [sp, #16]
      position[axis_linear] += linear_per_segment;
 8003a24:	9906      	ldr	r1, [sp, #24]
      position[axis_1] = center_axis1 + r_axis1;
 8003a26:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 8003a28:	6838      	ldr	r0, [r7, #0]
 8003a2a:	f7fd f839 	bl	8000aa0 <__addsf3>
 8003a2e:	6038      	str	r0, [r7, #0]
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a30:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003a34:	069b      	lsls	r3, r3, #26
 8003a36:	d505      	bpl.n	8003a44 <mc_arc+0x23c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003a38:	7823      	ldrb	r3, [r4, #0]
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d00c      	beq.n	8003a58 <mc_arc+0x250>
 8003a3e:	9807      	ldr	r0, [sp, #28]
 8003a40:	f7ff fdd2 	bl	80035e8 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003a44:	7823      	ldrb	r3, [r4, #0]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d106      	bne.n	8003a58 <mc_arc+0x250>
 8003a4a:	e051      	b.n	8003af0 <mc_arc+0x2e8>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003a4c:	f000 fce2 	bl	8004414 <plan_check_full_buffer>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d039      	beq.n	8003ac8 <mc_arc+0x2c0>
 8003a54:	f001 fae8 	bl	8005028 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003a58:	f002 f812 	bl	8005a80 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003a5c:	7863      	ldrb	r3, [r4, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f4      	beq.n	8003a4c <mc_arc+0x244>
      if (sys.abort) { return; }
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
}
 8003a62:	b011      	add	sp, #68	; 0x44
 8003a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8003a68:	f7fc fcd6 	bl	8000418 <__aeabi_f2d>
 8003a6c:	a342      	add	r3, pc, #264	; (adr r3, 8003b78 <mc_arc+0x370>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	4682      	mov	sl, r0
 8003a74:	468b      	mov	fp, r1
 8003a76:	f7fc ff9f 	bl	80009b8 <__aeabi_dcmple>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	f43f af30 	beq.w	80038e0 <mc_arc+0xd8>
 8003a80:	a33f      	add	r3, pc, #252	; (adr r3, 8003b80 <mc_arc+0x378>)
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	4650      	mov	r0, sl
 8003a88:	4659      	mov	r1, fp
 8003a8a:	f7fc fb67 	bl	800015c <__adddf3>
 8003a8e:	f7fc ffb1 	bl	80009f4 <__aeabi_d2f>
 8003a92:	4606      	mov	r6, r0
 8003a94:	e724      	b.n	80038e0 <mc_arc+0xd8>
      pl_data->feed_rate *= segments; 
 8003a96:	f7fd f8b7 	bl	8000c08 <__aeabi_i2f>
 8003a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a9c:	4601      	mov	r1, r0
 8003a9e:	4607      	mov	r7, r0
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f7fd f905 	bl	8000cb0 <__aeabi_fmul>
 8003aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003aa8:	f024 0408 	bic.w	r4, r4, #8
      pl_data->feed_rate *= segments; 
 8003aac:	6018      	str	r0, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003aae:	721c      	strb	r4, [r3, #8]
 8003ab0:	e746      	b.n	8003940 <mc_arc+0x138>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003ab2:	a333      	add	r3, pc, #204	; (adr r3, 8003b80 <mc_arc+0x378>)
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	4650      	mov	r0, sl
 8003aba:	4659      	mov	r1, fp
 8003abc:	f7fc fb4c 	bl	8000158 <__aeabi_dsub>
 8003ac0:	f7fc ff98 	bl	80009f4 <__aeabi_d2f>
 8003ac4:	4606      	mov	r6, r0
 8003ac6:	e70b      	b.n	80038e0 <mc_arc+0xd8>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003ac8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003acc:	9807      	ldr	r0, [sp, #28]
 8003ace:	4651      	mov	r1, sl
 8003ad0:	f000 fd60 	bl	8004594 <plan_buffer_line>
 8003ad4:	b960      	cbnz	r0, 8003af0 <mc_arc+0x2e8>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003ad6:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003ada:	0798      	lsls	r0, r3, #30
 8003adc:	d508      	bpl.n	8003af0 <mc_arc+0x2e8>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003ade:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8003ae2:	06d9      	lsls	r1, r3, #27
 8003ae4:	d504      	bpl.n	8003af0 <mc_arc+0x2e8>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ae8:	2010      	movs	r0, #16
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	f004 f9e8 	bl	8007ec0 <spindle_sync>
      if (sys.abort) { return; }
 8003af0:	7863      	ldrb	r3, [r4, #1]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1b5      	bne.n	8003a62 <mc_arc+0x25a>
 8003af6:	3601      	adds	r6, #1
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003af8:	9a01      	ldr	r2, [sp, #4]
 8003afa:	b2b3      	uxth	r3, r6
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f63f af61 	bhi.w	80039c4 <mc_arc+0x1bc>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003b02:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003b06:	0699      	lsls	r1, r3, #26
 8003b08:	d505      	bpl.n	8003b16 <mc_arc+0x30e>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003b0a:	7823      	ldrb	r3, [r4, #0]
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d00f      	beq.n	8003b30 <mc_arc+0x328>
 8003b10:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003b12:	f7ff fd69 	bl	80035e8 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003b16:	7823      	ldrb	r3, [r4, #0]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d0a2      	beq.n	8003a62 <mc_arc+0x25a>
    protocol_execute_realtime(); // Check for any run-time commands
 8003b1c:	f001 ffb0 	bl	8005a80 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003b20:	7863      	ldrb	r3, [r4, #1]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d19d      	bne.n	8003a62 <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003b26:	f000 fc75 	bl	8004414 <plan_check_full_buffer>
 8003b2a:	b150      	cbz	r0, 8003b42 <mc_arc+0x33a>
 8003b2c:	f001 fa7c 	bl	8005028 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003b30:	f001 ffa6 	bl	8005a80 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003b34:	7863      	ldrb	r3, [r4, #1]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d193      	bne.n	8003a62 <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003b3a:	f000 fc6b 	bl	8004414 <plan_check_full_buffer>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d1f4      	bne.n	8003b2c <mc_arc+0x324>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003b42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003b44:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003b46:	4621      	mov	r1, r4
 8003b48:	f000 fd24 	bl	8004594 <plan_buffer_line>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d188      	bne.n	8003a62 <mc_arc+0x25a>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003b50:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003b54:	079a      	lsls	r2, r3, #30
 8003b56:	d584      	bpl.n	8003a62 <mc_arc+0x25a>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003b58:	7a23      	ldrb	r3, [r4, #8]
 8003b5a:	06db      	lsls	r3, r3, #27
 8003b5c:	d581      	bpl.n	8003a62 <mc_arc+0x25a>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003b5e:	2010      	movs	r0, #16
 8003b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b62:	6859      	ldr	r1, [r3, #4]
}
 8003b64:	b011      	add	sp, #68	; 0x44
 8003b66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003b6a:	f004 b9a9 	b.w	8007ec0 <spindle_sync>
 8003b6e:	bf00      	nop
 8003b70:	a0b5ed8d 	.word	0xa0b5ed8d
 8003b74:	bea0c6f7 	.word	0xbea0c6f7
 8003b78:	a0b5ed8d 	.word	0xa0b5ed8d
 8003b7c:	3ea0c6f7 	.word	0x3ea0c6f7
 8003b80:	54442d18 	.word	0x54442d18
 8003b84:	401921fb 	.word	0x401921fb
 8003b88:	3e2aaaab 	.word	0x3e2aaaab
 8003b8c:	40c00000 	.word	0x40c00000
 8003b90:	200010b0 	.word	0x200010b0
 8003b94:	2000126c 	.word	0x2000126c
        cos_Ti = cosf(i*theta_per_segment);
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f7fd f835 	bl	8000c08 <__aeabi_i2f>
 8003b9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003ba0:	f7fd f886 	bl	8000cb0 <__aeabi_fmul>
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	f007 f8c1 	bl	800ad2c <cosf>
 8003baa:	4680      	mov	r8, r0
        sin_Ti = sinf(i*theta_per_segment);
 8003bac:	4628      	mov	r0, r5
 8003bae:	f007 f95d 	bl	800ae6c <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        sin_Ti = sinf(i*theta_per_segment);
 8003bb4:	4682      	mov	sl, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4640      	mov	r0, r8
 8003bba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	930a      	str	r3, [sp, #40]	; 0x28
 8003bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bc4:	f8d3 9000 	ldr.w	r9, [r3]
 8003bc8:	f7fd f872 	bl	8000cb0 <__aeabi_fmul>
 8003bcc:	4649      	mov	r1, r9
 8003bce:	4605      	mov	r5, r0
 8003bd0:	4650      	mov	r0, sl
 8003bd2:	f7fd f86d 	bl	8000cb0 <__aeabi_fmul>
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f7fc ff61 	bl	8000aa0 <__addsf3>
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003be0:	4605      	mov	r5, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003be2:	4619      	mov	r1, r3
 8003be4:	4650      	mov	r0, sl
 8003be6:	f7fd f863 	bl	8000cb0 <__aeabi_fmul>
 8003bea:	4649      	mov	r1, r9
 8003bec:	4682      	mov	sl, r0
 8003bee:	4640      	mov	r0, r8
 8003bf0:	f7fd f85e 	bl	8000cb0 <__aeabi_fmul>
 8003bf4:	4601      	mov	r1, r0
 8003bf6:	4650      	mov	r0, sl
 8003bf8:	f7fc ff50 	bl	8000a9c <__aeabi_fsub>
        count = 0;
 8003bfc:	f04f 0900 	mov.w	r9, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003c00:	4680      	mov	r8, r0
 8003c02:	e704      	b.n	8003a0e <mc_arc+0x206>
 8003c04:	4c00      	ldr	r4, [pc, #0]	; (8003c08 <mc_arc+0x400>)
 8003c06:	e77c      	b.n	8003b02 <mc_arc+0x2fa>
 8003c08:	200010b0 	.word	0x200010b0

08003c0c <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003c0c:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <mc_dwell+0x20>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d009      	beq.n	8003c28 <mc_dwell+0x1c>
{
 8003c14:	b510      	push	{r4, lr}
 8003c16:	4604      	mov	r4, r0
  protocol_buffer_synchronize();
 8003c18:	f002 f924 	bl	8005e64 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003c1c:	4620      	mov	r0, r4
}
 8003c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003c22:	2100      	movs	r1, #0
 8003c24:	f000 b972 	b.w	8003f0c <delay_sec>
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	200010b0 	.word	0x200010b0

08003c30 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8003c30:	b508      	push	{r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8003c32:	f7ff fa07 	bl	8003044 <limits_disable>
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
    else
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8003c36:	2004      	movs	r0, #4
 8003c38:	f7ff fa7e 	bl	8003138 <limits_go_home>
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8003c3c:	2003      	movs	r0, #3
 8003c3e:	f7ff fa7b 	bl	8003138 <limits_go_home>
    #endif
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
 8003c42:	2008      	movs	r0, #8
 8003c44:	f7ff fa78 	bl	8003138 <limits_go_home>
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 8003c48:	f001 ff1a 	bl	8005a80 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <mc_homing_cycle+0x40>)
 8003c4e:	785b      	ldrb	r3, [r3, #1]
 8003c50:	b96b      	cbnz	r3, 8003c6e <mc_homing_cycle+0x3e>

  // Homing cycle complete! Setup system for normal operation.
  // -------------------------------------------------------------------------------------

  // Sync gcode parser and planner positions to homed position.
  gc_sync_position();
 8003c52:	f7fe f837 	bl	8001cc4 <gc_sync_position>
  plan_sync_position();
 8003c56:	f000 feff 	bl	8004a58 <plan_sync_position>

  // If hard limits feature enabled, re-enable hard limits pin change register after homing cycle.
#ifdef STM32F103C8
// --- YSV 22-06-2018
	#if defined AA_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT));
 8003c5a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003c5e:	f7fd fad1 	bl	8001204 <EXTI_ClearITPendingBit>
 8003c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c66:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <mc_homing_cycle+0x44>)
 8003c68:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	bd08      	pop	{r3, pc}
 8003c70:	200010b0 	.word	0x200010b0
 8003c74:	e000e100 	.word	0xe000e100

08003c78 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8003c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003c7c:	4c42      	ldr	r4, [pc, #264]	; (8003d88 <mc_probe_cycle+0x110>)
 8003c7e:	7823      	ldrb	r3, [r4, #0]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d00c      	beq.n	8003c9e <mc_probe_cycle+0x26>
 8003c84:	4617      	mov	r7, r2
 8003c86:	460e      	mov	r6, r1
 8003c88:	4605      	mov	r5, r0

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8003c8a:	f002 f8eb 	bl	8005e64 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8003c8e:	f894 8001 	ldrb.w	r8, [r4, #1]
 8003c92:	f1b8 0f00 	cmp.w	r8, #0
 8003c96:	d005      	beq.n	8003ca4 <mc_probe_cycle+0x2c>
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
    protocol_execute_realtime();
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8003c98:	2002      	movs	r0, #2
 8003c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003c9e:	2000      	movs	r0, #0
    report_probe_parameters();
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 8003ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  probe_configure_invert_mask(is_probe_away);
 8003ca4:	f3c7 00c0 	ubfx	r0, r7, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8003ca8:	f884 8005 	strb.w	r8, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 8003cac:	f001 f974 	bl	8004f98 <probe_configure_invert_mask>
  if ( probe_get_state() ) { // Check probe pin state.
 8003cb0:	f001 f986 	bl	8004fc0 <probe_get_state>
 8003cb4:	b140      	cbz	r0, 8003cc8 <mc_probe_cycle+0x50>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8003cb6:	2004      	movs	r0, #4
 8003cb8:	f005 fd72 	bl	80097a0 <system_set_exec_alarm>
    protocol_execute_realtime();
 8003cbc:	f001 fee0 	bl	8005a80 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8003cc0:	4640      	mov	r0, r8
 8003cc2:	f001 f969 	bl	8004f98 <probe_configure_invert_mask>
 8003cc6:	e7e7      	b.n	8003c98 <mc_probe_cycle+0x20>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003cc8:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8003d98 <mc_probe_cycle+0x120>
 8003ccc:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
 8003cd0:	0698      	lsls	r0, r3, #26
 8003cd2:	d505      	bpl.n	8003ce0 <mc_probe_cycle+0x68>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003cd4:	7823      	ldrb	r3, [r4, #0]
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d00b      	beq.n	8003cf2 <mc_probe_cycle+0x7a>
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f7ff fc84 	bl	80035e8 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003ce0:	7823      	ldrb	r3, [r4, #0]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d105      	bne.n	8003cf2 <mc_probe_cycle+0x7a>
 8003ce6:	e009      	b.n	8003cfc <mc_probe_cycle+0x84>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003ce8:	f000 fb94 	bl	8004414 <plan_check_full_buffer>
 8003cec:	b370      	cbz	r0, 8003d4c <mc_probe_cycle+0xd4>
 8003cee:	f001 f99b 	bl	8005028 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003cf2:	f001 fec5 	bl	8005a80 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003cf6:	7863      	ldrb	r3, [r4, #1]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f5      	beq.n	8003ce8 <mc_probe_cycle+0x70>
  sys_probe_state = PROBE_ACTIVE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	4d23      	ldr	r5, [pc, #140]	; (8003d8c <mc_probe_cycle+0x114>)
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003d00:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8003d02:	702b      	strb	r3, [r5, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003d04:	f005 fd38 	bl	8009778 <system_set_exec_state_flag>
    protocol_execute_realtime();
 8003d08:	f001 feba 	bl	8005a80 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8003d0c:	7863      	ldrb	r3, [r4, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1c2      	bne.n	8003c98 <mc_probe_cycle+0x20>
  } while (sys.state != STATE_IDLE);
 8003d12:	7823      	ldrb	r3, [r4, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f7      	bne.n	8003d08 <mc_probe_cycle+0x90>
  if (sys_probe_state == PROBE_ACTIVE) {
 8003d18:	782b      	ldrb	r3, [r5, #0]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d028      	beq.n	8003d70 <mc_probe_cycle+0xf8>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8003d1e:	2301      	movs	r3, #1
 8003d20:	7163      	strb	r3, [r4, #5]
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003d22:	2300      	movs	r3, #0
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003d24:	4618      	mov	r0, r3
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003d26:	702b      	strb	r3, [r5, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003d28:	f001 f936 	bl	8004f98 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 8003d2c:	f001 fea8 	bl	8005a80 <protocol_execute_realtime>
  st_reset(); // Reset step segment buffer.
 8003d30:	f004 fb96 	bl	8008460 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8003d34:	f000 fafe 	bl	8004334 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8003d38:	f000 fe8e 	bl	8004a58 <plan_sync_position>
    report_probe_parameters();
 8003d3c:	f002 ff16 	bl	8006b6c <report_probe_parameters>
  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8003d40:	7960      	ldrb	r0, [r4, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003d42:	3000      	adds	r0, #0
 8003d44:	bf18      	it	ne
 8003d46:	2001      	movne	r0, #1
 8003d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	4631      	mov	r1, r6
 8003d50:	f000 fc20 	bl	8004594 <plan_buffer_line>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d1d1      	bne.n	8003cfc <mc_probe_cycle+0x84>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003d58:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
 8003d5c:	0799      	lsls	r1, r3, #30
 8003d5e:	d5cd      	bpl.n	8003cfc <mc_probe_cycle+0x84>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003d60:	7a33      	ldrb	r3, [r6, #8]
 8003d62:	06da      	lsls	r2, r3, #27
 8003d64:	d5ca      	bpl.n	8003cfc <mc_probe_cycle+0x84>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003d66:	6871      	ldr	r1, [r6, #4]
 8003d68:	2010      	movs	r0, #16
 8003d6a:	f004 f8a9 	bl	8007ec0 <spindle_sync>
 8003d6e:	e7c5      	b.n	8003cfc <mc_probe_cycle+0x84>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8003d70:	06fb      	lsls	r3, r7, #27
 8003d72:	d505      	bpl.n	8003d80 <mc_probe_cycle+0x108>
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <mc_probe_cycle+0x118>)
 8003d76:	4e07      	ldr	r6, [pc, #28]	; (8003d94 <mc_probe_cycle+0x11c>)
 8003d78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d7a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8003d7e:	e7d0      	b.n	8003d22 <mc_probe_cycle+0xaa>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8003d80:	2005      	movs	r0, #5
 8003d82:	f005 fd0d 	bl	80097a0 <system_set_exec_alarm>
 8003d86:	e7cc      	b.n	8003d22 <mc_probe_cycle+0xaa>
 8003d88:	200010b0 	.word	0x200010b0
 8003d8c:	200010c6 	.word	0x200010c6
 8003d90:	200010d8 	.word	0x200010d8
 8003d94:	200010c8 	.word	0x200010c8
 8003d98:	2000126c 	.word	0x2000126c

08003d9c <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8003d9c:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <mc_reset+0x54>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	06db      	lsls	r3, r3, #27
 8003da4:	d500      	bpl.n	8003da8 <mc_reset+0xc>
 8003da6:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 8003da8:	2010      	movs	r0, #16
 8003daa:	f005 fce5 	bl	8009778 <system_set_exec_state_flag>

    // Kill spindle and coolant.
    spindle_stop();
 8003dae:	f003 ffaf 	bl	8007d10 <spindle_stop>
    coolant_stop();
 8003db2:	f7fd fe77 	bl	8001aa4 <coolant_stop>
    // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
    // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
    // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
    // violated, by which, all bets are off.
#ifndef  USE_RESET_BTN_AS_ESTOP
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003db6:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <mc_reset+0x58>)
 8003db8:	7813      	ldrb	r3, [r2, #0]
 8003dba:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 8003dbe:	d008      	beq.n	8003dd2 <mc_reset+0x36>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION)))
#endif
    {
      if (sys.state == STATE_HOMING) {
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d00c      	beq.n	8003dde <mc_reset+0x42>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8003dc4:	2003      	movs	r0, #3
 8003dc6:	f005 fceb 	bl	80097a0 <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 8003dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003dce:	f004 b963 	b.w	8008098 <st_go_idle>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003dd2:	7912      	ldrb	r2, [r2, #4]
 8003dd4:	f012 0f06 	tst.w	r2, #6
 8003dd8:	d0e5      	beq.n	8003da6 <mc_reset+0xa>
      if (sys.state == STATE_HOMING) {
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d1f2      	bne.n	8003dc4 <mc_reset+0x28>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <mc_reset+0x5c>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f1      	bne.n	8003dca <mc_reset+0x2e>
 8003de6:	2006      	movs	r0, #6
 8003de8:	f005 fcda 	bl	80097a0 <system_set_exec_alarm>
 8003dec:	e7ed      	b.n	8003dca <mc_reset+0x2e>
 8003dee:	bf00      	nop
 8003df0:	200010c5 	.word	0x200010c5
 8003df4:	200010b0 	.word	0x200010b0
 8003df8:	200010e8 	.word	0x200010e8

08003dfc <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8003dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *ptr = line + *char_counter;
 8003e00:	780c      	ldrb	r4, [r1, #0]
{
 8003e02:	b083      	sub	sp, #12
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8003e04:	5d03      	ldrb	r3, [r0, r4]
  char *ptr = line + *char_counter;
 8003e06:	4404      	add	r4, r0

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 8003e08:	2b2d      	cmp	r3, #45	; 0x2d
 8003e0a:	d065      	beq.n	8003ed8 <read_float+0xdc>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 8003e0c:	2b2b      	cmp	r3, #43	; 0x2b
 8003e0e:	d068      	beq.n	8003ee2 <read_float+0xe6>
  bool isnegative = false;
 8003e10:	f04f 0800 	mov.w	r8, #0
  c = *ptr++;
 8003e14:	1c65      	adds	r5, r4, #1

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 8003e16:	2600      	movs	r6, #0
  uint8_t ndigit = 0;
 8003e18:	4634      	mov	r4, r6
  int8_t exp = 0;
 8003e1a:	4637      	mov	r7, r6
  uint32_t intval = 0;
 8003e1c:	46b6      	mov	lr, r6
 8003e1e:	e00c      	b.n	8003e3a <read_float+0x3e>
  while(1) {
    c -= '0';
    if (c <= 9) {
      ndigit++;
 8003e20:	3401      	adds	r4, #1
 8003e22:	b2e4      	uxtb	r4, r4
      if (ndigit <= MAX_INT_DIGITS) {
 8003e24:	2c08      	cmp	r4, #8
 8003e26:	d811      	bhi.n	8003e4c <read_float+0x50>
        if (isdecimal) { exp--; }
 8003e28:	b10e      	cbz	r6, 8003e2e <read_float+0x32>
 8003e2a:	3f01      	subs	r7, #1
 8003e2c:	b27f      	sxtb	r7, r7
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8003e2e:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8003e32:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 8003e36:	f815 3b01 	ldrb.w	r3, [r5], #1
    c -= '0';
 8003e3a:	3b30      	subs	r3, #48	; 0x30
 8003e3c:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8003e3e:	2b09      	cmp	r3, #9
 8003e40:	d9ee      	bls.n	8003e20 <read_float+0x24>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8003e42:	2bfe      	cmp	r3, #254	; 0xfe
 8003e44:	d107      	bne.n	8003e56 <read_float+0x5a>
 8003e46:	b936      	cbnz	r6, 8003e56 <read_float+0x5a>
      isdecimal = true;
 8003e48:	2601      	movs	r6, #1
 8003e4a:	e7f4      	b.n	8003e36 <read_float+0x3a>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8003e4c:	2e00      	cmp	r6, #0
 8003e4e:	d1f2      	bne.n	8003e36 <read_float+0x3a>
 8003e50:	3701      	adds	r7, #1
 8003e52:	b27f      	sxtb	r7, r7
 8003e54:	e7ef      	b.n	8003e36 <read_float+0x3a>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 8003e56:	2c00      	cmp	r4, #0
 8003e58:	d037      	beq.n	8003eca <read_float+0xce>
 8003e5a:	4682      	mov	sl, r0

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 8003e5c:	4670      	mov	r0, lr
 8003e5e:	9101      	str	r1, [sp, #4]
 8003e60:	4691      	mov	r9, r2
 8003e62:	f7fc fecd 	bl	8000c00 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 8003e66:	2100      	movs	r1, #0
  fval = (float)intval;
 8003e68:	4683      	mov	fp, r0
  if (fval != 0) {
 8003e6a:	f7fd f8b5 	bl	8000fd8 <__aeabi_fcmpeq>
 8003e6e:	bb08      	cbnz	r0, 8003eb4 <read_float+0xb8>
    while (exp <= -2) {
 8003e70:	1c79      	adds	r1, r7, #1
 8003e72:	da12      	bge.n	8003e9a <read_float+0x9e>
 8003e74:	463e      	mov	r6, r7
      fval *= 0.01f;
 8003e76:	4c22      	ldr	r4, [pc, #136]	; (8003f00 <read_float+0x104>)
 8003e78:	4658      	mov	r0, fp
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	f7fc ff18 	bl	8000cb0 <__aeabi_fmul>
 8003e80:	1cb3      	adds	r3, r6, #2
 8003e82:	b25e      	sxtb	r6, r3
    while (exp <= -2) {
 8003e84:	1c72      	adds	r2, r6, #1
      fval *= 0.01f;
 8003e86:	4683      	mov	fp, r0
    while (exp <= -2) {
 8003e88:	dbf6      	blt.n	8003e78 <read_float+0x7c>
 8003e8a:	b2ff      	uxtb	r7, r7
 8003e8c:	f1c7 03fe 	rsb	r3, r7, #254	; 0xfe
 8003e90:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e94:	441f      	add	r7, r3
 8003e96:	3702      	adds	r7, #2
 8003e98:	b27f      	sxtb	r7, r7
      exp += 2;
    }
    if (exp < 0) {
 8003e9a:	1c7b      	adds	r3, r7, #1
 8003e9c:	d026      	beq.n	8003eec <read_float+0xf0>
      fval *= 0.1f;
    } else if (exp > 0) {
 8003e9e:	b14f      	cbz	r7, 8003eb4 <read_float+0xb8>
      do {
        fval *= 10.0f;
 8003ea0:	4c18      	ldr	r4, [pc, #96]	; (8003f04 <read_float+0x108>)
 8003ea2:	4658      	mov	r0, fp
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	f7fc ff03 	bl	8000cb0 <__aeabi_fmul>
 8003eaa:	3f01      	subs	r7, #1
 8003eac:	b27f      	sxtb	r7, r7
 8003eae:	4683      	mov	fp, r0
      } while (--exp > 0);
 8003eb0:	2f00      	cmp	r7, #0
 8003eb2:	d1f6      	bne.n	8003ea2 <read_float+0xa6>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 8003eb4:	f1b8 0f00 	cmp.w	r8, #0
 8003eb8:	d10b      	bne.n	8003ed2 <read_float+0xd6>
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 8003eba:	2401      	movs	r4, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 8003ebc:	eba5 050a 	sub.w	r5, r5, sl
 8003ec0:	9b01      	ldr	r3, [sp, #4]
 8003ec2:	3d01      	subs	r5, #1
 8003ec4:	f8c9 b000 	str.w	fp, [r9]
 8003ec8:	701d      	strb	r5, [r3, #0]
}
 8003eca:	4620      	mov	r0, r4
 8003ecc:	b003      	add	sp, #12
 8003ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *float_ptr = -fval;
 8003ed2:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
 8003ed6:	e7f0      	b.n	8003eba <read_float+0xbe>
    c = *ptr++;
 8003ed8:	1ca5      	adds	r5, r4, #2
 8003eda:	7863      	ldrb	r3, [r4, #1]
    isnegative = true;
 8003edc:	f04f 0801 	mov.w	r8, #1
 8003ee0:	e799      	b.n	8003e16 <read_float+0x1a>
  bool isnegative = false;
 8003ee2:	f04f 0800 	mov.w	r8, #0
    c = *ptr++;
 8003ee6:	7863      	ldrb	r3, [r4, #1]
 8003ee8:	1ca5      	adds	r5, r4, #2
 8003eea:	e794      	b.n	8003e16 <read_float+0x1a>
      fval *= 0.1f;
 8003eec:	4658      	mov	r0, fp
 8003eee:	4906      	ldr	r1, [pc, #24]	; (8003f08 <read_float+0x10c>)
 8003ef0:	f7fc fede 	bl	8000cb0 <__aeabi_fmul>
 8003ef4:	4683      	mov	fp, r0
  if (isnegative) {
 8003ef6:	f1b8 0f00 	cmp.w	r8, #0
 8003efa:	d0de      	beq.n	8003eba <read_float+0xbe>
 8003efc:	e7e9      	b.n	8003ed2 <read_float+0xd6>
 8003efe:	bf00      	nop
 8003f00:	3c23d70a 	.word	0x3c23d70a
 8003f04:	41200000 	.word	0x41200000
 8003f08:	3dcccccd 	.word	0x3dcccccd

08003f0c <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	460e      	mov	r6, r1
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 8003f10:	4918      	ldr	r1, [pc, #96]	; (8003f74 <delay_sec+0x68>)
 8003f12:	f7fc fecd 	bl	8000cb0 <__aeabi_fmul>
 8003f16:	f006 fec9 	bl	800acac <ceilf>
 8003f1a:	f7fd f8cb 	bl	80010b4 <__aeabi_f2uiz>
 8003f1e:	b280      	uxth	r0, r0
	while (i-- > 0) {
 8003f20:	b1b0      	cbz	r0, 8003f50 <delay_sec+0x44>
		if (sys.abort) { return; }
 8003f22:	4d15      	ldr	r5, [pc, #84]	; (8003f78 <delay_sec+0x6c>)
 8003f24:	786b      	ldrb	r3, [r5, #1]
 8003f26:	b99b      	cbnz	r3, 8003f50 <delay_sec+0x44>
 8003f28:	1e44      	subs	r4, r0, #1
 8003f2a:	b2a4      	uxth	r4, r4
 8003f2c:	b18e      	cbz	r6, 8003f52 <delay_sec+0x46>
	while (i-- > 0) {
 8003f2e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003f32:	e008      	b.n	8003f46 <delay_sec+0x3a>
 8003f34:	3c01      	subs	r4, #1
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003f36:	2032      	movs	r0, #50	; 0x32
	while (i-- > 0) {
 8003f38:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003f3a:	f7ff fc05 	bl	8003748 <_delay_ms>
	while (i-- > 0) {
 8003f3e:	42b4      	cmp	r4, r6
 8003f40:	d006      	beq.n	8003f50 <delay_sec+0x44>
		if (sys.abort) { return; }
 8003f42:	786b      	ldrb	r3, [r5, #1]
 8003f44:	b9ab      	cbnz	r3, 8003f72 <delay_sec+0x66>
		  protocol_exec_rt_system();
 8003f46:	f001 f879 	bl	800503c <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8003f4a:	78ab      	ldrb	r3, [r5, #2]
 8003f4c:	079b      	lsls	r3, r3, #30
 8003f4e:	d5f1      	bpl.n	8003f34 <delay_sec+0x28>
 8003f50:	bd70      	pop	{r4, r5, r6, pc}
	while (i-- > 0) {
 8003f52:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003f56:	e001      	b.n	8003f5c <delay_sec+0x50>
		if (sys.abort) { return; }
 8003f58:	786b      	ldrb	r3, [r5, #1]
 8003f5a:	b94b      	cbnz	r3, 8003f70 <delay_sec+0x64>
	while (i-- > 0) {
 8003f5c:	3c01      	subs	r4, #1
			protocol_execute_realtime();
 8003f5e:	f001 fd8f 	bl	8005a80 <protocol_execute_realtime>
	while (i-- > 0) {
 8003f62:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003f64:	2032      	movs	r0, #50	; 0x32
 8003f66:	f7ff fbef 	bl	8003748 <_delay_ms>
	while (i-- > 0) {
 8003f6a:	42b4      	cmp	r4, r6
 8003f6c:	d1f4      	bne.n	8003f58 <delay_sec+0x4c>
 8003f6e:	e7ef      	b.n	8003f50 <delay_sec+0x44>
 8003f70:	bd70      	pop	{r4, r5, r6, pc}
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	41a00000 	.word	0x41a00000
 8003f78:	200010b0 	.word	0x200010b0

08003f7c <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
  while ( ms-- ) { _delay_ms(1); }
 8003f7c:	b160      	cbz	r0, 8003f98 <delay_ms+0x1c>
{
 8003f7e:	b538      	push	{r3, r4, r5, lr}
  while ( ms-- ) { _delay_ms(1); }
 8003f80:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003f84:	1e44      	subs	r4, r0, #1
 8003f86:	b2a4      	uxth	r4, r4
 8003f88:	3c01      	subs	r4, #1
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	b2a4      	uxth	r4, r4
 8003f8e:	f7ff fbdb 	bl	8003748 <_delay_ms>
 8003f92:	42ac      	cmp	r4, r5
 8003f94:	d1f8      	bne.n	8003f88 <delay_ms+0xc>
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop

08003f9c <hypot_f>:
}


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	460d      	mov	r5, r1
 8003fa0:	4601      	mov	r1, r0
 8003fa2:	f7fc fe85 	bl	8000cb0 <__aeabi_fmul>
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	4604      	mov	r4, r0
 8003faa:	4628      	mov	r0, r5
 8003fac:	f7fc fe80 	bl	8000cb0 <__aeabi_fmul>
 8003fb0:	4601      	mov	r1, r0
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7fc fd74 	bl	8000aa0 <__addsf3>
 8003fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fbc:	f006 bf8e 	b.w	800aedc <sqrtf>

08003fc0 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	4604      	mov	r4, r0
  uint8_t idx;
  float magnitude = 0.0f;
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0f) {
 8003fc4:	6847      	ldr	r7, [r0, #4]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4638      	mov	r0, r7
 8003fca:	6826      	ldr	r6, [r4, #0]
 8003fcc:	68a5      	ldr	r5, [r4, #8]
 8003fce:	f7fd f803 	bl	8000fd8 <__aeabi_fcmpeq>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d14e      	bne.n	8004074 <convert_delta_vector_to_unit_vector+0xb4>
      magnitude += vector[idx]*vector[idx];
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f7fc fe69 	bl	8000cb0 <__aeabi_fmul>
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4607      	mov	r7, r0
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f7fc fff8 	bl	8000fd8 <__aeabi_fcmpeq>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	d14a      	bne.n	8004082 <convert_delta_vector_to_unit_vector+0xc2>
 8003fec:	4629      	mov	r1, r5
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f7fc fe5e 	bl	8000cb0 <__aeabi_fmul>
 8003ff4:	4601      	mov	r1, r0
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	f7fc fd52 	bl	8000aa0 <__addsf3>
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4605      	mov	r5, r0
 8004000:	4630      	mov	r0, r6
 8004002:	f7fc ffe9 	bl	8000fd8 <__aeabi_fcmpeq>
 8004006:	2800      	cmp	r0, #0
 8004008:	d13f      	bne.n	800408a <convert_delta_vector_to_unit_vector+0xca>
 800400a:	4631      	mov	r1, r6
 800400c:	4630      	mov	r0, r6
 800400e:	f7fc fe4f 	bl	8000cb0 <__aeabi_fmul>
 8004012:	4601      	mov	r1, r0
 8004014:	4628      	mov	r0, r5
 8004016:	f7fc fd43 	bl	8000aa0 <__addsf3>
    if (vector[idx] != 0.0f) {
 800401a:	68e5      	ldr	r5, [r4, #12]
 800401c:	4607      	mov	r7, r0
 800401e:	2100      	movs	r1, #0
 8004020:	4628      	mov	r0, r5
 8004022:	f7fc ffd9 	bl	8000fd8 <__aeabi_fcmpeq>
 8004026:	2800      	cmp	r0, #0
 8004028:	d12d      	bne.n	8004086 <convert_delta_vector_to_unit_vector+0xc6>
      magnitude += vector[idx]*vector[idx];
 800402a:	4629      	mov	r1, r5
 800402c:	4628      	mov	r0, r5
 800402e:	f7fc fe3f 	bl	8000cb0 <__aeabi_fmul>
 8004032:	4639      	mov	r1, r7
 8004034:	f7fc fd34 	bl	8000aa0 <__addsf3>
    }
  }
  magnitude = sqrtf(magnitude);
 8004038:	f006 ff50 	bl	800aedc <sqrtf>
 800403c:	4607      	mov	r7, r0
  float inv_magnitude = 1.0f/magnitude;
 800403e:	4601      	mov	r1, r0
 8004040:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004044:	f7fc fee8 	bl	8000e18 <__aeabi_fdiv>
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8004048:	4631      	mov	r1, r6
  float inv_magnitude = 1.0f/magnitude;
 800404a:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 800404c:	f7fc fe30 	bl	8000cb0 <__aeabi_fmul>
 8004050:	4629      	mov	r1, r5
 8004052:	6020      	str	r0, [r4, #0]
 8004054:	6860      	ldr	r0, [r4, #4]
 8004056:	f7fc fe2b 	bl	8000cb0 <__aeabi_fmul>
 800405a:	4629      	mov	r1, r5
 800405c:	6060      	str	r0, [r4, #4]
 800405e:	68a0      	ldr	r0, [r4, #8]
 8004060:	f7fc fe26 	bl	8000cb0 <__aeabi_fmul>
 8004064:	4629      	mov	r1, r5
 8004066:	60a0      	str	r0, [r4, #8]
 8004068:	68e0      	ldr	r0, [r4, #12]
 800406a:	f7fc fe21 	bl	8000cb0 <__aeabi_fmul>
 800406e:	60e0      	str	r0, [r4, #12]
  return(magnitude);
}
 8004070:	4638      	mov	r0, r7
 8004072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004074:	2100      	movs	r1, #0
 8004076:	4628      	mov	r0, r5
 8004078:	2700      	movs	r7, #0
 800407a:	f7fc ffad 	bl	8000fd8 <__aeabi_fcmpeq>
 800407e:	2800      	cmp	r0, #0
 8004080:	d0b4      	beq.n	8003fec <convert_delta_vector_to_unit_vector+0x2c>
 8004082:	2100      	movs	r1, #0
 8004084:	e7b7      	b.n	8003ff6 <convert_delta_vector_to_unit_vector+0x36>
 8004086:	2000      	movs	r0, #0
 8004088:	e7d3      	b.n	8004032 <convert_delta_vector_to_unit_vector+0x72>
 800408a:	2100      	movs	r1, #0
 800408c:	e7c2      	b.n	8004014 <convert_delta_vector_to_unit_vector+0x54>
 800408e:	bf00      	nop

08004090 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004092:	680c      	ldr	r4, [r1, #0]
{
 8004094:	460d      	mov	r5, r1
 8004096:	4606      	mov	r6, r0
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004098:	2100      	movs	r1, #0
 800409a:	4620      	mov	r0, r4
 800409c:	f7fc ff9c 	bl	8000fd8 <__aeabi_fcmpeq>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d140      	bne.n	8004126 <limit_value_by_axis_maximum+0x96>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80040a4:	4621      	mov	r1, r4
 80040a6:	6830      	ldr	r0, [r6, #0]
 80040a8:	f7fc feb6 	bl	8000e18 <__aeabi_fdiv>
 80040ac:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80040b0:	4620      	mov	r0, r4
 80040b2:	4921      	ldr	r1, [pc, #132]	; (8004138 <limit_value_by_axis_maximum+0xa8>)
 80040b4:	f7fc ffa4 	bl	8001000 <__aeabi_fcmple>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d034      	beq.n	8004126 <limit_value_by_axis_maximum+0x96>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80040bc:	686f      	ldr	r7, [r5, #4]
 80040be:	2100      	movs	r1, #0
 80040c0:	4638      	mov	r0, r7
 80040c2:	f7fc ff89 	bl	8000fd8 <__aeabi_fcmpeq>
 80040c6:	b950      	cbnz	r0, 80040de <limit_value_by_axis_maximum+0x4e>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80040c8:	4639      	mov	r1, r7
 80040ca:	6870      	ldr	r0, [r6, #4]
 80040cc:	f7fc fea4 	bl	8000e18 <__aeabi_fdiv>
 80040d0:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80040d4:	4639      	mov	r1, r7
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7fc ff92 	bl	8001000 <__aeabi_fcmple>
 80040dc:	b350      	cbz	r0, 8004134 <limit_value_by_axis_maximum+0xa4>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80040de:	68af      	ldr	r7, [r5, #8]
 80040e0:	2100      	movs	r1, #0
 80040e2:	4638      	mov	r0, r7
 80040e4:	f7fc ff78 	bl	8000fd8 <__aeabi_fcmpeq>
 80040e8:	b950      	cbnz	r0, 8004100 <limit_value_by_axis_maximum+0x70>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80040ea:	4639      	mov	r1, r7
 80040ec:	68b0      	ldr	r0, [r6, #8]
 80040ee:	f7fc fe93 	bl	8000e18 <__aeabi_fdiv>
 80040f2:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80040f6:	4639      	mov	r1, r7
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7fc ff81 	bl	8001000 <__aeabi_fcmple>
 80040fe:	b1b8      	cbz	r0, 8004130 <limit_value_by_axis_maximum+0xa0>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004100:	68ed      	ldr	r5, [r5, #12]
 8004102:	2100      	movs	r1, #0
 8004104:	4628      	mov	r0, r5
 8004106:	f7fc ff67 	bl	8000fd8 <__aeabi_fcmpeq>
 800410a:	b950      	cbnz	r0, 8004122 <limit_value_by_axis_maximum+0x92>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800410c:	4629      	mov	r1, r5
 800410e:	68f0      	ldr	r0, [r6, #12]
 8004110:	f7fc fe82 	bl	8000e18 <__aeabi_fdiv>
 8004114:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004118:	4629      	mov	r1, r5
 800411a:	4620      	mov	r0, r4
 800411c:	f7fc ff70 	bl	8001000 <__aeabi_fcmple>
 8004120:	b118      	cbz	r0, 800412a <limit_value_by_axis_maximum+0x9a>
    }
  }
  return(limit_value);
}
 8004122:	4620      	mov	r0, r4
 8004124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float limit_value = SOME_LARGE_VALUE;
 8004126:	4c04      	ldr	r4, [pc, #16]	; (8004138 <limit_value_by_axis_maximum+0xa8>)
 8004128:	e7c8      	b.n	80040bc <limit_value_by_axis_maximum+0x2c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800412a:	462c      	mov	r4, r5
}
 800412c:	4620      	mov	r0, r4
 800412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004130:	463c      	mov	r4, r7
 8004132:	e7e5      	b.n	8004100 <limit_value_by_axis_maximum+0x70>
 8004134:	463c      	mov	r4, r7
 8004136:	e7d2      	b.n	80040de <limit_value_by_axis_maximum+0x4e>
 8004138:	7f7fffff 	.word	0x7f7fffff

0800413c <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 800413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8004140:	4b77      	ldr	r3, [pc, #476]	; (8004320 <planner_recalculate+0x1e4>)
{
 8004142:	b083      	sub	sp, #12
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	9300      	str	r3, [sp, #0]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004148:	2b00      	cmp	r3, #0
 800414a:	d075      	beq.n	8004238 <planner_recalculate+0xfc>

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 800414c:	4a75      	ldr	r2, [pc, #468]	; (8004324 <planner_recalculate+0x1e8>)
  block_index--;
 800414e:	1e5c      	subs	r4, r3, #1
  if (block_index == block_buffer_planned) { return; }
 8004150:	f892 8000 	ldrb.w	r8, [r2]
  block_index--;
 8004154:	b2e4      	uxtb	r4, r4
  if (block_index == block_buffer_planned) { return; }
 8004156:	45a0      	cmp	r8, r4
 8004158:	9201      	str	r2, [sp, #4]
 800415a:	d06a      	beq.n	8004232 <planner_recalculate+0xf6>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 800415c:	4d72      	ldr	r5, [pc, #456]	; (8004328 <planner_recalculate+0x1ec>)
 800415e:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
 8004162:	eb05 07c7 	add.w	r7, r5, r7, lsl #3

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004168:	6a38      	ldr	r0, [r7, #32]
 800416a:	f7fc fda1 	bl	8000cb0 <__aeabi_fmul>
 800416e:	4601      	mov	r1, r0
 8004170:	f7fc fc96 	bl	8000aa0 <__addsf3>
 8004174:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8004178:	4681      	mov	r9, r0
 800417a:	4659      	mov	r1, fp
 800417c:	f107 0a18 	add.w	sl, r7, #24
 8004180:	f7fc ff3e 	bl	8001000 <__aeabi_fcmple>
 8004184:	b900      	cbnz	r0, 8004188 <planner_recalculate+0x4c>
 8004186:	46d9      	mov	r9, fp
 8004188:	f8ca 9000 	str.w	r9, [sl]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 800418c:	f04f 0b23 	mov.w	fp, #35	; 0x23
 8004190:	2c00      	cmp	r4, #0
 8004192:	d06f      	beq.n	8004274 <planner_recalculate+0x138>
 8004194:	9b00      	ldr	r3, [sp, #0]
 8004196:	3b02      	subs	r3, #2
 8004198:	fa5f fb83 	uxtb.w	fp, r3
 800419c:	e06a      	b.n	8004274 <planner_recalculate+0x138>
 800419e:	4b60      	ldr	r3, [pc, #384]	; (8004320 <planner_recalculate+0x1e4>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	9300      	str	r3, [sp, #0]
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80041a4:	ebcb 03cb 	rsb	r3, fp, fp, lsl #3
  block_index++;
 80041a8:	f10b 0401 	add.w	r4, fp, #1
 80041ac:	b2e4      	uxtb	r4, r4
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80041ae:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
 80041b2:	9b01      	ldr	r3, [sp, #4]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80041b4:	2c24      	cmp	r4, #36	; 0x24
 80041b6:	bf08      	it	eq
 80041b8:	2400      	moveq	r4, #0
 80041ba:	f893 b000 	ldrb.w	fp, [r3]
 80041be:	e02e      	b.n	800421e <planner_recalculate+0xe2>
    next = &block_buffer[block_index];

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 80041c0:	f8da 9018 	ldr.w	r9, [sl, #24]
 80041c4:	f8d7 8018 	ldr.w	r8, [r7, #24]
 80041c8:	4648      	mov	r0, r9
 80041ca:	4641      	mov	r1, r8
 80041cc:	f7fc ff0e 	bl	8000fec <__aeabi_fcmplt>
 80041d0:	b1a8      	cbz	r0, 80041fe <planner_recalculate+0xc2>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80041d2:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 80041d6:	f8da 0020 	ldr.w	r0, [sl, #32]
 80041da:	f7fc fd69 	bl	8000cb0 <__aeabi_fmul>
 80041de:	4601      	mov	r1, r0
 80041e0:	f7fc fc5e 	bl	8000aa0 <__addsf3>
 80041e4:	4649      	mov	r1, r9
 80041e6:	f7fc fc5b 	bl	8000aa0 <__addsf3>
 80041ea:	4681      	mov	r9, r0
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 80041ec:	4601      	mov	r1, r0
 80041ee:	4640      	mov	r0, r8
 80041f0:	f7fc ff1a 	bl	8001028 <__aeabi_fcmpgt>
 80041f4:	b118      	cbz	r0, 80041fe <planner_recalculate+0xc2>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 80041f6:	46c8      	mov	r8, r9
 80041f8:	46a3      	mov	fp, r4
 80041fa:	f8c7 9018 	str.w	r9, [r7, #24]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 80041fe:	1b32      	subs	r2, r6, r4
 8004200:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004204:	69d0      	ldr	r0, [r2, #28]
 8004206:	4641      	mov	r1, r8
 8004208:	f7fc fee6 	bl	8000fd8 <__aeabi_fcmpeq>
  block_index++;
 800420c:	1c63      	adds	r3, r4, #1
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 800420e:	2800      	cmp	r0, #0
 8004210:	bf18      	it	ne
 8004212:	46a3      	movne	fp, r4
  block_index++;
 8004214:	b2dc      	uxtb	r4, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004216:	2c24      	cmp	r4, #36	; 0x24
 8004218:	bf08      	it	eq
 800421a:	2400      	moveq	r4, #0
 800421c:	46ba      	mov	sl, r7
  while (block_index != block_buffer_head) {
 800421e:	9b00      	ldr	r3, [sp, #0]
    next = &block_buffer[block_index];
 8004220:	00e6      	lsls	r6, r4, #3
 8004222:	1b37      	subs	r7, r6, r4
  while (block_index != block_buffer_head) {
 8004224:	429c      	cmp	r4, r3
    next = &block_buffer[block_index];
 8004226:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
  while (block_index != block_buffer_head) {
 800422a:	d1c9      	bne.n	80041c0 <planner_recalculate+0x84>
 800422c:	9b01      	ldr	r3, [sp, #4]
 800422e:	f883 b000 	strb.w	fp, [r3]
    block_index = plan_next_block_index( block_index );
  }
}
 8004232:	b003      	add	sp, #12
 8004234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == block_buffer_planned) { return; }
 8004238:	4b3a      	ldr	r3, [pc, #232]	; (8004324 <planner_recalculate+0x1e8>)
 800423a:	f893 8000 	ldrb.w	r8, [r3]
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
 8004244:	d0f5      	beq.n	8004232 <planner_recalculate+0xf6>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004246:	4d38      	ldr	r5, [pc, #224]	; (8004328 <planner_recalculate+0x1ec>)
 8004248:	f8d5 17c8 	ldr.w	r1, [r5, #1992]	; 0x7c8
 800424c:	f8d5 07cc 	ldr.w	r0, [r5, #1996]	; 0x7cc
 8004250:	f7fc fd2e 	bl	8000cb0 <__aeabi_fmul>
 8004254:	4601      	mov	r1, r0
 8004256:	f7fc fc23 	bl	8000aa0 <__addsf3>
 800425a:	f8d5 77c4 	ldr.w	r7, [r5, #1988]	; 0x7c4
 800425e:	4604      	mov	r4, r0
 8004260:	4639      	mov	r1, r7
 8004262:	f7fc fecd 	bl	8001000 <__aeabi_fcmple>
 8004266:	b900      	cbnz	r0, 800426a <planner_recalculate+0x12e>
 8004268:	463c      	mov	r4, r7
 800426a:	f04f 0b22 	mov.w	fp, #34	; 0x22
  plan_block_t *current = &block_buffer[block_index];
 800426e:	4f2f      	ldr	r7, [pc, #188]	; (800432c <planner_recalculate+0x1f0>)
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004270:	f8c5 47c0 	str.w	r4, [r5, #1984]	; 0x7c0
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8004274:	45d8      	cmp	r8, fp
 8004276:	d045      	beq.n	8004304 <planner_recalculate+0x1c8>
 8004278:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8004330 <planner_recalculate+0x1f4>
 800427c:	e029      	b.n	80042d2 <planner_recalculate+0x196>
 800427e:	fa5f fb82 	uxtb.w	fp, r2
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004282:	f899 2000 	ldrb.w	r2, [r9]
 8004286:	455a      	cmp	r2, fp
 8004288:	d033      	beq.n	80042f2 <planner_recalculate+0x1b6>
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 800428a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800428e:	eb05 0ac6 	add.w	sl, r5, r6, lsl #3
 8004292:	f8da 601c 	ldr.w	r6, [sl, #28]
 8004296:	f8da 0018 	ldr.w	r0, [sl, #24]
 800429a:	4631      	mov	r1, r6
 800429c:	f7fc fe9c 	bl	8000fd8 <__aeabi_fcmpeq>
 80042a0:	b998      	cbnz	r0, 80042ca <planner_recalculate+0x18e>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80042a2:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 80042a6:	f8da 0020 	ldr.w	r0, [sl, #32]
 80042aa:	f7fc fd01 	bl	8000cb0 <__aeabi_fmul>
 80042ae:	4601      	mov	r1, r0
 80042b0:	f7fc fbf6 	bl	8000aa0 <__addsf3>
 80042b4:	69b9      	ldr	r1, [r7, #24]
 80042b6:	f7fc fbf3 	bl	8000aa0 <__addsf3>
 80042ba:	4607      	mov	r7, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 80042bc:	4601      	mov	r1, r0
 80042be:	4630      	mov	r0, r6
 80042c0:	f7fc feb2 	bl	8001028 <__aeabi_fcmpgt>
 80042c4:	b1d8      	cbz	r0, 80042fe <planner_recalculate+0x1c2>
          current->entry_speed_sqr = entry_speed_sqr;
 80042c6:	f8ca 7018 	str.w	r7, [sl, #24]
    while (block_index != block_buffer_planned) {
 80042ca:	45c3      	cmp	fp, r8
 80042cc:	4627      	mov	r7, r4
 80042ce:	f43f af66 	beq.w	800419e <planner_recalculate+0x62>
      current = &block_buffer[block_index];
 80042d2:	ebcb 04cb 	rsb	r4, fp, fp, lsl #3
 80042d6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80042da:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80042de:	465e      	mov	r6, fp
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80042e0:	f1bb 0f00 	cmp.w	fp, #0
 80042e4:	d1cb      	bne.n	800427e <planner_recalculate+0x142>
 80042e6:	f04f 0b23 	mov.w	fp, #35	; 0x23
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80042ea:	f899 2000 	ldrb.w	r2, [r9]
 80042ee:	455a      	cmp	r2, fp
 80042f0:	d1cb      	bne.n	800428a <planner_recalculate+0x14e>
 80042f2:	f004 fa17 	bl	8008724 <st_update_plan_block_parameters>
 80042f6:	9b01      	ldr	r3, [sp, #4]
 80042f8:	f893 8000 	ldrb.w	r8, [r3]
 80042fc:	e7c5      	b.n	800428a <planner_recalculate+0x14e>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 80042fe:	f8ca 6018 	str.w	r6, [sl, #24]
 8004302:	e7e2      	b.n	80042ca <planner_recalculate+0x18e>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004304:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <planner_recalculate+0x1f4>)
 8004306:	7812      	ldrb	r2, [r2, #0]
 8004308:	455a      	cmp	r2, fp
 800430a:	f47f af4b 	bne.w	80041a4 <planner_recalculate+0x68>
 800430e:	f004 fa09 	bl	8008724 <st_update_plan_block_parameters>
 8004312:	4b03      	ldr	r3, [pc, #12]	; (8004320 <planner_recalculate+0x1e4>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	9b01      	ldr	r3, [sp, #4]
 800431a:	f893 b000 	ldrb.w	fp, [r3]
 800431e:	e741      	b.n	80041a4 <planner_recalculate+0x68>
 8004320:	200009e0 	.word	0x200009e0
 8004324:	200009e1 	.word	0x200009e1
 8004328:	20000200 	.word	0x20000200
 800432c:	200009a8 	.word	0x200009a8
 8004330:	200009e2 	.word	0x200009e2

08004334 <plan_reset>:


void plan_reset()
{
 8004334:	b538      	push	{r3, r4, r5, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8004336:	2224      	movs	r2, #36	; 0x24
 8004338:	2100      	movs	r1, #0
 800433a:	4807      	ldr	r0, [pc, #28]	; (8004358 <plan_reset+0x24>)
 800433c:	f006 fcad 	bl	800ac9a <memset>
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 8004340:	2300      	movs	r3, #0
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004342:	2101      	movs	r1, #1
  block_buffer_tail = 0;
 8004344:	4d05      	ldr	r5, [pc, #20]	; (800435c <plan_reset+0x28>)
  block_buffer_head = 0; // Empty = tail
 8004346:	4c06      	ldr	r4, [pc, #24]	; (8004360 <plan_reset+0x2c>)
  block_buffer_planned = 0; // = block_buffer_tail;
 8004348:	4806      	ldr	r0, [pc, #24]	; (8004364 <plan_reset+0x30>)
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 800434a:	4a07      	ldr	r2, [pc, #28]	; (8004368 <plan_reset+0x34>)
  block_buffer_tail = 0;
 800434c:	702b      	strb	r3, [r5, #0]
  block_buffer_head = 0; // Empty = tail
 800434e:	7023      	strb	r3, [r4, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 8004350:	7003      	strb	r3, [r0, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004352:	7011      	strb	r1, [r2, #0]
 8004354:	bd38      	pop	{r3, r4, r5, pc}
 8004356:	bf00      	nop
 8004358:	200009e4 	.word	0x200009e4
 800435c:	200009e2 	.word	0x200009e2
 8004360:	200009e0 	.word	0x200009e0
 8004364:	200009e1 	.word	0x200009e1
 8004368:	200009e3 	.word	0x200009e3

0800436c <plan_discard_current_block>:
}


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 800436c:	4909      	ldr	r1, [pc, #36]	; (8004394 <plan_discard_current_block+0x28>)
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <plan_discard_current_block+0x2c>)
 8004370:	780a      	ldrb	r2, [r1, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	4293      	cmp	r3, r2
 8004376:	d00c      	beq.n	8004392 <plan_discard_current_block+0x26>
  block_index++;
 8004378:	1c53      	adds	r3, r2, #1
 800437a:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800437c:	2b24      	cmp	r3, #36	; 0x24
 800437e:	bf08      	it	eq
 8004380:	2300      	moveq	r3, #0
{
 8004382:	b410      	push	{r4}
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004384:	4805      	ldr	r0, [pc, #20]	; (800439c <plan_discard_current_block+0x30>)
    block_buffer_tail = block_index;
 8004386:	700b      	strb	r3, [r1, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004388:	7804      	ldrb	r4, [r0, #0]
 800438a:	4294      	cmp	r4, r2
 800438c:	bf08      	it	eq
 800438e:	7003      	strbeq	r3, [r0, #0]
  }
}
 8004390:	bc10      	pop	{r4}
 8004392:	4770      	bx	lr
 8004394:	200009e2 	.word	0x200009e2
 8004398:	200009e0 	.word	0x200009e0
 800439c:	200009e1 	.word	0x200009e1

080043a0 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <plan_get_system_motion_block+0x10>)
 80043a2:	4804      	ldr	r0, [pc, #16]	; (80043b4 <plan_get_system_motion_block+0x14>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
}
 80043aa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80043ae:	4770      	bx	lr
 80043b0:	200009e0 	.word	0x200009e0
 80043b4:	20000200 	.word	0x20000200

080043b8 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <plan_get_current_block+0x1c>)
 80043ba:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <plan_get_current_block+0x20>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	7812      	ldrb	r2, [r2, #0]
 80043c0:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 80043c2:	bf1d      	ittte	ne
 80043c4:	4805      	ldrne	r0, [pc, #20]	; (80043dc <plan_get_current_block+0x24>)
 80043c6:	ebc3 03c3 	rsbne	r3, r3, r3, lsl #3
 80043ca:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 80043ce:	2000      	moveq	r0, #0
}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	200009e2 	.word	0x200009e2
 80043d8:	200009e0 	.word	0x200009e0
 80043dc:	20000200 	.word	0x20000200

080043e0 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 80043e4:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80043e6:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 80043e8:	3301      	adds	r3, #1
 80043ea:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80043ec:	2b24      	cmp	r3, #36	; 0x24
 80043ee:	bf08      	it	eq
 80043f0:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d006      	beq.n	8004404 <plan_get_exec_block_exit_speed_sqr+0x24>
  return( block_buffer[block_index].entry_speed_sqr );
 80043f6:	4a06      	ldr	r2, [pc, #24]	; (8004410 <plan_get_exec_block_exit_speed_sqr+0x30>)
 80043f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80043fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004400:	6998      	ldr	r0, [r3, #24]
 8004402:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8004404:	2000      	movs	r0, #0
}
 8004406:	4770      	bx	lr
 8004408:	200009e2 	.word	0x200009e2
 800440c:	200009e0 	.word	0x200009e0
 8004410:	20000200 	.word	0x20000200

08004414 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <plan_check_full_buffer+0x14>)
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <plan_check_full_buffer+0x18>)
 8004418:	7810      	ldrb	r0, [r2, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 800441c:	1ac0      	subs	r0, r0, r3
 800441e:	fab0 f080 	clz	r0, r0
 8004422:	0940      	lsrs	r0, r0, #5
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	200009e2 	.word	0x200009e2
 800442c:	200009e3 	.word	0x200009e3

08004430 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 8004430:	b538      	push	{r3, r4, r5, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004432:	7d83      	ldrb	r3, [r0, #22]
  float nominal_speed = block->programmed_rate;
 8004434:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004436:	07da      	lsls	r2, r3, #31
 8004438:	d514      	bpl.n	8004464 <plan_compute_profile_nominal_speed+0x34>
 800443a:	4b16      	ldr	r3, [pc, #88]	; (8004494 <plan_compute_profile_nominal_speed+0x64>)
 800443c:	7a58      	ldrb	r0, [r3, #9]
 800443e:	f7fc fbe3 	bl	8000c08 <__aeabi_i2f>
 8004442:	4915      	ldr	r1, [pc, #84]	; (8004498 <plan_compute_profile_nominal_speed+0x68>)
 8004444:	f7fc fc34 	bl	8000cb0 <__aeabi_fmul>
 8004448:	4629      	mov	r1, r5
 800444a:	f7fc fc31 	bl	8000cb0 <__aeabi_fmul>
 800444e:	4604      	mov	r4, r0
 8004450:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004454:	4620      	mov	r0, r4
 8004456:	f7fc fddd 	bl	8001014 <__aeabi_fcmpge>
 800445a:	b908      	cbnz	r0, 8004460 <plan_compute_profile_nominal_speed+0x30>
 800445c:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
  return(MINIMUM_FEED_RATE);
}
 8004460:	4620      	mov	r0, r4
 8004462:	bd38      	pop	{r3, r4, r5, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004464:	075b      	lsls	r3, r3, #29
 8004466:	4604      	mov	r4, r0
 8004468:	d40b      	bmi.n	8004482 <plan_compute_profile_nominal_speed+0x52>
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <plan_compute_profile_nominal_speed+0x64>)
 800446c:	7a18      	ldrb	r0, [r3, #8]
 800446e:	f7fc fbcb 	bl	8000c08 <__aeabi_i2f>
 8004472:	4909      	ldr	r1, [pc, #36]	; (8004498 <plan_compute_profile_nominal_speed+0x68>)
 8004474:	f7fc fc1c 	bl	8000cb0 <__aeabi_fmul>
 8004478:	4601      	mov	r1, r0
 800447a:	4628      	mov	r0, r5
 800447c:	f7fc fc18 	bl	8000cb0 <__aeabi_fmul>
 8004480:	4605      	mov	r5, r0
 8004482:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8004484:	4629      	mov	r1, r5
 8004486:	4620      	mov	r0, r4
 8004488:	f7fc fdba 	bl	8001000 <__aeabi_fcmple>
 800448c:	2800      	cmp	r0, #0
 800448e:	d1df      	bne.n	8004450 <plan_compute_profile_nominal_speed+0x20>
 8004490:	462c      	mov	r4, r5
 8004492:	e7dd      	b.n	8004450 <plan_compute_profile_nominal_speed+0x20>
 8004494:	200010b0 	.word	0x200010b0
 8004498:	3c23d70a 	.word	0x3c23d70a

0800449c <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 800449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80044a0:	4d35      	ldr	r5, [pc, #212]	; (8004578 <plan_update_velocity_profile_parameters+0xdc>)
  uint8_t block_index = block_buffer_tail;
 80044a2:	4a36      	ldr	r2, [pc, #216]	; (800457c <plan_update_velocity_profile_parameters+0xe0>)
 80044a4:	4b36      	ldr	r3, [pc, #216]	; (8004580 <plan_update_velocity_profile_parameters+0xe4>)
{
 80044a6:	b083      	sub	sp, #12
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80044a8:	7a28      	ldrb	r0, [r5, #8]
  uint8_t block_index = block_buffer_tail;
 80044aa:	7814      	ldrb	r4, [r2, #0]
 80044ac:	f893 b000 	ldrb.w	fp, [r3]
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80044b0:	f7fc fbaa 	bl	8000c08 <__aeabi_i2f>
 80044b4:	4933      	ldr	r1, [pc, #204]	; (8004584 <plan_update_velocity_profile_parameters+0xe8>)
 80044b6:	f7fc fbfb 	bl	8000cb0 <__aeabi_fmul>
 80044ba:	9001      	str	r0, [sp, #4]
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80044bc:	7a68      	ldrb	r0, [r5, #9]
 80044be:	f7fc fba3 	bl	8000c08 <__aeabi_i2f>
 80044c2:	4930      	ldr	r1, [pc, #192]	; (8004584 <plan_update_velocity_profile_parameters+0xe8>)
 80044c4:	f7fc fbf4 	bl	8000cb0 <__aeabi_fmul>
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 80044c8:	4f2f      	ldr	r7, [pc, #188]	; (8004588 <plan_update_velocity_profile_parameters+0xec>)
 80044ca:	9000      	str	r0, [sp, #0]
  while (block_index != block_buffer_head) {
    block = &block_buffer[block_index];
 80044cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004590 <plan_update_velocity_profile_parameters+0xf4>
 80044d0:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
  while (block_index != block_buffer_head) {
 80044d4:	e023      	b.n	800451e <plan_update_velocity_profile_parameters+0x82>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80044d6:	4641      	mov	r1, r8
 80044d8:	9800      	ldr	r0, [sp, #0]
 80044da:	f7fc fbe9 	bl	8000cb0 <__aeabi_fmul>
 80044de:	4605      	mov	r5, r0
 80044e0:	4649      	mov	r1, r9
 80044e2:	4628      	mov	r0, r5
 80044e4:	f7fc fd96 	bl	8001014 <__aeabi_fcmpge>
 80044e8:	b900      	cbnz	r0, 80044ec <plan_update_velocity_profile_parameters+0x50>
 80044ea:	464d      	mov	r5, r9
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80044ec:	4629      	mov	r1, r5
 80044ee:	4638      	mov	r0, r7
 80044f0:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 80044f4:	f7fc fd7a 	bl	8000fec <__aeabi_fcmplt>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d031      	beq.n	8004560 <plan_update_velocity_profile_parameters+0xc4>
 80044fc:	4639      	mov	r1, r7
 80044fe:	4638      	mov	r0, r7
 8004500:	f7fc fbd6 	bl	8000cb0 <__aeabi_fmul>
 8004504:	4607      	mov	r7, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004506:	4641      	mov	r1, r8
 8004508:	4638      	mov	r0, r7
 800450a:	f7fc fd8d 	bl	8001028 <__aeabi_fcmpgt>
 800450e:	bb20      	cbnz	r0, 800455a <plan_update_velocity_profile_parameters+0xbe>
 8004510:	61f7      	str	r7, [r6, #28]
  block_index++;
 8004512:	3401      	adds	r4, #1
 8004514:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004516:	2c24      	cmp	r4, #36	; 0x24
 8004518:	bf08      	it	eq
 800451a:	2400      	moveq	r4, #0
 800451c:	462f      	mov	r7, r5
  while (block_index != block_buffer_head) {
 800451e:	455c      	cmp	r4, fp
 8004520:	d024      	beq.n	800456c <plan_update_velocity_profile_parameters+0xd0>
    block = &block_buffer[block_index];
 8004522:	00e5      	lsls	r5, r4, #3
 8004524:	1b2e      	subs	r6, r5, r4
 8004526:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800452a:	7db3      	ldrb	r3, [r6, #22]
  float nominal_speed = block->programmed_rate;
 800452c:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004530:	07da      	lsls	r2, r3, #31
 8004532:	d4d0      	bmi.n	80044d6 <plan_update_velocity_profile_parameters+0x3a>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004534:	075b      	lsls	r3, r3, #29
 8004536:	d404      	bmi.n	8004542 <plan_update_velocity_profile_parameters+0xa6>
 8004538:	4640      	mov	r0, r8
 800453a:	9901      	ldr	r1, [sp, #4]
 800453c:	f7fc fbb8 	bl	8000cb0 <__aeabi_fmul>
 8004540:	4680      	mov	r8, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8004542:	1b2d      	subs	r5, r5, r4
 8004544:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8004548:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 800454a:	4641      	mov	r1, r8
 800454c:	4628      	mov	r0, r5
 800454e:	f7fc fd57 	bl	8001000 <__aeabi_fcmple>
 8004552:	2800      	cmp	r0, #0
 8004554:	d1c4      	bne.n	80044e0 <plan_update_velocity_profile_parameters+0x44>
 8004556:	4645      	mov	r5, r8
 8004558:	e7c2      	b.n	80044e0 <plan_update_velocity_profile_parameters+0x44>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800455a:	f8c6 801c 	str.w	r8, [r6, #28]
 800455e:	e7d8      	b.n	8004512 <plan_update_velocity_profile_parameters+0x76>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004560:	4629      	mov	r1, r5
 8004562:	4628      	mov	r0, r5
 8004564:	f7fc fba4 	bl	8000cb0 <__aeabi_fmul>
 8004568:	4607      	mov	r7, r0
 800456a:	e7cc      	b.n	8004506 <plan_update_velocity_profile_parameters+0x6a>
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <plan_update_velocity_profile_parameters+0xf0>)
 800456e:	621f      	str	r7, [r3, #32]
}
 8004570:	b003      	add	sp, #12
 8004572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004576:	bf00      	nop
 8004578:	200010b0 	.word	0x200010b0
 800457c:	200009e2 	.word	0x200009e2
 8004580:	200009e0 	.word	0x200009e0
 8004584:	3c23d70a 	.word	0x3c23d70a
 8004588:	7f7fffff 	.word	0x7f7fffff
 800458c:	200009e4 	.word	0x200009e4
 8004590:	20000200 	.word	0x20000200

08004594 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 8004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004598:	468b      	mov	fp, r1
 800459a:	4682      	mov	sl, r0
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 800459c:	4b66      	ldr	r3, [pc, #408]	; (8004738 <plan_buffer_line+0x1a4>)
 800459e:	4d67      	ldr	r5, [pc, #412]	; (800473c <plan_buffer_line+0x1a8>)
 80045a0:	781e      	ldrb	r6, [r3, #0]
{
 80045a2:	b093      	sub	sp, #76	; 0x4c
  plan_block_t *block = &block_buffer[block_buffer_head];
 80045a4:	00f7      	lsls	r7, r6, #3
 80045a6:	eba7 0806 	sub.w	r8, r7, r6
 80045aa:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 80045ae:	2238      	movs	r2, #56	; 0x38
 80045b0:	2100      	movs	r1, #0
 80045b2:	4640      	mov	r0, r8
 80045b4:	f006 fb71 	bl	800ac9a <memset>
  block->condition = pl_data->condition;
 80045b8:	f89b 3008 	ldrb.w	r3, [fp, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 80045bc:	f8db 2004 	ldr.w	r2, [fp, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 80045c0:	0798      	lsls	r0, r3, #30
  block->condition = pl_data->condition;
 80045c2:	f888 3016 	strb.w	r3, [r8, #22]
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80045c6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004748 <plan_buffer_line+0x1b4>
    memcpy(position_steps, sys_position, sizeof(sys_position));
 80045ca:	bf4c      	ite	mi
 80045cc:	4b5c      	ldrmi	r3, [pc, #368]	; (8004740 <plan_buffer_line+0x1ac>)
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 80045ce:	4b5d      	ldrpl	r3, [pc, #372]	; (8004744 <plan_buffer_line+0x1b0>)
    block->spindle_speed = pl_data->spindle_speed;
 80045d0:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 80045d4:	ac06      	add	r4, sp, #24
 80045d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80045dc:	f8d9 2000 	ldr.w	r2, [r9]
 80045e0:	f8da 1000 	ldr.w	r1, [sl]
 80045e4:	4610      	mov	r0, r2
 80045e6:	9201      	str	r2, [sp, #4]
 80045e8:	f7fc fb62 	bl	8000cb0 <__aeabi_fmul>
 80045ec:	f006 fc12 	bl	800ae14 <lroundf>
 80045f0:	4686      	mov	lr, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80045f2:	1bb9      	subs	r1, r7, r6
 80045f4:	9806      	ldr	r0, [sp, #24]
 80045f6:	00c9      	lsls	r1, r1, #3
 80045f8:	186b      	adds	r3, r5, r1
 80045fa:	ebae 0000 	sub.w	r0, lr, r0
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80045fe:	691a      	ldr	r2, [r3, #16]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004600:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8004604:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004608:	4294      	cmp	r4, r2
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800460a:	506c      	str	r4, [r5, r1]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800460c:	bf38      	it	cc
 800460e:	4614      	movcc	r4, r2
 8004610:	611c      	str	r4, [r3, #16]
 8004612:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004614:	f8cd e008 	str.w	lr, [sp, #8]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004618:	f7fc faf6 	bl	8000c08 <__aeabi_i2f>
 800461c:	9a01      	ldr	r2, [sp, #4]
 800461e:	4611      	mov	r1, r2
 8004620:	f7fc fbfa 	bl	8000e18 <__aeabi_fdiv>
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004624:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004626:	900a      	str	r0, [sp, #40]	; 0x28
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004628:	f7fc fce0 	bl	8000fec <__aeabi_fcmplt>
 800462c:	9b00      	ldr	r3, [sp, #0]
 800462e:	2800      	cmp	r0, #0
 8004630:	f040 8173 	bne.w	800491a <plan_buffer_line+0x386>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004634:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004638:	f8da 1004 	ldr.w	r1, [sl, #4]
 800463c:	4610      	mov	r0, r2
 800463e:	9201      	str	r2, [sp, #4]
 8004640:	f7fc fb36 	bl	8000cb0 <__aeabi_fmul>
 8004644:	f006 fbe6 	bl	800ae14 <lroundf>
 8004648:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800464a:	9807      	ldr	r0, [sp, #28]
 800464c:	1bbb      	subs	r3, r7, r6
 800464e:	1a08      	subs	r0, r1, r0
 8004650:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 8004654:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004658:	4574      	cmp	r4, lr
 800465a:	bf38      	it	cc
 800465c:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800465e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004662:	f8c3 e004 	str.w	lr, [r3, #4]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004666:	611c      	str	r4, [r3, #16]
 8004668:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800466a:	9103      	str	r1, [sp, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 800466c:	f7fc facc 	bl	8000c08 <__aeabi_i2f>
 8004670:	9a01      	ldr	r2, [sp, #4]
 8004672:	4611      	mov	r1, r2
 8004674:	f7fc fbd0 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004678:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 800467a:	900b      	str	r0, [sp, #44]	; 0x2c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800467c:	f7fc fcb6 	bl	8000fec <__aeabi_fcmplt>
 8004680:	9b00      	ldr	r3, [sp, #0]
 8004682:	2800      	cmp	r0, #0
 8004684:	f040 8155 	bne.w	8004932 <plan_buffer_line+0x39e>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004688:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800468c:	f8da 1008 	ldr.w	r1, [sl, #8]
 8004690:	4610      	mov	r0, r2
 8004692:	9201      	str	r2, [sp, #4]
 8004694:	f7fc fb0c 	bl	8000cb0 <__aeabi_fmul>
 8004698:	f006 fbbc 	bl	800ae14 <lroundf>
 800469c:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800469e:	9808      	ldr	r0, [sp, #32]
 80046a0:	1bbb      	subs	r3, r7, r6
 80046a2:	1a08      	subs	r0, r1, r0
 80046a4:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80046a8:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80046ac:	4574      	cmp	r4, lr
 80046ae:	bf38      	it	cc
 80046b0:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80046b2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80046b6:	f8c3 e008 	str.w	lr, [r3, #8]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80046ba:	611c      	str	r4, [r3, #16]
 80046bc:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80046be:	9104      	str	r1, [sp, #16]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80046c0:	f7fc faa2 	bl	8000c08 <__aeabi_i2f>
 80046c4:	9a01      	ldr	r2, [sp, #4]
 80046c6:	4611      	mov	r1, r2
 80046c8:	f7fc fba6 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80046cc:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80046ce:	900c      	str	r0, [sp, #48]	; 0x30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80046d0:	f7fc fc8c 	bl	8000fec <__aeabi_fcmplt>
 80046d4:	9b00      	ldr	r3, [sp, #0]
 80046d6:	2800      	cmp	r0, #0
 80046d8:	f040 8125 	bne.w	8004926 <plan_buffer_line+0x392>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80046dc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80046e0:	f8da 100c 	ldr.w	r1, [sl, #12]
 80046e4:	4618      	mov	r0, r3
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	f7fc fae2 	bl	8000cb0 <__aeabi_fmul>
 80046ec:	f006 fb92 	bl	800ae14 <lroundf>
 80046f0:	4602      	mov	r2, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80046f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046f4:	eba7 0a06 	sub.w	sl, r7, r6
 80046f8:	1a10      	subs	r0, r2, r0
 80046fa:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 80046fe:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004702:	428c      	cmp	r4, r1
 8004704:	bf38      	it	cc
 8004706:	460c      	movcc	r4, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004708:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800470c:	f8ca 100c 	str.w	r1, [sl, #12]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004710:	f8ca 4010 	str.w	r4, [sl, #16]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004714:	9205      	str	r2, [sp, #20]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004716:	f7fc fa77 	bl	8000c08 <__aeabi_i2f>
 800471a:	9b00      	ldr	r3, [sp, #0]
 800471c:	4619      	mov	r1, r3
 800471e:	f7fc fb7b 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004722:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004724:	900d      	str	r0, [sp, #52]	; 0x34
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004726:	f7fc fc61 	bl	8000fec <__aeabi_fcmplt>
 800472a:	b978      	cbnz	r0, 800474c <plan_buffer_line+0x1b8>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 800472c:	b9bc      	cbnz	r4, 800475e <plan_buffer_line+0x1ca>
 800472e:	4620      	mov	r0, r4

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 8004730:	b013      	add	sp, #76	; 0x4c
 8004732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004736:	bf00      	nop
 8004738:	200009e0 	.word	0x200009e0
 800473c:	20000200 	.word	0x20000200
 8004740:	200010d8 	.word	0x200010d8
 8004744:	200009e4 	.word	0x200009e4
 8004748:	2000126c 	.word	0x2000126c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800474c:	4a99      	ldr	r2, [pc, #612]	; (80049b4 <plan_buffer_line+0x420>)
 800474e:	f8ba 3014 	ldrh.w	r3, [sl, #20]
 8004752:	88d2      	ldrh	r2, [r2, #6]
 8004754:	4313      	orrs	r3, r2
 8004756:	f8aa 3014 	strh.w	r3, [sl, #20]
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 800475a:	2c00      	cmp	r4, #0
 800475c:	d0e7      	beq.n	800472e <plan_buffer_line+0x19a>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 800475e:	ac0a      	add	r4, sp, #40	; 0x28
 8004760:	4620      	mov	r0, r4
 8004762:	f7ff fc2d 	bl	8003fc0 <convert_delta_vector_to_unit_vector>
 8004766:	eba7 0a06 	sub.w	sl, r7, r6
 800476a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800476e:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004772:	4621      	mov	r1, r4
 8004774:	4890      	ldr	r0, [pc, #576]	; (80049b8 <plan_buffer_line+0x424>)
 8004776:	f7ff fc8b 	bl	8004090 <limit_value_by_axis_maximum>
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 800477a:	4621      	mov	r1, r4
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 800477c:	f8ca 0020 	str.w	r0, [sl, #32]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004780:	488e      	ldr	r0, [pc, #568]	; (80049bc <plan_buffer_line+0x428>)
 8004782:	f7ff fc85 	bl	8004090 <limit_value_by_axis_maximum>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004786:	f89a 3016 	ldrb.w	r3, [sl, #22]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 800478a:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 800478e:	07d9      	lsls	r1, r3, #31
 8004790:	f100 80d5 	bmi.w	800493e <plan_buffer_line+0x3aa>
    block->programmed_rate = pl_data->feed_rate;
 8004794:	f8db 1000 	ldr.w	r1, [fp]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004798:	071a      	lsls	r2, r3, #28
    block->programmed_rate = pl_data->feed_rate;
 800479a:	f8ca 1030 	str.w	r1, [sl, #48]	; 0x30
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 800479e:	d507      	bpl.n	80047b0 <plan_buffer_line+0x21c>
 80047a0:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	f7fc fa83 	bl	8000cb0 <__aeabi_fmul>
 80047aa:	9b00      	ldr	r3, [sp, #0]
 80047ac:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80047b0:	4a83      	ldr	r2, [pc, #524]	; (80049c0 <plan_buffer_line+0x42c>)
 80047b2:	4984      	ldr	r1, [pc, #528]	; (80049c4 <plan_buffer_line+0x430>)
 80047b4:	7812      	ldrb	r2, [r2, #0]
 80047b6:	7809      	ldrb	r1, [r1, #0]
 80047b8:	4291      	cmp	r1, r2
 80047ba:	f000 80c3 	beq.w	8004944 <plan_buffer_line+0x3b0>
 80047be:	079b      	lsls	r3, r3, #30
 80047c0:	f100 80c0 	bmi.w	8004944 <plan_buffer_line+0x3b0>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047c4:	4b80      	ldr	r3, [pc, #512]	; (80049c8 <plan_buffer_line+0x434>)
 80047c6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80047ca:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80047ce:	4650      	mov	r0, sl
 80047d0:	4659      	mov	r1, fp
 80047d2:	f7fc fa6d 	bl	8000cb0 <__aeabi_fmul>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047d6:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047d8:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047dc:	4650      	mov	r0, sl
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047de:	9300      	str	r3, [sp, #0]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047e0:	f7fc f95c 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047e4:	4b78      	ldr	r3, [pc, #480]	; (80049c8 <plan_buffer_line+0x434>)
 80047e6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80047ea:	f8d3 b014 	ldr.w	fp, [r3, #20]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80047ee:	900e      	str	r0, [sp, #56]	; 0x38
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80047f0:	4659      	mov	r1, fp
 80047f2:	4650      	mov	r0, sl
 80047f4:	f7fc fa5c 	bl	8000cb0 <__aeabi_fmul>
 80047f8:	9b00      	ldr	r3, [sp, #0]
 80047fa:	4601      	mov	r1, r0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fc f94d 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004802:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004804:	9001      	str	r0, [sp, #4]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004806:	4650      	mov	r0, sl
 8004808:	f7fc f948 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800480c:	4b6e      	ldr	r3, [pc, #440]	; (80049c8 <plan_buffer_line+0x434>)
 800480e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8004812:	699b      	ldr	r3, [r3, #24]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004814:	900f      	str	r0, [sp, #60]	; 0x3c
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004816:	4619      	mov	r1, r3
 8004818:	4658      	mov	r0, fp
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	f7fc fa48 	bl	8000cb0 <__aeabi_fmul>
 8004820:	9a01      	ldr	r2, [sp, #4]
 8004822:	4601      	mov	r1, r0
 8004824:	4610      	mov	r0, r2
 8004826:	f7fc f939 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800482a:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800482c:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800482e:	4619      	mov	r1, r3
 8004830:	4658      	mov	r0, fp
 8004832:	f7fc f933 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004836:	4b64      	ldr	r3, [pc, #400]	; (80049c8 <plan_buffer_line+0x434>)
 8004838:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800483c:	69db      	ldr	r3, [r3, #28]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800483e:	9010      	str	r0, [sp, #64]	; 0x40
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004840:	4659      	mov	r1, fp
 8004842:	4618      	mov	r0, r3
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	f7fc fa33 	bl	8000cb0 <__aeabi_fmul>
 800484a:	4601      	mov	r1, r0
 800484c:	4650      	mov	r0, sl
 800484e:	f7fc f925 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004852:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004854:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004856:	4619      	mov	r1, r3
 8004858:	4658      	mov	r0, fp
 800485a:	f7fc f91f 	bl	8000a9c <__aeabi_fsub>
    if (junction_cos_theta > 0.999999f) {
 800485e:	495b      	ldr	r1, [pc, #364]	; (80049cc <plan_buffer_line+0x438>)
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004860:	9011      	str	r0, [sp, #68]	; 0x44
    if (junction_cos_theta > 0.999999f) {
 8004862:	4650      	mov	r0, sl
 8004864:	f7fc fbe0 	bl	8001028 <__aeabi_fcmpgt>
 8004868:	2800      	cmp	r0, #0
 800486a:	f000 8098 	beq.w	800499e <plan_buffer_line+0x40a>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 800486e:	2200      	movs	r2, #0
 8004870:	1bbb      	subs	r3, r7, r6
 8004872:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004876:	629a      	str	r2, [r3, #40]	; 0x28
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004878:	1bbb      	subs	r3, r7, r6
 800487a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800487e:	7d9a      	ldrb	r2, [r3, #22]
 8004880:	0790      	lsls	r0, r2, #30
 8004882:	d466      	bmi.n	8004952 <plan_buffer_line+0x3be>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004884:	07d1      	lsls	r1, r2, #31
  float nominal_speed = block->programmed_rate;
 8004886:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800488a:	d566      	bpl.n	800495a <plan_buffer_line+0x3c6>
 800488c:	4b50      	ldr	r3, [pc, #320]	; (80049d0 <plan_buffer_line+0x43c>)
 800488e:	7a58      	ldrb	r0, [r3, #9]
 8004890:	f7fc f9ba 	bl	8000c08 <__aeabi_i2f>
 8004894:	4649      	mov	r1, r9
 8004896:	f7fc fa0b 	bl	8000cb0 <__aeabi_fmul>
 800489a:	494e      	ldr	r1, [pc, #312]	; (80049d4 <plan_buffer_line+0x440>)
 800489c:	f7fc fa08 	bl	8000cb0 <__aeabi_fmul>
 80048a0:	4605      	mov	r5, r0
 80048a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7fc fbb4 	bl	8001014 <__aeabi_fcmpge>
 80048ac:	b908      	cbnz	r0, 80048b2 <plan_buffer_line+0x31e>
 80048ae:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 80048b2:	4e45      	ldr	r6, [pc, #276]	; (80049c8 <plan_buffer_line+0x434>)
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80048b4:	4629      	mov	r1, r5
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 80048b6:	f8d6 9020 	ldr.w	r9, [r6, #32]
 80048ba:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80048be:	4648      	mov	r0, r9
 80048c0:	f7fc fb94 	bl	8000fec <__aeabi_fcmplt>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d064      	beq.n	8004992 <plan_buffer_line+0x3fe>
 80048c8:	4649      	mov	r1, r9
 80048ca:	4648      	mov	r0, r9
 80048cc:	f7fc f9f0 	bl	8000cb0 <__aeabi_fmul>
 80048d0:	4681      	mov	r9, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80048d2:	4639      	mov	r1, r7
 80048d4:	4648      	mov	r0, r9
 80048d6:	f7fc fba7 	bl	8001028 <__aeabi_fcmpgt>
 80048da:	2800      	cmp	r0, #0
 80048dc:	d156      	bne.n	800498c <plan_buffer_line+0x3f8>
 80048de:	f8c8 901c 	str.w	r9, [r8, #28]
    block_buffer_head = next_buffer_head;
 80048e2:	4a3d      	ldr	r2, [pc, #244]	; (80049d8 <plan_buffer_line+0x444>)
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 80048e4:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 80049e4 <plan_buffer_line+0x450>
    block_buffer_head = next_buffer_head;
 80048e8:	7811      	ldrb	r1, [r2, #0]
 80048ea:	4836      	ldr	r0, [pc, #216]	; (80049c4 <plan_buffer_line+0x430>)
  block_index++;
 80048ec:	1c4b      	adds	r3, r1, #1
 80048ee:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80048f0:	2b24      	cmp	r3, #36	; 0x24
 80048f2:	bf08      	it	eq
 80048f4:	2300      	moveq	r3, #0
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 80048f6:	af02      	add	r7, sp, #8
    pl.previous_nominal_speed = nominal_speed;
 80048f8:	6235      	str	r5, [r6, #32]
    block_buffer_head = next_buffer_head;
 80048fa:	7001      	strb	r1, [r0, #0]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 80048fc:	7013      	strb	r3, [r2, #0]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 80048fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004902:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004906:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800490a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    planner_recalculate();
 800490e:	f7ff fc15 	bl	800413c <planner_recalculate>
  return(PLAN_OK);
 8004912:	2001      	movs	r0, #1
}
 8004914:	b013      	add	sp, #76	; 0x4c
 8004916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800491a:	4a26      	ldr	r2, [pc, #152]	; (80049b4 <plan_buffer_line+0x420>)
 800491c:	8a99      	ldrh	r1, [r3, #20]
 800491e:	8812      	ldrh	r2, [r2, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	829a      	strh	r2, [r3, #20]
 8004924:	e686      	b.n	8004634 <plan_buffer_line+0xa0>
 8004926:	4923      	ldr	r1, [pc, #140]	; (80049b4 <plan_buffer_line+0x420>)
 8004928:	8a9a      	ldrh	r2, [r3, #20]
 800492a:	8889      	ldrh	r1, [r1, #4]
 800492c:	430a      	orrs	r2, r1
 800492e:	829a      	strh	r2, [r3, #20]
 8004930:	e6d4      	b.n	80046dc <plan_buffer_line+0x148>
 8004932:	4a20      	ldr	r2, [pc, #128]	; (80049b4 <plan_buffer_line+0x420>)
 8004934:	8a99      	ldrh	r1, [r3, #20]
 8004936:	8852      	ldrh	r2, [r2, #2]
 8004938:	430a      	orrs	r2, r1
 800493a:	829a      	strh	r2, [r3, #20]
 800493c:	e6a4      	b.n	8004688 <plan_buffer_line+0xf4>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 800493e:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
 8004942:	e735      	b.n	80047b0 <plan_buffer_line+0x21c>
    block->entry_speed_sqr = 0.0f;
 8004944:	2200      	movs	r2, #0
 8004946:	1bbb      	subs	r3, r7, r6
 8004948:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800494c:	619a      	str	r2, [r3, #24]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 800494e:	629a      	str	r2, [r3, #40]	; 0x28
 8004950:	e792      	b.n	8004878 <plan_buffer_line+0x2e4>
  return(PLAN_OK);
 8004952:	2001      	movs	r0, #1
}
 8004954:	b013      	add	sp, #76	; 0x4c
 8004956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 800495a:	0753      	lsls	r3, r2, #29
 800495c:	d40a      	bmi.n	8004974 <plan_buffer_line+0x3e0>
 800495e:	4b1c      	ldr	r3, [pc, #112]	; (80049d0 <plan_buffer_line+0x43c>)
 8004960:	7a18      	ldrb	r0, [r3, #8]
 8004962:	f7fc f951 	bl	8000c08 <__aeabi_i2f>
 8004966:	4649      	mov	r1, r9
 8004968:	f7fc f9a2 	bl	8000cb0 <__aeabi_fmul>
 800496c:	4919      	ldr	r1, [pc, #100]	; (80049d4 <plan_buffer_line+0x440>)
 800496e:	f7fc f99f 	bl	8000cb0 <__aeabi_fmul>
 8004972:	4681      	mov	r9, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8004974:	1bbe      	subs	r6, r7, r6
 8004976:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 800497a:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 800497c:	4649      	mov	r1, r9
 800497e:	4628      	mov	r0, r5
 8004980:	f7fc fb3e 	bl	8001000 <__aeabi_fcmple>
 8004984:	2800      	cmp	r0, #0
 8004986:	d18c      	bne.n	80048a2 <plan_buffer_line+0x30e>
 8004988:	464d      	mov	r5, r9
 800498a:	e78a      	b.n	80048a2 <plan_buffer_line+0x30e>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800498c:	f8c8 701c 	str.w	r7, [r8, #28]
 8004990:	e7a7      	b.n	80048e2 <plan_buffer_line+0x34e>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004992:	4629      	mov	r1, r5
 8004994:	4628      	mov	r0, r5
 8004996:	f7fc f98b 	bl	8000cb0 <__aeabi_fmul>
 800499a:	4681      	mov	r9, r0
 800499c:	e799      	b.n	80048d2 <plan_buffer_line+0x33e>
      if (junction_cos_theta < -0.999999f) {
 800499e:	490f      	ldr	r1, [pc, #60]	; (80049dc <plan_buffer_line+0x448>)
 80049a0:	4650      	mov	r0, sl
 80049a2:	f7fc fb23 	bl	8000fec <__aeabi_fcmplt>
 80049a6:	b1f8      	cbz	r0, 80049e8 <plan_buffer_line+0x454>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 80049a8:	1bbb      	subs	r3, r7, r6
 80049aa:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <plan_buffer_line+0x44c>)
 80049ac:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
 80049b2:	e761      	b.n	8004878 <plan_buffer_line+0x2e4>
 80049b4:	0800c020 	.word	0x0800c020
 80049b8:	2000128c 	.word	0x2000128c
 80049bc:	2000127c 	.word	0x2000127c
 80049c0:	200009e2 	.word	0x200009e2
 80049c4:	200009e0 	.word	0x200009e0
 80049c8:	200009e4 	.word	0x200009e4
 80049cc:	3f7fffef 	.word	0x3f7fffef
 80049d0:	200010b0 	.word	0x200010b0
 80049d4:	3c23d70a 	.word	0x3c23d70a
 80049d8:	200009e3 	.word	0x200009e3
 80049dc:	bf7fffef 	.word	0xbf7fffef
 80049e0:	7f7fffff 	.word	0x7f7fffff
 80049e4:	200009f4 	.word	0x200009f4
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 80049e8:	a80e      	add	r0, sp, #56	; 0x38
 80049ea:	f7ff fae9 	bl	8003fc0 <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 80049ee:	a90e      	add	r1, sp, #56	; 0x38
 80049f0:	4818      	ldr	r0, [pc, #96]	; (8004a54 <plan_buffer_line+0x4c0>)
 80049f2:	f7ff fb4d 	bl	8004090 <limit_value_by_axis_maximum>
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 80049f6:	4651      	mov	r1, sl
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 80049f8:	9000      	str	r0, [sp, #0]
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 80049fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80049fe:	f7fc f84d 	bl	8000a9c <__aeabi_fsub>
 8004a02:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004a06:	f7fc f953 	bl	8000cb0 <__aeabi_fmul>
 8004a0a:	f006 fa67 	bl	800aedc <sqrtf>
 8004a0e:	4683      	mov	fp, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8004a10:	9b00      	ldr	r3, [sp, #0]
 8004a12:	4659      	mov	r1, fp
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fc f94b 	bl	8000cb0 <__aeabi_fmul>
 8004a1a:	f8d9 1048 	ldr.w	r1, [r9, #72]	; 0x48
 8004a1e:	f7fc f947 	bl	8000cb0 <__aeabi_fmul>
 8004a22:	4659      	mov	r1, fp
 8004a24:	4681      	mov	r9, r0
 8004a26:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004a2a:	f7fc f837 	bl	8000a9c <__aeabi_fsub>
 8004a2e:	4601      	mov	r1, r0
 8004a30:	4648      	mov	r0, r9
 8004a32:	f7fc f9f1 	bl	8000e18 <__aeabi_fdiv>
 8004a36:	eba7 0a06 	sub.w	sl, r7, r6
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8004a40:	4681      	mov	r9, r0
 8004a42:	f7fc fae7 	bl	8001014 <__aeabi_fcmpge>
 8004a46:	b908      	cbnz	r0, 8004a4c <plan_buffer_line+0x4b8>
 8004a48:	f04f 0900 	mov.w	r9, #0
 8004a4c:	f8ca 9028 	str.w	r9, [sl, #40]	; 0x28
 8004a50:	e712      	b.n	8004878 <plan_buffer_line+0x2e4>
 8004a52:	bf00      	nop
 8004a54:	2000128c 	.word	0x2000128c

08004a58 <plan_sync_position>:


// Reset the planner position vectors. Called by the system abort/initialization routine.
void plan_sync_position()
{
 8004a58:	b410      	push	{r4}
 8004a5a:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <plan_sync_position+0x10>)
 8004a5c:	4c03      	ldr	r4, [pc, #12]	; (8004a6c <plan_sync_position+0x14>)
 8004a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
    #else
      pl.position[idx] = sys_position[idx];
    #endif
  }
}
 8004a64:	bc10      	pop	{r4}
 8004a66:	4770      	bx	lr
 8004a68:	200010d8 	.word	0x200010d8
 8004a6c:	200009e4 	.word	0x200009e4

08004a70 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004a70:	4a06      	ldr	r2, [pc, #24]	; (8004a8c <plan_get_block_buffer_available+0x1c>)
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <plan_get_block_buffer_available+0x20>)
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	bf2c      	ite	cs
 8004a7c:	f103 0023 	addcs.w	r0, r3, #35	; 0x23
  return((block_buffer_tail-block_buffer_head-1));
 8004a80:	f103 30ff 	addcc.w	r0, r3, #4294967295
 8004a84:	1a80      	subs	r0, r0, r2
 8004a86:	b2c0      	uxtb	r0, r0
}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	200009e0 	.word	0x200009e0
 8004a90:	200009e2 	.word	0x200009e2

08004a94 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8004a94:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8004a96:	f003 fe45 	bl	8008724 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8004a9a:	4a04      	ldr	r2, [pc, #16]	; (8004aac <plan_cycle_reinitialize+0x18>)
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <plan_cycle_reinitialize+0x1c>)
 8004a9e:	7812      	ldrb	r2, [r2, #0]
 8004aa0:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 8004aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 8004aa6:	f7ff bb49 	b.w	800413c <planner_recalculate>
 8004aaa:	bf00      	nop
 8004aac:	200009e2 	.word	0x200009e2
 8004ab0:	200009e1 	.word	0x200009e1

08004ab4 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	4604      	mov	r4, r0
  while (*s)
 8004ab8:	7800      	ldrb	r0, [r0, #0]
 8004aba:	b128      	cbz	r0, 8004ac8 <printString+0x14>
    serial_write(*s++);
 8004abc:	f002 fc76 	bl	80073ac <serial_write>
  while (*s)
 8004ac0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d1f9      	bne.n	8004abc <printString+0x8>
 8004ac8:	bd10      	pop	{r4, pc}
 8004aca:	bf00      	nop

08004acc <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8004acc:	2863      	cmp	r0, #99	; 0x63
{
 8004ace:	b570      	push	{r4, r5, r6, lr}
 8004ad0:	4605      	mov	r5, r0
  if (n >= 100) { // 100-255
 8004ad2:	d920      	bls.n	8004b16 <print_uint8_base10+0x4a>
    digit_a = '0' + n % 10;
    n /= 10;
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
    n /= 10;
 8004ad4:	481c      	ldr	r0, [pc, #112]	; (8004b48 <print_uint8_base10+0x7c>)
 8004ad6:	fba0 3005 	umull	r3, r0, r0, r5
 8004ada:	0940      	lsrs	r0, r0, #5
  }
  serial_write('0' + n);
 8004adc:	3030      	adds	r0, #48	; 0x30
 8004ade:	f002 fc65 	bl	80073ac <serial_write>
    n /= 10;
 8004ae2:	481a      	ldr	r0, [pc, #104]	; (8004b4c <print_uint8_base10+0x80>)
 8004ae4:	fba0 3405 	umull	r3, r4, r0, r5
 8004ae8:	08e4      	lsrs	r4, r4, #3
    digit_b = '0' + n % 10;
 8004aea:	b2e3      	uxtb	r3, r4
 8004aec:	fba0 2003 	umull	r2, r0, r0, r3
 8004af0:	08c0      	lsrs	r0, r0, #3
 8004af2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004af6:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 8004afa:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004afc:	b2c0      	uxtb	r0, r0
 8004afe:	f002 fc55 	bl	80073ac <serial_write>
    digit_a = '0' + n % 10;
 8004b02:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8004b06:	eba5 0040 	sub.w	r0, r5, r0, lsl #1
 8004b0a:	3030      	adds	r0, #48	; 0x30
  if (digit_a) { serial_write(digit_a); }
 8004b0c:	b2c0      	uxtb	r0, r0
}
 8004b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (digit_a) { serial_write(digit_a); }
 8004b12:	f002 bc4b 	b.w	80073ac <serial_write>
  if (n >= 10) { // 10-99
 8004b16:	2809      	cmp	r0, #9
 8004b18:	d805      	bhi.n	8004b26 <print_uint8_base10+0x5a>
}
 8004b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  serial_write('0' + n);
 8004b1e:	3030      	adds	r0, #48	; 0x30
 8004b20:	b2c0      	uxtb	r0, r0
 8004b22:	f002 bc43 	b.w	80073ac <serial_write>
    n /= 10;
 8004b26:	260a      	movs	r6, #10
 8004b28:	fbb0 f4f6 	udiv	r4, r0, r6
  serial_write('0' + n);
 8004b2c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004b30:	b2c0      	uxtb	r0, r0
 8004b32:	f002 fc3b 	bl	80073ac <serial_write>
    digit_b = '0' + n % 10;
 8004b36:	fb06 5014 	mls	r0, r6, r4, r5
}
 8004b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digit_b = '0' + n % 10;
 8004b3e:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004b40:	b2c0      	uxtb	r0, r0
 8004b42:	f002 bc33 	b.w	80073ac <serial_write>
 8004b46:	bf00      	nop
 8004b48:	51eb851f 	.word	0x51eb851f
 8004b4c:	cccccccd 	.word	0xcccccccd

08004b50 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b52:	460d      	mov	r5, r1
 8004b54:	b085      	sub	sp, #20
  if (n < 0) {
 8004b56:	2100      	movs	r1, #0
{
 8004b58:	4606      	mov	r6, r0
  if (n < 0) {
 8004b5a:	f7fc fa47 	bl	8000fec <__aeabi_fcmplt>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d152      	bne.n	8004c08 <printFloat+0xb8>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004b62:	2d01      	cmp	r5, #1
 8004b64:	d956      	bls.n	8004c14 <printFloat+0xc4>
 8004b66:	462c      	mov	r4, r5
    n *= 100;
 8004b68:	4f2f      	ldr	r7, [pc, #188]	; (8004c28 <printFloat+0xd8>)
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fc f89f 	bl	8000cb0 <__aeabi_fmul>
    decimals -= 2;
 8004b72:	3c02      	subs	r4, #2
 8004b74:	b2e4      	uxtb	r4, r4
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004b76:	2c01      	cmp	r4, #1
    n *= 100;
 8004b78:	4606      	mov	r6, r0
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004b7a:	d8f6      	bhi.n	8004b6a <printFloat+0x1a>
 8004b7c:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 8004b80:	b123      	cbz	r3, 8004b8c <printFloat+0x3c>
 8004b82:	4630      	mov	r0, r6
 8004b84:	4929      	ldr	r1, [pc, #164]	; (8004c2c <printFloat+0xdc>)
 8004b86:	f7fc f893 	bl	8000cb0 <__aeabi_fmul>
 8004b8a:	4606      	mov	r6, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004b8c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004b90:	4630      	mov	r0, r6
 8004b92:	f7fb ff85 	bl	8000aa0 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004b96:	f7fc fa67 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d03c      	beq.n	8004c18 <printFloat+0xc8>
 8004b9e:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004ba0:	4e23      	ldr	r6, [pc, #140]	; (8004c30 <printFloat+0xe0>)
 8004ba2:	fba6 1300 	umull	r1, r3, r6, r0
 8004ba6:	08db      	lsrs	r3, r3, #3
 8004ba8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004bac:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004bb0:	1c54      	adds	r4, r2, #1
 8004bb2:	a904      	add	r1, sp, #16
 8004bb4:	3030      	adds	r0, #48	; 0x30
 8004bb6:	440a      	add	r2, r1
 8004bb8:	b2e4      	uxtb	r4, r4
 8004bba:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004bbe:	4622      	mov	r2, r4
  while(a > 0) {
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1ed      	bne.n	8004ba2 <printFloat+0x52>
    a /= 10;
  }
  while (i < decimal_places) {
 8004bc6:	42a5      	cmp	r5, r4
 8004bc8:	d928      	bls.n	8004c1c <printFloat+0xcc>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bca:	1e6a      	subs	r2, r5, #1
 8004bcc:	1b12      	subs	r2, r2, r4
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	3201      	adds	r2, #1
 8004bd2:	eb0d 0004 	add.w	r0, sp, r4
 8004bd6:	2130      	movs	r1, #48	; 0x30
 8004bd8:	f006 f85f 	bl	800ac9a <memset>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
    buf[i++] = '0';
 8004bdc:	2230      	movs	r2, #48	; 0x30
 8004bde:	ab04      	add	r3, sp, #16
 8004be0:	1c6c      	adds	r4, r5, #1
 8004be2:	442b      	add	r3, r5
 8004be4:	f803 2c10 	strb.w	r2, [r3, #-16]
 8004be8:	b2e4      	uxtb	r4, r4
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004bea:	b15c      	cbz	r4, 8004c04 <printFloat+0xb4>
 8004bec:	eb0d 0604 	add.w	r6, sp, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004bf0:	42a5      	cmp	r5, r4
 8004bf2:	d015      	beq.n	8004c20 <printFloat+0xd0>
    serial_write(buf[i-1]);
 8004bf4:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004bf8:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004bfa:	f002 fbd7 	bl	80073ac <serial_write>
  for (; i > 0; i--) {
 8004bfe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004c02:	d1f5      	bne.n	8004bf0 <printFloat+0xa0>
  }
}
 8004c04:	b005      	add	sp, #20
 8004c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    serial_write('-');
 8004c08:	202d      	movs	r0, #45	; 0x2d
 8004c0a:	f002 fbcf 	bl	80073ac <serial_write>
    n = -n;
 8004c0e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004c12:	e7a6      	b.n	8004b62 <printFloat+0x12>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004c14:	462b      	mov	r3, r5
 8004c16:	e7b3      	b.n	8004b80 <printFloat+0x30>
  uint8_t i = 0;
 8004c18:	4604      	mov	r4, r0
 8004c1a:	e7d4      	b.n	8004bc6 <printFloat+0x76>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004c1c:	d1e5      	bne.n	8004bea <printFloat+0x9a>
 8004c1e:	e7dd      	b.n	8004bdc <printFloat+0x8c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004c20:	202e      	movs	r0, #46	; 0x2e
 8004c22:	f002 fbc3 	bl	80073ac <serial_write>
 8004c26:	e7e5      	b.n	8004bf4 <printFloat+0xa4>
 8004c28:	42c80000 	.word	0x42c80000
 8004c2c:	41200000 	.word	0x41200000
 8004c30:	cccccccd 	.word	0xcccccccd

08004c34 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004c34:	b530      	push	{r4, r5, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004c36:	4b6e      	ldr	r3, [pc, #440]	; (8004df0 <printFloat_CoordValue+0x1bc>)
void printFloat_CoordValue(float n) {
 8004c38:	b085      	sub	sp, #20
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004c3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004c3e:	07db      	lsls	r3, r3, #31
 8004c40:	d452      	bmi.n	8004ce8 <printFloat_CoordValue+0xb4>
  if (n < 0) {
 8004c42:	2100      	movs	r1, #0
 8004c44:	4604      	mov	r4, r0
 8004c46:	f7fc f9d1 	bl	8000fec <__aeabi_fcmplt>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	f040 80a8 	bne.w	8004da0 <printFloat_CoordValue+0x16c>
  if (decimals) { n *= 10; }
 8004c50:	4968      	ldr	r1, [pc, #416]	; (8004df4 <printFloat_CoordValue+0x1c0>)
 8004c52:	4620      	mov	r0, r4
 8004c54:	f7fc f82c 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004c58:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004c5c:	f7fb ff20 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004c60:	f7fc fa02 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004c64:	2800      	cmp	r0, #0
 8004c66:	f000 80a1 	beq.w	8004dac <printFloat_CoordValue+0x178>
 8004c6a:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004c6c:	4d62      	ldr	r5, [pc, #392]	; (8004df8 <printFloat_CoordValue+0x1c4>)
 8004c6e:	e000      	b.n	8004c72 <printFloat_CoordValue+0x3e>
 8004c70:	4621      	mov	r1, r4
 8004c72:	fba5 2300 	umull	r2, r3, r5, r0
 8004c76:	08db      	lsrs	r3, r3, #3
 8004c78:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004c7c:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8004c80:	aa04      	add	r2, sp, #16
 8004c82:	3030      	adds	r0, #48	; 0x30
 8004c84:	1c4c      	adds	r4, r1, #1
 8004c86:	440a      	add	r2, r1
 8004c88:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004c8c:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 8004c8e:	4618      	mov	r0, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ed      	bne.n	8004c70 <printFloat_CoordValue+0x3c>
  while (i < decimal_places) {
 8004c94:	2c02      	cmp	r4, #2
 8004c96:	d816      	bhi.n	8004cc6 <printFloat_CoordValue+0x92>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c98:	2230      	movs	r2, #48	; 0x30
 8004c9a:	1c8b      	adds	r3, r1, #2
 8004c9c:	a804      	add	r0, sp, #16
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	4404      	add	r4, r0
  while (i < decimal_places) {
 8004ca2:	2b03      	cmp	r3, #3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ca4:	f804 2c10 	strb.w	r2, [r4, #-16]
  while (i < decimal_places) {
 8004ca8:	d007      	beq.n	8004cba <printFloat_CoordValue+0x86>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004caa:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004cac:	29ff      	cmp	r1, #255	; 0xff
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cae:	f803 2c10 	strb.w	r2, [r3, #-16]
  while (i < decimal_places) {
 8004cb2:	d102      	bne.n	8004cba <printFloat_CoordValue+0x86>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cb4:	2330      	movs	r3, #48	; 0x30
 8004cb6:	f88d 3002 	strb.w	r3, [sp, #2]
    buf[i++] = '0';
 8004cba:	2330      	movs	r3, #48	; 0x30
 8004cbc:	2404      	movs	r4, #4
 8004cbe:	461d      	mov	r5, r3
 8004cc0:	f88d 3003 	strb.w	r3, [sp, #3]
 8004cc4:	e005      	b.n	8004cd2 <printFloat_CoordValue+0x9e>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004cc6:	2c03      	cmp	r4, #3
 8004cc8:	d0f7      	beq.n	8004cba <printFloat_CoordValue+0x86>
 8004cca:	ab04      	add	r3, sp, #16
 8004ccc:	4423      	add	r3, r4
 8004cce:	f813 5c11 	ldrb.w	r5, [r3, #-17]
 8004cd2:	3c01      	subs	r4, #1
 8004cd4:	b2e4      	uxtb	r4, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004cd6:	2c02      	cmp	r4, #2
 8004cd8:	d07b      	beq.n	8004dd2 <printFloat_CoordValue+0x19e>
    serial_write(buf[i-1]);
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f002 fb66 	bl	80073ac <serial_write>
  for (; i > 0; i--) {
 8004ce0:	2c00      	cmp	r4, #0
 8004ce2:	d1f2      	bne.n	8004cca <printFloat_CoordValue+0x96>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8004ce4:	b005      	add	sp, #20
 8004ce6:	bd30      	pop	{r4, r5, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004ce8:	4944      	ldr	r1, [pc, #272]	; (8004dfc <printFloat_CoordValue+0x1c8>)
 8004cea:	f7fb ffe1 	bl	8000cb0 <__aeabi_fmul>
  if (n < 0) {
 8004cee:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004cf0:	4604      	mov	r4, r0
  if (n < 0) {
 8004cf2:	f7fc f97b 	bl	8000fec <__aeabi_fcmplt>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d15e      	bne.n	8004db8 <printFloat_CoordValue+0x184>
    n *= 100;
 8004cfa:	4941      	ldr	r1, [pc, #260]	; (8004e00 <printFloat_CoordValue+0x1cc>)
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f7fb ffd7 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004d02:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d06:	f7fb fecb 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004d0a:	f7fc f9ad 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d058      	beq.n	8004dc4 <printFloat_CoordValue+0x190>
 8004d12:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004d14:	4d38      	ldr	r5, [pc, #224]	; (8004df8 <printFloat_CoordValue+0x1c4>)
 8004d16:	e000      	b.n	8004d1a <printFloat_CoordValue+0xe6>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	fba5 2300 	umull	r2, r3, r5, r0
 8004d1e:	08db      	lsrs	r3, r3, #3
 8004d20:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004d24:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8004d28:	aa04      	add	r2, sp, #16
 8004d2a:	3030      	adds	r0, #48	; 0x30
 8004d2c:	1c4c      	adds	r4, r1, #1
 8004d2e:	440a      	add	r2, r1
 8004d30:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004d34:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 8004d36:	4618      	mov	r0, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ed      	bne.n	8004d18 <printFloat_CoordValue+0xe4>
  while (i < decimal_places) {
 8004d3c:	2c03      	cmp	r4, #3
 8004d3e:	d81e      	bhi.n	8004d7e <printFloat_CoordValue+0x14a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d40:	2230      	movs	r2, #48	; 0x30
 8004d42:	1c8b      	adds	r3, r1, #2
 8004d44:	a804      	add	r0, sp, #16
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	4404      	add	r4, r0
  while (i < decimal_places) {
 8004d4a:	2b04      	cmp	r3, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d4c:	f804 2c10 	strb.w	r2, [r4, #-16]
  while (i < decimal_places) {
 8004d50:	d00f      	beq.n	8004d72 <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d52:	3103      	adds	r1, #3
 8004d54:	b2c9      	uxtb	r1, r1
 8004d56:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004d58:	2904      	cmp	r1, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d5a:	f803 2c10 	strb.w	r2, [r3, #-16]
  while (i < decimal_places) {
 8004d5e:	d008      	beq.n	8004d72 <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d60:	2330      	movs	r3, #48	; 0x30
 8004d62:	aa04      	add	r2, sp, #16
 8004d64:	440a      	add	r2, r1
  while (i < decimal_places) {
 8004d66:	2902      	cmp	r1, #2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d68:	f802 3c10 	strb.w	r3, [r2, #-16]
  while (i < decimal_places) {
 8004d6c:	d101      	bne.n	8004d72 <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d6e:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[i++] = '0';
 8004d72:	2330      	movs	r3, #48	; 0x30
 8004d74:	2405      	movs	r4, #5
 8004d76:	461d      	mov	r5, r3
 8004d78:	f88d 3004 	strb.w	r3, [sp, #4]
 8004d7c:	e005      	b.n	8004d8a <printFloat_CoordValue+0x156>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004d7e:	2c04      	cmp	r4, #4
 8004d80:	d0f7      	beq.n	8004d72 <printFloat_CoordValue+0x13e>
 8004d82:	ab04      	add	r3, sp, #16
 8004d84:	4423      	add	r3, r4
 8004d86:	f813 5c11 	ldrb.w	r5, [r3, #-17]
 8004d8a:	3c01      	subs	r4, #1
 8004d8c:	b2e4      	uxtb	r4, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d8e:	2c03      	cmp	r4, #3
 8004d90:	d026      	beq.n	8004de0 <printFloat_CoordValue+0x1ac>
    serial_write(buf[i-1]);
 8004d92:	4628      	mov	r0, r5
 8004d94:	f002 fb0a 	bl	80073ac <serial_write>
  for (; i > 0; i--) {
 8004d98:	2c00      	cmp	r4, #0
 8004d9a:	d1f2      	bne.n	8004d82 <printFloat_CoordValue+0x14e>
}
 8004d9c:	b005      	add	sp, #20
 8004d9e:	bd30      	pop	{r4, r5, pc}
    serial_write('-');
 8004da0:	202d      	movs	r0, #45	; 0x2d
 8004da2:	f002 fb03 	bl	80073ac <serial_write>
    n = -n;
 8004da6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004daa:	e751      	b.n	8004c50 <printFloat_CoordValue+0x1c>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004dac:	2330      	movs	r3, #48	; 0x30
 8004dae:	f88d 3000 	strb.w	r3, [sp]
 8004db2:	f88d 3001 	strb.w	r3, [sp, #1]
 8004db6:	e77d      	b.n	8004cb4 <printFloat_CoordValue+0x80>
    serial_write('-');
 8004db8:	202d      	movs	r0, #45	; 0x2d
 8004dba:	f002 faf7 	bl	80073ac <serial_write>
    n = -n;
 8004dbe:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004dc2:	e79a      	b.n	8004cfa <printFloat_CoordValue+0xc6>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004dc4:	2330      	movs	r3, #48	; 0x30
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	f88d 3000 	strb.w	r3, [sp]
 8004dcc:	f88d 3001 	strb.w	r3, [sp, #1]
 8004dd0:	e7c6      	b.n	8004d60 <printFloat_CoordValue+0x12c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004dd2:	202e      	movs	r0, #46	; 0x2e
 8004dd4:	f002 faea 	bl	80073ac <serial_write>
    serial_write(buf[i-1]);
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f002 fae7 	bl	80073ac <serial_write>
 8004dde:	e774      	b.n	8004cca <printFloat_CoordValue+0x96>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004de0:	202e      	movs	r0, #46	; 0x2e
 8004de2:	f002 fae3 	bl	80073ac <serial_write>
    serial_write(buf[i-1]);
 8004de6:	4628      	mov	r0, r5
 8004de8:	f002 fae0 	bl	80073ac <serial_write>
 8004dec:	e7c9      	b.n	8004d82 <printFloat_CoordValue+0x14e>
 8004dee:	bf00      	nop
 8004df0:	2000126c 	.word	0x2000126c
 8004df4:	447a0000 	.word	0x447a0000
 8004df8:	cccccccd 	.word	0xcccccccd
 8004dfc:	3d21428b 	.word	0x3d21428b
 8004e00:	461c4000 	.word	0x461c4000

08004e04 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8004e04:	b570      	push	{r4, r5, r6, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004e06:	4b4d      	ldr	r3, [pc, #308]	; (8004f3c <printFloat_RateValue+0x138>)
void printFloat_RateValue(float n) {
 8004e08:	b084      	sub	sp, #16
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004e0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e0e:	07db      	lsls	r3, r3, #31
 8004e10:	d435      	bmi.n	8004e7e <printFloat_RateValue+0x7a>
  if (n < 0) {
 8004e12:	2100      	movs	r1, #0
 8004e14:	4604      	mov	r4, r0
 8004e16:	f7fc f8e9 	bl	8000fec <__aeabi_fcmplt>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d17b      	bne.n	8004f16 <printFloat_RateValue+0x112>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004e1e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004e22:	4620      	mov	r0, r4
 8004e24:	f7fb fe3c 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004e28:	f7fc f91e 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d06d      	beq.n	8004f0c <printFloat_RateValue+0x108>
 8004e30:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004e32:	4d43      	ldr	r5, [pc, #268]	; (8004f40 <printFloat_RateValue+0x13c>)
 8004e34:	fba5 1300 	umull	r1, r3, r5, r0
 8004e38:	08db      	lsrs	r3, r3, #3
 8004e3a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004e3e:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004e42:	1c54      	adds	r4, r2, #1
 8004e44:	a904      	add	r1, sp, #16
 8004e46:	3030      	adds	r0, #48	; 0x30
 8004e48:	440a      	add	r2, r1
 8004e4a:	b2e4      	uxtb	r4, r4
 8004e4c:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004e50:	4622      	mov	r2, r4
  while(a > 0) {
 8004e52:	4618      	mov	r0, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ed      	bne.n	8004e34 <printFloat_RateValue+0x30>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004e58:	2c00      	cmp	r4, #0
 8004e5a:	d057      	beq.n	8004f0c <printFloat_RateValue+0x108>
 8004e5c:	ab04      	add	r3, sp, #16
 8004e5e:	441a      	add	r2, r3
 8004e60:	f812 0c11 	ldrb.w	r0, [r2, #-17]
 8004e64:	3c01      	subs	r4, #1
 8004e66:	b2e4      	uxtb	r4, r4
 8004e68:	466d      	mov	r5, sp
 8004e6a:	446c      	add	r4, sp
 8004e6c:	e001      	b.n	8004e72 <printFloat_RateValue+0x6e>
 8004e6e:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
    serial_write(buf[i-1]);
 8004e72:	f002 fa9b 	bl	80073ac <serial_write>
  for (; i > 0; i--) {
 8004e76:	42ac      	cmp	r4, r5
 8004e78:	d1f9      	bne.n	8004e6e <printFloat_RateValue+0x6a>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8004e7a:	b004      	add	sp, #16
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004e7e:	4931      	ldr	r1, [pc, #196]	; (8004f44 <printFloat_RateValue+0x140>)
 8004e80:	f7fb ff16 	bl	8000cb0 <__aeabi_fmul>
  if (n < 0) {
 8004e84:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004e86:	4604      	mov	r4, r0
  if (n < 0) {
 8004e88:	f7fc f8b0 	bl	8000fec <__aeabi_fcmplt>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d148      	bne.n	8004f22 <printFloat_RateValue+0x11e>
  if (decimals) { n *= 10; }
 8004e90:	492d      	ldr	r1, [pc, #180]	; (8004f48 <printFloat_RateValue+0x144>)
 8004e92:	4620      	mov	r0, r4
 8004e94:	f7fb ff0c 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004e98:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004e9c:	f7fb fe00 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004ea0:	f7fc f8e2 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004ea4:	b1a0      	cbz	r0, 8004ed0 <printFloat_RateValue+0xcc>
 8004ea6:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004ea8:	4c25      	ldr	r4, [pc, #148]	; (8004f40 <printFloat_RateValue+0x13c>)
 8004eaa:	fba4 3200 	umull	r3, r2, r4, r0
 8004eae:	08d2      	lsrs	r2, r2, #3
 8004eb0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004eb4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8004eb8:	ad04      	add	r5, sp, #16
 8004eba:	1c4b      	adds	r3, r1, #1
 8004ebc:	3030      	adds	r0, #48	; 0x30
 8004ebe:	4429      	add	r1, r5
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f801 0c10 	strb.w	r0, [r1, #-16]
 8004ec6:	4619      	mov	r1, r3
  while(a > 0) {
 8004ec8:	4610      	mov	r0, r2
 8004eca:	2a00      	cmp	r2, #0
 8004ecc:	d1ed      	bne.n	8004eaa <printFloat_RateValue+0xa6>
  while (i < decimal_places) {
 8004ece:	bb73      	cbnz	r3, 8004f2e <printFloat_RateValue+0x12a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ed0:	2330      	movs	r3, #48	; 0x30
 8004ed2:	f88d 3000 	strb.w	r3, [sp]
    buf[i++] = '0';
 8004ed6:	2230      	movs	r2, #48	; 0x30
 8004ed8:	2302      	movs	r3, #2
 8004eda:	4616      	mov	r6, r2
 8004edc:	f88d 2001 	strb.w	r2, [sp, #1]
 8004ee0:	1e5c      	subs	r4, r3, #1
 8004ee2:	b2e5      	uxtb	r5, r4
 8004ee4:	446d      	add	r5, sp
 8004ee6:	e000      	b.n	8004eea <printFloat_RateValue+0xe6>
 8004ee8:	1e5c      	subs	r4, r3, #1
    serial_write(buf[i-1]);
 8004eea:	4630      	mov	r0, r6
 8004eec:	f002 fa5e 	bl	80073ac <serial_write>
  for (; i > 0; i--) {
 8004ef0:	b2e3      	uxtb	r3, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
 8004ef8:	d1f6      	bne.n	8004ee8 <printFloat_RateValue+0xe4>
 8004efa:	202e      	movs	r0, #46	; 0x2e
 8004efc:	f002 fa56 	bl	80073ac <serial_write>
    serial_write(buf[i-1]);
 8004f00:	4630      	mov	r0, r6
}
 8004f02:	b004      	add	sp, #16
 8004f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serial_write(buf[i-1]);
 8004f08:	f002 ba50 	b.w	80073ac <serial_write>
    buf[i++] = '0';
 8004f0c:	2030      	movs	r0, #48	; 0x30
 8004f0e:	2401      	movs	r4, #1
 8004f10:	f88d 0000 	strb.w	r0, [sp]
 8004f14:	e7a6      	b.n	8004e64 <printFloat_RateValue+0x60>
    serial_write('-');
 8004f16:	202d      	movs	r0, #45	; 0x2d
 8004f18:	f002 fa48 	bl	80073ac <serial_write>
    n = -n;
 8004f1c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004f20:	e77d      	b.n	8004e1e <printFloat_RateValue+0x1a>
    serial_write('-');
 8004f22:	202d      	movs	r0, #45	; 0x2d
 8004f24:	f002 fa42 	bl	80073ac <serial_write>
    n = -n;
 8004f28:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004f2c:	e7b0      	b.n	8004e90 <printFloat_RateValue+0x8c>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d0d1      	beq.n	8004ed6 <printFloat_RateValue+0xd2>
 8004f32:	4429      	add	r1, r5
 8004f34:	f811 6c11 	ldrb.w	r6, [r1, #-17]
 8004f38:	e7d2      	b.n	8004ee0 <printFloat_RateValue+0xdc>
 8004f3a:	bf00      	nop
 8004f3c:	2000126c 	.word	0x2000126c
 8004f40:	cccccccd 	.word	0xcccccccd
 8004f44:	3d21428b 	.word	0x3d21428b
 8004f48:	41200000 	.word	0x41200000

08004f4c <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8004f4c:	b510      	push	{r4, lr}
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004f4e:	2101      	movs	r1, #1
{
 8004f50:	b082      	sub	sp, #8
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004f52:	f44f 7400 	mov.w	r4, #512	; 0x200
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004f56:	2008      	movs	r0, #8
 8004f58:	f7fc fc6e 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004f5c:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004f5e:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004f60:	a902      	add	r1, sp, #8
 8004f62:	f821 4d04 	strh.w	r4, [r1, #-4]!
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8004f66:	4809      	ldr	r0, [pc, #36]	; (8004f8c <probe_init+0x40>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004f68:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004f6c:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8004f70:	f7fc fa46 	bl	8001400 <GPIO_Init>
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 8004f74:	2100      	movs	r1, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004f76:	4a06      	ldr	r2, [pc, #24]	; (8004f90 <probe_init+0x44>)
  probe_invert_mask = 0; // Initialize as zero.
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <probe_init+0x48>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004f7a:	f992 2058 	ldrsb.w	r2, [r2, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 8004f7e:	8019      	strh	r1, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004f80:	428a      	cmp	r2, r1
 8004f82:	bfa8      	it	ge
 8004f84:	801c      	strhge	r4, [r3, #0]
}
 8004f86:	b002      	add	sp, #8
 8004f88:	bd10      	pop	{r4, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40010c00 	.word	0x40010c00
 8004f90:	2000126c 	.word	0x2000126c
 8004f94:	200010ea 	.word	0x200010ea

08004f98 <probe_configure_invert_mask>:
  probe_invert_mask = 0; // Initialize as zero.
 8004f98:	2300      	movs	r3, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004f9a:	4907      	ldr	r1, [pc, #28]	; (8004fb8 <probe_configure_invert_mask+0x20>)
  probe_invert_mask = 0; // Initialize as zero.
 8004f9c:	4a07      	ldr	r2, [pc, #28]	; (8004fbc <probe_configure_invert_mask+0x24>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004f9e:	f991 1058 	ldrsb.w	r1, [r1, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 8004fa2:	8013      	strh	r3, [r2, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004fa4:	4299      	cmp	r1, r3
 8004fa6:	bfaa      	itet	ge
 8004fa8:	f44f 7100 	movge.w	r1, #512	; 0x200
 8004fac:	f44f 7300 	movlt.w	r3, #512	; 0x200
 8004fb0:	8011      	strhge	r1, [r2, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 8004fb2:	b100      	cbz	r0, 8004fb6 <probe_configure_invert_mask+0x1e>
 8004fb4:	8013      	strh	r3, [r2, #0]
 8004fb6:	4770      	bx	lr
 8004fb8:	2000126c 	.word	0x2000126c
 8004fbc:	200010ea 	.word	0x200010ea

08004fc0 <probe_get_state>:
}


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 8004fc0:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8004fc2:	4805      	ldr	r0, [pc, #20]	; (8004fd8 <probe_get_state+0x18>)
 8004fc4:	f7fc fbd2 	bl	800176c <GPIO_ReadInputData>
 8004fc8:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <probe_get_state+0x1c>)
 8004fca:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004fce:	881b      	ldrh	r3, [r3, #0]
#endif
}
 8004fd0:	1a18      	subs	r0, r3, r0
 8004fd2:	bf18      	it	ne
 8004fd4:	2001      	movne	r0, #1
 8004fd6:	bd08      	pop	{r3, pc}
 8004fd8:	40010c00 	.word	0x40010c00
 8004fdc:	200010ea 	.word	0x200010ea

08004fe0 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8004fe0:	b538      	push	{r3, r4, r5, lr}
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8004fe2:	480b      	ldr	r0, [pc, #44]	; (8005010 <probe_state_monitor+0x30>)
 8004fe4:	f7fc fbc2 	bl	800176c <GPIO_ReadInputData>
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <probe_state_monitor+0x34>)
  if (probe_get_state()) {
 8004fea:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	4283      	cmp	r3, r0
 8004ff2:	d00c      	beq.n	800500e <probe_state_monitor+0x2e>
    sys_probe_state = PROBE_OFF;
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4a08      	ldr	r2, [pc, #32]	; (8005018 <probe_state_monitor+0x38>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004ff8:	4d08      	ldr	r5, [pc, #32]	; (800501c <probe_state_monitor+0x3c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <probe_state_monitor+0x40>)
 8004ffc:	4c09      	ldr	r4, [pc, #36]	; (8005024 <probe_state_monitor+0x44>)
    sys_probe_state = PROBE_OFF;
 8004ffe:	7011      	strb	r1, [r2, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005006:	782b      	ldrb	r3, [r5, #0]
 8005008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800500c:	702b      	strb	r3, [r5, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	40010c00 	.word	0x40010c00
 8005014:	200010ea 	.word	0x200010ea
 8005018:	200010c6 	.word	0x200010c6
 800501c:	200010c5 	.word	0x200010c5
 8005020:	200010d8 	.word	0x200010d8
 8005024:	200010c8 	.word	0x200010c8

08005028 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 8005028:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800502a:	f7ff f9c5 	bl	80043b8 <plan_get_current_block>
 800502e:	b120      	cbz	r0, 800503a <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 8005030:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005034:	2002      	movs	r0, #2
 8005036:	f004 bb9f 	b.w	8009778 <system_set_exec_state_flag>
 800503a:	bd08      	pop	{r3, pc}

0800503c <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 800503e:	4bac      	ldr	r3, [pc, #688]	; (80052f0 <protocol_exec_rt_system+0x2b4>)
 8005040:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005042:	2b00      	cmp	r3, #0
 8005044:	d14f      	bne.n	80050e6 <protocol_exec_rt_system+0xaa>
 8005046:	4cab      	ldr	r4, [pc, #684]	; (80052f4 <protocol_exec_rt_system+0x2b8>)
 8005048:	4dab      	ldr	r5, [pc, #684]	; (80052f8 <protocol_exec_rt_system+0x2bc>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 800504a:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 800504c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005050:	b393      	cbz	r3, 80050b8 <protocol_exec_rt_system+0x7c>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 8005052:	06ee      	lsls	r6, r5, #27
 8005054:	f100 80d6 	bmi.w	8005204 <protocol_exec_rt_system+0x1c8>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005058:	07e8      	lsls	r0, r5, #31
 800505a:	f100 80f1 	bmi.w	8005240 <protocol_exec_rt_system+0x204>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 800505e:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005062:	d00a      	beq.n	800507a <protocol_exec_rt_system+0x3e>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005064:	7823      	ldrb	r3, [r4, #0]
 8005066:	0799      	lsls	r1, r3, #30
 8005068:	f000 80f0 	beq.w	800524c <protocol_exec_rt_system+0x210>
 800506c:	b26e      	sxtb	r6, r5
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 800506e:	2e00      	cmp	r6, #0
 8005070:	f2c0 8161 	blt.w	8005336 <protocol_exec_rt_system+0x2fa>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005074:	20e8      	movs	r0, #232	; 0xe8
 8005076:	f004 fb89 	bl	800978c <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 800507a:	07ab      	lsls	r3, r5, #30
 800507c:	d519      	bpl.n	80050b2 <protocol_exec_rt_system+0x76>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 800507e:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005082:	d113      	bne.n	80050ac <protocol_exec_rt_system+0x70>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005084:	7823      	ldrb	r3, [r4, #0]
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	f000 816d 	beq.w	8005366 <protocol_exec_rt_system+0x32a>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 813b 	bne.w	8005308 <protocol_exec_rt_system+0x2cc>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005092:	2300      	movs	r3, #0
 8005094:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005096:	f7ff f98f 	bl	80043b8 <plan_get_current_block>
 800509a:	b120      	cbz	r0, 80050a6 <protocol_exec_rt_system+0x6a>
 800509c:	78a3      	ldrb	r3, [r4, #2]
 800509e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80050a2:	f000 8198 	beq.w	80053d6 <protocol_exec_rt_system+0x39a>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
              sys.state = STATE_CYCLE;
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              st_wake_up();
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80050a6:	2300      	movs	r3, #0
 80050a8:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 80050aa:	7023      	strb	r3, [r4, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80050ac:	2002      	movs	r0, #2
 80050ae:	f004 fb6d 	bl	800978c <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 80050b2:	0769      	lsls	r1, r5, #29
 80050b4:	f100 80a9 	bmi.w	800520a <protocol_exec_rt_system+0x1ce>
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 80050b8:	4b90      	ldr	r3, [pc, #576]	; (80052fc <protocol_exec_rt_system+0x2c0>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 80050bc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d167      	bne.n	8005194 <protocol_exec_rt_system+0x158>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 80050c4:	4b8e      	ldr	r3, [pc, #568]	; (8005300 <protocol_exec_rt_system+0x2c4>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 80050c8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80050cc:	b9db      	cbnz	r3, 8005106 <protocol_exec_rt_system+0xca>
 80050ce:	7823      	ldrb	r3, [r4, #0]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 80050d0:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 80050d4:	d103      	bne.n	80050de <protocol_exec_rt_system+0xa2>
 80050d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80050d8:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80050dc:	d147      	bne.n	800516e <protocol_exec_rt_system+0x132>
    st_prep_buffer();
  }

}
 80050de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 80050e2:	f003 bb35 	b.w	8008750 <st_prep_buffer>
    sys.state = STATE_ALARM; // Set system alarm state
 80050e6:	2601      	movs	r6, #1
 80050e8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80050ec:	4c81      	ldr	r4, [pc, #516]	; (80052f4 <protocol_exec_rt_system+0x2b8>)
    report_alarm_message(rt_exec);
 80050ee:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80050f0:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 80050f2:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 80050f4:	f001 f9c4 	bl	8006480 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80050f8:	42b5      	cmp	r5, r6
 80050fa:	f240 8122 	bls.w	8005342 <protocol_exec_rt_system+0x306>
 80050fe:	4d7e      	ldr	r5, [pc, #504]	; (80052f8 <protocol_exec_rt_system+0x2bc>)
    system_clear_exec_alarm(); // Clear alarm
 8005100:	f004 fb56 	bl	80097b0 <system_clear_exec_alarm>
 8005104:	e7a1      	b.n	800504a <protocol_exec_rt_system+0xe>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005106:	f004 fb77 	bl	80097f8 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 800510a:	7aa2      	ldrb	r2, [r4, #10]
 800510c:	f015 0f01 	tst.w	r5, #1
 8005110:	bf0c      	ite	eq
 8005112:	4613      	moveq	r3, r2
 8005114:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005116:	07a8      	lsls	r0, r5, #30
 8005118:	bf44      	itt	mi
 800511a:	330a      	addmi	r3, #10
 800511c:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800511e:	0769      	lsls	r1, r5, #29
 8005120:	bf44      	itt	mi
 8005122:	3b0a      	submi	r3, #10
 8005124:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005126:	072f      	lsls	r7, r5, #28
 8005128:	bf44      	itt	mi
 800512a:	3301      	addmi	r3, #1
 800512c:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800512e:	06ee      	lsls	r6, r5, #27
 8005130:	bf44      	itt	mi
 8005132:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005136:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005138:	2bc8      	cmp	r3, #200	; 0xc8
 800513a:	bf28      	it	cs
 800513c:	23c8      	movcs	r3, #200	; 0xc8
 800513e:	2b0a      	cmp	r3, #10
 8005140:	bf38      	it	cc
 8005142:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005144:	429a      	cmp	r2, r3
 8005146:	d006      	beq.n	8005156 <protocol_exec_rt_system+0x11a>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005148:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800514a:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 800514c:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800514e:	f042 0308 	orr.w	r3, r2, #8
 8005152:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005154:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005156:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 8005158:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800515a:	d502      	bpl.n	8005162 <protocol_exec_rt_system+0x126>
      if (sys.state == STATE_HOLD) {
 800515c:	2b10      	cmp	r3, #16
 800515e:	f000 80bd 	beq.w	80052dc <protocol_exec_rt_system+0x2a0>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005162:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005166:	d0b3      	beq.n	80050d0 <protocol_exec_rt_system+0x94>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005168:	2b00      	cmp	r3, #0
 800516a:	f040 80df 	bne.w	800532c <protocol_exec_rt_system+0x2f0>
        uint8_t coolant_state = gc_state.modal.coolant;
 800516e:	4f65      	ldr	r7, [pc, #404]	; (8005304 <protocol_exec_rt_system+0x2c8>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005170:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8005172:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005174:	f100 80f0 	bmi.w	8005358 <protocol_exec_rt_system+0x31c>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005178:	0668      	lsls	r0, r5, #25
 800517a:	d505      	bpl.n	8005188 <protocol_exec_rt_system+0x14c>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 800517c:	0671      	lsls	r1, r6, #25
 800517e:	bf4c      	ite	mi
 8005180:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005184:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005188:	4630      	mov	r0, r6
 800518a:	f7fc fc99 	bl	8001ac0 <coolant_set_state>
 800518e:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005190:	723e      	strb	r6, [r7, #8]
 8005192:	e79d      	b.n	80050d0 <protocol_exec_rt_system+0x94>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005194:	f004 fb28 	bl	80097e8 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005198:	7a21      	ldrb	r1, [r4, #8]
 800519a:	f015 0f01 	tst.w	r5, #1
 800519e:	bf0c      	ite	eq
 80051a0:	460b      	moveq	r3, r1
 80051a2:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80051a4:	07ae      	lsls	r6, r5, #30
 80051a6:	bf44      	itt	mi
 80051a8:	330a      	addmi	r3, #10
 80051aa:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80051ac:	0768      	lsls	r0, r5, #29
 80051ae:	bf44      	itt	mi
 80051b0:	3b0a      	submi	r3, #10
 80051b2:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 80051b4:	072f      	lsls	r7, r5, #28
 80051b6:	bf44      	itt	mi
 80051b8:	3301      	addmi	r3, #1
 80051ba:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 80051bc:	06ee      	lsls	r6, r5, #27
 80051be:	bf44      	itt	mi
 80051c0:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80051c4:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 80051c6:	2bc8      	cmp	r3, #200	; 0xc8
 80051c8:	bf28      	it	cs
 80051ca:	23c8      	movcs	r3, #200	; 0xc8
 80051cc:	2b0a      	cmp	r3, #10
 80051ce:	bf38      	it	cc
 80051d0:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 80051d2:	7a60      	ldrb	r0, [r4, #9]
 80051d4:	f015 0f20 	tst.w	r5, #32
 80051d8:	bf14      	ite	ne
 80051da:	2264      	movne	r2, #100	; 0x64
 80051dc:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 80051de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051e2:	bf18      	it	ne
 80051e4:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 80051e6:	f015 0f80 	tst.w	r5, #128	; 0x80
 80051ea:	bf18      	it	ne
 80051ec:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 80051ee:	4299      	cmp	r1, r3
 80051f0:	d023      	beq.n	800523a <protocol_exec_rt_system+0x1fe>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80051f2:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 80051f4:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 80051f6:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80051f8:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 80051fa:	f7ff f94f 	bl	800449c <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 80051fe:	f7ff fc49 	bl	8004a94 <plan_cycle_reinitialize>
 8005202:	e75f      	b.n	80050c4 <protocol_exec_rt_system+0x88>
      sys.abort = true;  // Only place this is set true.
 8005204:	2301      	movs	r3, #1
 8005206:	7063      	strb	r3, [r4, #1]
      return; // Nothing else to do but exit.
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800520a:	7823      	ldrb	r3, [r4, #0]
 800520c:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005210:	d002      	beq.n	8005218 <protocol_exec_rt_system+0x1dc>
 8005212:	78e3      	ldrb	r3, [r4, #3]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d051      	beq.n	80052bc <protocol_exec_rt_system+0x280>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005218:	78a3      	ldrb	r3, [r4, #2]
 800521a:	061f      	lsls	r7, r3, #24
 800521c:	d452      	bmi.n	80052c4 <protocol_exec_rt_system+0x288>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 800521e:	f013 0220 	ands.w	r2, r3, #32
 8005222:	d036      	beq.n	8005292 <protocol_exec_rt_system+0x256>
          sys.state = STATE_SAFETY_DOOR;
 8005224:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005230:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005232:	2004      	movs	r0, #4
 8005234:	f004 faaa 	bl	800978c <system_clear_exec_state_flag>
 8005238:	e73e      	b.n	80050b8 <protocol_exec_rt_system+0x7c>
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 800523a:	4282      	cmp	r2, r0
 800523c:	d1d9      	bne.n	80051f2 <protocol_exec_rt_system+0x1b6>
 800523e:	e741      	b.n	80050c4 <protocol_exec_rt_system+0x88>
      report_realtime_status();
 8005240:	f001 feae 	bl	8006fa0 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005244:	2001      	movs	r0, #1
 8005246:	f004 faa1 	bl	800978c <system_clear_exec_state_flag>
 800524a:	e708      	b.n	800505e <protocol_exec_rt_system+0x22>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 800524c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005250:	d122      	bne.n	8005298 <protocol_exec_rt_system+0x25c>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005252:	bb33      	cbnz	r3, 80052a2 <protocol_exec_rt_system+0x266>
 8005254:	2201      	movs	r2, #1
 8005256:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005258:	066a      	lsls	r2, r5, #25
 800525a:	f100 809a 	bmi.w	8005392 <protocol_exec_rt_system+0x356>
        if (rt_exec & EXEC_FEED_HOLD) {
 800525e:	072f      	lsls	r7, r5, #28
 8005260:	b26e      	sxtb	r6, r5
 8005262:	d501      	bpl.n	8005268 <protocol_exec_rt_system+0x22c>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005264:	2310      	movs	r3, #16
 8005266:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005268:	06a8      	lsls	r0, r5, #26
 800526a:	f57f af00 	bpl.w	800506e <protocol_exec_rt_system+0x32>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 800526e:	2006      	movs	r0, #6
 8005270:	f001 f91c 	bl	80064ac <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005274:	78a3      	ldrb	r3, [r4, #2]
 8005276:	0619      	lsls	r1, r3, #24
 8005278:	d407      	bmi.n	800528a <protocol_exec_rt_system+0x24e>
            if (sys.state == STATE_SAFETY_DOOR) {
 800527a:	7822      	ldrb	r2, [r4, #0]
 800527c:	2a40      	cmp	r2, #64	; 0x40
 800527e:	f000 80b9 	beq.w	80053f4 <protocol_exec_rt_system+0x3b8>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005282:	2a80      	cmp	r2, #128	; 0x80
 8005284:	d001      	beq.n	800528a <protocol_exec_rt_system+0x24e>
 8005286:	2240      	movs	r2, #64	; 0x40
 8005288:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 800528a:	f043 0320 	orr.w	r3, r3, #32
 800528e:	70a3      	strb	r3, [r4, #2]
 8005290:	e6ed      	b.n	800506e <protocol_exec_rt_system+0x32>
          sys.suspend = SUSPEND_DISABLE;
 8005292:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005294:	7022      	strb	r2, [r4, #0]
 8005296:	e7cc      	b.n	8005232 <protocol_exec_rt_system+0x1f6>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005298:	78a2      	ldrb	r2, [r4, #2]
 800529a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800529e:	f000 8089 	beq.w	80053b4 <protocol_exec_rt_system+0x378>
 80052a2:	b26a      	sxtb	r2, r5
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80052a4:	0668      	lsls	r0, r5, #25
 80052a6:	4616      	mov	r6, r2
 80052a8:	d502      	bpl.n	80052b0 <protocol_exec_rt_system+0x274>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80052aa:	0699      	lsls	r1, r3, #26
 80052ac:	f140 80aa 	bpl.w	8005404 <protocol_exec_rt_system+0x3c8>
        if (rt_exec & EXEC_FEED_HOLD) {
 80052b0:	072f      	lsls	r7, r5, #28
 80052b2:	d5d9      	bpl.n	8005268 <protocol_exec_rt_system+0x22c>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80052b4:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 80052b8:	d1d6      	bne.n	8005268 <protocol_exec_rt_system+0x22c>
 80052ba:	e7d3      	b.n	8005264 <protocol_exec_rt_system+0x228>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80052bc:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	da59      	bge.n	8005378 <protocol_exec_rt_system+0x33c>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 80052c4:	2300      	movs	r3, #0
 80052c6:	7123      	strb	r3, [r4, #4]
          plan_reset();
 80052c8:	f7ff f834 	bl	8004334 <plan_reset>
          st_reset();
 80052cc:	f003 f8c8 	bl	8008460 <st_reset>
          gc_sync_position();
 80052d0:	f7fc fcf8 	bl	8001cc4 <gc_sync_position>
          plan_sync_position();
 80052d4:	f7ff fbc0 	bl	8004a58 <plan_sync_position>
 80052d8:	78a3      	ldrb	r3, [r4, #2]
 80052da:	e7a0      	b.n	800521e <protocol_exec_rt_system+0x1e2>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 80052dc:	7ae3      	ldrb	r3, [r4, #11]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d15c      	bne.n	800539c <protocol_exec_rt_system+0x360>
 80052e2:	2302      	movs	r3, #2
 80052e4:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80052e6:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80052ea:	f47f af40 	bne.w	800516e <protocol_exec_rt_system+0x132>
 80052ee:	e6f6      	b.n	80050de <protocol_exec_rt_system+0xa2>
 80052f0:	200010e8 	.word	0x200010e8
 80052f4:	200010b0 	.word	0x200010b0
 80052f8:	200010c5 	.word	0x200010c5
 80052fc:	200010ac 	.word	0x200010ac
 8005300:	200010c4 	.word	0x200010c4
 8005304:	20001014 	.word	0x20001014
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005308:	06da      	lsls	r2, r3, #27
 800530a:	f57f aecf 	bpl.w	80050ac <protocol_exec_rt_system+0x70>
 800530e:	78a2      	ldrb	r2, [r4, #2]
 8005310:	07d0      	lsls	r0, r2, #31
 8005312:	f57f aecb 	bpl.w	80050ac <protocol_exec_rt_system+0x70>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005316:	2b10      	cmp	r3, #16
 8005318:	f47f aebb 	bne.w	8005092 <protocol_exec_rt_system+0x56>
 800531c:	7ae3      	ldrb	r3, [r4, #11]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f43f aeb7 	beq.w	8005092 <protocol_exec_rt_system+0x56>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005324:	f043 0308 	orr.w	r3, r3, #8
 8005328:	72e3      	strb	r3, [r4, #11]
 800532a:	e6bf      	b.n	80050ac <protocol_exec_rt_system+0x70>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 800532c:	f013 0f18 	tst.w	r3, #24
 8005330:	f43f aece 	beq.w	80050d0 <protocol_exec_rt_system+0x94>
 8005334:	e71b      	b.n	800516e <protocol_exec_rt_system+0x132>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005336:	7823      	ldrb	r3, [r4, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d036      	beq.n	80053aa <protocol_exec_rt_system+0x36e>
        sys.state = STATE_SLEEP; 
 800533c:	2380      	movs	r3, #128	; 0x80
 800533e:	7023      	strb	r3, [r4, #0]
 8005340:	e698      	b.n	8005074 <protocol_exec_rt_system+0x38>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005342:	4630      	mov	r0, r6
 8005344:	f001 f8b2 	bl	80064ac <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005348:	2010      	movs	r0, #16
 800534a:	f004 fa1f 	bl	800978c <system_clear_exec_state_flag>
 800534e:	4d2f      	ldr	r5, [pc, #188]	; (800540c <protocol_exec_rt_system+0x3d0>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005350:	782b      	ldrb	r3, [r5, #0]
 8005352:	06df      	lsls	r7, r3, #27
 8005354:	d5fc      	bpl.n	8005350 <protocol_exec_rt_system+0x314>
 8005356:	e6d3      	b.n	8005100 <protocol_exec_rt_system+0xc4>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005358:	0633      	lsls	r3, r6, #24
 800535a:	bf4c      	ite	mi
 800535c:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005360:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
 8005364:	e708      	b.n	8005178 <protocol_exec_rt_system+0x13c>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005366:	78a3      	ldrb	r3, [r4, #2]
 8005368:	f013 0220 	ands.w	r2, r3, #32
 800536c:	f47f ae9e 	bne.w	80050ac <protocol_exec_rt_system+0x70>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005370:	06df      	lsls	r7, r3, #27
 8005372:	d538      	bpl.n	80053e6 <protocol_exec_rt_system+0x3aa>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005374:	7022      	strb	r2, [r4, #0]
 8005376:	e68c      	b.n	8005092 <protocol_exec_rt_system+0x56>
        plan_cycle_reinitialize();
 8005378:	f7ff fb8c 	bl	8004a94 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 800537c:	7923      	ldrb	r3, [r4, #4]
 800537e:	079a      	lsls	r2, r3, #30
 8005380:	d503      	bpl.n	800538a <protocol_exec_rt_system+0x34e>
 8005382:	78a2      	ldrb	r2, [r4, #2]
 8005384:	f042 0201 	orr.w	r2, r2, #1
 8005388:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800538a:	f023 0306 	bic.w	r3, r3, #6
 800538e:	7123      	strb	r3, [r4, #4]
 8005390:	e74f      	b.n	8005232 <protocol_exec_rt_system+0x1f6>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005392:	2141      	movs	r1, #65	; 0x41
 8005394:	b26a      	sxtb	r2, r5
 8005396:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005398:	70a1      	strb	r1, [r4, #2]
 800539a:	e789      	b.n	80052b0 <protocol_exec_rt_system+0x274>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800539c:	07d9      	lsls	r1, r3, #31
 800539e:	f57f ae9b 	bpl.w	80050d8 <protocol_exec_rt_system+0x9c>
 80053a2:	f043 0304 	orr.w	r3, r3, #4
 80053a6:	72e3      	strb	r3, [r4, #11]
 80053a8:	e79d      	b.n	80052e6 <protocol_exec_rt_system+0x2aa>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80053aa:	78a3      	ldrb	r3, [r4, #2]
 80053ac:	f043 0305 	orr.w	r3, r3, #5
 80053b0:	70a3      	strb	r3, [r4, #2]
 80053b2:	e7c3      	b.n	800533c <protocol_exec_rt_system+0x300>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 80053b4:	f003 f9b6 	bl	8008724 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80053b8:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80053ba:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80053bc:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80053be:	2b20      	cmp	r3, #32
 80053c0:	f47f af47 	bne.w	8005252 <protocol_exec_rt_system+0x216>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 80053c4:	b26e      	sxtb	r6, r5
 80053c6:	2e00      	cmp	r6, #0
 80053c8:	f6ff af4e 	blt.w	8005268 <protocol_exec_rt_system+0x22c>
 80053cc:	78a3      	ldrb	r3, [r4, #2]
 80053ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053d2:	70a3      	strb	r3, [r4, #2]
 80053d4:	e748      	b.n	8005268 <protocol_exec_rt_system+0x22c>
              sys.state = STATE_CYCLE;
 80053d6:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80053d8:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 80053da:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80053dc:	f003 f9b8 	bl	8008750 <st_prep_buffer>
              st_wake_up();
 80053e0:	f002 fe1a 	bl	8008018 <st_wake_up>
 80053e4:	e662      	b.n	80050ac <protocol_exec_rt_system+0x70>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80053e6:	075e      	lsls	r6, r3, #29
 80053e8:	f57f ae60 	bpl.w	80050ac <protocol_exec_rt_system+0x70>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 80053ec:	f043 0308 	orr.w	r3, r3, #8
 80053f0:	70a3      	strb	r3, [r4, #2]
 80053f2:	e65b      	b.n	80050ac <protocol_exec_rt_system+0x70>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 80053f4:	071a      	lsls	r2, r3, #28
 80053f6:	f57f af46 	bpl.w	8005286 <protocol_exec_rt_system+0x24a>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80053fa:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80053fe:	f043 0302 	orr.w	r3, r3, #2
 8005402:	e740      	b.n	8005286 <protocol_exec_rt_system+0x24a>
 8005404:	78a1      	ldrb	r1, [r4, #2]
 8005406:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800540a:	e7c4      	b.n	8005396 <protocol_exec_rt_system+0x35a>
 800540c:	200010c5 	.word	0x200010c5

08005410 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 8005410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005414:	b083      	sub	sp, #12
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 8005416:	f7fe ffcf 	bl	80043b8 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 800541a:	2800      	cmp	r0, #0
 800541c:	f000 82e0 	beq.w	80059e0 <protocol_exec_rt_suspend+0x5d0>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
      restore_spindle_speed = gc_state.spindle_speed;
    } else {
      restore_condition = block->condition;
 8005420:	7d83      	ldrb	r3, [r0, #22]
      restore_spindle_speed = block->spindle_speed;
 8005422:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
      restore_condition = block->condition;
 8005426:	9301      	str	r3, [sp, #4]
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8005428:	4eba      	ldr	r6, [pc, #744]	; (8005714 <protocol_exec_rt_suspend+0x304>)
 800542a:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800542e:	079b      	lsls	r3, r3, #30
 8005430:	f100 82a7 	bmi.w	8005982 <protocol_exec_rt_suspend+0x572>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005434:	2500      	movs	r5, #0
 8005436:	4cb8      	ldr	r4, [pc, #736]	; (8005718 <protocol_exec_rt_suspend+0x308>)
  while (sys.suspend) {
 8005438:	78a3      	ldrb	r3, [r4, #2]
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 809a 	beq.w	8005574 <protocol_exec_rt_suspend+0x164>
    if (sys.abort) { return; }
 8005440:	7862      	ldrb	r2, [r4, #1]
 8005442:	2a00      	cmp	r2, #0
 8005444:	f040 8096 	bne.w	8005574 <protocol_exec_rt_suspend+0x164>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 8005448:	07df      	lsls	r7, r3, #31
 800544a:	d51a      	bpl.n	8005482 <protocol_exec_rt_suspend+0x72>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 800544c:	7821      	ldrb	r1, [r4, #0]
 800544e:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 8005452:	f000 8092 	beq.w	800557a <protocol_exec_rt_suspend+0x16a>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 8005456:	f013 0b04 	ands.w	fp, r3, #4
 800545a:	f000 817c 	beq.w	8005756 <protocol_exec_rt_suspend+0x346>
          if (sys.state == STATE_SLEEP) {
 800545e:	2980      	cmp	r1, #128	; 0x80
 8005460:	f000 82d2 	beq.w	8005a08 <protocol_exec_rt_suspend+0x5f8>
          if (sys.state == STATE_SAFETY_DOOR) {
 8005464:	2940      	cmp	r1, #64	; 0x40
 8005466:	f000 8268 	beq.w	800593a <protocol_exec_rt_suspend+0x52a>
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 800546a:	0718      	lsls	r0, r3, #28
 800546c:	d509      	bpl.n	8005482 <protocol_exec_rt_suspend+0x72>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800546e:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 800572c <protocol_exec_rt_suspend+0x31c>
 8005472:	f89a 1009 	ldrb.w	r1, [sl, #9]
 8005476:	2900      	cmp	r1, #0
 8005478:	f000 81d5 	beq.w	8005826 <protocol_exec_rt_suspend+0x416>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800547c:	0799      	lsls	r1, r3, #30
 800547e:	f140 8227 	bpl.w	80058d0 <protocol_exec_rt_suspend+0x4c0>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005482:	4ba6      	ldr	r3, [pc, #664]	; (800571c <protocol_exec_rt_suspend+0x30c>)
 8005484:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005486:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800548a:	2b00      	cmp	r3, #0
 800548c:	f040 808a 	bne.w	80055a4 <protocol_exec_rt_suspend+0x194>
 8005490:	4fa3      	ldr	r7, [pc, #652]	; (8005720 <protocol_exec_rt_suspend+0x310>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005492:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 8005494:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005498:	2b00      	cmp	r3, #0
 800549a:	d054      	beq.n	8005546 <protocol_exec_rt_suspend+0x136>
    if (rt_exec & EXEC_RESET) {
 800549c:	f01b 0f10 	tst.w	fp, #16
 80054a0:	f040 8126 	bne.w	80056f0 <protocol_exec_rt_suspend+0x2e0>
    if (rt_exec & EXEC_STATUS_REPORT) {
 80054a4:	f01b 0f01 	tst.w	fp, #1
 80054a8:	f040 8175 	bne.w	8005796 <protocol_exec_rt_suspend+0x386>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 80054ac:	f01b 0fe8 	tst.w	fp, #232	; 0xe8
 80054b0:	d00c      	beq.n	80054cc <protocol_exec_rt_suspend+0xbc>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 80054b2:	7823      	ldrb	r3, [r4, #0]
 80054b4:	0798      	lsls	r0, r3, #30
 80054b6:	f000 8174 	beq.w	80057a2 <protocol_exec_rt_suspend+0x392>
 80054ba:	fa4f f98b 	sxtb.w	r9, fp
      if (rt_exec & EXEC_SLEEP) {
 80054be:	f1b9 0f00 	cmp.w	r9, #0
 80054c2:	f2c0 819d 	blt.w	8005800 <protocol_exec_rt_suspend+0x3f0>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 80054c6:	20e8      	movs	r0, #232	; 0xe8
 80054c8:	f004 f960 	bl	800978c <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 80054cc:	f01b 0f02 	tst.w	fp, #2
 80054d0:	d019      	beq.n	8005506 <protocol_exec_rt_suspend+0xf6>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 80054d2:	f01b 0f68 	tst.w	fp, #104	; 0x68
 80054d6:	d113      	bne.n	8005500 <protocol_exec_rt_suspend+0xf0>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80054d8:	7823      	ldrb	r3, [r4, #0]
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	f000 8248 	beq.w	8005970 <protocol_exec_rt_suspend+0x560>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f040 8202 	bne.w	80058ea <protocol_exec_rt_suspend+0x4da>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80054e6:	2300      	movs	r3, #0
 80054e8:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 80054ea:	f7fe ff65 	bl	80043b8 <plan_get_current_block>
 80054ee:	b120      	cbz	r0, 80054fa <protocol_exec_rt_suspend+0xea>
 80054f0:	78a3      	ldrb	r3, [r4, #2]
 80054f2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80054f6:	f000 827c 	beq.w	80059f2 <protocol_exec_rt_suspend+0x5e2>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80054fa:	2300      	movs	r3, #0
 80054fc:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 80054fe:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005500:	2002      	movs	r0, #2
 8005502:	f004 f943 	bl	800978c <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005506:	f01b 0f04 	tst.w	fp, #4
 800550a:	d01c      	beq.n	8005546 <protocol_exec_rt_suspend+0x136>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800550c:	7823      	ldrb	r3, [r4, #0]
 800550e:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005512:	f000 810d 	beq.w	8005730 <protocol_exec_rt_suspend+0x320>
 8005516:	78e3      	ldrb	r3, [r4, #3]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f040 8109 	bne.w	8005730 <protocol_exec_rt_suspend+0x320>
 800551e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f2c0 81fd 	blt.w	8005922 <protocol_exec_rt_suspend+0x512>
        plan_cycle_reinitialize();
 8005528:	f7ff fab4 	bl	8004a94 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 800552c:	7923      	ldrb	r3, [r4, #4]
 800552e:	079f      	lsls	r7, r3, #30
 8005530:	d503      	bpl.n	800553a <protocol_exec_rt_suspend+0x12a>
 8005532:	78a2      	ldrb	r2, [r4, #2]
 8005534:	f042 0201 	orr.w	r2, r2, #1
 8005538:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800553a:	f023 0306 	bic.w	r3, r3, #6
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800553e:	2004      	movs	r0, #4
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005540:	7123      	strb	r3, [r4, #4]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005542:	f004 f923 	bl	800978c <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005546:	4b77      	ldr	r3, [pc, #476]	; (8005724 <protocol_exec_rt_suspend+0x314>)
 8005548:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800554a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800554e:	2b00      	cmp	r3, #0
 8005550:	d136      	bne.n	80055c0 <protocol_exec_rt_suspend+0x1b0>
  rt_exec = sys_rt_exec_accessory_override;
 8005552:	4b75      	ldr	r3, [pc, #468]	; (8005728 <protocol_exec_rt_suspend+0x318>)
 8005554:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005556:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800555a:	2b00      	cmp	r3, #0
 800555c:	d174      	bne.n	8005648 <protocol_exec_rt_suspend+0x238>
 800555e:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005560:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005564:	f43f af68 	beq.w	8005438 <protocol_exec_rt_suspend+0x28>
    st_prep_buffer();
 8005568:	f003 f8f2 	bl	8008750 <st_prep_buffer>
  while (sys.suspend) {
 800556c:	78a3      	ldrb	r3, [r4, #2]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f47f af66 	bne.w	8005440 <protocol_exec_rt_suspend+0x30>
    }

    protocol_exec_rt_system();

  }
}
 8005574:	b003      	add	sp, #12
 8005576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.spindle_stop_ovr) {
 800557a:	7ae3      	ldrb	r3, [r4, #11]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 80ba 	beq.w	80056f6 <protocol_exec_rt_suspend+0x2e6>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 8005582:	079f      	lsls	r7, r3, #30
 8005584:	f140 80f7 	bpl.w	8005776 <protocol_exec_rt_suspend+0x366>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005588:	4b68      	ldr	r3, [pc, #416]	; (800572c <protocol_exec_rt_suspend+0x31c>)
 800558a:	7a5b      	ldrb	r3, [r3, #9]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f040 81e9 	bne.w	8005964 <protocol_exec_rt_suspend+0x554>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 8005592:	2300      	movs	r3, #0
 8005594:	72e3      	strb	r3, [r4, #11]
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005596:	4b61      	ldr	r3, [pc, #388]	; (800571c <protocol_exec_rt_suspend+0x30c>)
 8005598:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 800559a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f43f af76 	beq.w	8005490 <protocol_exec_rt_suspend+0x80>
    sys.state = STATE_ALARM; // Set system alarm state
 80055a4:	2701      	movs	r7, #1
    report_alarm_message(rt_exec);
 80055a6:	4658      	mov	r0, fp
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80055a8:	f10b 3bff 	add.w	fp, fp, #4294967295
    sys.state = STATE_ALARM; // Set system alarm state
 80055ac:	7027      	strb	r7, [r4, #0]
    report_alarm_message(rt_exec);
 80055ae:	f000 ff67 	bl	8006480 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80055b2:	45bb      	cmp	fp, r7
 80055b4:	f240 8181 	bls.w	80058ba <protocol_exec_rt_suspend+0x4aa>
 80055b8:	4f59      	ldr	r7, [pc, #356]	; (8005720 <protocol_exec_rt_suspend+0x310>)
    system_clear_exec_alarm(); // Clear alarm
 80055ba:	f004 f8f9 	bl	80097b0 <system_clear_exec_alarm>
 80055be:	e768      	b.n	8005492 <protocol_exec_rt_suspend+0x82>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 80055c0:	f004 f912 	bl	80097e8 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 80055c4:	f01b 0f01 	tst.w	fp, #1
 80055c8:	bf18      	it	ne
 80055ca:	2364      	movne	r3, #100	; 0x64
 80055cc:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 80055ce:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 80055d0:	bf08      	it	eq
 80055d2:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80055d4:	f01b 0f02 	tst.w	fp, #2
 80055d8:	bf1c      	itt	ne
 80055da:	330a      	addne	r3, #10
 80055dc:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80055de:	f01b 0f04 	tst.w	fp, #4
 80055e2:	bf1c      	itt	ne
 80055e4:	3b0a      	subne	r3, #10
 80055e6:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 80055e8:	f01b 0f08 	tst.w	fp, #8
 80055ec:	bf1c      	itt	ne
 80055ee:	3301      	addne	r3, #1
 80055f0:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 80055f2:	f01b 0f10 	tst.w	fp, #16
 80055f6:	bf1c      	itt	ne
 80055f8:	f103 33ff 	addne.w	r3, r3, #4294967295
 80055fc:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 80055fe:	2bc8      	cmp	r3, #200	; 0xc8
 8005600:	bf28      	it	cs
 8005602:	23c8      	movcs	r3, #200	; 0xc8
 8005604:	2b0a      	cmp	r3, #10
 8005606:	bf38      	it	cc
 8005608:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 800560a:	f01b 0f20 	tst.w	fp, #32
 800560e:	bf14      	ite	ne
 8005610:	2164      	movne	r1, #100	; 0x64
 8005612:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005614:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005618:	bf18      	it	ne
 800561a:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 800561c:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8005620:	bf18      	it	ne
 8005622:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005624:	429a      	cmp	r2, r3
 8005626:	d101      	bne.n	800562c <protocol_exec_rt_suspend+0x21c>
 8005628:	4288      	cmp	r0, r1
 800562a:	d092      	beq.n	8005552 <protocol_exec_rt_suspend+0x142>
      sys.report_ovr_counter = 0; // Set to report change immediately
 800562c:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 800562e:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005630:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005632:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005634:	f7fe ff32 	bl	800449c <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005638:	f7ff fa2c 	bl	8004a94 <plan_cycle_reinitialize>
  rt_exec = sys_rt_exec_accessory_override;
 800563c:	4b3a      	ldr	r3, [pc, #232]	; (8005728 <protocol_exec_rt_suspend+0x318>)
 800563e:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005640:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005644:	2b00      	cmp	r3, #0
 8005646:	d08a      	beq.n	800555e <protocol_exec_rt_suspend+0x14e>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005648:	f004 f8d6 	bl	80097f8 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 800564c:	f01b 0f01 	tst.w	fp, #1
 8005650:	bf18      	it	ne
 8005652:	2364      	movne	r3, #100	; 0x64
 8005654:	7aa2      	ldrb	r2, [r4, #10]
 8005656:	bf08      	it	eq
 8005658:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800565a:	f01b 0f02 	tst.w	fp, #2
 800565e:	bf1c      	itt	ne
 8005660:	330a      	addne	r3, #10
 8005662:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005664:	f01b 0f04 	tst.w	fp, #4
 8005668:	bf1c      	itt	ne
 800566a:	3b0a      	subne	r3, #10
 800566c:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800566e:	f01b 0f08 	tst.w	fp, #8
 8005672:	bf1c      	itt	ne
 8005674:	3301      	addne	r3, #1
 8005676:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005678:	f01b 0f10 	tst.w	fp, #16
 800567c:	bf1c      	itt	ne
 800567e:	f103 33ff 	addne.w	r3, r3, #4294967295
 8005682:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005684:	2bc8      	cmp	r3, #200	; 0xc8
 8005686:	bf28      	it	cs
 8005688:	23c8      	movcs	r3, #200	; 0xc8
 800568a:	2b0a      	cmp	r3, #10
 800568c:	bf38      	it	cc
 800568e:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005690:	429a      	cmp	r2, r3
 8005692:	d006      	beq.n	80056a2 <protocol_exec_rt_suspend+0x292>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005694:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005696:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005698:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800569a:	f042 0308 	orr.w	r3, r2, #8
 800569e:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80056a0:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80056a2:	f01b 0f20 	tst.w	fp, #32
      if (sys.state == STATE_HOLD) {
 80056a6:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80056a8:	d002      	beq.n	80056b0 <protocol_exec_rt_suspend+0x2a0>
      if (sys.state == STATE_HOLD) {
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	f000 814f 	beq.w	800594e <protocol_exec_rt_suspend+0x53e>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80056b0:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
 80056b4:	f43f af54 	beq.w	8005560 <protocol_exec_rt_suspend+0x150>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f040 80d6 	bne.w	800586a <protocol_exec_rt_suspend+0x45a>
        uint8_t coolant_state = gc_state.modal.coolant;
 80056be:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800572c <protocol_exec_rt_suspend+0x31c>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80056c2:	f01b 0f80 	tst.w	fp, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 80056c6:	f89a 9008 	ldrb.w	r9, [sl, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80056ca:	f040 80da 	bne.w	8005882 <protocol_exec_rt_suspend+0x472>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 80056ce:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80056d2:	d006      	beq.n	80056e2 <protocol_exec_rt_suspend+0x2d2>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80056d4:	f019 0f40 	tst.w	r9, #64	; 0x40
 80056d8:	bf14      	ite	ne
 80056da:	f009 09bf 	andne.w	r9, r9, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 80056de:	f049 0940 	orreq.w	r9, r9, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80056e2:	4648      	mov	r0, r9
 80056e4:	f7fc f9ec 	bl	8001ac0 <coolant_set_state>
 80056e8:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 80056ea:	f88a 9008 	strb.w	r9, [sl, #8]
 80056ee:	e737      	b.n	8005560 <protocol_exec_rt_suspend+0x150>
      sys.abort = true;  // Only place this is set true.
 80056f0:	2301      	movs	r3, #1
 80056f2:	7063      	strb	r3, [r4, #1]
 80056f4:	e6a0      	b.n	8005438 <protocol_exec_rt_suspend+0x28>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 80056f6:	7923      	ldrb	r3, [r4, #4]
 80056f8:	071a      	lsls	r2, r3, #28
 80056fa:	f57f aec2 	bpl.w	8005482 <protocol_exec_rt_suspend+0x72>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80056fe:	9b01      	ldr	r3, [sp, #4]
 8005700:	4641      	mov	r1, r8
 8005702:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005706:	f002 fb59 	bl	8007dbc <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800570a:	7923      	ldrb	r3, [r4, #4]
 800570c:	f023 0308 	bic.w	r3, r3, #8
 8005710:	7123      	strb	r3, [r4, #4]
 8005712:	e6b6      	b.n	8005482 <protocol_exec_rt_suspend+0x72>
 8005714:	2000126c 	.word	0x2000126c
 8005718:	200010b0 	.word	0x200010b0
 800571c:	200010e8 	.word	0x200010e8
 8005720:	200010c5 	.word	0x200010c5
 8005724:	200010ac 	.word	0x200010ac
 8005728:	200010c4 	.word	0x200010c4
 800572c:	20001014 	.word	0x20001014
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005730:	78a3      	ldrb	r3, [r4, #2]
 8005732:	0618      	lsls	r0, r3, #24
 8005734:	f100 80f5 	bmi.w	8005922 <protocol_exec_rt_suspend+0x512>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005738:	f013 0220 	ands.w	r2, r3, #32
 800573c:	f000 8092 	beq.w	8005864 <protocol_exec_rt_suspend+0x454>
          sys.state = STATE_SAFETY_DOOR;
 8005740:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 800574c:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800574e:	2004      	movs	r0, #4
 8005750:	f004 f81c 	bl	800978c <system_clear_exec_state_flag>
 8005754:	e6f7      	b.n	8005546 <protocol_exec_rt_suspend+0x136>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005756:	4629      	mov	r1, r5
 8005758:	4658      	mov	r0, fp
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 800575a:	f884 b00b 	strb.w	fp, [r4, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 800575e:	f002 fb2d 	bl	8007dbc <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 8005762:	4658      	mov	r0, fp
 8005764:	f7fc f9ac 	bl	8001ac0 <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 8005768:	78a3      	ldrb	r3, [r4, #2]
 800576a:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 800576e:	f043 0304 	orr.w	r3, r3, #4
 8005772:	70a3      	strb	r3, [r4, #2]
 8005774:	e685      	b.n	8005482 <protocol_exec_rt_suspend+0x72>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 8005776:	f013 0f0c 	tst.w	r3, #12
 800577a:	f43f ae82 	beq.w	8005482 <protocol_exec_rt_suspend+0x72>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800577e:	4abe      	ldr	r2, [pc, #760]	; (8005a78 <protocol_exec_rt_suspend+0x668>)
 8005780:	7a52      	ldrb	r2, [r2, #9]
 8005782:	2a00      	cmp	r2, #0
 8005784:	f040 810d 	bne.w	80059a2 <protocol_exec_rt_suspend+0x592>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005788:	0719      	lsls	r1, r3, #28
 800578a:	f57f af02 	bpl.w	8005592 <protocol_exec_rt_suspend+0x182>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 800578e:	2002      	movs	r0, #2
 8005790:	f003 fff2 	bl	8009778 <system_set_exec_state_flag>
 8005794:	e6fd      	b.n	8005592 <protocol_exec_rt_suspend+0x182>
      report_realtime_status();
 8005796:	f001 fc03 	bl	8006fa0 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 800579a:	2001      	movs	r0, #1
 800579c:	f003 fff6 	bl	800978c <system_clear_exec_state_flag>
 80057a0:	e684      	b.n	80054ac <protocol_exec_rt_suspend+0x9c>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 80057a2:	f013 0f28 	tst.w	r3, #40	; 0x28
 80057a6:	d07c      	beq.n	80058a2 <protocol_exec_rt_suspend+0x492>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 80057a8:	78a2      	ldrb	r2, [r4, #2]
 80057aa:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80057ae:	d070      	beq.n	8005892 <protocol_exec_rt_suspend+0x482>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80057b0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80057b4:	fa4f f98b 	sxtb.w	r9, fp
 80057b8:	d002      	beq.n	80057c0 <protocol_exec_rt_suspend+0x3b0>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80057ba:	0699      	lsls	r1, r3, #26
 80057bc:	f140 8157 	bpl.w	8005a6e <protocol_exec_rt_suspend+0x65e>
        if (rt_exec & EXEC_FEED_HOLD) {
 80057c0:	f01b 0f08 	tst.w	fp, #8
 80057c4:	d003      	beq.n	80057ce <protocol_exec_rt_suspend+0x3be>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80057c6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 80057ca:	f000 80a7 	beq.w	800591c <protocol_exec_rt_suspend+0x50c>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80057ce:	f01b 0f20 	tst.w	fp, #32
 80057d2:	f43f ae74 	beq.w	80054be <protocol_exec_rt_suspend+0xae>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 80057d6:	2006      	movs	r0, #6
 80057d8:	f000 fe68 	bl	80064ac <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80057dc:	78a3      	ldrb	r3, [r4, #2]
 80057de:	061a      	lsls	r2, r3, #24
 80057e0:	d407      	bmi.n	80057f2 <protocol_exec_rt_suspend+0x3e2>
            if (sys.state == STATE_SAFETY_DOOR) {
 80057e2:	7821      	ldrb	r1, [r4, #0]
 80057e4:	2940      	cmp	r1, #64	; 0x40
 80057e6:	f000 80f3 	beq.w	80059d0 <protocol_exec_rt_suspend+0x5c0>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 80057ea:	2980      	cmp	r1, #128	; 0x80
 80057ec:	d001      	beq.n	80057f2 <protocol_exec_rt_suspend+0x3e2>
 80057ee:	2140      	movs	r1, #64	; 0x40
 80057f0:	7021      	strb	r1, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 80057f2:	f043 0320 	orr.w	r3, r3, #32
      if (rt_exec & EXEC_SLEEP) {
 80057f6:	f1b9 0f00 	cmp.w	r9, #0
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 80057fa:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 80057fc:	f6bf ae63 	bge.w	80054c6 <protocol_exec_rt_suspend+0xb6>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005800:	7823      	ldrb	r3, [r4, #0]
 8005802:	2b01      	cmp	r3, #1
 8005804:	f000 80dd 	beq.w	80059c2 <protocol_exec_rt_suspend+0x5b2>
        sys.state = STATE_SLEEP; 
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	7023      	strb	r3, [r4, #0]
 800580c:	e65b      	b.n	80054c6 <protocol_exec_rt_suspend+0xb6>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800580e:	9b01      	ldr	r3, [sp, #4]
 8005810:	4641      	mov	r1, r8
 8005812:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005816:	f002 fad1 	bl	8007dbc <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 800581a:	2101      	movs	r1, #1
 800581c:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8005820:	f7fe fb74 	bl	8003f0c <delay_sec>
 8005824:	78a3      	ldrb	r3, [r4, #2]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005826:	f89a 2008 	ldrb.w	r2, [sl, #8]
 800582a:	f003 0102 	and.w	r1, r3, #2
 800582e:	b17a      	cbz	r2, 8005850 <protocol_exec_rt_suspend+0x440>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005830:	2900      	cmp	r1, #0
 8005832:	f47f ae26 	bne.w	8005482 <protocol_exec_rt_suspend+0x72>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8005836:	9b01      	ldr	r3, [sp, #4]
 8005838:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800583c:	f7fc f940 	bl	8001ac0 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005840:	2101      	movs	r1, #1
 8005842:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005846:	f7fe fb61 	bl	8003f0c <delay_sec>
 800584a:	78a3      	ldrb	r3, [r4, #2]
 800584c:	f003 0102 	and.w	r1, r3, #2
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005850:	2900      	cmp	r1, #0
 8005852:	f47f ae16 	bne.w	8005482 <protocol_exec_rt_suspend+0x72>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005856:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 800585a:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 800585c:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 800585e:	f003 ff8b 	bl	8009778 <system_set_exec_state_flag>
 8005862:	e60e      	b.n	8005482 <protocol_exec_rt_suspend+0x72>
          sys.suspend = SUSPEND_DISABLE;
 8005864:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005866:	7022      	strb	r2, [r4, #0]
 8005868:	e771      	b.n	800574e <protocol_exec_rt_suspend+0x33e>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 800586a:	f013 0f18 	tst.w	r3, #24
 800586e:	f43f ae77 	beq.w	8005560 <protocol_exec_rt_suspend+0x150>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005872:	f8df a204 	ldr.w	sl, [pc, #516]	; 8005a78 <protocol_exec_rt_suspend+0x668>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005876:	f01b 0f80 	tst.w	fp, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 800587a:	f89a 9008 	ldrb.w	r9, [sl, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800587e:	f43f af26 	beq.w	80056ce <protocol_exec_rt_suspend+0x2be>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005882:	f019 0f80 	tst.w	r9, #128	; 0x80
 8005886:	bf14      	ite	ne
 8005888:	f009 097f 	andne.w	r9, r9, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 800588c:	f049 0980 	orreq.w	r9, r9, #128	; 0x80
 8005890:	e71d      	b.n	80056ce <protocol_exec_rt_suspend+0x2be>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005892:	f002 ff47 	bl	8008724 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005896:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005898:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800589a:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800589c:	2b20      	cmp	r3, #32
 800589e:	f000 80db 	beq.w	8005a58 <protocol_exec_rt_suspend+0x648>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d184      	bne.n	80057b0 <protocol_exec_rt_suspend+0x3a0>
 80058a6:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80058a8:	f01b 0f40 	tst.w	fp, #64	; 0x40
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80058ac:	70a2      	strb	r2, [r4, #2]
 80058ae:	fa4f f98b 	sxtb.w	r9, fp
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80058b2:	d02f      	beq.n	8005914 <protocol_exec_rt_suspend+0x504>
 80058b4:	2141      	movs	r1, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80058b6:	70a1      	strb	r1, [r4, #2]
 80058b8:	e782      	b.n	80057c0 <protocol_exec_rt_suspend+0x3b0>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 80058ba:	4638      	mov	r0, r7
 80058bc:	f000 fdf6 	bl	80064ac <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80058c0:	2010      	movs	r0, #16
 80058c2:	f003 ff63 	bl	800978c <system_clear_exec_state_flag>
 80058c6:	4f6d      	ldr	r7, [pc, #436]	; (8005a7c <protocol_exec_rt_suspend+0x66c>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80058c8:	783b      	ldrb	r3, [r7, #0]
 80058ca:	06db      	lsls	r3, r3, #27
 80058cc:	d5fc      	bpl.n	80058c8 <protocol_exec_rt_suspend+0x4b8>
 80058ce:	e674      	b.n	80055ba <protocol_exec_rt_suspend+0x1aa>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80058d0:	f896 1058 	ldrb.w	r1, [r6, #88]	; 0x58
 80058d4:	078a      	lsls	r2, r1, #30
 80058d6:	d59a      	bpl.n	800580e <protocol_exec_rt_suspend+0x3fe>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80058d8:	7921      	ldrb	r1, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 80058da:	f89a 0008 	ldrb.w	r0, [sl, #8]
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80058de:	f041 0208 	orr.w	r2, r1, #8
 80058e2:	7122      	strb	r2, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 80058e4:	2800      	cmp	r0, #0
 80058e6:	d0b6      	beq.n	8005856 <protocol_exec_rt_suspend+0x446>
 80058e8:	e7a5      	b.n	8005836 <protocol_exec_rt_suspend+0x426>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80058ea:	06da      	lsls	r2, r3, #27
 80058ec:	f57f ae08 	bpl.w	8005500 <protocol_exec_rt_suspend+0xf0>
 80058f0:	78a2      	ldrb	r2, [r4, #2]
 80058f2:	07d2      	lsls	r2, r2, #31
 80058f4:	f57f ae04 	bpl.w	8005500 <protocol_exec_rt_suspend+0xf0>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	f47f adf4 	bne.w	80054e6 <protocol_exec_rt_suspend+0xd6>
 80058fe:	7ae3      	ldrb	r3, [r4, #11]
 8005900:	2b00      	cmp	r3, #0
 8005902:	f43f adf0 	beq.w	80054e6 <protocol_exec_rt_suspend+0xd6>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005906:	f043 0308 	orr.w	r3, r3, #8
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 800590a:	2002      	movs	r0, #2
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 800590c:	72e3      	strb	r3, [r4, #11]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 800590e:	f003 ff3d 	bl	800978c <system_clear_exec_state_flag>
 8005912:	e5f8      	b.n	8005506 <protocol_exec_rt_suspend+0xf6>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005914:	f01b 0f08 	tst.w	fp, #8
 8005918:	f43f af59 	beq.w	80057ce <protocol_exec_rt_suspend+0x3be>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800591c:	2310      	movs	r3, #16
 800591e:	7023      	strb	r3, [r4, #0]
 8005920:	e755      	b.n	80057ce <protocol_exec_rt_suspend+0x3be>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005922:	2300      	movs	r3, #0
 8005924:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005926:	f7fe fd05 	bl	8004334 <plan_reset>
          st_reset();
 800592a:	f002 fd99 	bl	8008460 <st_reset>
          gc_sync_position();
 800592e:	f7fc f9c9 	bl	8001cc4 <gc_sync_position>
          plan_sync_position();
 8005932:	f7ff f891 	bl	8004a58 <plan_sync_position>
 8005936:	78a3      	ldrb	r3, [r4, #2]
 8005938:	e6fe      	b.n	8005738 <protocol_exec_rt_suspend+0x328>
            if (!(system_check_safety_door_ajar())) {
 800593a:	f003 fd0b 	bl	8009354 <system_check_safety_door_ajar>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 800593e:	78a3      	ldrb	r3, [r4, #2]
            if (!(system_check_safety_door_ajar())) {
 8005940:	2800      	cmp	r0, #0
 8005942:	f47f ad92 	bne.w	800546a <protocol_exec_rt_suspend+0x5a>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005946:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800594a:	70a3      	strb	r3, [r4, #2]
 800594c:	e58d      	b.n	800546a <protocol_exec_rt_suspend+0x5a>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 800594e:	7ae3      	ldrb	r3, [r4, #11]
 8005950:	b9db      	cbnz	r3, 800598a <protocol_exec_rt_suspend+0x57a>
 8005952:	2302      	movs	r3, #2
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005954:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005958:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800595a:	f47f aeb0 	bne.w	80056be <protocol_exec_rt_suspend+0x2ae>
    st_prep_buffer();
 800595e:	f002 fef7 	bl	8008750 <st_prep_buffer>
 8005962:	e603      	b.n	800556c <protocol_exec_rt_suspend+0x15c>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005964:	4629      	mov	r1, r5
 8005966:	f002 fa29 	bl	8007dbc <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 800596a:	2301      	movs	r3, #1
 800596c:	72e3      	strb	r3, [r4, #11]
 800596e:	e588      	b.n	8005482 <protocol_exec_rt_suspend+0x72>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005970:	78a3      	ldrb	r3, [r4, #2]
 8005972:	f013 0220 	ands.w	r2, r3, #32
 8005976:	f47f adc3 	bne.w	8005500 <protocol_exec_rt_suspend+0xf0>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 800597a:	06d8      	lsls	r0, r3, #27
 800597c:	d55d      	bpl.n	8005a3a <protocol_exec_rt_suspend+0x62a>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 800597e:	7022      	strb	r2, [r4, #0]
 8005980:	e5b1      	b.n	80054e6 <protocol_exec_rt_suspend+0xd6>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8005982:	2020      	movs	r0, #32
 8005984:	f003 ff26 	bl	80097d4 <system_set_exec_accessory_override_flag>
 8005988:	e554      	b.n	8005434 <protocol_exec_rt_suspend+0x24>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800598a:	07d9      	lsls	r1, r3, #31
 800598c:	d502      	bpl.n	8005994 <protocol_exec_rt_suspend+0x584>
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005994:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
 8005998:	f47f ae91 	bne.w	80056be <protocol_exec_rt_suspend+0x2ae>
    st_prep_buffer();
 800599c:	f002 fed8 	bl	8008750 <st_prep_buffer>
 80059a0:	e5e4      	b.n	800556c <protocol_exec_rt_suspend+0x15c>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 80059a2:	200a      	movs	r0, #10
 80059a4:	f000 fd82 	bl	80064ac <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80059a8:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80059ac:	0798      	lsls	r0, r3, #30
 80059ae:	d54b      	bpl.n	8005a48 <protocol_exec_rt_suspend+0x638>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80059b0:	7922      	ldrb	r2, [r4, #4]
 80059b2:	7ae3      	ldrb	r3, [r4, #11]
 80059b4:	f042 0208 	orr.w	r2, r2, #8
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 80059b8:	0719      	lsls	r1, r3, #28
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80059ba:	7122      	strb	r2, [r4, #4]
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 80059bc:	f57f ade9 	bpl.w	8005592 <protocol_exec_rt_suspend+0x182>
 80059c0:	e6e5      	b.n	800578e <protocol_exec_rt_suspend+0x37e>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80059c2:	78a3      	ldrb	r3, [r4, #2]
 80059c4:	f043 0305 	orr.w	r3, r3, #5
 80059c8:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 80059ca:	2380      	movs	r3, #128	; 0x80
 80059cc:	7023      	strb	r3, [r4, #0]
 80059ce:	e57a      	b.n	80054c6 <protocol_exec_rt_suspend+0xb6>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 80059d0:	071f      	lsls	r7, r3, #28
 80059d2:	f57f af0c 	bpl.w	80057ee <protocol_exec_rt_suspend+0x3de>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80059d6:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80059da:	f043 0302 	orr.w	r3, r3, #2
 80059de:	e706      	b.n	80057ee <protocol_exec_rt_suspend+0x3de>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80059e0:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <protocol_exec_rt_suspend+0x668>)
 80059e2:	7a5f      	ldrb	r7, [r3, #9]
 80059e4:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 80059e6:	f8d3 800c 	ldr.w	r8, [r3, #12]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80059ea:	ea47 0302 	orr.w	r3, r7, r2
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	e51a      	b.n	8005428 <protocol_exec_rt_suspend+0x18>
              sys.state = STATE_CYCLE;
 80059f2:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80059f4:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 80059f6:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80059f8:	f002 feaa 	bl	8008750 <st_prep_buffer>
              st_wake_up();
 80059fc:	f002 fb0c 	bl	8008018 <st_wake_up>
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005a00:	2002      	movs	r0, #2
 8005a02:	f003 fec3 	bl	800978c <system_clear_exec_state_flag>
 8005a06:	e57e      	b.n	8005506 <protocol_exec_rt_suspend+0xf6>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8005a08:	200b      	movs	r0, #11
 8005a0a:	9201      	str	r2, [sp, #4]
 8005a0c:	f000 fd4e 	bl	80064ac <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005a10:	9a01      	ldr	r2, [sp, #4]
 8005a12:	2100      	movs	r1, #0
 8005a14:	4610      	mov	r0, r2
 8005a16:	f002 f9d1 	bl	8007dbc <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 8005a1a:	9a01      	ldr	r2, [sp, #4]
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	f7fc f84f 	bl	8001ac0 <coolant_set_state>
            st_go_idle(); // Disable steppers
 8005a22:	f002 fb39 	bl	8008098 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 8005a26:	7863      	ldrb	r3, [r4, #1]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f47f ada3 	bne.w	8005574 <protocol_exec_rt_suspend+0x164>
 8005a2e:	f7ff fb05 	bl	800503c <protocol_exec_rt_system>
 8005a32:	7863      	ldrb	r3, [r4, #1]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0fa      	beq.n	8005a2e <protocol_exec_rt_suspend+0x61e>
 8005a38:	e59c      	b.n	8005574 <protocol_exec_rt_suspend+0x164>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005a3a:	0759      	lsls	r1, r3, #29
 8005a3c:	f57f ad60 	bpl.w	8005500 <protocol_exec_rt_suspend+0xf0>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005a40:	f043 0308 	orr.w	r3, r3, #8
 8005a44:	70a3      	strb	r3, [r4, #2]
 8005a46:	e55b      	b.n	8005500 <protocol_exec_rt_suspend+0xf0>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005a48:	9b01      	ldr	r3, [sp, #4]
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005a50:	f002 f9b4 	bl	8007dbc <spindle_set_state>
 8005a54:	7ae3      	ldrb	r3, [r4, #11]
 8005a56:	e697      	b.n	8005788 <protocol_exec_rt_suspend+0x378>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005a58:	fa4f f98b 	sxtb.w	r9, fp
 8005a5c:	f1b9 0f00 	cmp.w	r9, #0
 8005a60:	f6ff aeb5 	blt.w	80057ce <protocol_exec_rt_suspend+0x3be>
 8005a64:	78a3      	ldrb	r3, [r4, #2]
 8005a66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a6a:	70a3      	strb	r3, [r4, #2]
 8005a6c:	e6af      	b.n	80057ce <protocol_exec_rt_suspend+0x3be>
 8005a6e:	78a1      	ldrb	r1, [r4, #2]
 8005a70:	f041 0140 	orr.w	r1, r1, #64	; 0x40
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005a74:	70a1      	strb	r1, [r4, #2]
 8005a76:	e6a3      	b.n	80057c0 <protocol_exec_rt_suspend+0x3b0>
 8005a78:	20001014 	.word	0x20001014
 8005a7c:	200010c5 	.word	0x200010c5

08005a80 <protocol_execute_realtime>:
{
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005a82:	4bab      	ldr	r3, [pc, #684]	; (8005d30 <protocol_execute_realtime+0x2b0>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d156      	bne.n	8005b38 <protocol_execute_realtime+0xb8>
 8005a8a:	4caa      	ldr	r4, [pc, #680]	; (8005d34 <protocol_execute_realtime+0x2b4>)
 8005a8c:	4daa      	ldr	r5, [pc, #680]	; (8005d38 <protocol_execute_realtime+0x2b8>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005a8e:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005a90:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005a94:	b393      	cbz	r3, 8005afc <protocol_execute_realtime+0x7c>
    if (rt_exec & EXEC_RESET) {
 8005a96:	06ee      	lsls	r6, r5, #27
 8005a98:	f100 80dd 	bmi.w	8005c56 <protocol_execute_realtime+0x1d6>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005a9c:	07e8      	lsls	r0, r5, #31
 8005a9e:	f100 80f8 	bmi.w	8005c92 <protocol_execute_realtime+0x212>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005aa2:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005aa6:	d00a      	beq.n	8005abe <protocol_execute_realtime+0x3e>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005aa8:	7823      	ldrb	r3, [r4, #0]
 8005aaa:	0799      	lsls	r1, r3, #30
 8005aac:	f000 80f7 	beq.w	8005c9e <protocol_execute_realtime+0x21e>
 8005ab0:	b26e      	sxtb	r6, r5
      if (rt_exec & EXEC_SLEEP) {
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	f2c0 8169 	blt.w	8005d8a <protocol_execute_realtime+0x30a>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005ab8:	20e8      	movs	r0, #232	; 0xe8
 8005aba:	f003 fe67 	bl	800978c <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005abe:	07ab      	lsls	r3, r5, #30
 8005ac0:	d519      	bpl.n	8005af6 <protocol_execute_realtime+0x76>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005ac2:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005ac6:	d113      	bne.n	8005af0 <protocol_execute_realtime+0x70>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005ac8:	7823      	ldrb	r3, [r4, #0]
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	f000 8175 	beq.w	8005dba <protocol_execute_realtime+0x33a>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f040 8143 	bne.w	8005d5c <protocol_execute_realtime+0x2dc>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005ada:	f7fe fc6d 	bl	80043b8 <plan_get_current_block>
 8005ade:	b120      	cbz	r0, 8005aea <protocol_execute_realtime+0x6a>
 8005ae0:	78a3      	ldrb	r3, [r4, #2]
 8005ae2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005ae6:	f000 81a0 	beq.w	8005e2a <protocol_execute_realtime+0x3aa>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005aea:	2300      	movs	r3, #0
 8005aec:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005aee:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005af0:	2002      	movs	r0, #2
 8005af2:	f003 fe4b 	bl	800978c <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005af6:	0769      	lsls	r1, r5, #29
 8005af8:	f100 80b0 	bmi.w	8005c5c <protocol_execute_realtime+0x1dc>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005afc:	4b8f      	ldr	r3, [pc, #572]	; (8005d3c <protocol_execute_realtime+0x2bc>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005b00:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d16e      	bne.n	8005be6 <protocol_execute_realtime+0x166>
  rt_exec = sys_rt_exec_accessory_override;
 8005b08:	4b8d      	ldr	r3, [pc, #564]	; (8005d40 <protocol_execute_realtime+0x2c0>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005b0c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005b10:	bb13      	cbnz	r3, 8005b58 <protocol_execute_realtime+0xd8>
 8005b12:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005b14:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005b18:	d105      	bne.n	8005b26 <protocol_execute_realtime+0xa6>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005b1a:	78a3      	ldrb	r3, [r4, #2]
 8005b1c:	b943      	cbnz	r3, 8005b30 <protocol_execute_realtime+0xb0>
 8005b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005b20:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005b24:	d14c      	bne.n	8005bc0 <protocol_execute_realtime+0x140>
    st_prep_buffer();
 8005b26:	f002 fe13 	bl	8008750 <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005b2a:	78a3      	ldrb	r3, [r4, #2]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f6      	beq.n	8005b1e <protocol_execute_realtime+0x9e>
}
 8005b30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005b34:	f7ff bc6c 	b.w	8005410 <protocol_exec_rt_suspend>
    sys.state = STATE_ALARM; // Set system alarm state
 8005b38:	2601      	movs	r6, #1
 8005b3a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005b3e:	4c7d      	ldr	r4, [pc, #500]	; (8005d34 <protocol_execute_realtime+0x2b4>)
    report_alarm_message(rt_exec);
 8005b40:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005b42:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005b44:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8005b46:	f000 fc9b 	bl	8006480 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005b4a:	42b5      	cmp	r5, r6
 8005b4c:	f240 8123 	bls.w	8005d96 <protocol_execute_realtime+0x316>
 8005b50:	4d79      	ldr	r5, [pc, #484]	; (8005d38 <protocol_execute_realtime+0x2b8>)
    system_clear_exec_alarm(); // Clear alarm
 8005b52:	f003 fe2d 	bl	80097b0 <system_clear_exec_alarm>
 8005b56:	e79a      	b.n	8005a8e <protocol_execute_realtime+0xe>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005b58:	f003 fe4e 	bl	80097f8 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005b5c:	7aa2      	ldrb	r2, [r4, #10]
 8005b5e:	f015 0f01 	tst.w	r5, #1
 8005b62:	bf0c      	ite	eq
 8005b64:	4613      	moveq	r3, r2
 8005b66:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005b68:	07a8      	lsls	r0, r5, #30
 8005b6a:	bf44      	itt	mi
 8005b6c:	330a      	addmi	r3, #10
 8005b6e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005b70:	0769      	lsls	r1, r5, #29
 8005b72:	bf44      	itt	mi
 8005b74:	3b0a      	submi	r3, #10
 8005b76:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005b78:	072f      	lsls	r7, r5, #28
 8005b7a:	bf44      	itt	mi
 8005b7c:	3301      	addmi	r3, #1
 8005b7e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005b80:	06ee      	lsls	r6, r5, #27
 8005b82:	bf44      	itt	mi
 8005b84:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005b88:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005b8a:	2bc8      	cmp	r3, #200	; 0xc8
 8005b8c:	bf28      	it	cs
 8005b8e:	23c8      	movcs	r3, #200	; 0xc8
 8005b90:	2b0a      	cmp	r3, #10
 8005b92:	bf38      	it	cc
 8005b94:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d006      	beq.n	8005ba8 <protocol_execute_realtime+0x128>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005b9a:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005b9c:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005b9e:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005ba0:	f042 0308 	orr.w	r3, r2, #8
 8005ba4:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005ba6:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005ba8:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 8005baa:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005bac:	d502      	bpl.n	8005bb4 <protocol_execute_realtime+0x134>
      if (sys.state == STATE_HOLD) {
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	f000 80ca 	beq.w	8005d48 <protocol_execute_realtime+0x2c8>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005bb4:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005bb8:	d0ac      	beq.n	8005b14 <protocol_execute_realtime+0x94>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 80e0 	bne.w	8005d80 <protocol_execute_realtime+0x300>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005bc0:	4f60      	ldr	r7, [pc, #384]	; (8005d44 <protocol_execute_realtime+0x2c4>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005bc2:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8005bc4:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005bc6:	f100 80f1 	bmi.w	8005dac <protocol_execute_realtime+0x32c>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005bca:	0668      	lsls	r0, r5, #25
 8005bcc:	d505      	bpl.n	8005bda <protocol_execute_realtime+0x15a>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005bce:	0671      	lsls	r1, r6, #25
 8005bd0:	bf4c      	ite	mi
 8005bd2:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005bd6:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7fb ff70 	bl	8001ac0 <coolant_set_state>
 8005be0:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005be2:	723e      	strb	r6, [r7, #8]
 8005be4:	e796      	b.n	8005b14 <protocol_execute_realtime+0x94>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005be6:	f003 fdff 	bl	80097e8 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005bea:	7a21      	ldrb	r1, [r4, #8]
 8005bec:	f015 0f01 	tst.w	r5, #1
 8005bf0:	bf0c      	ite	eq
 8005bf2:	460b      	moveq	r3, r1
 8005bf4:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005bf6:	07ae      	lsls	r6, r5, #30
 8005bf8:	bf44      	itt	mi
 8005bfa:	330a      	addmi	r3, #10
 8005bfc:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005bfe:	0768      	lsls	r0, r5, #29
 8005c00:	bf44      	itt	mi
 8005c02:	3b0a      	submi	r3, #10
 8005c04:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005c06:	072f      	lsls	r7, r5, #28
 8005c08:	bf44      	itt	mi
 8005c0a:	3301      	addmi	r3, #1
 8005c0c:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005c0e:	06ee      	lsls	r6, r5, #27
 8005c10:	bf44      	itt	mi
 8005c12:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005c16:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005c18:	2bc8      	cmp	r3, #200	; 0xc8
 8005c1a:	bf28      	it	cs
 8005c1c:	23c8      	movcs	r3, #200	; 0xc8
 8005c1e:	2b0a      	cmp	r3, #10
 8005c20:	bf38      	it	cc
 8005c22:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005c24:	7a60      	ldrb	r0, [r4, #9]
 8005c26:	f015 0f20 	tst.w	r5, #32
 8005c2a:	bf14      	ite	ne
 8005c2c:	2264      	movne	r2, #100	; 0x64
 8005c2e:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005c30:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c34:	bf18      	it	ne
 8005c36:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005c38:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005c3c:	bf18      	it	ne
 8005c3e:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005c40:	4299      	cmp	r1, r3
 8005c42:	d023      	beq.n	8005c8c <protocol_execute_realtime+0x20c>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005c44:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8005c46:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005c48:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005c4a:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005c4c:	f7fe fc26 	bl	800449c <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005c50:	f7fe ff20 	bl	8004a94 <plan_cycle_reinitialize>
 8005c54:	e758      	b.n	8005b08 <protocol_execute_realtime+0x88>
      sys.abort = true;  // Only place this is set true.
 8005c56:	2301      	movs	r3, #1
 8005c58:	7063      	strb	r3, [r4, #1]
 8005c5a:	e75e      	b.n	8005b1a <protocol_execute_realtime+0x9a>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005c5c:	7823      	ldrb	r3, [r4, #0]
 8005c5e:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005c62:	d002      	beq.n	8005c6a <protocol_execute_realtime+0x1ea>
 8005c64:	78e3      	ldrb	r3, [r4, #3]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d051      	beq.n	8005d0e <protocol_execute_realtime+0x28e>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005c6a:	78a3      	ldrb	r3, [r4, #2]
 8005c6c:	061f      	lsls	r7, r3, #24
 8005c6e:	d452      	bmi.n	8005d16 <protocol_execute_realtime+0x296>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005c70:	f013 0220 	ands.w	r2, r3, #32
 8005c74:	d036      	beq.n	8005ce4 <protocol_execute_realtime+0x264>
          sys.state = STATE_SAFETY_DOOR;
 8005c76:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005c82:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005c84:	2004      	movs	r0, #4
 8005c86:	f003 fd81 	bl	800978c <system_clear_exec_state_flag>
 8005c8a:	e737      	b.n	8005afc <protocol_execute_realtime+0x7c>
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005c8c:	4290      	cmp	r0, r2
 8005c8e:	d1d9      	bne.n	8005c44 <protocol_execute_realtime+0x1c4>
 8005c90:	e73a      	b.n	8005b08 <protocol_execute_realtime+0x88>
      report_realtime_status();
 8005c92:	f001 f985 	bl	8006fa0 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005c96:	2001      	movs	r0, #1
 8005c98:	f003 fd78 	bl	800978c <system_clear_exec_state_flag>
 8005c9c:	e701      	b.n	8005aa2 <protocol_execute_realtime+0x22>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005c9e:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005ca2:	d122      	bne.n	8005cea <protocol_execute_realtime+0x26a>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005ca4:	bb33      	cbnz	r3, 8005cf4 <protocol_execute_realtime+0x274>
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005caa:	066a      	lsls	r2, r5, #25
 8005cac:	f100 809b 	bmi.w	8005de6 <protocol_execute_realtime+0x366>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005cb0:	072f      	lsls	r7, r5, #28
 8005cb2:	b26e      	sxtb	r6, r5
 8005cb4:	d501      	bpl.n	8005cba <protocol_execute_realtime+0x23a>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005cba:	06a8      	lsls	r0, r5, #26
 8005cbc:	f57f aef9 	bpl.w	8005ab2 <protocol_execute_realtime+0x32>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005cc0:	2006      	movs	r0, #6
 8005cc2:	f000 fbf3 	bl	80064ac <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005cc6:	78a3      	ldrb	r3, [r4, #2]
 8005cc8:	0619      	lsls	r1, r3, #24
 8005cca:	d407      	bmi.n	8005cdc <protocol_execute_realtime+0x25c>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005ccc:	7822      	ldrb	r2, [r4, #0]
 8005cce:	2a40      	cmp	r2, #64	; 0x40
 8005cd0:	f000 80ba 	beq.w	8005e48 <protocol_execute_realtime+0x3c8>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005cd4:	2a80      	cmp	r2, #128	; 0x80
 8005cd6:	d001      	beq.n	8005cdc <protocol_execute_realtime+0x25c>
 8005cd8:	2240      	movs	r2, #64	; 0x40
 8005cda:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005cdc:	f043 0320 	orr.w	r3, r3, #32
 8005ce0:	70a3      	strb	r3, [r4, #2]
 8005ce2:	e6e6      	b.n	8005ab2 <protocol_execute_realtime+0x32>
          sys.suspend = SUSPEND_DISABLE;
 8005ce4:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005ce6:	7022      	strb	r2, [r4, #0]
 8005ce8:	e7cc      	b.n	8005c84 <protocol_execute_realtime+0x204>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005cea:	78a2      	ldrb	r2, [r4, #2]
 8005cec:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005cf0:	f000 808a 	beq.w	8005e08 <protocol_execute_realtime+0x388>
 8005cf4:	b26a      	sxtb	r2, r5
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005cf6:	0668      	lsls	r0, r5, #25
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	d502      	bpl.n	8005d02 <protocol_execute_realtime+0x282>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005cfc:	0699      	lsls	r1, r3, #26
 8005cfe:	f140 80ab 	bpl.w	8005e58 <protocol_execute_realtime+0x3d8>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005d02:	072f      	lsls	r7, r5, #28
 8005d04:	d5d9      	bpl.n	8005cba <protocol_execute_realtime+0x23a>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005d06:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005d0a:	d1d6      	bne.n	8005cba <protocol_execute_realtime+0x23a>
 8005d0c:	e7d3      	b.n	8005cb6 <protocol_execute_realtime+0x236>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005d0e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	da5a      	bge.n	8005dcc <protocol_execute_realtime+0x34c>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005d16:	2300      	movs	r3, #0
 8005d18:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005d1a:	f7fe fb0b 	bl	8004334 <plan_reset>
          st_reset();
 8005d1e:	f002 fb9f 	bl	8008460 <st_reset>
          gc_sync_position();
 8005d22:	f7fb ffcf 	bl	8001cc4 <gc_sync_position>
          plan_sync_position();
 8005d26:	f7fe fe97 	bl	8004a58 <plan_sync_position>
 8005d2a:	78a3      	ldrb	r3, [r4, #2]
 8005d2c:	e7a0      	b.n	8005c70 <protocol_execute_realtime+0x1f0>
 8005d2e:	bf00      	nop
 8005d30:	200010e8 	.word	0x200010e8
 8005d34:	200010b0 	.word	0x200010b0
 8005d38:	200010c5 	.word	0x200010c5
 8005d3c:	200010ac 	.word	0x200010ac
 8005d40:	200010c4 	.word	0x200010c4
 8005d44:	20001014 	.word	0x20001014
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005d48:	7ae3      	ldrb	r3, [r4, #11]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d150      	bne.n	8005df0 <protocol_execute_realtime+0x370>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005d52:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005d56:	f47f af33 	bne.w	8005bc0 <protocol_execute_realtime+0x140>
 8005d5a:	e6e4      	b.n	8005b26 <protocol_execute_realtime+0xa6>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005d5c:	06da      	lsls	r2, r3, #27
 8005d5e:	f57f aec7 	bpl.w	8005af0 <protocol_execute_realtime+0x70>
 8005d62:	78a2      	ldrb	r2, [r4, #2]
 8005d64:	07d0      	lsls	r0, r2, #31
 8005d66:	f57f aec3 	bpl.w	8005af0 <protocol_execute_realtime+0x70>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	f47f aeb3 	bne.w	8005ad6 <protocol_execute_realtime+0x56>
 8005d70:	7ae3      	ldrb	r3, [r4, #11]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f43f aeaf 	beq.w	8005ad6 <protocol_execute_realtime+0x56>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005d78:	f043 0308 	orr.w	r3, r3, #8
 8005d7c:	72e3      	strb	r3, [r4, #11]
 8005d7e:	e6b7      	b.n	8005af0 <protocol_execute_realtime+0x70>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005d80:	f013 0f18 	tst.w	r3, #24
 8005d84:	f43f aec6 	beq.w	8005b14 <protocol_execute_realtime+0x94>
 8005d88:	e71a      	b.n	8005bc0 <protocol_execute_realtime+0x140>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005d8a:	7823      	ldrb	r3, [r4, #0]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d036      	beq.n	8005dfe <protocol_execute_realtime+0x37e>
        sys.state = STATE_SLEEP; 
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	7023      	strb	r3, [r4, #0]
 8005d94:	e690      	b.n	8005ab8 <protocol_execute_realtime+0x38>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005d96:	4630      	mov	r0, r6
 8005d98:	f000 fb88 	bl	80064ac <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005d9c:	2010      	movs	r0, #16
 8005d9e:	f003 fcf5 	bl	800978c <system_clear_exec_state_flag>
 8005da2:	4d2f      	ldr	r5, [pc, #188]	; (8005e60 <protocol_execute_realtime+0x3e0>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005da4:	782b      	ldrb	r3, [r5, #0]
 8005da6:	06df      	lsls	r7, r3, #27
 8005da8:	d5fc      	bpl.n	8005da4 <protocol_execute_realtime+0x324>
 8005daa:	e6d2      	b.n	8005b52 <protocol_execute_realtime+0xd2>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005dac:	0633      	lsls	r3, r6, #24
 8005dae:	bf4c      	ite	mi
 8005db0:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005db4:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
 8005db8:	e707      	b.n	8005bca <protocol_execute_realtime+0x14a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005dba:	78a3      	ldrb	r3, [r4, #2]
 8005dbc:	f013 0220 	ands.w	r2, r3, #32
 8005dc0:	f47f ae96 	bne.w	8005af0 <protocol_execute_realtime+0x70>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005dc4:	06df      	lsls	r7, r3, #27
 8005dc6:	d538      	bpl.n	8005e3a <protocol_execute_realtime+0x3ba>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005dc8:	7022      	strb	r2, [r4, #0]
 8005dca:	e684      	b.n	8005ad6 <protocol_execute_realtime+0x56>
        plan_cycle_reinitialize();
 8005dcc:	f7fe fe62 	bl	8004a94 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005dd0:	7923      	ldrb	r3, [r4, #4]
 8005dd2:	079a      	lsls	r2, r3, #30
 8005dd4:	d503      	bpl.n	8005dde <protocol_execute_realtime+0x35e>
 8005dd6:	78a2      	ldrb	r2, [r4, #2]
 8005dd8:	f042 0201 	orr.w	r2, r2, #1
 8005ddc:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005dde:	f023 0306 	bic.w	r3, r3, #6
 8005de2:	7123      	strb	r3, [r4, #4]
 8005de4:	e74e      	b.n	8005c84 <protocol_execute_realtime+0x204>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005de6:	2141      	movs	r1, #65	; 0x41
 8005de8:	b26a      	sxtb	r2, r5
 8005dea:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005dec:	70a1      	strb	r1, [r4, #2]
 8005dee:	e788      	b.n	8005d02 <protocol_execute_realtime+0x282>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005df0:	07d9      	lsls	r1, r3, #31
 8005df2:	f57f ae95 	bpl.w	8005b20 <protocol_execute_realtime+0xa0>
 8005df6:	f043 0304 	orr.w	r3, r3, #4
 8005dfa:	72e3      	strb	r3, [r4, #11]
 8005dfc:	e7a9      	b.n	8005d52 <protocol_execute_realtime+0x2d2>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005dfe:	78a3      	ldrb	r3, [r4, #2]
 8005e00:	f043 0305 	orr.w	r3, r3, #5
 8005e04:	70a3      	strb	r3, [r4, #2]
 8005e06:	e7c3      	b.n	8005d90 <protocol_execute_realtime+0x310>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005e08:	f002 fc8c 	bl	8008724 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005e0c:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005e0e:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005e10:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	f47f af46 	bne.w	8005ca4 <protocol_execute_realtime+0x224>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005e18:	b26e      	sxtb	r6, r5
 8005e1a:	2e00      	cmp	r6, #0
 8005e1c:	f6ff af4d 	blt.w	8005cba <protocol_execute_realtime+0x23a>
 8005e20:	78a3      	ldrb	r3, [r4, #2]
 8005e22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e26:	70a3      	strb	r3, [r4, #2]
 8005e28:	e747      	b.n	8005cba <protocol_execute_realtime+0x23a>
              sys.state = STATE_CYCLE;
 8005e2a:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005e2c:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005e2e:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005e30:	f002 fc8e 	bl	8008750 <st_prep_buffer>
              st_wake_up();
 8005e34:	f002 f8f0 	bl	8008018 <st_wake_up>
 8005e38:	e65a      	b.n	8005af0 <protocol_execute_realtime+0x70>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005e3a:	075e      	lsls	r6, r3, #29
 8005e3c:	f57f ae58 	bpl.w	8005af0 <protocol_execute_realtime+0x70>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005e40:	f043 0308 	orr.w	r3, r3, #8
 8005e44:	70a3      	strb	r3, [r4, #2]
 8005e46:	e653      	b.n	8005af0 <protocol_execute_realtime+0x70>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005e48:	071a      	lsls	r2, r3, #28
 8005e4a:	f57f af45 	bpl.w	8005cd8 <protocol_execute_realtime+0x258>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005e4e:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005e52:	f043 0302 	orr.w	r3, r3, #2
 8005e56:	e73f      	b.n	8005cd8 <protocol_execute_realtime+0x258>
 8005e58:	78a1      	ldrb	r1, [r4, #2]
 8005e5a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005e5e:	e7c4      	b.n	8005dea <protocol_execute_realtime+0x36a>
 8005e60:	200010c5 	.word	0x200010c5

08005e64 <protocol_buffer_synchronize>:
{
 8005e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8005e68:	f7fe faa6 	bl	80043b8 <plan_get_current_block>
 8005e6c:	b110      	cbz	r0, 8005e74 <protocol_buffer_synchronize+0x10>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005e6e:	2002      	movs	r0, #2
 8005e70:	f003 fc82 	bl	8009778 <system_set_exec_state_flag>
 8005e74:	4eab      	ldr	r6, [pc, #684]	; (8006124 <protocol_buffer_synchronize+0x2c0>)
 8005e76:	4cac      	ldr	r4, [pc, #688]	; (8006128 <protocol_buffer_synchronize+0x2c4>)
 8005e78:	4dac      	ldr	r5, [pc, #688]	; (800612c <protocol_buffer_synchronize+0x2c8>)
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005e7a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8006134 <protocol_buffer_synchronize+0x2d0>
  rt_exec = sys_rt_exec_accessory_override;
 8005e7e:	4fac      	ldr	r7, [pc, #688]	; (8006130 <protocol_buffer_synchronize+0x2cc>)
        uint8_t coolant_state = gc_state.modal.coolant;
 8005e80:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 8006138 <protocol_buffer_synchronize+0x2d4>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005e84:	7833      	ldrb	r3, [r6, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005e86:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f040 808b 	bne.w	8005fa6 <protocol_buffer_synchronize+0x142>
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005e90:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005e92:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d054      	beq.n	8005f44 <protocol_buffer_synchronize+0xe0>
    if (rt_exec & EXEC_RESET) {
 8005e9a:	f01a 0f10 	tst.w	sl, #16
 8005e9e:	f040 8121 	bne.w	80060e4 <protocol_buffer_synchronize+0x280>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005ea2:	f01a 0f01 	tst.w	sl, #1
 8005ea6:	f040 8137 	bne.w	8006118 <protocol_buffer_synchronize+0x2b4>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005eaa:	f01a 0fe8 	tst.w	sl, #232	; 0xe8
 8005eae:	d00c      	beq.n	8005eca <protocol_buffer_synchronize+0x66>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005eb0:	7823      	ldrb	r3, [r4, #0]
 8005eb2:	0798      	lsls	r0, r3, #30
 8005eb4:	f000 8142 	beq.w	800613c <protocol_buffer_synchronize+0x2d8>
 8005eb8:	fa4f fb8a 	sxtb.w	fp, sl
      if (rt_exec & EXEC_SLEEP) {
 8005ebc:	f1bb 0f00 	cmp.w	fp, #0
 8005ec0:	f2c0 8167 	blt.w	8006192 <protocol_buffer_synchronize+0x32e>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005ec4:	20e8      	movs	r0, #232	; 0xe8
 8005ec6:	f003 fc61 	bl	800978c <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005eca:	f01a 0f02 	tst.w	sl, #2
 8005ece:	d019      	beq.n	8005f04 <protocol_buffer_synchronize+0xa0>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005ed0:	f01a 0f68 	tst.w	sl, #104	; 0x68
 8005ed4:	d113      	bne.n	8005efe <protocol_buffer_synchronize+0x9a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005ed6:	7823      	ldrb	r3, [r4, #0]
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	f000 81ca 	beq.w	8006272 <protocol_buffer_synchronize+0x40e>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 81b5 	bne.w	800624e <protocol_buffer_synchronize+0x3ea>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005ee8:	f7fe fa66 	bl	80043b8 <plan_get_current_block>
 8005eec:	b120      	cbz	r0, 8005ef8 <protocol_buffer_synchronize+0x94>
 8005eee:	78a3      	ldrb	r3, [r4, #2]
 8005ef0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005ef4:	f000 81d0 	beq.w	8006298 <protocol_buffer_synchronize+0x434>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005ef8:	2300      	movs	r3, #0
 8005efa:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005efc:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005efe:	2002      	movs	r0, #2
 8005f00:	f003 fc44 	bl	800978c <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005f04:	f01a 0f04 	tst.w	sl, #4
 8005f08:	d01c      	beq.n	8005f44 <protocol_buffer_synchronize+0xe0>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005f0a:	7823      	ldrb	r3, [r4, #0]
 8005f0c:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005f10:	f000 80f0 	beq.w	80060f4 <protocol_buffer_synchronize+0x290>
 8005f14:	78e3      	ldrb	r3, [r4, #3]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f040 80ec 	bne.w	80060f4 <protocol_buffer_synchronize+0x290>
 8005f1c:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f2c0 8178 	blt.w	8006216 <protocol_buffer_synchronize+0x3b2>
        plan_cycle_reinitialize();
 8005f26:	f7fe fdb5 	bl	8004a94 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005f2a:	7923      	ldrb	r3, [r4, #4]
 8005f2c:	079a      	lsls	r2, r3, #30
 8005f2e:	d503      	bpl.n	8005f38 <protocol_buffer_synchronize+0xd4>
 8005f30:	78a2      	ldrb	r2, [r4, #2]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005f38:	f023 0306 	bic.w	r3, r3, #6
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005f3c:	2004      	movs	r0, #4
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005f3e:	7123      	strb	r3, [r4, #4]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005f40:	f003 fc24 	bl	800978c <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005f44:	f898 3000 	ldrb.w	r3, [r8]
  if (rt_exec) {
 8005f48:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f040 8089 	bne.w	8006064 <protocol_buffer_synchronize+0x200>
  rt_exec = sys_rt_exec_accessory_override;
 8005f52:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 8005f54:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d133      	bne.n	8005fc4 <protocol_buffer_synchronize+0x160>
 8005f5c:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005f5e:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005f62:	d118      	bne.n	8005f96 <protocol_buffer_synchronize+0x132>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005f64:	78a3      	ldrb	r3, [r4, #2]
 8005f66:	b9db      	cbnz	r3, 8005fa0 <protocol_buffer_synchronize+0x13c>
    if (sys.abort) { return; } // Check for system abort
 8005f68:	7863      	ldrb	r3, [r4, #1]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f040 80c0 	bne.w	80060f0 <protocol_buffer_synchronize+0x28c>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 8005f70:	f7fe fa22 	bl	80043b8 <plan_get_current_block>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d185      	bne.n	8005e84 <protocol_buffer_synchronize+0x20>
 8005f78:	7823      	ldrb	r3, [r4, #0]
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d082      	beq.n	8005e84 <protocol_buffer_synchronize+0x20>
 8005f7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005f82:	7ae3      	ldrb	r3, [r4, #11]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8159 	beq.w	800623c <protocol_buffer_synchronize+0x3d8>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005f8a:	07d9      	lsls	r1, r3, #31
 8005f8c:	f100 818c 	bmi.w	80062a8 <protocol_buffer_synchronize+0x444>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005f90:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8005f94:	d14f      	bne.n	8006036 <protocol_buffer_synchronize+0x1d2>
    st_prep_buffer();
 8005f96:	f002 fbdb 	bl	8008750 <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005f9a:	78a3      	ldrb	r3, [r4, #2]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0e3      	beq.n	8005f68 <protocol_buffer_synchronize+0x104>
 8005fa0:	f7ff fa36 	bl	8005410 <protocol_exec_rt_suspend>
 8005fa4:	e7e0      	b.n	8005f68 <protocol_buffer_synchronize+0x104>
    sys.state = STATE_ALARM; // Set system alarm state
 8005fa6:	f04f 0b01 	mov.w	fp, #1
    report_alarm_message(rt_exec);
 8005faa:	4650      	mov	r0, sl
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005fac:	f10a 3aff 	add.w	sl, sl, #4294967295
    sys.state = STATE_ALARM; // Set system alarm state
 8005fb0:	f884 b000 	strb.w	fp, [r4]
    report_alarm_message(rt_exec);
 8005fb4:	f000 fa64 	bl	8006480 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005fb8:	45da      	cmp	sl, fp
 8005fba:	f240 8118 	bls.w	80061ee <protocol_buffer_synchronize+0x38a>
    system_clear_exec_alarm(); // Clear alarm
 8005fbe:	f003 fbf7 	bl	80097b0 <system_clear_exec_alarm>
 8005fc2:	e765      	b.n	8005e90 <protocol_buffer_synchronize+0x2c>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005fc4:	f003 fc18 	bl	80097f8 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005fc8:	f01a 0f01 	tst.w	sl, #1
 8005fcc:	bf18      	it	ne
 8005fce:	2364      	movne	r3, #100	; 0x64
 8005fd0:	7aa2      	ldrb	r2, [r4, #10]
 8005fd2:	bf08      	it	eq
 8005fd4:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005fd6:	f01a 0f02 	tst.w	sl, #2
 8005fda:	bf1c      	itt	ne
 8005fdc:	330a      	addne	r3, #10
 8005fde:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005fe0:	f01a 0f04 	tst.w	sl, #4
 8005fe4:	bf1c      	itt	ne
 8005fe6:	3b0a      	subne	r3, #10
 8005fe8:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005fea:	f01a 0f08 	tst.w	sl, #8
 8005fee:	bf1c      	itt	ne
 8005ff0:	3301      	addne	r3, #1
 8005ff2:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005ff4:	f01a 0f10 	tst.w	sl, #16
 8005ff8:	bf1c      	itt	ne
 8005ffa:	f103 33ff 	addne.w	r3, r3, #4294967295
 8005ffe:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8006000:	2bc8      	cmp	r3, #200	; 0xc8
 8006002:	bf28      	it	cs
 8006004:	23c8      	movcs	r3, #200	; 0xc8
 8006006:	2b0a      	cmp	r3, #10
 8006008:	bf38      	it	cc
 800600a:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 800600c:	429a      	cmp	r2, r3
 800600e:	d006      	beq.n	800601e <protocol_buffer_synchronize+0x1ba>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006010:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006012:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8006014:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006016:	f042 0308 	orr.w	r3, r2, #8
 800601a:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 800601c:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800601e:	f01a 0f20 	tst.w	sl, #32
      if (sys.state == STATE_HOLD) {
 8006022:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8006024:	d001      	beq.n	800602a <protocol_buffer_synchronize+0x1c6>
      if (sys.state == STATE_HOLD) {
 8006026:	2b10      	cmp	r3, #16
 8006028:	d0ab      	beq.n	8005f82 <protocol_buffer_synchronize+0x11e>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800602a:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 800602e:	d096      	beq.n	8005f5e <protocol_buffer_synchronize+0xfa>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006030:	2b00      	cmp	r3, #0
 8006032:	f040 80b7 	bne.w	80061a4 <protocol_buffer_synchronize+0x340>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8006036:	f01a 0f80 	tst.w	sl, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 800603a:	f899 b008 	ldrb.w	fp, [r9, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800603e:	f040 80bb 	bne.w	80061b8 <protocol_buffer_synchronize+0x354>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8006042:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006046:	d006      	beq.n	8006056 <protocol_buffer_synchronize+0x1f2>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8006048:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800604c:	bf14      	ite	ne
 800604e:	f00b 0bbf 	andne.w	fp, fp, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8006052:	f04b 0b40 	orreq.w	fp, fp, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8006056:	4658      	mov	r0, fp
 8006058:	f7fb fd32 	bl	8001ac0 <coolant_set_state>
 800605c:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 800605e:	f889 b008 	strb.w	fp, [r9, #8]
 8006062:	e77c      	b.n	8005f5e <protocol_buffer_synchronize+0xfa>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8006064:	f003 fbc0 	bl	80097e8 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8006068:	f01a 0f01 	tst.w	sl, #1
 800606c:	bf18      	it	ne
 800606e:	2364      	movne	r3, #100	; 0x64
 8006070:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 8006072:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 8006074:	bf08      	it	eq
 8006076:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8006078:	f01a 0f02 	tst.w	sl, #2
 800607c:	bf1c      	itt	ne
 800607e:	330a      	addne	r3, #10
 8006080:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8006082:	f01a 0f04 	tst.w	sl, #4
 8006086:	bf1c      	itt	ne
 8006088:	3b0a      	subne	r3, #10
 800608a:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 800608c:	f01a 0f08 	tst.w	sl, #8
 8006090:	bf1c      	itt	ne
 8006092:	3301      	addne	r3, #1
 8006094:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8006096:	f01a 0f10 	tst.w	sl, #16
 800609a:	bf1c      	itt	ne
 800609c:	f103 33ff 	addne.w	r3, r3, #4294967295
 80060a0:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 80060a2:	2bc8      	cmp	r3, #200	; 0xc8
 80060a4:	bf28      	it	cs
 80060a6:	23c8      	movcs	r3, #200	; 0xc8
 80060a8:	2b0a      	cmp	r3, #10
 80060aa:	bf38      	it	cc
 80060ac:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 80060ae:	f01a 0f20 	tst.w	sl, #32
 80060b2:	bf14      	ite	ne
 80060b4:	2164      	movne	r1, #100	; 0x64
 80060b6:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 80060b8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80060bc:	bf18      	it	ne
 80060be:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 80060c0:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80060c4:	bf18      	it	ne
 80060c6:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d102      	bne.n	80060d2 <protocol_buffer_synchronize+0x26e>
 80060cc:	4288      	cmp	r0, r1
 80060ce:	f43f af40 	beq.w	8005f52 <protocol_buffer_synchronize+0xee>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80060d2:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 80060d4:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 80060d6:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80060d8:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 80060da:	f7fe f9df 	bl	800449c <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 80060de:	f7fe fcd9 	bl	8004a94 <plan_cycle_reinitialize>
 80060e2:	e736      	b.n	8005f52 <protocol_buffer_synchronize+0xee>
      sys.abort = true;  // Only place this is set true.
 80060e4:	2201      	movs	r2, #1
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80060e6:	78a3      	ldrb	r3, [r4, #2]
      sys.abort = true;  // Only place this is set true.
 80060e8:	7062      	strb	r2, [r4, #1]
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f47f af58 	bne.w	8005fa0 <protocol_buffer_synchronize+0x13c>
 80060f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80060f4:	78a3      	ldrb	r3, [r4, #2]
 80060f6:	0618      	lsls	r0, r3, #24
 80060f8:	f100 808d 	bmi.w	8006216 <protocol_buffer_synchronize+0x3b2>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 80060fc:	f013 0220 	ands.w	r2, r3, #32
 8006100:	d04d      	beq.n	800619e <protocol_buffer_synchronize+0x33a>
          sys.state = STATE_SAFETY_DOOR;
 8006102:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8006104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8006108:	f043 0301 	orr.w	r3, r3, #1
 800610c:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 800610e:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8006110:	2004      	movs	r0, #4
 8006112:	f003 fb3b 	bl	800978c <system_clear_exec_state_flag>
 8006116:	e715      	b.n	8005f44 <protocol_buffer_synchronize+0xe0>
      report_realtime_status();
 8006118:	f000 ff42 	bl	8006fa0 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 800611c:	2001      	movs	r0, #1
 800611e:	f003 fb35 	bl	800978c <system_clear_exec_state_flag>
 8006122:	e6c2      	b.n	8005eaa <protocol_buffer_synchronize+0x46>
 8006124:	200010e8 	.word	0x200010e8
 8006128:	200010b0 	.word	0x200010b0
 800612c:	200010c5 	.word	0x200010c5
 8006130:	200010c4 	.word	0x200010c4
 8006134:	200010ac 	.word	0x200010ac
 8006138:	20001014 	.word	0x20001014
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 800613c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8006140:	d049      	beq.n	80061d6 <protocol_buffer_synchronize+0x372>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8006142:	78a2      	ldrb	r2, [r4, #2]
 8006144:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8006148:	d03e      	beq.n	80061c8 <protocol_buffer_synchronize+0x364>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800614a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800614e:	fa4f fb8a 	sxtb.w	fp, sl
 8006152:	d16c      	bne.n	800622e <protocol_buffer_synchronize+0x3ca>
        if (rt_exec & EXEC_FEED_HOLD) {
 8006154:	f01a 0f08 	tst.w	sl, #8
 8006158:	d002      	beq.n	8006160 <protocol_buffer_synchronize+0x2fc>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800615a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800615e:	d053      	beq.n	8006208 <protocol_buffer_synchronize+0x3a4>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8006160:	f01a 0f20 	tst.w	sl, #32
 8006164:	f43f aeaa 	beq.w	8005ebc <protocol_buffer_synchronize+0x58>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8006168:	2006      	movs	r0, #6
 800616a:	f000 f99f 	bl	80064ac <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800616e:	78a3      	ldrb	r3, [r4, #2]
 8006170:	061a      	lsls	r2, r3, #24
 8006172:	d407      	bmi.n	8006184 <protocol_buffer_synchronize+0x320>
            if (sys.state == STATE_SAFETY_DOOR) {
 8006174:	7822      	ldrb	r2, [r4, #0]
 8006176:	2a40      	cmp	r2, #64	; 0x40
 8006178:	f000 80a7 	beq.w	80062ca <protocol_buffer_synchronize+0x466>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 800617c:	2a80      	cmp	r2, #128	; 0x80
 800617e:	d001      	beq.n	8006184 <protocol_buffer_synchronize+0x320>
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8006184:	f043 0320 	orr.w	r3, r3, #32
      if (rt_exec & EXEC_SLEEP) {
 8006188:	f1bb 0f00 	cmp.w	fp, #0
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 800618c:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 800618e:	f6bf ae99 	bge.w	8005ec4 <protocol_buffer_synchronize+0x60>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8006192:	7823      	ldrb	r3, [r4, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d07a      	beq.n	800628e <protocol_buffer_synchronize+0x42a>
        sys.state = STATE_SLEEP; 
 8006198:	2380      	movs	r3, #128	; 0x80
 800619a:	7023      	strb	r3, [r4, #0]
 800619c:	e692      	b.n	8005ec4 <protocol_buffer_synchronize+0x60>
          sys.suspend = SUSPEND_DISABLE;
 800619e:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 80061a0:	7022      	strb	r2, [r4, #0]
 80061a2:	e7b5      	b.n	8006110 <protocol_buffer_synchronize+0x2ac>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80061a4:	f013 0f18 	tst.w	r3, #24
 80061a8:	f43f aed9 	beq.w	8005f5e <protocol_buffer_synchronize+0xfa>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80061ac:	f01a 0f80 	tst.w	sl, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 80061b0:	f899 b008 	ldrb.w	fp, [r9, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80061b4:	f43f af45 	beq.w	8006042 <protocol_buffer_synchronize+0x1de>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 80061b8:	f01b 0f80 	tst.w	fp, #128	; 0x80
 80061bc:	bf14      	ite	ne
 80061be:	f00b 0b7f 	andne.w	fp, fp, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 80061c2:	f04b 0b80 	orreq.w	fp, fp, #128	; 0x80
 80061c6:	e73c      	b.n	8006042 <protocol_buffer_synchronize+0x1de>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 80061c8:	f002 faac 	bl	8008724 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80061cc:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80061ce:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80061d0:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d06e      	beq.n	80062b4 <protocol_buffer_synchronize+0x450>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1b7      	bne.n	800614a <protocol_buffer_synchronize+0x2e6>
 80061da:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80061dc:	f01a 0f40 	tst.w	sl, #64	; 0x40
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80061e0:	70a2      	strb	r2, [r4, #2]
 80061e2:	fa4f fb8a 	sxtb.w	fp, sl
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80061e6:	d00c      	beq.n	8006202 <protocol_buffer_synchronize+0x39e>
 80061e8:	2241      	movs	r2, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80061ea:	70a2      	strb	r2, [r4, #2]
 80061ec:	e7b2      	b.n	8006154 <protocol_buffer_synchronize+0x2f0>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 80061ee:	4658      	mov	r0, fp
 80061f0:	f000 f95c 	bl	80064ac <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80061f4:	2010      	movs	r0, #16
 80061f6:	f003 fac9 	bl	800978c <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80061fa:	782b      	ldrb	r3, [r5, #0]
 80061fc:	06db      	lsls	r3, r3, #27
 80061fe:	d5fc      	bpl.n	80061fa <protocol_buffer_synchronize+0x396>
 8006200:	e6dd      	b.n	8005fbe <protocol_buffer_synchronize+0x15a>
        if (rt_exec & EXEC_FEED_HOLD) {
 8006202:	f01a 0f08 	tst.w	sl, #8
 8006206:	d0ab      	beq.n	8006160 <protocol_buffer_synchronize+0x2fc>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8006208:	2310      	movs	r3, #16
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800620a:	f01a 0f20 	tst.w	sl, #32
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800620e:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8006210:	f43f ae54 	beq.w	8005ebc <protocol_buffer_synchronize+0x58>
 8006214:	e7a8      	b.n	8006168 <protocol_buffer_synchronize+0x304>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8006216:	2300      	movs	r3, #0
 8006218:	7123      	strb	r3, [r4, #4]
          plan_reset();
 800621a:	f7fe f88b 	bl	8004334 <plan_reset>
          st_reset();
 800621e:	f002 f91f 	bl	8008460 <st_reset>
          gc_sync_position();
 8006222:	f7fb fd4f 	bl	8001cc4 <gc_sync_position>
          plan_sync_position();
 8006226:	f7fe fc17 	bl	8004a58 <plan_sync_position>
 800622a:	78a3      	ldrb	r3, [r4, #2]
 800622c:	e766      	b.n	80060fc <protocol_buffer_synchronize+0x298>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800622e:	0699      	lsls	r1, r3, #26
 8006230:	d490      	bmi.n	8006154 <protocol_buffer_synchronize+0x2f0>
 8006232:	78a2      	ldrb	r2, [r4, #2]
 8006234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006238:	70a2      	strb	r2, [r4, #2]
 800623a:	e78b      	b.n	8006154 <protocol_buffer_synchronize+0x2f0>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 800623c:	2302      	movs	r3, #2
 800623e:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006240:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8006244:	f47f aef7 	bne.w	8006036 <protocol_buffer_synchronize+0x1d2>
    st_prep_buffer();
 8006248:	f002 fa82 	bl	8008750 <st_prep_buffer>
 800624c:	e6a5      	b.n	8005f9a <protocol_buffer_synchronize+0x136>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 800624e:	06da      	lsls	r2, r3, #27
 8006250:	f57f ae55 	bpl.w	8005efe <protocol_buffer_synchronize+0x9a>
 8006254:	78a2      	ldrb	r2, [r4, #2]
 8006256:	07d1      	lsls	r1, r2, #31
 8006258:	f57f ae51 	bpl.w	8005efe <protocol_buffer_synchronize+0x9a>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 800625c:	2b10      	cmp	r3, #16
 800625e:	f47f ae41 	bne.w	8005ee4 <protocol_buffer_synchronize+0x80>
 8006262:	7ae3      	ldrb	r3, [r4, #11]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f43f ae3d 	beq.w	8005ee4 <protocol_buffer_synchronize+0x80>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 800626a:	f043 0308 	orr.w	r3, r3, #8
 800626e:	72e3      	strb	r3, [r4, #11]
 8006270:	e645      	b.n	8005efe <protocol_buffer_synchronize+0x9a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8006272:	78a3      	ldrb	r3, [r4, #2]
 8006274:	f013 0220 	ands.w	r2, r3, #32
 8006278:	f47f ae41 	bne.w	8005efe <protocol_buffer_synchronize+0x9a>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 800627c:	06d9      	lsls	r1, r3, #27
 800627e:	d417      	bmi.n	80062b0 <protocol_buffer_synchronize+0x44c>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8006280:	0758      	lsls	r0, r3, #29
 8006282:	f57f ae3c 	bpl.w	8005efe <protocol_buffer_synchronize+0x9a>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8006286:	f043 0308 	orr.w	r3, r3, #8
 800628a:	70a3      	strb	r3, [r4, #2]
 800628c:	e637      	b.n	8005efe <protocol_buffer_synchronize+0x9a>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800628e:	78a3      	ldrb	r3, [r4, #2]
 8006290:	f043 0305 	orr.w	r3, r3, #5
 8006294:	70a3      	strb	r3, [r4, #2]
 8006296:	e77f      	b.n	8006198 <protocol_buffer_synchronize+0x334>
              sys.state = STATE_CYCLE;
 8006298:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 800629a:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 800629c:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 800629e:	f002 fa57 	bl	8008750 <st_prep_buffer>
              st_wake_up();
 80062a2:	f001 feb9 	bl	8008018 <st_wake_up>
 80062a6:	e62a      	b.n	8005efe <protocol_buffer_synchronize+0x9a>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80062a8:	f043 0304 	orr.w	r3, r3, #4
 80062ac:	72e3      	strb	r3, [r4, #11]
 80062ae:	e7c7      	b.n	8006240 <protocol_buffer_synchronize+0x3dc>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 80062b0:	7022      	strb	r2, [r4, #0]
 80062b2:	e617      	b.n	8005ee4 <protocol_buffer_synchronize+0x80>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 80062b4:	fa4f fb8a 	sxtb.w	fp, sl
 80062b8:	f1bb 0f00 	cmp.w	fp, #0
 80062bc:	f6ff af50 	blt.w	8006160 <protocol_buffer_synchronize+0x2fc>
 80062c0:	78a3      	ldrb	r3, [r4, #2]
 80062c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062c6:	70a3      	strb	r3, [r4, #2]
 80062c8:	e74a      	b.n	8006160 <protocol_buffer_synchronize+0x2fc>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 80062ca:	0718      	lsls	r0, r3, #28
 80062cc:	f57f af58 	bpl.w	8006180 <protocol_buffer_synchronize+0x31c>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80062d0:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80062d4:	f043 0302 	orr.w	r3, r3, #2
 80062d8:	e752      	b.n	8006180 <protocol_buffer_synchronize+0x31c>
 80062da:	bf00      	nop

080062dc <protocol_main_loop>:
{
 80062dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 80062e0:	4b57      	ldr	r3, [pc, #348]	; (8006440 <protocol_main_loop+0x164>)
 80062e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80062e6:	071a      	lsls	r2, r3, #28
 80062e8:	f100 8091 	bmi.w	800640e <protocol_main_loop+0x132>
 80062ec:	4e55      	ldr	r6, [pc, #340]	; (8006444 <protocol_main_loop+0x168>)
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 80062ee:	7833      	ldrb	r3, [r6, #0]
 80062f0:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 80062f4:	f000 8083 	beq.w	80063fe <protocol_main_loop+0x122>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 80062f8:	2002      	movs	r0, #2
 80062fa:	f000 f8d7 	bl	80064ac <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 80062fe:	2301      	movs	r3, #1
 8006300:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 8006302:	2500      	movs	r5, #0
 8006304:	462c      	mov	r4, r5
        line[char_counter] = 0; // Set string termination character.
 8006306:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8006448 <protocol_main_loop+0x16c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 800630a:	f001 f879 	bl	8007400 <serial_read>
 800630e:	28ff      	cmp	r0, #255	; 0xff
 8006310:	d00f      	beq.n	8006332 <protocol_main_loop+0x56>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 8006312:	280a      	cmp	r0, #10
 8006314:	d01d      	beq.n	8006352 <protocol_main_loop+0x76>
 8006316:	280d      	cmp	r0, #13
 8006318:	d01b      	beq.n	8006352 <protocol_main_loop+0x76>
        if (line_flags) {
 800631a:	2c00      	cmp	r4, #0
 800631c:	d035      	beq.n	800638a <protocol_main_loop+0xae>
          if (c == ')') {
 800631e:	2829      	cmp	r0, #41	; 0x29
 8006320:	d1f3      	bne.n	800630a <protocol_main_loop+0x2e>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8006322:	07a3      	lsls	r3, r4, #30
 8006324:	d5f1      	bpl.n	800630a <protocol_main_loop+0x2e>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006326:	f001 f86b 	bl	8007400 <serial_read>
 800632a:	28ff      	cmp	r0, #255	; 0xff
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 800632c:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006330:	d1ef      	bne.n	8006312 <protocol_main_loop+0x36>
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8006332:	f7fe f841 	bl	80043b8 <plan_get_current_block>
 8006336:	b110      	cbz	r0, 800633e <protocol_main_loop+0x62>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8006338:	2002      	movs	r0, #2
 800633a:	f003 fa1d 	bl	8009778 <system_set_exec_state_flag>
  protocol_exec_rt_system();
 800633e:	f7fe fe7d 	bl	800503c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006342:	78b3      	ldrb	r3, [r6, #2]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d14a      	bne.n	80063de <protocol_main_loop+0x102>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 8006348:	7873      	ldrb	r3, [r6, #1]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0dd      	beq.n	800630a <protocol_main_loop+0x2e>
 800634e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  protocol_exec_rt_system();
 8006352:	f7fe fe73 	bl	800503c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006356:	78b3      	ldrb	r3, [r6, #2]
 8006358:	bb63      	cbnz	r3, 80063b4 <protocol_main_loop+0xd8>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 800635a:	7877      	ldrb	r7, [r6, #1]
 800635c:	2f00      	cmp	r7, #0
 800635e:	d1f6      	bne.n	800634e <protocol_main_loop+0x72>
        line[char_counter] = 0; // Set string termination character.
 8006360:	f808 7005 	strb.w	r7, [r8, r5]
				LedBlink();
 8006364:	f7fd fa08 	bl	8003778 <LedBlink>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 8006368:	f014 0401 	ands.w	r4, r4, #1
 800636c:	d125      	bne.n	80063ba <protocol_main_loop+0xde>
        } else if (line[0] == 0) {
 800636e:	f898 0000 	ldrb.w	r0, [r8]
 8006372:	b378      	cbz	r0, 80063d4 <protocol_main_loop+0xf8>
        } else if (line[0] == '$') {
 8006374:	2824      	cmp	r0, #36	; 0x24
 8006376:	d039      	beq.n	80063ec <protocol_main_loop+0x110>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 8006378:	7833      	ldrb	r3, [r6, #0]
 800637a:	f013 0521 	ands.w	r5, r3, #33	; 0x21
 800637e:	d022      	beq.n	80063c6 <protocol_main_loop+0xea>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8006380:	2009      	movs	r0, #9
        char_counter = 0;
 8006382:	4625      	mov	r5, r4
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8006384:	f000 f864 	bl	8006450 <report_status_message>
 8006388:	e7bf      	b.n	800630a <protocol_main_loop+0x2e>
          if (c <= ' ') {
 800638a:	2820      	cmp	r0, #32
 800638c:	d9bd      	bls.n	800630a <protocol_main_loop+0x2e>
          } else if (c == '/') {
 800638e:	282f      	cmp	r0, #47	; 0x2f
 8006390:	d0bb      	beq.n	800630a <protocol_main_loop+0x2e>
          } else if (c == '(') {
 8006392:	2828      	cmp	r0, #40	; 0x28
 8006394:	d026      	beq.n	80063e4 <protocol_main_loop+0x108>
          } else if (c == ';') {
 8006396:	283b      	cmp	r0, #59	; 0x3b
 8006398:	d02f      	beq.n	80063fa <protocol_main_loop+0x11e>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 800639a:	2d4e      	cmp	r5, #78	; 0x4e
 800639c:	d824      	bhi.n	80063e8 <protocol_main_loop+0x10c>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 800639e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 80063a6:	bf98      	it	ls
 80063a8:	3820      	subls	r0, #32
            line[char_counter++] = c;
 80063aa:	1c6b      	adds	r3, r5, #1
 80063ac:	f808 0005 	strb.w	r0, [r8, r5]
 80063b0:	b2dd      	uxtb	r5, r3
 80063b2:	e7aa      	b.n	800630a <protocol_main_loop+0x2e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80063b4:	f7ff f82c 	bl	8005410 <protocol_exec_rt_suspend>
 80063b8:	e7cf      	b.n	800635a <protocol_main_loop+0x7e>
          report_status_message(STATUS_OVERFLOW);
 80063ba:	200b      	movs	r0, #11
        char_counter = 0;
 80063bc:	463d      	mov	r5, r7
        line_flags = 0;
 80063be:	463c      	mov	r4, r7
          report_status_message(STATUS_OVERFLOW);
 80063c0:	f000 f846 	bl	8006450 <report_status_message>
 80063c4:	e7a1      	b.n	800630a <protocol_main_loop+0x2e>
          report_status_message(gc_execute_line(line));
 80063c6:	4640      	mov	r0, r8
 80063c8:	f7fb fc84 	bl	8001cd4 <gc_execute_line>
 80063cc:	f000 f840 	bl	8006450 <report_status_message>
        line_flags = 0;
 80063d0:	462c      	mov	r4, r5
 80063d2:	e79a      	b.n	800630a <protocol_main_loop+0x2e>
        char_counter = 0;
 80063d4:	4605      	mov	r5, r0
          report_status_message(STATUS_OK);
 80063d6:	f000 f83b 	bl	8006450 <report_status_message>
        line_flags = 0;
 80063da:	462c      	mov	r4, r5
 80063dc:	e795      	b.n	800630a <protocol_main_loop+0x2e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80063de:	f7ff f817 	bl	8005410 <protocol_exec_rt_suspend>
 80063e2:	e7b1      	b.n	8006348 <protocol_main_loop+0x6c>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 80063e4:	2402      	movs	r4, #2
 80063e6:	e790      	b.n	800630a <protocol_main_loop+0x2e>
            line_flags |= LINE_FLAG_OVERFLOW;
 80063e8:	2401      	movs	r4, #1
 80063ea:	e78e      	b.n	800630a <protocol_main_loop+0x2e>
          report_status_message(system_execute_line(line));
 80063ec:	4640      	mov	r0, r8
        char_counter = 0;
 80063ee:	4625      	mov	r5, r4
          report_status_message(system_execute_line(line));
 80063f0:	f002 ffce 	bl	8009390 <system_execute_line>
 80063f4:	f000 f82c 	bl	8006450 <report_status_message>
 80063f8:	e787      	b.n	800630a <protocol_main_loop+0x2e>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 80063fa:	2404      	movs	r4, #4
 80063fc:	e785      	b.n	800630a <protocol_main_loop+0x2e>
    sys.state = STATE_IDLE;
 80063fe:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 8006400:	f002 ffa8 	bl	8009354 <system_check_safety_door_ajar>
 8006404:	b978      	cbnz	r0, 8006426 <protocol_main_loop+0x14a>
    system_execute_startup(line); // Execute startup script.
 8006406:	4810      	ldr	r0, [pc, #64]	; (8006448 <protocol_main_loop+0x16c>)
 8006408:	f002 ffa6 	bl	8009358 <system_execute_startup>
 800640c:	e779      	b.n	8006302 <protocol_main_loop+0x26>
      if (limits_get_state()) {
 800640e:	f7fc fe21 	bl	8003054 <limits_get_state>
 8006412:	2800      	cmp	r0, #0
 8006414:	f43f af6a 	beq.w	80062ec <protocol_main_loop+0x10>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8006418:	2301      	movs	r3, #1
 800641a:	4e0a      	ldr	r6, [pc, #40]	; (8006444 <protocol_main_loop+0x168>)
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 800641c:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 800641e:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8006420:	f000 f844 	bl	80064ac <report_feedback_message>
 8006424:	e763      	b.n	80062ee <protocol_main_loop+0x12>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8006426:	4a09      	ldr	r2, [pc, #36]	; (800644c <protocol_main_loop+0x170>)
 8006428:	7813      	ldrb	r3, [r2, #0]
 800642a:	f043 0320 	orr.w	r3, r3, #32
 800642e:	7013      	strb	r3, [r2, #0]
  protocol_exec_rt_system();
 8006430:	f7fe fe04 	bl	800503c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006434:	78b3      	ldrb	r3, [r6, #2]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0e5      	beq.n	8006406 <protocol_main_loop+0x12a>
 800643a:	f7fe ffe9 	bl	8005410 <protocol_exec_rt_suspend>
 800643e:	e7e2      	b.n	8006406 <protocol_main_loop+0x12a>
 8006440:	2000126c 	.word	0x2000126c
 8006444:	200010b0 	.word	0x200010b0
 8006448:	20000a08 	.word	0x20000a08
 800644c:	200010c5 	.word	0x200010c5

08006450 <report_status_message>:
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
  switch(status_code) {
 8006450:	b160      	cbz	r0, 800646c <report_status_message+0x1c>
{
 8006452:	b510      	push	{r4, lr}
 8006454:	4604      	mov	r4, r0
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
    default:
      printPgmString(PSTR("error:"));
 8006456:	4807      	ldr	r0, [pc, #28]	; (8006474 <report_status_message+0x24>)
 8006458:	f7fe fb2c 	bl	8004ab4 <printString>
      print_uint8_base10(status_code);
 800645c:	4620      	mov	r0, r4
 800645e:	f7fe fb35 	bl	8004acc <print_uint8_base10>
      report_util_line_feed();
  }
}
 8006462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006466:	4804      	ldr	r0, [pc, #16]	; (8006478 <report_status_message+0x28>)
 8006468:	f7fe bb24 	b.w	8004ab4 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 800646c:	4803      	ldr	r0, [pc, #12]	; (800647c <report_status_message+0x2c>)
 800646e:	f7fe bb21 	b.w	8004ab4 <printString>
 8006472:	bf00      	nop
 8006474:	0800c014 	.word	0x0800c014
 8006478:	0800c01c 	.word	0x0800c01c
 800647c:	0800c00c 	.word	0x0800c00c

08006480 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8006480:	b510      	push	{r4, lr}
 8006482:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 8006484:	4807      	ldr	r0, [pc, #28]	; (80064a4 <report_alarm_message+0x24>)
 8006486:	f7fe fb15 	bl	8004ab4 <printString>
  print_uint8_base10(alarm_code);
 800648a:	4620      	mov	r0, r4
 800648c:	f7fe fb1e 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006490:	4805      	ldr	r0, [pc, #20]	; (80064a8 <report_alarm_message+0x28>)
 8006492:	f7fe fb0f 	bl	8004ab4 <printString>
  report_util_line_feed();
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 8006496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 800649a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800649e:	f7fd bd6d 	b.w	8003f7c <delay_ms>
 80064a2:	bf00      	nop
 80064a4:	0800be08 	.word	0x0800be08
 80064a8:	0800c01c 	.word	0x0800c01c

080064ac <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 80064ac:	b510      	push	{r4, lr}
 80064ae:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 80064b0:	4820      	ldr	r0, [pc, #128]	; (8006534 <report_feedback_message+0x88>)
 80064b2:	f7fe faff 	bl	8004ab4 <printString>
  switch(message_code) {
 80064b6:	1e60      	subs	r0, r4, #1
 80064b8:	280a      	cmp	r0, #10
 80064ba:	d80a      	bhi.n	80064d2 <report_feedback_message+0x26>
 80064bc:	e8df f000 	tbb	[pc, r0]
 80064c0:	1d191511 	.word	0x1d191511
 80064c4:	2d292521 	.word	0x2d292521
 80064c8:	3531      	.short	0x3531
 80064ca:	06          	.byte	0x06
 80064cb:	00          	.byte	0x00
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 80064cc:	481a      	ldr	r0, [pc, #104]	; (8006538 <report_feedback_message+0x8c>)
 80064ce:	f7fe faf1 	bl	8004ab4 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80064d2:	205d      	movs	r0, #93	; 0x5d
 80064d4:	f000 ff6a 	bl	80073ac <serial_write>
  }
  report_util_feedback_line_feed();
}
 80064d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80064dc:	4817      	ldr	r0, [pc, #92]	; (800653c <report_feedback_message+0x90>)
 80064de:	f7fe bae9 	b.w	8004ab4 <printString>
      printPgmString(PSTR("Reset to continue")); break;
 80064e2:	4817      	ldr	r0, [pc, #92]	; (8006540 <report_feedback_message+0x94>)
 80064e4:	f7fe fae6 	bl	8004ab4 <printString>
 80064e8:	e7f3      	b.n	80064d2 <report_feedback_message+0x26>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 80064ea:	4816      	ldr	r0, [pc, #88]	; (8006544 <report_feedback_message+0x98>)
 80064ec:	f7fe fae2 	bl	8004ab4 <printString>
 80064f0:	e7ef      	b.n	80064d2 <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 80064f2:	4815      	ldr	r0, [pc, #84]	; (8006548 <report_feedback_message+0x9c>)
 80064f4:	f7fe fade 	bl	8004ab4 <printString>
 80064f8:	e7eb      	b.n	80064d2 <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 80064fa:	4814      	ldr	r0, [pc, #80]	; (800654c <report_feedback_message+0xa0>)
 80064fc:	f7fe fada 	bl	8004ab4 <printString>
 8006500:	e7e7      	b.n	80064d2 <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 8006502:	4813      	ldr	r0, [pc, #76]	; (8006550 <report_feedback_message+0xa4>)
 8006504:	f7fe fad6 	bl	8004ab4 <printString>
 8006508:	e7e3      	b.n	80064d2 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 800650a:	4812      	ldr	r0, [pc, #72]	; (8006554 <report_feedback_message+0xa8>)
 800650c:	f7fe fad2 	bl	8004ab4 <printString>
 8006510:	e7df      	b.n	80064d2 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 8006512:	4811      	ldr	r0, [pc, #68]	; (8006558 <report_feedback_message+0xac>)
 8006514:	f7fe face 	bl	8004ab4 <printString>
 8006518:	e7db      	b.n	80064d2 <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 800651a:	4810      	ldr	r0, [pc, #64]	; (800655c <report_feedback_message+0xb0>)
 800651c:	f7fe faca 	bl	8004ab4 <printString>
 8006520:	e7d7      	b.n	80064d2 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 8006522:	480f      	ldr	r0, [pc, #60]	; (8006560 <report_feedback_message+0xb4>)
 8006524:	f7fe fac6 	bl	8004ab4 <printString>
 8006528:	e7d3      	b.n	80064d2 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 800652a:	480e      	ldr	r0, [pc, #56]	; (8006564 <report_feedback_message+0xb8>)
 800652c:	f7fe fac2 	bl	8004ab4 <printString>
 8006530:	e7cf      	b.n	80064d2 <report_feedback_message+0x26>
 8006532:	bf00      	nop
 8006534:	0800be2c 	.word	0x0800be2c
 8006538:	0800bed0 	.word	0x0800bed0
 800653c:	0800c01c 	.word	0x0800c01c
 8006540:	0800be34 	.word	0x0800be34
 8006544:	0800be48 	.word	0x0800be48
 8006548:	0800be5c 	.word	0x0800be5c
 800654c:	0800be70 	.word	0x0800be70
 8006550:	0800be78 	.word	0x0800be78
 8006554:	0800be84 	.word	0x0800be84
 8006558:	0800be90 	.word	0x0800be90
 800655c:	0800bea0 	.word	0x0800bea0
 8006560:	0800bea8 	.word	0x0800bea8
 8006564:	0800bebc 	.word	0x0800bebc

08006568 <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 8006568:	4801      	ldr	r0, [pc, #4]	; (8006570 <report_init_message+0x8>)
 800656a:	f7fe baa3 	b.w	8004ab4 <printString>
 800656e:	bf00      	nop
 8006570:	0800bf48 	.word	0x0800bf48

08006574 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <report_grbl_help+0x8>)
 8006576:	f7fe ba9d 	b.w	8004ab4 <printString>
 800657a:	bf00      	nop
 800657c:	0800befc 	.word	0x0800befc

08006580 <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8006584:	4cc7      	ldr	r4, [pc, #796]	; (80068a4 <report_grbl_settings+0x324>)
void report_grbl_settings() {
 8006586:	b083      	sub	sp, #12
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006588:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(0,settings.pulse_microseconds);
 800658a:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800658e:	f000 ff0d 	bl	80073ac <serial_write>
 8006592:	2000      	movs	r0, #0
 8006594:	f7fe fa9a 	bl	8004acc <print_uint8_base10>
 8006598:	203d      	movs	r0, #61	; 0x3d
 800659a:	f000 ff07 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 800659e:	4628      	mov	r0, r5
 80065a0:	f7fe fa94 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80065a4:	48c0      	ldr	r0, [pc, #768]	; (80068a8 <report_grbl_settings+0x328>)
 80065a6:	f7fe fa85 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065aa:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 80065ac:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065b0:	f000 fefc 	bl	80073ac <serial_write>
 80065b4:	2001      	movs	r0, #1
 80065b6:	f7fe fa89 	bl	8004acc <print_uint8_base10>
 80065ba:	203d      	movs	r0, #61	; 0x3d
 80065bc:	f000 fef6 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 80065c0:	4628      	mov	r0, r5
 80065c2:	f7fe fa83 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80065c6:	48b8      	ldr	r0, [pc, #736]	; (80068a8 <report_grbl_settings+0x328>)
 80065c8:	f7fe fa74 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065cc:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(2,settings.step_invert_mask);
 80065ce:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065d2:	f000 feeb 	bl	80073ac <serial_write>
 80065d6:	2002      	movs	r0, #2
 80065d8:	f7fe fa78 	bl	8004acc <print_uint8_base10>
 80065dc:	203d      	movs	r0, #61	; 0x3d
 80065de:	f000 fee5 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 80065e2:	b2e8      	uxtb	r0, r5
 80065e4:	f7fe fa72 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80065e8:	48af      	ldr	r0, [pc, #700]	; (80068a8 <report_grbl_settings+0x328>)
 80065ea:	f7fe fa63 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065ee:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(3,settings.dir_invert_mask);
 80065f0:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80065f4:	f000 feda 	bl	80073ac <serial_write>
 80065f8:	2003      	movs	r0, #3
 80065fa:	f7fe fa67 	bl	8004acc <print_uint8_base10>
 80065fe:	203d      	movs	r0, #61	; 0x3d
 8006600:	f000 fed4 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 8006604:	b2e8      	uxtb	r0, r5
 8006606:	f7fe fa61 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800660a:	48a7      	ldr	r0, [pc, #668]	; (80068a8 <report_grbl_settings+0x328>)
 800660c:	f7fe fa52 	bl	8004ab4 <printString>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8006610:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006614:	2024      	movs	r0, #36	; 0x24
 8006616:	f000 fec9 	bl	80073ac <serial_write>
 800661a:	2004      	movs	r0, #4
 800661c:	f7fe fa56 	bl	8004acc <print_uint8_base10>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8006620:	f3c5 0580 	ubfx	r5, r5, #2, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006624:	203d      	movs	r0, #61	; 0x3d
 8006626:	f000 fec1 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 800662a:	4628      	mov	r0, r5
 800662c:	f7fe fa4e 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006630:	489d      	ldr	r0, [pc, #628]	; (80068a8 <report_grbl_settings+0x328>)
 8006632:	f7fe fa3f 	bl	8004ab4 <printString>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006636:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800663a:	2024      	movs	r0, #36	; 0x24
 800663c:	f000 feb6 	bl	80073ac <serial_write>
 8006640:	2005      	movs	r0, #5
 8006642:	f7fe fa43 	bl	8004acc <print_uint8_base10>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006646:	f3c5 1580 	ubfx	r5, r5, #6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800664a:	203d      	movs	r0, #61	; 0x3d
 800664c:	f000 feae 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 8006650:	4628      	mov	r0, r5
 8006652:	f7fe fa3b 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006656:	4894      	ldr	r0, [pc, #592]	; (80068a8 <report_grbl_settings+0x328>)
 8006658:	f7fe fa2c 	bl	8004ab4 <printString>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 800665c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006660:	2024      	movs	r0, #36	; 0x24
 8006662:	f000 fea3 	bl	80073ac <serial_write>
 8006666:	2006      	movs	r0, #6
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8006668:	09ed      	lsrs	r5, r5, #7
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800666a:	f7fe fa2f 	bl	8004acc <print_uint8_base10>
 800666e:	203d      	movs	r0, #61	; 0x3d
 8006670:	f000 fe9c 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 8006674:	4628      	mov	r0, r5
 8006676:	f7fe fa29 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800667a:	488b      	ldr	r0, [pc, #556]	; (80068a8 <report_grbl_settings+0x328>)
 800667c:	f7fe fa1a 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006680:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(10,settings.status_report_mask);
 8006682:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006686:	f000 fe91 	bl	80073ac <serial_write>
 800668a:	200a      	movs	r0, #10
 800668c:	f7fe fa1e 	bl	8004acc <print_uint8_base10>
 8006690:	203d      	movs	r0, #61	; 0x3d
 8006692:	f000 fe8b 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 8006696:	4628      	mov	r0, r5
 8006698:	f7fe fa18 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800669c:	4882      	ldr	r0, [pc, #520]	; (80068a8 <report_grbl_settings+0x328>)
 800669e:	f7fe fa09 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066a2:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 80066a4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066a6:	f000 fe81 	bl	80073ac <serial_write>
 80066aa:	200b      	movs	r0, #11
 80066ac:	f7fe fa0e 	bl	8004acc <print_uint8_base10>
 80066b0:	203d      	movs	r0, #61	; 0x3d
 80066b2:	f000 fe7b 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 80066b6:	2103      	movs	r1, #3
 80066b8:	4628      	mov	r0, r5
 80066ba:	f7fe fa49 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80066be:	487a      	ldr	r0, [pc, #488]	; (80068a8 <report_grbl_settings+0x328>)
 80066c0:	f7fe f9f8 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066c4:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 80066c6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066c8:	f000 fe70 	bl	80073ac <serial_write>
 80066cc:	200c      	movs	r0, #12
 80066ce:	f7fe f9fd 	bl	8004acc <print_uint8_base10>
 80066d2:	203d      	movs	r0, #61	; 0x3d
 80066d4:	f000 fe6a 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 80066d8:	2103      	movs	r1, #3
 80066da:	4628      	mov	r0, r5
 80066dc:	f7fe fa38 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80066e0:	4871      	ldr	r0, [pc, #452]	; (80068a8 <report_grbl_settings+0x328>)
 80066e2:	f7fe f9e7 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066e6:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 80066e8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066ec:	f000 fe5e 	bl	80073ac <serial_write>
 80066f0:	200d      	movs	r0, #13
 80066f2:	f7fe f9eb 	bl	8004acc <print_uint8_base10>
 80066f6:	203d      	movs	r0, #61	; 0x3d
 80066f8:	f000 fe58 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 80066fc:	f005 0001 	and.w	r0, r5, #1
 8006700:	f7fe f9e4 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006704:	4868      	ldr	r0, [pc, #416]	; (80068a8 <report_grbl_settings+0x328>)
 8006706:	f7fe f9d5 	bl	8004ab4 <printString>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 800670a:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800670e:	2024      	movs	r0, #36	; 0x24
 8006710:	f000 fe4c 	bl	80073ac <serial_write>
 8006714:	2014      	movs	r0, #20
 8006716:	f7fe f9d9 	bl	8004acc <print_uint8_base10>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 800671a:	f3c5 1540 	ubfx	r5, r5, #5, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800671e:	203d      	movs	r0, #61	; 0x3d
 8006720:	f000 fe44 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 8006724:	4628      	mov	r0, r5
 8006726:	f7fe f9d1 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800672a:	485f      	ldr	r0, [pc, #380]	; (80068a8 <report_grbl_settings+0x328>)
 800672c:	f7fe f9c2 	bl	8004ab4 <printString>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006730:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006734:	2024      	movs	r0, #36	; 0x24
 8006736:	f000 fe39 	bl	80073ac <serial_write>
 800673a:	2015      	movs	r0, #21
 800673c:	f7fe f9c6 	bl	8004acc <print_uint8_base10>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006740:	f3c5 05c0 	ubfx	r5, r5, #3, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006744:	203d      	movs	r0, #61	; 0x3d
 8006746:	f000 fe31 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 800674a:	4628      	mov	r0, r5
 800674c:	f7fe f9be 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006750:	4855      	ldr	r0, [pc, #340]	; (80068a8 <report_grbl_settings+0x328>)
 8006752:	f7fe f9af 	bl	8004ab4 <printString>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006756:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800675a:	2024      	movs	r0, #36	; 0x24
 800675c:	f000 fe26 	bl	80073ac <serial_write>
 8006760:	2016      	movs	r0, #22
 8006762:	f7fe f9b3 	bl	8004acc <print_uint8_base10>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006766:	f3c5 1500 	ubfx	r5, r5, #4, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800676a:	203d      	movs	r0, #61	; 0x3d
 800676c:	f000 fe1e 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 8006770:	4628      	mov	r0, r5
 8006772:	f7fe f9ab 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006776:	484c      	ldr	r0, [pc, #304]	; (80068a8 <report_grbl_settings+0x328>)
 8006778:	f7fe f99c 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800677c:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(23,settings.homing_dir_mask);
 800677e:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006782:	f000 fe13 	bl	80073ac <serial_write>
 8006786:	2017      	movs	r0, #23
 8006788:	f7fe f9a0 	bl	8004acc <print_uint8_base10>
 800678c:	203d      	movs	r0, #61	; 0x3d
 800678e:	f000 fe0d 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 8006792:	b2e8      	uxtb	r0, r5
 8006794:	f7fe f99a 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006798:	4843      	ldr	r0, [pc, #268]	; (80068a8 <report_grbl_settings+0x328>)
 800679a:	f7fe f98b 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800679e:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 80067a0:	6de5      	ldr	r5, [r4, #92]	; 0x5c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067a2:	f000 fe03 	bl	80073ac <serial_write>
 80067a6:	2018      	movs	r0, #24
 80067a8:	f7fe f990 	bl	8004acc <print_uint8_base10>
 80067ac:	203d      	movs	r0, #61	; 0x3d
 80067ae:	f000 fdfd 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 80067b2:	2103      	movs	r1, #3
 80067b4:	4628      	mov	r0, r5
 80067b6:	f7fe f9cb 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067ba:	483b      	ldr	r0, [pc, #236]	; (80068a8 <report_grbl_settings+0x328>)
 80067bc:	f7fe f97a 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067c0:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 80067c2:	6e25      	ldr	r5, [r4, #96]	; 0x60
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067c4:	f000 fdf2 	bl	80073ac <serial_write>
 80067c8:	2019      	movs	r0, #25
 80067ca:	f7fe f97f 	bl	8004acc <print_uint8_base10>
 80067ce:	203d      	movs	r0, #61	; 0x3d
 80067d0:	f000 fdec 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 80067d4:	2103      	movs	r1, #3
 80067d6:	4628      	mov	r0, r5
 80067d8:	f7fe f9ba 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067dc:	4832      	ldr	r0, [pc, #200]	; (80068a8 <report_grbl_settings+0x328>)
 80067de:	f7fe f969 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067e2:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 80067e4:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067e8:	f000 fde0 	bl	80073ac <serial_write>
 80067ec:	201a      	movs	r0, #26
 80067ee:	f7fe f96d 	bl	8004acc <print_uint8_base10>
 80067f2:	203d      	movs	r0, #61	; 0x3d
 80067f4:	f000 fdda 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 80067f8:	b2e8      	uxtb	r0, r5
 80067fa:	f7fe f967 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067fe:	482a      	ldr	r0, [pc, #168]	; (80068a8 <report_grbl_settings+0x328>)
 8006800:	f7fe f958 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006804:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8006806:	6ea5      	ldr	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006808:	f000 fdd0 	bl	80073ac <serial_write>
 800680c:	201b      	movs	r0, #27
 800680e:	f7fe f95d 	bl	8004acc <print_uint8_base10>
 8006812:	203d      	movs	r0, #61	; 0x3d
 8006814:	f000 fdca 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006818:	2103      	movs	r1, #3
 800681a:	4628      	mov	r0, r5
 800681c:	f7fe f998 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006820:	4821      	ldr	r0, [pc, #132]	; (80068a8 <report_grbl_settings+0x328>)
 8006822:	f7fe f947 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006826:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8006828:	6d25      	ldr	r5, [r4, #80]	; 0x50
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800682a:	f000 fdbf 	bl	80073ac <serial_write>
 800682e:	201e      	movs	r0, #30
 8006830:	f7fe f94c 	bl	8004acc <print_uint8_base10>
 8006834:	203d      	movs	r0, #61	; 0x3d
 8006836:	f000 fdb9 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 800683a:	2100      	movs	r1, #0
 800683c:	4628      	mov	r0, r5
 800683e:	f7fe f987 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006842:	4819      	ldr	r0, [pc, #100]	; (80068a8 <report_grbl_settings+0x328>)
 8006844:	f7fe f936 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006848:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 800684a:	6d65      	ldr	r5, [r4, #84]	; 0x54
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800684c:	f000 fdae 	bl	80073ac <serial_write>
 8006850:	201f      	movs	r0, #31
 8006852:	f7fe f93b 	bl	8004acc <print_uint8_base10>
 8006856:	203d      	movs	r0, #61	; 0x3d
 8006858:	f000 fda8 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 800685c:	2100      	movs	r1, #0
 800685e:	4628      	mov	r0, r5
 8006860:	f7fe f976 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006864:	4810      	ldr	r0, [pc, #64]	; (80068a8 <report_grbl_settings+0x328>)
 8006866:	f7fe f925 	bl	8004ab4 <printString>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 800686a:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800686e:	2024      	movs	r0, #36	; 0x24
 8006870:	f000 fd9c 	bl	80073ac <serial_write>
 8006874:	2020      	movs	r0, #32
 8006876:	f7fe f929 	bl	8004acc <print_uint8_base10>
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 800687a:	f3c5 0540 	ubfx	r5, r5, #1, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800687e:	203d      	movs	r0, #61	; 0x3d
 8006880:	f000 fd94 	bl	80073ac <serial_write>
  print_uint8_base10(val);
 8006884:	4628      	mov	r0, r5
 8006886:	f7fe f921 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800688a:	4807      	ldr	r0, [pc, #28]	; (80068a8 <report_grbl_settings+0x328>)
 800688c:	f7fe f912 	bl	8004ab4 <printString>
 8006890:	f04f 0965 	mov.w	r9, #101	; 0x65
 8006894:	f04f 0866 	mov.w	r8, #102	; 0x66
 8006898:	2667      	movs	r6, #103	; 0x67
 800689a:	2701      	movs	r7, #1
 800689c:	f8df a008 	ldr.w	sl, [pc, #8]	; 80068a8 <report_grbl_settings+0x328>
 80068a0:	e004      	b.n	80068ac <report_grbl_settings+0x32c>
 80068a2:	bf00      	nop
 80068a4:	2000126c 	.word	0x2000126c
 80068a8:	0800c01c 	.word	0x0800c01c
 80068ac:	1e7d      	subs	r5, r7, #1
 80068ae:	b2ed      	uxtb	r5, r5
 80068b0:	1ef3      	subs	r3, r6, #3
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
 80068b2:	2d02      	cmp	r5, #2
 80068b4:	fa5f fb83 	uxtb.w	fp, r3
 80068b8:	d075      	beq.n	80069a6 <report_grbl_settings+0x426>
 80068ba:	2d03      	cmp	r5, #3
 80068bc:	f000 80fe 	beq.w	8006abc <report_grbl_settings+0x53c>
 80068c0:	2d01      	cmp	r5, #1
 80068c2:	f000 80c5 	beq.w	8006a50 <report_grbl_settings+0x4d0>
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 80068c6:	6822      	ldr	r2, [r4, #0]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068c8:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 80068ca:	9201      	str	r2, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068cc:	f000 fd6e 	bl	80073ac <serial_write>
 80068d0:	4658      	mov	r0, fp
 80068d2:	f7fe f8fb 	bl	8004acc <print_uint8_base10>
 80068d6:	203d      	movs	r0, #61	; 0x3d
 80068d8:	f000 fd68 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 80068dc:	9a01      	ldr	r2, [sp, #4]
 80068de:	2103      	movs	r1, #3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7fe f935 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80068e6:	4650      	mov	r0, sl
 80068e8:	f7fe f8e4 	bl	8004ab4 <printString>
      switch (set_idx) {
 80068ec:	2d02      	cmp	r5, #2
 80068ee:	d06f      	beq.n	80069d0 <report_grbl_settings+0x450>
 80068f0:	2d03      	cmp	r5, #3
 80068f2:	f000 80f6 	beq.w	8006ae2 <report_grbl_settings+0x562>
 80068f6:	2d01      	cmp	r5, #1
 80068f8:	f000 80bb 	beq.w	8006a72 <report_grbl_settings+0x4f2>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068fc:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 80068fe:	f8d4 b004 	ldr.w	fp, [r4, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006902:	f000 fd53 	bl	80073ac <serial_write>
 8006906:	4648      	mov	r0, r9
 8006908:	f7fe f8e0 	bl	8004acc <print_uint8_base10>
 800690c:	203d      	movs	r0, #61	; 0x3d
 800690e:	f000 fd4d 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006912:	4658      	mov	r0, fp
 8006914:	2103      	movs	r1, #3
 8006916:	f7fe f91b 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800691a:	4650      	mov	r0, sl
 800691c:	f7fe f8ca 	bl	8004ab4 <printString>
      switch (set_idx) {
 8006920:	2d02      	cmp	r5, #2
 8006922:	d06a      	beq.n	80069fa <report_grbl_settings+0x47a>
 8006924:	2d03      	cmp	r5, #3
 8006926:	f000 80f0 	beq.w	8006b0a <report_grbl_settings+0x58a>
 800692a:	2d01      	cmp	r5, #1
 800692c:	f000 80b2 	beq.w	8006a94 <report_grbl_settings+0x514>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006930:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006932:	f8d4 b008 	ldr.w	fp, [r4, #8]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006936:	f000 fd39 	bl	80073ac <serial_write>
 800693a:	4640      	mov	r0, r8
 800693c:	f7fe f8c6 	bl	8004acc <print_uint8_base10>
 8006940:	203d      	movs	r0, #61	; 0x3d
 8006942:	f000 fd33 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006946:	4658      	mov	r0, fp
 8006948:	2103      	movs	r1, #3
 800694a:	f7fe f901 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800694e:	4650      	mov	r0, sl
 8006950:	f7fe f8b0 	bl	8004ab4 <printString>
      switch (set_idx) {
 8006954:	2d02      	cmp	r5, #2
 8006956:	d065      	beq.n	8006a24 <report_grbl_settings+0x4a4>
 8006958:	2d03      	cmp	r5, #3
 800695a:	f000 80ea 	beq.w	8006b32 <report_grbl_settings+0x5b2>
 800695e:	2d01      	cmp	r5, #1
 8006960:	f000 80a9 	beq.w	8006ab6 <report_grbl_settings+0x536>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006964:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006966:	68e5      	ldr	r5, [r4, #12]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006968:	f000 fd20 	bl	80073ac <serial_write>
 800696c:	4630      	mov	r0, r6
 800696e:	f7fe f8ad 	bl	8004acc <print_uint8_base10>
 8006972:	203d      	movs	r0, #61	; 0x3d
 8006974:	f000 fd1a 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006978:	4628      	mov	r0, r5
 800697a:	2103      	movs	r1, #3
 800697c:	f7fe f8e8 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006980:	4650      	mov	r0, sl
 8006982:	f7fe f897 	bl	8004ab4 <printString>
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006986:	2f04      	cmp	r7, #4
 8006988:	f000 80e9 	beq.w	8006b5e <report_grbl_settings+0x5de>
 800698c:	3701      	adds	r7, #1
 800698e:	360a      	adds	r6, #10
 8006990:	f108 080a 	add.w	r8, r8, #10
 8006994:	f109 090a 	add.w	r9, r9, #10
 8006998:	b2ff      	uxtb	r7, r7
 800699a:	b2f6      	uxtb	r6, r6
 800699c:	fa5f f888 	uxtb.w	r8, r8
 80069a0:	fa5f f989 	uxtb.w	r9, r9
 80069a4:	e782      	b.n	80068ac <report_grbl_settings+0x32c>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 80069a6:	496f      	ldr	r1, [pc, #444]	; (8006b64 <report_grbl_settings+0x5e4>)
 80069a8:	6a20      	ldr	r0, [r4, #32]
 80069aa:	f7fa f981 	bl	8000cb0 <__aeabi_fmul>
 80069ae:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069b0:	2024      	movs	r0, #36	; 0x24
 80069b2:	f000 fcfb 	bl	80073ac <serial_write>
 80069b6:	4658      	mov	r0, fp
 80069b8:	f7fe f888 	bl	8004acc <print_uint8_base10>
 80069bc:	203d      	movs	r0, #61	; 0x3d
 80069be:	f000 fcf5 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 80069c2:	4628      	mov	r0, r5
 80069c4:	2103      	movs	r1, #3
 80069c6:	f7fe f8c3 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069ca:	4650      	mov	r0, sl
 80069cc:	f7fe f872 	bl	8004ab4 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 80069d0:	4964      	ldr	r1, [pc, #400]	; (8006b64 <report_grbl_settings+0x5e4>)
 80069d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80069d4:	f7fa f96c 	bl	8000cb0 <__aeabi_fmul>
 80069d8:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069da:	2024      	movs	r0, #36	; 0x24
 80069dc:	f000 fce6 	bl	80073ac <serial_write>
 80069e0:	4648      	mov	r0, r9
 80069e2:	f7fe f873 	bl	8004acc <print_uint8_base10>
 80069e6:	203d      	movs	r0, #61	; 0x3d
 80069e8:	f000 fce0 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 80069ec:	4628      	mov	r0, r5
 80069ee:	2103      	movs	r1, #3
 80069f0:	f7fe f8ae 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069f4:	4650      	mov	r0, sl
 80069f6:	f7fe f85d 	bl	8004ab4 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 80069fa:	495a      	ldr	r1, [pc, #360]	; (8006b64 <report_grbl_settings+0x5e4>)
 80069fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80069fe:	f7fa f957 	bl	8000cb0 <__aeabi_fmul>
 8006a02:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a04:	2024      	movs	r0, #36	; 0x24
 8006a06:	f000 fcd1 	bl	80073ac <serial_write>
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	f7fe f85e 	bl	8004acc <print_uint8_base10>
 8006a10:	203d      	movs	r0, #61	; 0x3d
 8006a12:	f000 fccb 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006a16:	4628      	mov	r0, r5
 8006a18:	2103      	movs	r1, #3
 8006a1a:	f7fe f899 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a1e:	4650      	mov	r0, sl
 8006a20:	f7fe f848 	bl	8004ab4 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006a24:	494f      	ldr	r1, [pc, #316]	; (8006b64 <report_grbl_settings+0x5e4>)
 8006a26:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006a28:	f7fa f942 	bl	8000cb0 <__aeabi_fmul>
 8006a2c:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a2e:	2024      	movs	r0, #36	; 0x24
 8006a30:	f000 fcbc 	bl	80073ac <serial_write>
 8006a34:	4630      	mov	r0, r6
 8006a36:	f7fe f849 	bl	8004acc <print_uint8_base10>
 8006a3a:	203d      	movs	r0, #61	; 0x3d
 8006a3c:	f000 fcb6 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006a40:	4628      	mov	r0, r5
 8006a42:	2103      	movs	r1, #3
 8006a44:	f7fe f884 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a48:	4650      	mov	r0, sl
 8006a4a:	f7fe f833 	bl	8004ab4 <printString>
 8006a4e:	e79d      	b.n	800698c <report_grbl_settings+0x40c>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a50:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a52:	6925      	ldr	r5, [r4, #16]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a54:	f000 fcaa 	bl	80073ac <serial_write>
 8006a58:	4658      	mov	r0, fp
 8006a5a:	f7fe f837 	bl	8004acc <print_uint8_base10>
 8006a5e:	203d      	movs	r0, #61	; 0x3d
 8006a60:	f000 fca4 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006a64:	4628      	mov	r0, r5
 8006a66:	2103      	movs	r1, #3
 8006a68:	f7fe f872 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	f7fe f821 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a72:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a74:	6965      	ldr	r5, [r4, #20]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a76:	f000 fc99 	bl	80073ac <serial_write>
 8006a7a:	4648      	mov	r0, r9
 8006a7c:	f7fe f826 	bl	8004acc <print_uint8_base10>
 8006a80:	203d      	movs	r0, #61	; 0x3d
 8006a82:	f000 fc93 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006a86:	4628      	mov	r0, r5
 8006a88:	2103      	movs	r1, #3
 8006a8a:	f7fe f861 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a8e:	4650      	mov	r0, sl
 8006a90:	f7fe f810 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a94:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006a96:	69a5      	ldr	r5, [r4, #24]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a98:	f000 fc88 	bl	80073ac <serial_write>
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	f7fe f815 	bl	8004acc <print_uint8_base10>
 8006aa2:	203d      	movs	r0, #61	; 0x3d
 8006aa4:	f000 fc82 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	2103      	movs	r1, #3
 8006aac:	f7fe f850 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ab0:	4650      	mov	r0, sl
 8006ab2:	f7fd ffff 	bl	8004ab4 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ab6:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006ab8:	69e5      	ldr	r5, [r4, #28]
 8006aba:	e7b9      	b.n	8006a30 <report_grbl_settings+0x4b0>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006abc:	6b22      	ldr	r2, [r4, #48]	; 0x30
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006abe:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006ac0:	f102 4700 	add.w	r7, r2, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ac4:	f000 fc72 	bl	80073ac <serial_write>
 8006ac8:	4658      	mov	r0, fp
 8006aca:	f7fd ffff 	bl	8004acc <print_uint8_base10>
 8006ace:	203d      	movs	r0, #61	; 0x3d
 8006ad0:	f000 fc6c 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	f7fe f83a 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006adc:	4822      	ldr	r0, [pc, #136]	; (8006b68 <report_grbl_settings+0x5e8>)
 8006ade:	f7fd ffe9 	bl	8004ab4 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ae4:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006ae6:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006aea:	f000 fc5f 	bl	80073ac <serial_write>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006aee:	1eb0      	subs	r0, r6, #2
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006af0:	b2c0      	uxtb	r0, r0
 8006af2:	f7fd ffeb 	bl	8004acc <print_uint8_base10>
 8006af6:	203d      	movs	r0, #61	; 0x3d
 8006af8:	f000 fc58 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006afc:	4628      	mov	r0, r5
 8006afe:	2103      	movs	r1, #3
 8006b00:	f7fe f826 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b04:	4818      	ldr	r0, [pc, #96]	; (8006b68 <report_grbl_settings+0x5e8>)
 8006b06:	f7fd ffd5 	bl	8004ab4 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006b0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b0c:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006b0e:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b12:	f000 fc4b 	bl	80073ac <serial_write>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006b16:	1e70      	subs	r0, r6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b18:	b2c0      	uxtb	r0, r0
 8006b1a:	f7fd ffd7 	bl	8004acc <print_uint8_base10>
 8006b1e:	203d      	movs	r0, #61	; 0x3d
 8006b20:	f000 fc44 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006b24:	4628      	mov	r0, r5
 8006b26:	2103      	movs	r1, #3
 8006b28:	f7fe f812 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b2c:	480e      	ldr	r0, [pc, #56]	; (8006b68 <report_grbl_settings+0x5e8>)
 8006b2e:	f7fd ffc1 	bl	8004ab4 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006b32:	6be4      	ldr	r4, [r4, #60]	; 0x3c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b34:	2024      	movs	r0, #36	; 0x24
 8006b36:	f000 fc39 	bl	80073ac <serial_write>
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f7fd ffc6 	bl	8004acc <print_uint8_base10>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006b40:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b44:	203d      	movs	r0, #61	; 0x3d
 8006b46:	f000 fc31 	bl	80073ac <serial_write>
  printFloat(val, n_decimal);
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	2103      	movs	r1, #3
 8006b4e:	f7fd ffff 	bl	8004b50 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b52:	4805      	ldr	r0, [pc, #20]	; (8006b68 <report_grbl_settings+0x5e8>)
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
  }
}
 8006b54:	b003      	add	sp, #12
 8006b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b5a:	f7fd bfab 	b.w	8004ab4 <printString>
}
 8006b5e:	b003      	add	sp, #12
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	3991a2b4 	.word	0x3991a2b4
 8006b68:	0800c01c 	.word	0x0800c01c

08006b6c <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8006b6c:	b500      	push	{lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8006b6e:	4816      	ldr	r0, [pc, #88]	; (8006bc8 <report_probe_parameters+0x5c>)
{
 8006b70:	b085      	sub	sp, #20
  printPgmString(PSTR("[PRB:"));
 8006b72:	f7fd ff9f 	bl	8004ab4 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006b76:	4915      	ldr	r1, [pc, #84]	; (8006bcc <report_probe_parameters+0x60>)
 8006b78:	4668      	mov	r0, sp
 8006b7a:	f002 fd9d 	bl	80096b8 <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006b7e:	9800      	ldr	r0, [sp, #0]
 8006b80:	f7fe f858 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b84:	202c      	movs	r0, #44	; 0x2c
 8006b86:	f000 fc11 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b8a:	9801      	ldr	r0, [sp, #4]
 8006b8c:	f7fe f852 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b90:	202c      	movs	r0, #44	; 0x2c
 8006b92:	f000 fc0b 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b96:	9802      	ldr	r0, [sp, #8]
 8006b98:	f7fe f84c 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b9c:	202c      	movs	r0, #44	; 0x2c
 8006b9e:	f000 fc05 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006ba2:	9803      	ldr	r0, [sp, #12]
 8006ba4:	f7fe f846 	bl	8004c34 <printFloat_CoordValue>
  report_util_axis_values(print_position);
  serial_write(':');
 8006ba8:	203a      	movs	r0, #58	; 0x3a
 8006baa:	f000 fbff 	bl	80073ac <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006bae:	4b08      	ldr	r3, [pc, #32]	; (8006bd0 <report_probe_parameters+0x64>)
 8006bb0:	7958      	ldrb	r0, [r3, #5]
 8006bb2:	f7fd ff8b 	bl	8004acc <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006bb6:	205d      	movs	r0, #93	; 0x5d
 8006bb8:	f000 fbf8 	bl	80073ac <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006bbc:	4805      	ldr	r0, [pc, #20]	; (8006bd4 <report_probe_parameters+0x68>)
 8006bbe:	f7fd ff79 	bl	8004ab4 <printString>
  report_util_feedback_line_feed();
}
 8006bc2:	b005      	add	sp, #20
 8006bc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bc8:	0800bf84 	.word	0x0800bf84
 8006bcc:	200010c8 	.word	0x200010c8
 8006bd0:	200010b0 	.word	0x200010b0
 8006bd4:	0800c01c 	.word	0x0800c01c

08006bd8 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8006bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bdc:	2400      	movs	r4, #0
 8006bde:	b088      	sub	sp, #32
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 8006be0:	4e51      	ldr	r6, [pc, #324]	; (8006d28 <report_ngc_parameters+0x150>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 8006be2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8006d50 <report_ngc_parameters+0x178>
      case 7: printPgmString(PSTR("30")); break;
 8006be6:	4f51      	ldr	r7, [pc, #324]	; (8006d2c <report_ngc_parameters+0x154>)
 8006be8:	e025      	b.n	8006c36 <report_ngc_parameters+0x5e>
    switch (coord_select) {
 8006bea:	2d07      	cmp	r5, #7
 8006bec:	d133      	bne.n	8006c56 <report_ngc_parameters+0x7e>
      case 7: printPgmString(PSTR("30")); break;
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f7fd ff60 	bl	8004ab4 <printString>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
    }
    serial_write(':');
 8006bf4:	203a      	movs	r0, #58	; 0x3a
 8006bf6:	f000 fbd9 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006bfa:	9800      	ldr	r0, [sp, #0]
 8006bfc:	f7fe f81a 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c00:	202c      	movs	r0, #44	; 0x2c
 8006c02:	f000 fbd3 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c06:	9801      	ldr	r0, [sp, #4]
 8006c08:	f7fe f814 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c0c:	202c      	movs	r0, #44	; 0x2c
 8006c0e:	f000 fbcd 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c12:	9802      	ldr	r0, [sp, #8]
 8006c14:	f7fe f80e 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c18:	202c      	movs	r0, #44	; 0x2c
 8006c1a:	f000 fbc7 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c1e:	9803      	ldr	r0, [sp, #12]
 8006c20:	f7fe f808 	bl	8004c34 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006c24:	205d      	movs	r0, #93	; 0x5d
 8006c26:	f000 fbc1 	bl	80073ac <serial_write>
 8006c2a:	3401      	adds	r4, #1
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c2c:	4840      	ldr	r0, [pc, #256]	; (8006d30 <report_ngc_parameters+0x158>)
 8006c2e:	f7fd ff41 	bl	8004ab4 <printString>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006c32:	2c08      	cmp	r4, #8
 8006c34:	d015      	beq.n	8006c62 <report_ngc_parameters+0x8a>
 8006c36:	b2e5      	uxtb	r5, r4
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006c38:	4628      	mov	r0, r5
 8006c3a:	4669      	mov	r1, sp
 8006c3c:	f000 fdc4 	bl	80077c8 <settings_read_coord_data>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d065      	beq.n	8006d10 <report_ngc_parameters+0x138>
    printPgmString(PSTR("[G"));
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7fd ff35 	bl	8004ab4 <printString>
    switch (coord_select) {
 8006c4a:	2d06      	cmp	r5, #6
 8006c4c:	d1cd      	bne.n	8006bea <report_ngc_parameters+0x12>
      case 6: printPgmString(PSTR("28")); break;
 8006c4e:	4640      	mov	r0, r8
 8006c50:	f7fd ff30 	bl	8004ab4 <printString>
 8006c54:	e7ce      	b.n	8006bf4 <report_ngc_parameters+0x1c>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8006c56:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8006c5a:	b2c0      	uxtb	r0, r0
 8006c5c:	f7fd ff36 	bl	8004acc <print_uint8_base10>
 8006c60:	e7c8      	b.n	8006bf4 <report_ngc_parameters+0x1c>
    printFloat_CoordValue(axis_value[idx]);
 8006c62:	4c34      	ldr	r4, [pc, #208]	; (8006d34 <report_ngc_parameters+0x15c>)
    report_util_axis_values(coord_data);
    report_util_feedback_line_feed();
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006c64:	4834      	ldr	r0, [pc, #208]	; (8006d38 <report_ngc_parameters+0x160>)
 8006c66:	f7fd ff25 	bl	8004ab4 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8006c6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006c6c:	f7fd ffe2 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c70:	202c      	movs	r0, #44	; 0x2c
 8006c72:	f000 fb9b 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c76:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006c78:	f7fd ffdc 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c7c:	202c      	movs	r0, #44	; 0x2c
 8006c7e:	f000 fb95 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c82:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006c84:	f7fd ffd6 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006c88:	202c      	movs	r0, #44	; 0x2c
 8006c8a:	f000 fb8f 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006c8e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006c90:	f7fd ffd0 	bl	8004c34 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006c94:	205d      	movs	r0, #93	; 0x5d
 8006c96:	f000 fb89 	bl	80073ac <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c9a:	4825      	ldr	r0, [pc, #148]	; (8006d30 <report_ngc_parameters+0x158>)
 8006c9c:	f7fd ff0a 	bl	8004ab4 <printString>
  report_util_axis_values(gc_state.coord_offset);
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8006ca0:	4826      	ldr	r0, [pc, #152]	; (8006d3c <report_ngc_parameters+0x164>)
 8006ca2:	f7fd ff07 	bl	8004ab4 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8006ca6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006ca8:	f7fd ffc4 	bl	8004c34 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006cac:	205d      	movs	r0, #93	; 0x5d
 8006cae:	f000 fb7d 	bl	80073ac <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006cb2:	481f      	ldr	r0, [pc, #124]	; (8006d30 <report_ngc_parameters+0x158>)
 8006cb4:	f7fd fefe 	bl	8004ab4 <printString>
  printPgmString(PSTR("[PRB:"));
 8006cb8:	4821      	ldr	r0, [pc, #132]	; (8006d40 <report_ngc_parameters+0x168>)
 8006cba:	f7fd fefb 	bl	8004ab4 <printString>
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006cbe:	4921      	ldr	r1, [pc, #132]	; (8006d44 <report_ngc_parameters+0x16c>)
 8006cc0:	a804      	add	r0, sp, #16
 8006cc2:	f002 fcf9 	bl	80096b8 <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006cc6:	9804      	ldr	r0, [sp, #16]
 8006cc8:	f7fd ffb4 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006ccc:	202c      	movs	r0, #44	; 0x2c
 8006cce:	f000 fb6d 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006cd2:	9805      	ldr	r0, [sp, #20]
 8006cd4:	f7fd ffae 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006cd8:	202c      	movs	r0, #44	; 0x2c
 8006cda:	f000 fb67 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006cde:	9806      	ldr	r0, [sp, #24]
 8006ce0:	f7fd ffa8 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006ce4:	202c      	movs	r0, #44	; 0x2c
 8006ce6:	f000 fb61 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006cea:	9807      	ldr	r0, [sp, #28]
 8006cec:	f7fd ffa2 	bl	8004c34 <printFloat_CoordValue>
  serial_write(':');
 8006cf0:	203a      	movs	r0, #58	; 0x3a
 8006cf2:	f000 fb5b 	bl	80073ac <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <report_ngc_parameters+0x170>)
 8006cf8:	7958      	ldrb	r0, [r3, #5]
 8006cfa:	f7fd fee7 	bl	8004acc <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006cfe:	205d      	movs	r0, #93	; 0x5d
 8006d00:	f000 fb54 	bl	80073ac <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d04:	480a      	ldr	r0, [pc, #40]	; (8006d30 <report_ngc_parameters+0x158>)
 8006d06:	f7fd fed5 	bl	8004ab4 <printString>
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8006d0a:	b008      	add	sp, #32
 8006d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      printPgmString(PSTR("error:"));
 8006d10:	480e      	ldr	r0, [pc, #56]	; (8006d4c <report_ngc_parameters+0x174>)
 8006d12:	f7fd fecf 	bl	8004ab4 <printString>
      print_uint8_base10(status_code);
 8006d16:	2007      	movs	r0, #7
 8006d18:	f7fd fed8 	bl	8004acc <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d1c:	4804      	ldr	r0, [pc, #16]	; (8006d30 <report_ngc_parameters+0x158>)
 8006d1e:	f7fd fec9 	bl	8004ab4 <printString>
}
 8006d22:	b008      	add	sp, #32
 8006d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d28:	0800bf68 	.word	0x0800bf68
 8006d2c:	0800bf70 	.word	0x0800bf70
 8006d30:	0800c01c 	.word	0x0800c01c
 8006d34:	20001014 	.word	0x20001014
 8006d38:	0800bf74 	.word	0x0800bf74
 8006d3c:	0800bf7c 	.word	0x0800bf7c
 8006d40:	0800bf84 	.word	0x0800bf84
 8006d44:	200010c8 	.word	0x200010c8
 8006d48:	200010b0 	.word	0x200010b0
 8006d4c:	0800c014 	.word	0x0800c014
 8006d50:	0800bf6c 	.word	0x0800bf6c

08006d54 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8006d54:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006d56:	4c52      	ldr	r4, [pc, #328]	; (8006ea0 <report_gcode_modes+0x14c>)
  printPgmString(PSTR("[GC:G"));
 8006d58:	4852      	ldr	r0, [pc, #328]	; (8006ea4 <report_gcode_modes+0x150>)
 8006d5a:	f7fd feab 	bl	8004ab4 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006d5e:	7820      	ldrb	r0, [r4, #0]
 8006d60:	288b      	cmp	r0, #139	; 0x8b
 8006d62:	d961      	bls.n	8006e28 <report_gcode_modes+0xd4>
    printPgmString(PSTR("38."));
 8006d64:	4850      	ldr	r0, [pc, #320]	; (8006ea8 <report_gcode_modes+0x154>)
 8006d66:	f7fd fea5 	bl	8004ab4 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8006d6a:	7820      	ldrb	r0, [r4, #0]
 8006d6c:	3076      	adds	r0, #118	; 0x76
 8006d6e:	b2c0      	uxtb	r0, r0
 8006d70:	f7fd feac 	bl	8004acc <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006d74:	484d      	ldr	r0, [pc, #308]	; (8006eac <report_gcode_modes+0x158>)
 8006d76:	f7fd fe9d 	bl	8004ab4 <printString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8006d7a:	79a0      	ldrb	r0, [r4, #6]
 8006d7c:	3036      	adds	r0, #54	; 0x36
 8006d7e:	b2c0      	uxtb	r0, r0
 8006d80:	f7fd fea4 	bl	8004acc <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006d84:	4849      	ldr	r0, [pc, #292]	; (8006eac <report_gcode_modes+0x158>)
 8006d86:	f7fd fe95 	bl	8004ab4 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8006d8a:	7920      	ldrb	r0, [r4, #4]
 8006d8c:	3011      	adds	r0, #17
 8006d8e:	b2c0      	uxtb	r0, r0
 8006d90:	f7fd fe9c 	bl	8004acc <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006d94:	4845      	ldr	r0, [pc, #276]	; (8006eac <report_gcode_modes+0x158>)
 8006d96:	f7fd fe8d 	bl	8004ab4 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 8006d9a:	78a0      	ldrb	r0, [r4, #2]
 8006d9c:	f1c0 0015 	rsb	r0, r0, #21
 8006da0:	b2c0      	uxtb	r0, r0
 8006da2:	f7fd fe93 	bl	8004acc <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006da6:	4841      	ldr	r0, [pc, #260]	; (8006eac <report_gcode_modes+0x158>)
 8006da8:	f7fd fe84 	bl	8004ab4 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8006dac:	78e0      	ldrb	r0, [r4, #3]
 8006dae:	305a      	adds	r0, #90	; 0x5a
 8006db0:	b2c0      	uxtb	r0, r0
 8006db2:	f7fd fe8b 	bl	8004acc <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006db6:	483d      	ldr	r0, [pc, #244]	; (8006eac <report_gcode_modes+0x158>)
 8006db8:	f7fd fe7c 	bl	8004ab4 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8006dbc:	7860      	ldrb	r0, [r4, #1]
 8006dbe:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 8006dc2:	b2c0      	uxtb	r0, r0
 8006dc4:	f7fd fe82 	bl	8004acc <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8006dc8:	79e3      	ldrb	r3, [r4, #7]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d13f      	bne.n	8006e4e <report_gcode_modes+0xfa>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006dce:	4838      	ldr	r0, [pc, #224]	; (8006eb0 <report_gcode_modes+0x15c>)
 8006dd0:	f7fd fe70 	bl	8004ab4 <printString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8006dd4:	7a63      	ldrb	r3, [r4, #9]
 8006dd6:	2b10      	cmp	r3, #16
 8006dd8:	d04a      	beq.n	8006e70 <report_gcode_modes+0x11c>
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d044      	beq.n	8006e68 <report_gcode_modes+0x114>
 8006dde:	b333      	cbz	r3, 8006e2e <report_gcode_modes+0xda>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006de0:	4833      	ldr	r0, [pc, #204]	; (8006eb0 <report_gcode_modes+0x15c>)
 8006de2:	f7fd fe67 	bl	8004ab4 <printString>
    case SPINDLE_DISABLE : serial_write('5'); break;
  }

  report_util_gcode_modes_M();
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8006de6:	7a23      	ldrb	r3, [r4, #8]
 8006de8:	b353      	cbz	r3, 8006e40 <report_gcode_modes+0xec>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006dea:	061a      	lsls	r2, r3, #24
 8006dec:	d44f      	bmi.n	8006e8e <report_gcode_modes+0x13a>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006dee:	065b      	lsls	r3, r3, #25
 8006df0:	d442      	bmi.n	8006e78 <report_gcode_modes+0x124>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 8006df2:	4830      	ldr	r0, [pc, #192]	; (8006eb4 <report_gcode_modes+0x160>)
 8006df4:	f7fd fe5e 	bl	8004ab4 <printString>
  print_uint8_base10(gc_state.tool);
 8006df8:	7d20      	ldrb	r0, [r4, #20]
 8006dfa:	f7fd fe67 	bl	8004acc <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8006dfe:	482e      	ldr	r0, [pc, #184]	; (8006eb8 <report_gcode_modes+0x164>)
 8006e00:	f7fd fe58 	bl	8004ab4 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 8006e04:	6920      	ldr	r0, [r4, #16]
 8006e06:	f7fd fffd 	bl	8004e04 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 8006e0a:	482c      	ldr	r0, [pc, #176]	; (8006ebc <report_gcode_modes+0x168>)
 8006e0c:	f7fd fe52 	bl	8004ab4 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 8006e10:	68e0      	ldr	r0, [r4, #12]
 8006e12:	2100      	movs	r1, #0
 8006e14:	f7fd fe9c 	bl	8004b50 <printFloat>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006e18:	205d      	movs	r0, #93	; 0x5d
 8006e1a:	f000 fac7 	bl	80073ac <serial_write>
  #endif

  report_util_feedback_line_feed();
}
 8006e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e22:	4827      	ldr	r0, [pc, #156]	; (8006ec0 <report_gcode_modes+0x16c>)
 8006e24:	f7fd be46 	b.w	8004ab4 <printString>
    print_uint8_base10(gc_state.modal.motion);
 8006e28:	f7fd fe50 	bl	8004acc <print_uint8_base10>
 8006e2c:	e7a2      	b.n	8006d74 <report_gcode_modes+0x20>
    case SPINDLE_DISABLE : serial_write('5'); break;
 8006e2e:	2035      	movs	r0, #53	; 0x35
 8006e30:	f000 fabc 	bl	80073ac <serial_write>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006e34:	481e      	ldr	r0, [pc, #120]	; (8006eb0 <report_gcode_modes+0x15c>)
 8006e36:	f7fd fe3d 	bl	8004ab4 <printString>
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8006e3a:	7a23      	ldrb	r3, [r4, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1d4      	bne.n	8006dea <report_gcode_modes+0x96>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006e40:	481b      	ldr	r0, [pc, #108]	; (8006eb0 <report_gcode_modes+0x15c>)
 8006e42:	f7fd fe37 	bl	8004ab4 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8006e46:	2039      	movs	r0, #57	; 0x39
 8006e48:	f000 fab0 	bl	80073ac <serial_write>
 8006e4c:	e7d1      	b.n	8006df2 <report_gcode_modes+0x9e>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006e4e:	4818      	ldr	r0, [pc, #96]	; (8006eb0 <report_gcode_modes+0x15c>)
 8006e50:	f7fd fe30 	bl	8004ab4 <printString>
    switch (gc_state.modal.program_flow) {
 8006e54:	79e0      	ldrb	r0, [r4, #7]
 8006e56:	2803      	cmp	r0, #3
 8006e58:	d015      	beq.n	8006e86 <report_gcode_modes+0x132>
 8006e5a:	281e      	cmp	r0, #30
 8006e5c:	d001      	beq.n	8006e62 <report_gcode_modes+0x10e>
 8006e5e:	2802      	cmp	r0, #2
 8006e60:	d1b5      	bne.n	8006dce <report_gcode_modes+0x7a>
        print_uint8_base10(gc_state.modal.program_flow);
 8006e62:	f7fd fe33 	bl	8004acc <print_uint8_base10>
        break;
 8006e66:	e7b2      	b.n	8006dce <report_gcode_modes+0x7a>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8006e68:	2034      	movs	r0, #52	; 0x34
 8006e6a:	f000 fa9f 	bl	80073ac <serial_write>
 8006e6e:	e7b7      	b.n	8006de0 <report_gcode_modes+0x8c>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8006e70:	2033      	movs	r0, #51	; 0x33
 8006e72:	f000 fa9b 	bl	80073ac <serial_write>
 8006e76:	e7b3      	b.n	8006de0 <report_gcode_modes+0x8c>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006e78:	480d      	ldr	r0, [pc, #52]	; (8006eb0 <report_gcode_modes+0x15c>)
 8006e7a:	f7fd fe1b 	bl	8004ab4 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006e7e:	2038      	movs	r0, #56	; 0x38
 8006e80:	f000 fa94 	bl	80073ac <serial_write>
 8006e84:	e7b5      	b.n	8006df2 <report_gcode_modes+0x9e>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 8006e86:	2030      	movs	r0, #48	; 0x30
 8006e88:	f000 fa90 	bl	80073ac <serial_write>
 8006e8c:	e79f      	b.n	8006dce <report_gcode_modes+0x7a>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006e8e:	4808      	ldr	r0, [pc, #32]	; (8006eb0 <report_gcode_modes+0x15c>)
 8006e90:	f7fd fe10 	bl	8004ab4 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006e94:	2037      	movs	r0, #55	; 0x37
 8006e96:	f000 fa89 	bl	80073ac <serial_write>
 8006e9a:	7a23      	ldrb	r3, [r4, #8]
 8006e9c:	e7a7      	b.n	8006dee <report_gcode_modes+0x9a>
 8006e9e:	bf00      	nop
 8006ea0:	20001014 	.word	0x20001014
 8006ea4:	0800bedc 	.word	0x0800bedc
 8006ea8:	0800bee4 	.word	0x0800bee4
 8006eac:	0800bee8 	.word	0x0800bee8
 8006eb0:	0800beec 	.word	0x0800beec
 8006eb4:	0800bef0 	.word	0x0800bef0
 8006eb8:	0800bef4 	.word	0x0800bef4
 8006ebc:	0800bef8 	.word	0x0800bef8
 8006ec0:	0800c01c 	.word	0x0800c01c

08006ec4 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4605      	mov	r5, r0
 8006ec8:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 8006eca:	4808      	ldr	r0, [pc, #32]	; (8006eec <report_startup_line+0x28>)
 8006ecc:	f7fd fdf2 	bl	8004ab4 <printString>
  print_uint8_base10(n);
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f7fd fdfb 	bl	8004acc <print_uint8_base10>
  serial_write('=');
 8006ed6:	203d      	movs	r0, #61	; 0x3d
 8006ed8:	f000 fa68 	bl	80073ac <serial_write>
  printString(line);
 8006edc:	4620      	mov	r0, r4
 8006ede:	f7fd fde9 	bl	8004ab4 <printString>
  report_util_line_feed();
}
 8006ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ee6:	4802      	ldr	r0, [pc, #8]	; (8006ef0 <report_startup_line+0x2c>)
 8006ee8:	f7fd bde4 	b.w	8004ab4 <printString>
 8006eec:	0800c008 	.word	0x0800c008
 8006ef0:	0800c01c 	.word	0x0800c01c

08006ef4 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	460c      	mov	r4, r1
  serial_write('>');
 8006efa:	203e      	movs	r0, #62	; 0x3e
 8006efc:	f000 fa56 	bl	80073ac <serial_write>
  printString(line);
 8006f00:	4628      	mov	r0, r5
 8006f02:	f7fd fdd7 	bl	8004ab4 <printString>
  serial_write(':');
 8006f06:	203a      	movs	r0, #58	; 0x3a
 8006f08:	f000 fa50 	bl	80073ac <serial_write>
  switch(status_code) {
 8006f0c:	b154      	cbz	r4, 8006f24 <report_execute_startup_message+0x30>
      printPgmString(PSTR("error:"));
 8006f0e:	4808      	ldr	r0, [pc, #32]	; (8006f30 <report_execute_startup_message+0x3c>)
 8006f10:	f7fd fdd0 	bl	8004ab4 <printString>
      print_uint8_base10(status_code);
 8006f14:	4620      	mov	r0, r4
 8006f16:	f7fd fdd9 	bl	8004acc <print_uint8_base10>
  report_status_message(status_code);
}
 8006f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f1e:	4805      	ldr	r0, [pc, #20]	; (8006f34 <report_execute_startup_message+0x40>)
 8006f20:	f7fd bdc8 	b.w	8004ab4 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 8006f24:	4804      	ldr	r0, [pc, #16]	; (8006f38 <report_execute_startup_message+0x44>)
}
 8006f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("ok\r\n")); break;
 8006f2a:	f7fd bdc3 	b.w	8004ab4 <printString>
 8006f2e:	bf00      	nop
 8006f30:	0800c014 	.word	0x0800c014
 8006f34:	0800c01c 	.word	0x0800c01c
 8006f38:	0800c00c 	.word	0x0800c00c

08006f3c <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 8006f40:	4814      	ldr	r0, [pc, #80]	; (8006f94 <report_build_info+0x58>)
 8006f42:	f7fd fdb7 	bl	8004ab4 <printString>
  printString(line);
 8006f46:	4620      	mov	r0, r4
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f48:	4c13      	ldr	r4, [pc, #76]	; (8006f98 <report_build_info+0x5c>)
  printString(line);
 8006f4a:	f7fd fdb3 	bl	8004ab4 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006f4e:	205d      	movs	r0, #93	; 0x5d
 8006f50:	f000 fa2c 	bl	80073ac <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7fd fdad 	bl	8004ab4 <printString>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 8006f5a:	4810      	ldr	r0, [pc, #64]	; (8006f9c <report_build_info+0x60>)
 8006f5c:	f7fd fdaa 	bl	8004ab4 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8006f60:	2056      	movs	r0, #86	; 0x56
 8006f62:	f000 fa23 	bl	80073ac <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 8006f66:	204d      	movs	r0, #77	; 0x4d
 8006f68:	f000 fa20 	bl	80073ac <serial_write>
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 8006f6c:	202c      	movs	r0, #44	; 0x2c
 8006f6e:	f000 fa1d 	bl	80073ac <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 8006f72:	2023      	movs	r0, #35	; 0x23
 8006f74:	f7fd fdaa 	bl	8004acc <print_uint8_base10>
	serial_write(',');
 8006f78:	202c      	movs	r0, #44	; 0x2c
 8006f7a:	f000 fa17 	bl	80073ac <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 8006f7e:	20fe      	movs	r0, #254	; 0xfe
 8006f80:	f7fd fda4 	bl	8004acc <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006f84:	205d      	movs	r0, #93	; 0x5d
 8006f86:	f000 fa11 	bl	80073ac <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f8a:	4620      	mov	r0, r4

	report_util_feedback_line_feed();
}
 8006f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f90:	f7fd bd90 	b.w	8004ab4 <printString>
 8006f94:	0800be10 	.word	0x0800be10
 8006f98:	0800c01c 	.word	0x0800c01c
 8006f9c:	0800be24 	.word	0x0800be24

08006fa0 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8006fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006fa2:	4ba8      	ldr	r3, [pc, #672]	; (8007244 <report_realtime_status+0x2a4>)
{
 8006fa4:	b08d      	sub	sp, #52	; 0x34
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8006fa8:	4ca7      	ldr	r4, [pc, #668]	; (8007248 <report_realtime_status+0x2a8>)
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006faa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  system_convert_array_steps_to_mpos(print_position, current_position);
 8006fae:	4669      	mov	r1, sp
 8006fb0:	a804      	add	r0, sp, #16
 8006fb2:	f002 fb81 	bl	80096b8 <system_convert_array_steps_to_mpos>
  serial_write('<');
 8006fb6:	203c      	movs	r0, #60	; 0x3c
 8006fb8:	f000 f9f8 	bl	80073ac <serial_write>
  switch (sys.state) {
 8006fbc:	7823      	ldrb	r3, [r4, #0]
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	f000 81a9 	beq.w	8007316 <report_realtime_status+0x376>
 8006fc4:	d946      	bls.n	8007054 <report_realtime_status+0xb4>
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	f000 8199 	beq.w	80072fe <report_realtime_status+0x35e>
 8006fcc:	f240 80fd 	bls.w	80071ca <report_realtime_status+0x22a>
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	f000 80e6 	beq.w	80071a2 <report_realtime_status+0x202>
 8006fd6:	2b80      	cmp	r3, #128	; 0x80
 8006fd8:	d149      	bne.n	800706e <report_realtime_status+0xce>
    break;
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006fda:	4e9c      	ldr	r6, [pc, #624]	; (800724c <report_realtime_status+0x2ac>)
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8006fdc:	489c      	ldr	r0, [pc, #624]	; (8007250 <report_realtime_status+0x2b0>)
 8006fde:	f7fd fd69 	bl	8004ab4 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006fe2:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 8006fe6:	07dd      	lsls	r5, r3, #31
 8006fe8:	d446      	bmi.n	8007078 <report_realtime_status+0xd8>
    (sys.report_wco_counter == 0)) {
    for (idx = 0; idx< N_AXIS; idx++) {
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006fea:	4d9a      	ldr	r5, [pc, #616]	; (8007254 <report_realtime_status+0x2b4>)
 8006fec:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8006fee:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006ff0:	f7f9 fd56 	bl	8000aa0 <__addsf3>
 8006ff4:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
      if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
        print_position[idx] -= wco[idx];
 8006ff6:	9804      	ldr	r0, [sp, #16]
 8006ff8:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006ffa:	9308      	str	r3, [sp, #32]
        print_position[idx] -= wco[idx];
 8006ffc:	f7f9 fd4e 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007000:	6c29      	ldr	r1, [r5, #64]	; 0x40
        print_position[idx] -= wco[idx];
 8007002:	9004      	str	r0, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007004:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007006:	f7f9 fd4b 	bl	8000aa0 <__addsf3>
 800700a:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 800700c:	9805      	ldr	r0, [sp, #20]
 800700e:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007010:	9309      	str	r3, [sp, #36]	; 0x24
        print_position[idx] -= wco[idx];
 8007012:	f7f9 fd43 	bl	8000a9c <__aeabi_fsub>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007016:	6cef      	ldr	r7, [r5, #76]	; 0x4c
        print_position[idx] -= wco[idx];
 8007018:	9005      	str	r0, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800701a:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800701c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800701e:	f7f9 fd3f 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007022:	4639      	mov	r1, r7
 8007024:	f7f9 fd3c 	bl	8000aa0 <__addsf3>
 8007028:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 800702a:	9806      	ldr	r0, [sp, #24]
 800702c:	4619      	mov	r1, r3
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800702e:	930a      	str	r3, [sp, #40]	; 0x28
        print_position[idx] -= wco[idx];
 8007030:	f7f9 fd34 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007034:	6ca9      	ldr	r1, [r5, #72]	; 0x48
        print_position[idx] -= wco[idx];
 8007036:	9006      	str	r0, [sp, #24]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007038:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800703a:	f7f9 fd31 	bl	8000aa0 <__addsf3>
 800703e:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8007040:	9807      	ldr	r0, [sp, #28]
 8007042:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007044:	930b      	str	r3, [sp, #44]	; 0x2c
        print_position[idx] -= wco[idx];
 8007046:	f7f9 fd29 	bl	8000a9c <__aeabi_fsub>
 800704a:	9007      	str	r0, [sp, #28]
  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
    printPgmString(PSTR("|MPos:"));
  }
  else {
    printPgmString(PSTR("|WPos:"));
 800704c:	4882      	ldr	r0, [pc, #520]	; (8007258 <report_realtime_status+0x2b8>)
 800704e:	f7fd fd31 	bl	8004ab4 <printString>
 8007052:	e02f      	b.n	80070b4 <report_realtime_status+0x114>
  switch (sys.state) {
 8007054:	2b01      	cmp	r3, #1
 8007056:	f000 815a 	beq.w	800730e <report_realtime_status+0x36e>
 800705a:	f0c0 8154 	bcc.w	8007306 <report_realtime_status+0x366>
 800705e:	2b02      	cmp	r3, #2
 8007060:	f000 80af 	beq.w	80071c2 <report_realtime_status+0x222>
 8007064:	2b04      	cmp	r3, #4
 8007066:	d102      	bne.n	800706e <report_realtime_status+0xce>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8007068:	487c      	ldr	r0, [pc, #496]	; (800725c <report_realtime_status+0x2bc>)
 800706a:	f7fd fd23 	bl	8004ab4 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 800706e:	4e77      	ldr	r6, [pc, #476]	; (800724c <report_realtime_status+0x2ac>)
 8007070:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 8007074:	07dd      	lsls	r5, r3, #31
 8007076:	d5b8      	bpl.n	8006fea <report_realtime_status+0x4a>
 8007078:	7b63      	ldrb	r3, [r4, #13]
 800707a:	b9c3      	cbnz	r3, 80070ae <report_realtime_status+0x10e>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800707c:	4d75      	ldr	r5, [pc, #468]	; (8007254 <report_realtime_status+0x2b4>)
 800707e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8007080:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007082:	f7f9 fd0d 	bl	8000aa0 <__addsf3>
 8007086:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8007088:	9008      	str	r0, [sp, #32]
 800708a:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800708c:	f7f9 fd08 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007090:	6cef      	ldr	r7, [r5, #76]	; 0x4c
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007092:	9009      	str	r0, [sp, #36]	; 0x24
 8007094:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8007096:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8007098:	f7f9 fd02 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800709c:	4639      	mov	r1, r7
 800709e:	f7f9 fcff 	bl	8000aa0 <__addsf3>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80070a2:	6ca9      	ldr	r1, [r5, #72]	; 0x48
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 80070a4:	900a      	str	r0, [sp, #40]	; 0x28
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80070a6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80070a8:	f7f9 fcfa 	bl	8000aa0 <__addsf3>
 80070ac:	900b      	str	r0, [sp, #44]	; 0x2c
    printPgmString(PSTR("|MPos:"));
 80070ae:	486c      	ldr	r0, [pc, #432]	; (8007260 <report_realtime_status+0x2c0>)
 80070b0:	f7fd fd00 	bl	8004ab4 <printString>
    printFloat_CoordValue(axis_value[idx]);
 80070b4:	9804      	ldr	r0, [sp, #16]
 80070b6:	f7fd fdbd 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80070ba:	202c      	movs	r0, #44	; 0x2c
 80070bc:	f000 f976 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80070c0:	9805      	ldr	r0, [sp, #20]
 80070c2:	f7fd fdb7 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80070c6:	202c      	movs	r0, #44	; 0x2c
 80070c8:	f000 f970 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80070cc:	9806      	ldr	r0, [sp, #24]
 80070ce:	f7fd fdb1 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80070d2:	202c      	movs	r0, #44	; 0x2c
 80070d4:	f000 f96a 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80070d8:	9807      	ldr	r0, [sp, #28]
 80070da:	f7fd fdab 	bl	8004c34 <printFloat_CoordValue>
  }
  report_util_axis_values(print_position);

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 80070de:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 80070e2:	0798      	lsls	r0, r3, #30
 80070e4:	f100 80ed 	bmi.w	80072c2 <report_realtime_status+0x322>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 80070e8:	485e      	ldr	r0, [pc, #376]	; (8007264 <report_realtime_status+0x2c4>)
 80070ea:	f7fd fce3 	bl	8004ab4 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 80070ee:	f002 f885 	bl	80091fc <st_get_realtime_rate>
 80070f2:	f7fd fe87 	bl	8004e04 <printFloat_RateValue>
  serial_write(',');
 80070f6:	202c      	movs	r0, #44	; 0x2c
 80070f8:	f000 f958 	bl	80073ac <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 80070fc:	2100      	movs	r1, #0
 80070fe:	6920      	ldr	r0, [r4, #16]
 8007100:	f7fd fd26 	bl	8004b50 <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 8007104:	f7fb ffa6 	bl	8003054 <limits_get_state>
 8007108:	4605      	mov	r5, r0
  uint8_t ctrl_pin_state = system_control_get_state();
 800710a:	f002 f8c9 	bl	80092a0 <system_control_get_state>
 800710e:	4606      	mov	r6, r0
  uint8_t prb_pin_state = probe_get_state();
 8007110:	f7fd ff56 	bl	8004fc0 <probe_get_state>
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8007114:	ea45 0306 	orr.w	r3, r5, r6
 8007118:	4303      	orrs	r3, r0
 800711a:	f013 0fff 	tst.w	r3, #255	; 0xff
  uint8_t prb_pin_state = probe_get_state();
 800711e:	4607      	mov	r7, r0
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8007120:	f040 80b0 	bne.w	8007284 <report_realtime_status+0x2e4>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 8007124:	7b63      	ldrb	r3, [r4, #13]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d061      	beq.n	80071ee <report_realtime_status+0x24e>
 800712a:	3b01      	subs	r3, #1
 800712c:	7363      	strb	r3, [r4, #13]
    report_util_axis_values(wco);
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 800712e:	7b23      	ldrb	r3, [r4, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 8083 	bne.w	800723c <report_realtime_status+0x29c>
    else {
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8007136:	7823      	ldrb	r3, [r4, #0]
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
      }
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
      printPgmString(PSTR("|Ov:"));
 8007138:	484b      	ldr	r0, [pc, #300]	; (8007268 <report_realtime_status+0x2c8>)
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 800713a:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 800713e:	bf14      	ite	ne
 8007140:	2313      	movne	r3, #19
 8007142:	2309      	moveq	r3, #9
 8007144:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 8007146:	f7fd fcb5 	bl	8004ab4 <printString>
      print_uint8_base10(sys.f_override);
 800714a:	7a20      	ldrb	r0, [r4, #8]
 800714c:	f7fd fcbe 	bl	8004acc <print_uint8_base10>
      serial_write(',');
 8007150:	202c      	movs	r0, #44	; 0x2c
 8007152:	f000 f92b 	bl	80073ac <serial_write>
      print_uint8_base10(sys.r_override);
 8007156:	7a60      	ldrb	r0, [r4, #9]
 8007158:	f7fd fcb8 	bl	8004acc <print_uint8_base10>
      serial_write(',');
 800715c:	202c      	movs	r0, #44	; 0x2c
 800715e:	f000 f925 	bl	80073ac <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 8007162:	7aa0      	ldrb	r0, [r4, #10]
 8007164:	f7fd fcb2 	bl	8004acc <print_uint8_base10>

      uint8_t sp_state = spindle_get_state();
 8007168:	f000 fdc6 	bl	8007cf8 <spindle_get_state>
 800716c:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 800716e:	f7fa fc87 	bl	8001a80 <coolant_get_state>
 8007172:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 8007174:	2d00      	cmp	r5, #0
 8007176:	f040 80b3 	bne.w	80072e0 <report_realtime_status+0x340>
 800717a:	b150      	cbz	r0, 8007192 <report_realtime_status+0x1f2>
        printPgmString(PSTR("|A:"));
 800717c:	483b      	ldr	r0, [pc, #236]	; (800726c <report_realtime_status+0x2cc>)
 800717e:	f7fd fc99 	bl	8004ab4 <printString>
          #else
            if (sp_state & SPINDLE_STATE_CW) { serial_write('S'); } // CW
            else { serial_write('C'); } // CCW
          #endif
        }
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8007182:	07e2      	lsls	r2, r4, #31
 8007184:	f100 80b7 	bmi.w	80072f6 <report_realtime_status+0x356>
        #ifdef ENABLE_M7
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 8007188:	07a3      	lsls	r3, r4, #30
 800718a:	d502      	bpl.n	8007192 <report_realtime_status+0x1f2>
 800718c:	204d      	movs	r0, #77	; 0x4d
 800718e:	f000 f90d 	bl	80073ac <serial_write>
        #endif
      }
    }
  #endif

  serial_write('>');
 8007192:	203e      	movs	r0, #62	; 0x3e
 8007194:	f000 f90a 	bl	80073ac <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007198:	4835      	ldr	r0, [pc, #212]	; (8007270 <report_realtime_status+0x2d0>)
 800719a:	f7fd fc8b 	bl	8004ab4 <printString>
  report_util_line_feed();
}
 800719e:	b00d      	add	sp, #52	; 0x34
 80071a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printPgmString(PSTR("Door:"));
 80071a2:	4834      	ldr	r0, [pc, #208]	; (8007274 <report_realtime_status+0x2d4>)
 80071a4:	f7fd fc86 	bl	8004ab4 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 80071a8:	78a3      	ldrb	r3, [r4, #2]
 80071aa:	071a      	lsls	r2, r3, #28
 80071ac:	f100 80d3 	bmi.w	8007356 <report_realtime_status+0x3b6>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80071b0:	075f      	lsls	r7, r3, #29
 80071b2:	f140 80d4 	bpl.w	800735e <report_realtime_status+0x3be>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 80071b6:	069e      	lsls	r6, r3, #26
 80071b8:	d515      	bpl.n	80071e6 <report_realtime_status+0x246>
      else { serial_write('1'); } // Actively holding
 80071ba:	2031      	movs	r0, #49	; 0x31
 80071bc:	f000 f8f6 	bl	80073ac <serial_write>
 80071c0:	e755      	b.n	800706e <report_realtime_status+0xce>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 80071c2:	482d      	ldr	r0, [pc, #180]	; (8007278 <report_realtime_status+0x2d8>)
 80071c4:	f7fd fc76 	bl	8004ab4 <printString>
 80071c8:	e751      	b.n	800706e <report_realtime_status+0xce>
  switch (sys.state) {
 80071ca:	2b10      	cmp	r3, #16
 80071cc:	f47f af4f 	bne.w	800706e <report_realtime_status+0xce>
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80071d0:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f2c0 8092 	blt.w	80072fe <report_realtime_status+0x35e>
      printPgmString(PSTR("Hold:"));
 80071da:	4828      	ldr	r0, [pc, #160]	; (800727c <report_realtime_status+0x2dc>)
 80071dc:	f7fd fc6a 	bl	8004ab4 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 80071e0:	78a3      	ldrb	r3, [r4, #2]
 80071e2:	07d9      	lsls	r1, r3, #31
 80071e4:	d5e9      	bpl.n	80071ba <report_realtime_status+0x21a>
 80071e6:	2030      	movs	r0, #48	; 0x30
 80071e8:	f000 f8e0 	bl	80073ac <serial_write>
 80071ec:	e73f      	b.n	800706e <report_realtime_status+0xce>
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 80071ee:	7822      	ldrb	r2, [r4, #0]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 80071f0:	7b23      	ldrb	r3, [r4, #12]
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 80071f2:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 80071f6:	bf14      	ite	ne
 80071f8:	221d      	movne	r2, #29
 80071fa:	2209      	moveq	r2, #9
 80071fc:	7362      	strb	r2, [r4, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 80071fe:	b90b      	cbnz	r3, 8007204 <report_realtime_status+0x264>
 8007200:	2301      	movs	r3, #1
 8007202:	7323      	strb	r3, [r4, #12]
    printPgmString(PSTR("|WCO:"));
 8007204:	481e      	ldr	r0, [pc, #120]	; (8007280 <report_realtime_status+0x2e0>)
 8007206:	f7fd fc55 	bl	8004ab4 <printString>
    printFloat_CoordValue(axis_value[idx]);
 800720a:	9808      	ldr	r0, [sp, #32]
 800720c:	f7fd fd12 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007210:	202c      	movs	r0, #44	; 0x2c
 8007212:	f000 f8cb 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8007216:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007218:	f7fd fd0c 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800721c:	202c      	movs	r0, #44	; 0x2c
 800721e:	f000 f8c5 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8007222:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007224:	f7fd fd06 	bl	8004c34 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007228:	202c      	movs	r0, #44	; 0x2c
 800722a:	f000 f8bf 	bl	80073ac <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800722e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007230:	f7fd fd00 	bl	8004c34 <printFloat_CoordValue>
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 8007234:	7b23      	ldrb	r3, [r4, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	f43f af7d 	beq.w	8007136 <report_realtime_status+0x196>
 800723c:	3b01      	subs	r3, #1
 800723e:	7323      	strb	r3, [r4, #12]
 8007240:	e7a7      	b.n	8007192 <report_realtime_status+0x1f2>
 8007242:	bf00      	nop
 8007244:	200010d8 	.word	0x200010d8
 8007248:	200010b0 	.word	0x200010b0
 800724c:	2000126c 	.word	0x2000126c
 8007250:	0800bfc4 	.word	0x0800bfc4
 8007254:	20001014 	.word	0x20001014
 8007258:	0800c000 	.word	0x0800c000
 800725c:	0800bfa4 	.word	0x0800bfa4
 8007260:	0800bfcc 	.word	0x0800bfcc
 8007264:	0800bfdc 	.word	0x0800bfdc
 8007268:	0800bff4 	.word	0x0800bff4
 800726c:	0800bffc 	.word	0x0800bffc
 8007270:	0800c01c 	.word	0x0800c01c
 8007274:	0800bfbc 	.word	0x0800bfbc
 8007278:	0800bfb4 	.word	0x0800bfb4
 800727c:	0800bf98 	.word	0x0800bf98
 8007280:	0800bfec 	.word	0x0800bfec
    printPgmString(PSTR("|Pn:"));
 8007284:	4838      	ldr	r0, [pc, #224]	; (8007368 <report_realtime_status+0x3c8>)
 8007286:	f7fd fc15 	bl	8004ab4 <printString>
    if (prb_pin_state) { serial_write('P'); }
 800728a:	b9b7      	cbnz	r7, 80072ba <report_realtime_status+0x31a>
    if (lim_pin_state) {
 800728c:	b13d      	cbz	r5, 800729e <report_realtime_status+0x2fe>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 800728e:	07e9      	lsls	r1, r5, #31
 8007290:	d45d      	bmi.n	800734e <report_realtime_status+0x3ae>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 8007292:	07aa      	lsls	r2, r5, #30
 8007294:	d457      	bmi.n	8007346 <report_realtime_status+0x3a6>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 8007296:	076b      	lsls	r3, r5, #29
 8007298:	d449      	bmi.n	800732e <report_realtime_status+0x38e>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 800729a:	072f      	lsls	r7, r5, #28
 800729c:	d443      	bmi.n	8007326 <report_realtime_status+0x386>
    if (ctrl_pin_state) {
 800729e:	2e00      	cmp	r6, #0
 80072a0:	f43f af40 	beq.w	8007124 <report_realtime_status+0x184>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 80072a4:	07f5      	lsls	r5, r6, #31
 80072a6:	d44a      	bmi.n	800733e <report_realtime_status+0x39e>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 80072a8:	07b0      	lsls	r0, r6, #30
 80072aa:	d444      	bmi.n	8007336 <report_realtime_status+0x396>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 80072ac:	0771      	lsls	r1, r6, #29
 80072ae:	f57f af39 	bpl.w	8007124 <report_realtime_status+0x184>
 80072b2:	2053      	movs	r0, #83	; 0x53
 80072b4:	f000 f87a 	bl	80073ac <serial_write>
 80072b8:	e734      	b.n	8007124 <report_realtime_status+0x184>
    if (prb_pin_state) { serial_write('P'); }
 80072ba:	2050      	movs	r0, #80	; 0x50
 80072bc:	f000 f876 	bl	80073ac <serial_write>
 80072c0:	e7e4      	b.n	800728c <report_realtime_status+0x2ec>
    printPgmString(PSTR("|Bf:"));
 80072c2:	482a      	ldr	r0, [pc, #168]	; (800736c <report_realtime_status+0x3cc>)
 80072c4:	f7fd fbf6 	bl	8004ab4 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 80072c8:	f7fd fbd2 	bl	8004a70 <plan_get_block_buffer_available>
 80072cc:	f7fd fbfe 	bl	8004acc <print_uint8_base10>
    serial_write(',');
 80072d0:	202c      	movs	r0, #44	; 0x2c
 80072d2:	f000 f86b 	bl	80073ac <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 80072d6:	f000 f855 	bl	8007384 <serial_get_rx_buffer_available>
 80072da:	f7fd fbf7 	bl	8004acc <print_uint8_base10>
 80072de:	e703      	b.n	80070e8 <report_realtime_status+0x148>
        printPgmString(PSTR("|A:"));
 80072e0:	4823      	ldr	r0, [pc, #140]	; (8007370 <report_realtime_status+0x3d0>)
 80072e2:	f7fd fbe7 	bl	8004ab4 <printString>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 80072e6:	2d01      	cmp	r5, #1
 80072e8:	d019      	beq.n	800731e <report_realtime_status+0x37e>
              else { serial_write('C'); } // CCW
 80072ea:	2043      	movs	r0, #67	; 0x43
 80072ec:	f000 f85e 	bl	80073ac <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 80072f0:	07e2      	lsls	r2, r4, #31
 80072f2:	f57f af49 	bpl.w	8007188 <report_realtime_status+0x1e8>
 80072f6:	2046      	movs	r0, #70	; 0x46
 80072f8:	f000 f858 	bl	80073ac <serial_write>
 80072fc:	e744      	b.n	8007188 <report_realtime_status+0x1e8>
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 80072fe:	481d      	ldr	r0, [pc, #116]	; (8007374 <report_realtime_status+0x3d4>)
 8007300:	f7fd fbd8 	bl	8004ab4 <printString>
 8007304:	e6b3      	b.n	800706e <report_realtime_status+0xce>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 8007306:	481c      	ldr	r0, [pc, #112]	; (8007378 <report_realtime_status+0x3d8>)
 8007308:	f7fd fbd4 	bl	8004ab4 <printString>
 800730c:	e6af      	b.n	800706e <report_realtime_status+0xce>
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 800730e:	481b      	ldr	r0, [pc, #108]	; (800737c <report_realtime_status+0x3dc>)
 8007310:	f7fd fbd0 	bl	8004ab4 <printString>
 8007314:	e6ab      	b.n	800706e <report_realtime_status+0xce>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 8007316:	481a      	ldr	r0, [pc, #104]	; (8007380 <report_realtime_status+0x3e0>)
 8007318:	f7fd fbcc 	bl	8004ab4 <printString>
 800731c:	e6a7      	b.n	800706e <report_realtime_status+0xce>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 800731e:	2053      	movs	r0, #83	; 0x53
 8007320:	f000 f844 	bl	80073ac <serial_write>
 8007324:	e72d      	b.n	8007182 <report_realtime_status+0x1e2>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 8007326:	2041      	movs	r0, #65	; 0x41
 8007328:	f000 f840 	bl	80073ac <serial_write>
 800732c:	e7b7      	b.n	800729e <report_realtime_status+0x2fe>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 800732e:	205a      	movs	r0, #90	; 0x5a
 8007330:	f000 f83c 	bl	80073ac <serial_write>
 8007334:	e7b1      	b.n	800729a <report_realtime_status+0x2fa>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8007336:	2048      	movs	r0, #72	; 0x48
 8007338:	f000 f838 	bl	80073ac <serial_write>
 800733c:	e7b6      	b.n	80072ac <report_realtime_status+0x30c>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 800733e:	2052      	movs	r0, #82	; 0x52
 8007340:	f000 f834 	bl	80073ac <serial_write>
 8007344:	e7b0      	b.n	80072a8 <report_realtime_status+0x308>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 8007346:	2059      	movs	r0, #89	; 0x59
 8007348:	f000 f830 	bl	80073ac <serial_write>
 800734c:	e7a3      	b.n	8007296 <report_realtime_status+0x2f6>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 800734e:	2058      	movs	r0, #88	; 0x58
 8007350:	f000 f82c 	bl	80073ac <serial_write>
 8007354:	e79d      	b.n	8007292 <report_realtime_status+0x2f2>
      serial_write('3'); // Restoring
 8007356:	2033      	movs	r0, #51	; 0x33
 8007358:	f000 f828 	bl	80073ac <serial_write>
 800735c:	e687      	b.n	800706e <report_realtime_status+0xce>
        serial_write('2'); // Retracting
 800735e:	2032      	movs	r0, #50	; 0x32
 8007360:	f000 f824 	bl	80073ac <serial_write>
 8007364:	e683      	b.n	800706e <report_realtime_status+0xce>
 8007366:	bf00      	nop
 8007368:	0800bfe4 	.word	0x0800bfe4
 800736c:	0800bfd4 	.word	0x0800bfd4
 8007370:	0800bffc 	.word	0x0800bffc
 8007374:	0800bfa0 	.word	0x0800bfa0
 8007378:	0800bf8c 	.word	0x0800bf8c
 800737c:	0800bfac 	.word	0x0800bfac
 8007380:	0800bf94 	.word	0x0800bf94

08007384 <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007386:	4a07      	ldr	r2, [pc, #28]	; (80073a4 <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007388:	781b      	ldrb	r3, [r3, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800738a:	7812      	ldrb	r2, [r2, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 800738c:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800738e:	4293      	cmp	r3, r2
 8007390:	bf94      	ite	ls
 8007392:	1e98      	subls	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 8007394:	f103 30ff 	addhi.w	r0, r3, #4294967295
 8007398:	1a80      	subs	r0, r0, r2
 800739a:	b2c0      	uxtb	r0, r0
}
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000a59 	.word	0x20000a59
 80073a4:	20000a58 	.word	0x20000a58

080073a8 <serial_init>:
  return (TX_RING_BUFFER - (ttail-serial_tx_buffer_head));
}


void serial_init()
{
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop

080073ac <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 80073ac:	b470      	push	{r4, r5, r6}
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 80073ae:	4e0f      	ldr	r6, [pc, #60]	; (80073ec <serial_write+0x40>)
 80073b0:	490f      	ldr	r1, [pc, #60]	; (80073f0 <serial_write+0x44>)
 80073b2:	7835      	ldrb	r5, [r6, #0]
  if (next_head == TX_RING_BUFFER) { next_head = 0; }

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 80073b4:	4c0f      	ldr	r4, [pc, #60]	; (80073f4 <serial_write+0x48>)
  uint8_t next_head = serial_tx_buffer_head + 1;
 80073b6:	1c6a      	adds	r2, r5, #1
 80073b8:	b2d2      	uxtb	r2, r2
  if (next_head == TX_RING_BUFFER) { next_head = 0; }
 80073ba:	2a80      	cmp	r2, #128	; 0x80
 80073bc:	bf08      	it	eq
 80073be:	2200      	moveq	r2, #0
 80073c0:	e002      	b.n	80073c8 <serial_write+0x1c>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 80073c2:	7823      	ldrb	r3, [r4, #0]
 80073c4:	06db      	lsls	r3, r3, #27
 80073c6:	d40e      	bmi.n	80073e6 <serial_write+0x3a>
  while (next_head == serial_tx_buffer_tail) {
 80073c8:	780b      	ldrb	r3, [r1, #0]
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d0f9      	beq.n	80073c2 <serial_write+0x16>
     Sleep(1);
#endif
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 80073ce:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <serial_write+0x4c>)
 80073d0:	490a      	ldr	r1, [pc, #40]	; (80073fc <serial_write+0x50>)
 80073d2:	5558      	strb	r0, [r3, r5]
#ifdef USB_CHANGED_DEBUG
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 80073d4:	4807      	ldr	r0, [pc, #28]	; (80073f4 <serial_write+0x48>)
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 80073d6:	e002      	b.n	80073de <serial_write+0x32>
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 80073d8:	7803      	ldrb	r3, [r0, #0]
 80073da:	06db      	lsls	r3, r3, #27
 80073dc:	d403      	bmi.n	80073e6 <serial_write+0x3a>
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 80073de:	780b      	ldrb	r3, [r1, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f9      	bne.n	80073d8 <serial_write+0x2c>
  }
#endif
  serial_tx_buffer_head = next_head;
 80073e4:	7032      	strb	r2, [r6, #0]

#ifdef AVRTARGET
  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  UCSR0B |=  (1 << UDRIE0);
#endif
}
 80073e6:	bc70      	pop	{r4, r5, r6}
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	20000a5a 	.word	0x20000a5a
 80073f0:	20000a5b 	.word	0x20000a5b
 80073f4:	200010c5 	.word	0x200010c5
 80073f8:	200010ec 	.word	0x200010ec
 80073fc:	20000c0c 	.word	0x20000c0c

08007400 <serial_read>:
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007400:	4908      	ldr	r1, [pc, #32]	; (8007424 <serial_read+0x24>)
  if (serial_rx_buffer_head == tail) {
 8007402:	4a09      	ldr	r2, [pc, #36]	; (8007428 <serial_read+0x28>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007404:	780b      	ldrb	r3, [r1, #0]
  if (serial_rx_buffer_head == tail) {
 8007406:	7812      	ldrb	r2, [r2, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007408:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head == tail) {
 800740a:	429a      	cmp	r2, r3
 800740c:	d008      	beq.n	8007420 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];

    tail++;
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	b2d2      	uxtb	r2, r2
    if (tail == RX_RING_BUFFER) { tail = 0; }
 8007412:	2afe      	cmp	r2, #254	; 0xfe
 8007414:	bf08      	it	eq
 8007416:	2200      	moveq	r2, #0
    uint8_t data = serial_rx_buffer[tail];
 8007418:	4804      	ldr	r0, [pc, #16]	; (800742c <serial_read+0x2c>)
    serial_rx_buffer_tail = tail;
 800741a:	700a      	strb	r2, [r1, #0]
    uint8_t data = serial_rx_buffer[tail];
 800741c:	5cc0      	ldrb	r0, [r0, r3]

    return data;
 800741e:	4770      	bx	lr
    return SERIAL_NO_DATA;
 8007420:	20ff      	movs	r0, #255	; 0xff
  }
}
 8007422:	4770      	bx	lr
 8007424:	20000a59 	.word	0x20000a59
 8007428:	20000a58 	.word	0x20000a58
 800742c:	2000116c 	.word	0x2000116c

08007430 <OnUsbDataRx>:
	//lcd_write_char(*dataIn);
	uint8_t next_head;
    uint8_t data;

	// Write data to buffer unless it is full.
	while (length != 0)
 8007430:	2900      	cmp	r1, #0
 8007432:	d079      	beq.n	8007528 <OnUsbDataRx+0xf8>
{
 8007434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007438:	1e4d      	subs	r5, r1, #1
 800743a:	b2ed      	uxtb	r5, r5
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
          #endif
        }
        // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
      } else { // Write character to buffer
        next_head = serial_rx_buffer_head + 1;
 800743c:	4e61      	ldr	r6, [pc, #388]	; (80075c4 <OnUsbDataRx+0x194>)
        if (next_head == RX_RING_BUFFER) { next_head = 0; }

        // Write data to buffer unless it is full.
        if (next_head != serial_rx_buffer_tail) {
 800743e:	4f62      	ldr	r7, [pc, #392]	; (80075c8 <OnUsbDataRx+0x198>)
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8007440:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80075d0 <OnUsbDataRx+0x1a0>
 8007444:	4405      	add	r5, r0
 8007446:	1e44      	subs	r4, r0, #1
 8007448:	e008      	b.n	800745c <OnUsbDataRx+0x2c>
  switch (data) {
 800744a:	2b3f      	cmp	r3, #63	; 0x3f
 800744c:	d026      	beq.n	800749c <OnUsbDataRx+0x6c>
 800744e:	2b7e      	cmp	r3, #126	; 0x7e
 8007450:	d115      	bne.n	800747e <OnUsbDataRx+0x4e>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8007452:	2002      	movs	r0, #2
 8007454:	f002 f990 	bl	8009778 <system_set_exec_state_flag>
	while (length != 0)
 8007458:	42ac      	cmp	r4, r5
 800745a:	d00a      	beq.n	8007472 <OnUsbDataRx+0x42>
        data = *dataIn ++;
 800745c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  switch (data) {
 8007460:	2b21      	cmp	r3, #33	; 0x21
 8007462:	d008      	beq.n	8007476 <OnUsbDataRx+0x46>
 8007464:	d8f1      	bhi.n	800744a <OnUsbDataRx+0x1a>
 8007466:	2b18      	cmp	r3, #24
 8007468:	d109      	bne.n	800747e <OnUsbDataRx+0x4e>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 800746a:	f7fc fc97 	bl	8003d9c <mc_reset>
	while (length != 0)
 800746e:	42ac      	cmp	r4, r5
 8007470:	d1f4      	bne.n	800745c <OnUsbDataRx+0x2c>
 8007472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 8007476:	2008      	movs	r0, #8
 8007478:	f002 f97e 	bl	8009778 <system_set_exec_state_flag>
 800747c:	e7ec      	b.n	8007458 <OnUsbDataRx+0x28>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 800747e:	061a      	lsls	r2, r3, #24
 8007480:	d410      	bmi.n	80074a4 <OnUsbDataRx+0x74>
        next_head = serial_rx_buffer_head + 1;
 8007482:	7831      	ldrb	r1, [r6, #0]
        if (next_head != serial_rx_buffer_tail) {
 8007484:	7838      	ldrb	r0, [r7, #0]
        next_head = serial_rx_buffer_head + 1;
 8007486:	1c4a      	adds	r2, r1, #1
 8007488:	b2d2      	uxtb	r2, r2
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 800748a:	2afe      	cmp	r2, #254	; 0xfe
 800748c:	bf08      	it	eq
 800748e:	2200      	moveq	r2, #0
        if (next_head != serial_rx_buffer_tail) {
 8007490:	4282      	cmp	r2, r0
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8007492:	bf1c      	itt	ne
 8007494:	f808 3001 	strbne.w	r3, [r8, r1]
          serial_rx_buffer_head = next_head;
 8007498:	7032      	strbne	r2, [r6, #0]
 800749a:	e7dd      	b.n	8007458 <OnUsbDataRx+0x28>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 800749c:	2001      	movs	r0, #1
 800749e:	f002 f96b 	bl	8009778 <system_set_exec_state_flag>
 80074a2:	e7d9      	b.n	8007458 <OnUsbDataRx+0x28>
        switch(data) {
 80074a4:	3b84      	subs	r3, #132	; 0x84
 80074a6:	2b1d      	cmp	r3, #29
 80074a8:	d8d6      	bhi.n	8007458 <OnUsbDataRx+0x28>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <OnUsbDataRx+0x80>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080075bd 	.word	0x080075bd
 80074b4:	080075ab 	.word	0x080075ab
 80074b8:	08007459 	.word	0x08007459
 80074bc:	08007459 	.word	0x08007459
 80074c0:	08007459 	.word	0x08007459
 80074c4:	08007459 	.word	0x08007459
 80074c8:	08007459 	.word	0x08007459
 80074cc:	08007459 	.word	0x08007459
 80074d0:	08007459 	.word	0x08007459
 80074d4:	08007459 	.word	0x08007459
 80074d8:	08007459 	.word	0x08007459
 80074dc:	08007459 	.word	0x08007459
 80074e0:	080075a3 	.word	0x080075a3
 80074e4:	0800759b 	.word	0x0800759b
 80074e8:	08007593 	.word	0x08007593
 80074ec:	0800758b 	.word	0x0800758b
 80074f0:	08007583 	.word	0x08007583
 80074f4:	0800757b 	.word	0x0800757b
 80074f8:	08007573 	.word	0x08007573
 80074fc:	0800756b 	.word	0x0800756b
 8007500:	08007459 	.word	0x08007459
 8007504:	08007563 	.word	0x08007563
 8007508:	0800755b 	.word	0x0800755b
 800750c:	08007553 	.word	0x08007553
 8007510:	0800754b 	.word	0x0800754b
 8007514:	08007543 	.word	0x08007543
 8007518:	0800753b 	.word	0x0800753b
 800751c:	08007459 	.word	0x08007459
 8007520:	08007533 	.word	0x08007533
 8007524:	0800752b 	.word	0x0800752b
 8007528:	4770      	bx	lr
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 800752a:	2080      	movs	r0, #128	; 0x80
 800752c:	f002 f952 	bl	80097d4 <system_set_exec_accessory_override_flag>
 8007530:	e792      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 8007532:	2040      	movs	r0, #64	; 0x40
 8007534:	f002 f94e 	bl	80097d4 <system_set_exec_accessory_override_flag>
 8007538:	e78e      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 800753a:	2020      	movs	r0, #32
 800753c:	f002 f94a 	bl	80097d4 <system_set_exec_accessory_override_flag>
 8007540:	e78a      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 8007542:	2010      	movs	r0, #16
 8007544:	f002 f946 	bl	80097d4 <system_set_exec_accessory_override_flag>
 8007548:	e786      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 800754a:	2008      	movs	r0, #8
 800754c:	f002 f942 	bl	80097d4 <system_set_exec_accessory_override_flag>
 8007550:	e782      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 8007552:	2004      	movs	r0, #4
 8007554:	f002 f93e 	bl	80097d4 <system_set_exec_accessory_override_flag>
 8007558:	e77e      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 800755a:	2002      	movs	r0, #2
 800755c:	f002 f93a 	bl	80097d4 <system_set_exec_accessory_override_flag>
 8007560:	e77a      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 8007562:	2001      	movs	r0, #1
 8007564:	f002 f936 	bl	80097d4 <system_set_exec_accessory_override_flag>
 8007568:	e776      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 800756a:	2080      	movs	r0, #128	; 0x80
 800756c:	f002 f928 	bl	80097c0 <system_set_exec_motion_override_flag>
 8007570:	e772      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 8007572:	2040      	movs	r0, #64	; 0x40
 8007574:	f002 f924 	bl	80097c0 <system_set_exec_motion_override_flag>
 8007578:	e76e      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 800757a:	2020      	movs	r0, #32
 800757c:	f002 f920 	bl	80097c0 <system_set_exec_motion_override_flag>
 8007580:	e76a      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 8007582:	2010      	movs	r0, #16
 8007584:	f002 f91c 	bl	80097c0 <system_set_exec_motion_override_flag>
 8007588:	e766      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 800758a:	2008      	movs	r0, #8
 800758c:	f002 f918 	bl	80097c0 <system_set_exec_motion_override_flag>
 8007590:	e762      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 8007592:	2004      	movs	r0, #4
 8007594:	f002 f914 	bl	80097c0 <system_set_exec_motion_override_flag>
 8007598:	e75e      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 800759a:	2002      	movs	r0, #2
 800759c:	f002 f910 	bl	80097c0 <system_set_exec_motion_override_flag>
 80075a0:	e75a      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 80075a2:	2001      	movs	r0, #1
 80075a4:	f002 f90c 	bl	80097c0 <system_set_exec_motion_override_flag>
 80075a8:	e756      	b.n	8007458 <OnUsbDataRx+0x28>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 80075aa:	4b08      	ldr	r3, [pc, #32]	; (80075cc <OnUsbDataRx+0x19c>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	069b      	lsls	r3, r3, #26
 80075b0:	f57f af52 	bpl.w	8007458 <OnUsbDataRx+0x28>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL); 
 80075b4:	2040      	movs	r0, #64	; 0x40
 80075b6:	f002 f8df 	bl	8009778 <system_set_exec_state_flag>
 80075ba:	e74d      	b.n	8007458 <OnUsbDataRx+0x28>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 80075bc:	2020      	movs	r0, #32
 80075be:	f002 f8db 	bl	8009778 <system_set_exec_state_flag>
 80075c2:	e749      	b.n	8007458 <OnUsbDataRx+0x28>
 80075c4:	20000a58 	.word	0x20000a58
 80075c8:	20000a59 	.word	0x20000a59
 80075cc:	200010b0 	.word	0x200010b0
 80075d0:	2000116c 	.word	0x2000116c

080075d4 <serial_reset_read_buffer>:
#endif
}

void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 80075d4:	4a02      	ldr	r2, [pc, #8]	; (80075e0 <serial_reset_read_buffer+0xc>)
 80075d6:	4b03      	ldr	r3, [pc, #12]	; (80075e4 <serial_reset_read_buffer+0x10>)
 80075d8:	7812      	ldrb	r2, [r2, #0]
 80075da:	701a      	strb	r2, [r3, #0]
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20000a58 	.word	0x20000a58
 80075e4:	20000a59 	.word	0x20000a59

080075e8 <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4604      	mov	r4, r0
 80075ec:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 80075ee:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 80075f2:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 80075f6:	f7fe fc35 	bl	8005e64 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 80075fa:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80075fe:	4629      	mov	r1, r5
}
 8007600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8007604:	2250      	movs	r2, #80	; 0x50
 8007606:	f7fa bad3 	b.w	8001bb0 <memcpy_to_eeprom_with_checksum>
 800760a:	bf00      	nop

0800760c <settings_store_build_info>:
// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 800760c:	4601      	mov	r1, r0
 800760e:	2250      	movs	r2, #80	; 0x50
 8007610:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007614:	f7fa bacc 	b.w	8001bb0 <memcpy_to_eeprom_with_checksum>

08007618 <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4604      	mov	r4, r0
 800761c:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 800761e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    protocol_buffer_synchronize();
 8007622:	f7fe fc1f 	bl	8005e64 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007626:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800762a:	4629      	mov	r1, r5
}
 800762c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007630:	2210      	movs	r2, #16
 8007632:	f7fa babd 	b.w	8001bb0 <memcpy_to_eeprom_with_checksum>
 8007636:	bf00      	nop

08007638 <settings_restore>:
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 8007638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800763a:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 800763c:	07c0      	lsls	r0, r0, #31
void settings_restore(uint8_t restore_flag) {
 800763e:	b085      	sub	sp, #20
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8007640:	d439      	bmi.n	80076b6 <settings_restore+0x7e>
	#endif
// ---
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 8007642:	07a9      	lsls	r1, r5, #30
 8007644:	d424      	bmi.n	8007690 <settings_restore+0x58>
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8007646:	076a      	lsls	r2, r5, #29
 8007648:	d40d      	bmi.n	8007666 <settings_restore+0x2e>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 800764a:	072b      	lsls	r3, r5, #28
 800764c:	d509      	bpl.n	8007662 <settings_restore+0x2a>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 800764e:	2100      	movs	r1, #0
 8007650:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007654:	f7fa faa6 	bl	8001ba4 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8007658:	2100      	movs	r1, #0
 800765a:	f240 30c1 	movw	r0, #961	; 0x3c1
 800765e:	f7fa faa1 	bl	8001ba4 <eeprom_put_char>
  }
}
 8007662:	b005      	add	sp, #20
 8007664:	bdf0      	pop	{r4, r5, r6, r7, pc}
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007666:	2100      	movs	r1, #0
 8007668:	f44f 7040 	mov.w	r0, #768	; 0x300
 800766c:	f7fa fa9a 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8007670:	2100      	movs	r1, #0
 8007672:	f240 3001 	movw	r0, #769	; 0x301
 8007676:	f7fa fa95 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 800767a:	2100      	movs	r1, #0
 800767c:	f240 3051 	movw	r0, #849	; 0x351
 8007680:	f7fa fa90 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007684:	2100      	movs	r1, #0
 8007686:	f240 3052 	movw	r0, #850	; 0x352
 800768a:	f7fa fa8b 	bl	8001ba4 <eeprom_put_char>
 800768e:	e7dc      	b.n	800764a <settings_restore+0x12>
    memset(&coord_data, 0, sizeof(coord_data));
 8007690:	2300      	movs	r3, #0
 8007692:	f44f 7400 	mov.w	r4, #512	; 0x200
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	9302      	str	r3, [sp, #8]
 800769c:	9303      	str	r3, [sp, #12]
    protocol_buffer_synchronize();
 800769e:	f7fe fbe1 	bl	8005e64 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80076a2:	4620      	mov	r0, r4
 80076a4:	2210      	movs	r2, #16
 80076a6:	4669      	mov	r1, sp
 80076a8:	3411      	adds	r4, #17
 80076aa:	f7fa fa81 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 80076ae:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 80076b2:	d1f4      	bne.n	800769e <settings_restore+0x66>
 80076b4:	e7c7      	b.n	8007646 <settings_restore+0xe>
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 80076b6:	2300      	movs	r3, #0
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 80076b8:	4c21      	ldr	r4, [pc, #132]	; (8007740 <settings_restore+0x108>)
  eeprom_put_char(0, SETTINGS_VERSION);
 80076ba:	4618      	mov	r0, r3
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 80076bc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 80076c0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 80076c4:	4b1f      	ldr	r3, [pc, #124]	; (8007744 <settings_restore+0x10c>)
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 80076c6:	2606      	movs	r6, #6
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 80076c8:	64e3      	str	r3, [r4, #76]	; 0x4c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 80076ca:	2300      	movs	r3, #0
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 80076cc:	f44f 17f8 	mov.w	r7, #2031616	; 0x1f0000
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 80076d0:	6563      	str	r3, [r4, #84]	; 0x54
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 80076d2:	22fa      	movs	r2, #250	; 0xfa
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 80076d4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 80076d8:	2144      	movs	r1, #68	; 0x44
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 80076da:	f04f 0e1f 	mov.w	lr, #31
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 80076de:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 80076e2:	4e19      	ldr	r6, [pc, #100]	; (8007748 <settings_restore+0x110>)
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 80076e4:	f8c4 7042 	str.w	r7, [r4, #66]	; 0x42
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 80076e8:	64a6      	str	r6, [r4, #72]	; 0x48
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 80076ea:	4e18      	ldr	r6, [pc, #96]	; (800774c <settings_restore+0x114>)
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 80076ec:	4f18      	ldr	r7, [pc, #96]	; (8007750 <settings_restore+0x118>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 80076ee:	6526      	str	r6, [r4, #80]	; 0x50
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 80076f0:	4e18      	ldr	r6, [pc, #96]	; (8007754 <settings_restore+0x11c>)
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 80076f2:	65e7      	str	r7, [r4, #92]	; 0x5c
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 80076f4:	6626      	str	r6, [r4, #96]	; 0x60
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 80076f6:	4f18      	ldr	r7, [pc, #96]	; (8007758 <settings_restore+0x120>)
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 80076f8:	4e18      	ldr	r6, [pc, #96]	; (800775c <settings_restore+0x124>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 80076fa:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 80076fe:	66a3      	str	r3, [r4, #104]	; 0x68
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007700:	4a17      	ldr	r2, [pc, #92]	; (8007760 <settings_restore+0x128>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007702:	4b18      	ldr	r3, [pc, #96]	; (8007764 <settings_restore+0x12c>)
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007704:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8007708:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 800770a:	6222      	str	r2, [r4, #32]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 800770c:	6262      	str	r2, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 800770e:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007710:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007712:	f8a4 e05a 	strh.w	lr, [r4, #90]	; 0x5a
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007716:	6027      	str	r7, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007718:	6067      	str	r7, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 800771a:	60a7      	str	r7, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 800771c:	60e7      	str	r7, [r4, #12]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 800771e:	6126      	str	r6, [r4, #16]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007720:	6166      	str	r6, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007722:	61a6      	str	r6, [r4, #24]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8007724:	61e6      	str	r6, [r4, #28]
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007726:	6323      	str	r3, [r4, #48]	; 0x30
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007728:	6363      	str	r3, [r4, #52]	; 0x34
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 800772a:	63a3      	str	r3, [r4, #56]	; 0x38
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 800772c:	63e3      	str	r3, [r4, #60]	; 0x3c
  eeprom_put_char(0, SETTINGS_VERSION);
 800772e:	f7fa fa39 	bl	8001ba4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007732:	4621      	mov	r1, r4
 8007734:	226c      	movs	r2, #108	; 0x6c
 8007736:	2001      	movs	r0, #1
 8007738:	f7fa fa3a 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
 800773c:	e781      	b.n	8007642 <settings_restore+0xa>
 800773e:	bf00      	nop
 8007740:	2000126c 	.word	0x2000126c
 8007744:	3b03126f 	.word	0x3b03126f
 8007748:	3c23d70a 	.word	0x3c23d70a
 800774c:	447a0000 	.word	0x447a0000
 8007750:	41200000 	.word	0x41200000
 8007754:	42c80000 	.word	0x42c80000
 8007758:	45a00000 	.word	0x45a00000
 800775c:	44fa0000 	.word	0x44fa0000
 8007760:	4bdbba00 	.word	0x4bdbba00
 8007764:	c38c0000 	.word	0xc38c0000

08007768 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	460e      	mov	r6, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 800776c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007770:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007774:	f500 7440 	add.w	r4, r0, #768	; 0x300
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8007778:	4621      	mov	r1, r4
 800777a:	4630      	mov	r0, r6
 800777c:	2250      	movs	r2, #80	; 0x50
 800777e:	f7fa fa69 	bl	8001c54 <memcpy_from_eeprom_with_checksum>
 8007782:	b108      	cbz	r0, 8007788 <settings_read_startup_line+0x20>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return(false);
  }
  return(true);
 8007784:	2001      	movs	r0, #1
}
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	4605      	mov	r5, r0
    line[0] = 0; // Empty line
 800778a:	7030      	strb	r0, [r6, #0]
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 800778c:	f7fe fb6a 	bl	8005e64 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8007790:	4620      	mov	r0, r4
 8007792:	4631      	mov	r1, r6
 8007794:	2250      	movs	r2, #80	; 0x50
 8007796:	f7fa fa0b 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    return(false);
 800779a:	4628      	mov	r0, r5
 800779c:	bd70      	pop	{r4, r5, r6, pc}
 800779e:	bf00      	nop

080077a0 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 80077a0:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 80077a2:	2250      	movs	r2, #80	; 0x50
 80077a4:	f44f 7170 	mov.w	r1, #960	; 0x3c0
{
 80077a8:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 80077aa:	f7fa fa53 	bl	8001c54 <memcpy_from_eeprom_with_checksum>
 80077ae:	b108      	cbz	r0, 80077b4 <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return(false);
  }
  return(true);
 80077b0:	2001      	movs	r0, #1
}
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	4604      	mov	r4, r0
    line[0] = 0; // Empty line
 80077b6:	7028      	strb	r0, [r5, #0]
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 80077b8:	4629      	mov	r1, r5
 80077ba:	2250      	movs	r2, #80	; 0x50
 80077bc:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80077c0:	f7fa f9f6 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    return(false);
 80077c4:	4620      	mov	r0, r4
 80077c6:	bd38      	pop	{r3, r4, r5, pc}

080077c8 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	460e      	mov	r6, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 80077cc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80077d0:	f500 7400 	add.w	r4, r0, #512	; 0x200
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 80077d4:	4621      	mov	r1, r4
 80077d6:	4630      	mov	r0, r6
 80077d8:	2210      	movs	r2, #16
 80077da:	f7fa fa3b 	bl	8001c54 <memcpy_from_eeprom_with_checksum>
 80077de:	b108      	cbz	r0, 80077e4 <settings_read_coord_data+0x1c>
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
    return(false);
  }
  return(true);
 80077e0:	2001      	movs	r0, #1
}
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
		coord_data[X_AXIS] = 0.0f;
 80077e4:	2300      	movs	r3, #0
 80077e6:	4605      	mov	r5, r0
 80077e8:	6033      	str	r3, [r6, #0]
		coord_data[Y_AXIS] = 0.0f;
 80077ea:	6073      	str	r3, [r6, #4]
		coord_data[Z_AXIS] = 0.0f;
 80077ec:	60b3      	str	r3, [r6, #8]
		coord_data[A_AXIS] = 0.0f;
 80077ee:	60f3      	str	r3, [r6, #12]
    protocol_buffer_synchronize();
 80077f0:	f7fe fb38 	bl	8005e64 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80077f4:	4620      	mov	r0, r4
 80077f6:	4631      	mov	r1, r6
 80077f8:	2210      	movs	r2, #16
 80077fa:	f7fa f9d9 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    return(false);
 80077fe:	4628      	mov	r0, r5
 8007800:	bd70      	pop	{r4, r5, r6, pc}
 8007802:	bf00      	nop

08007804 <settings_store_global_setting>:
  return(true);
}


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	460d      	mov	r5, r1
 8007808:	4604      	mov	r4, r0
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 800780a:	2100      	movs	r1, #0
 800780c:	4628      	mov	r0, r5
 800780e:	f7f9 fbed 	bl	8000fec <__aeabi_fcmplt>
 8007812:	2800      	cmp	r0, #0
 8007814:	d16c      	bne.n	80078f0 <settings_store_global_setting+0xec>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 8007816:	2c63      	cmp	r4, #99	; 0x63
 8007818:	d91e      	bls.n	8007858 <settings_store_global_setting+0x54>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 800781a:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
 800781e:	b2db      	uxtb	r3, r3
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
      if (parameter < N_AXIS) {
 8007820:	2b03      	cmp	r3, #3
 8007822:	f240 813b 	bls.w	8007a9c <settings_store_global_setting+0x298>
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007826:	2b09      	cmp	r3, #9
 8007828:	d914      	bls.n	8007854 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 800782a:	f1a4 036e 	sub.w	r3, r4, #110	; 0x6e
 800782e:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8007830:	2b03      	cmp	r3, #3
 8007832:	f240 8119 	bls.w	8007a68 <settings_store_global_setting+0x264>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007836:	2b09      	cmp	r3, #9
 8007838:	d90c      	bls.n	8007854 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 800783a:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 800783e:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8007840:	2b03      	cmp	r3, #3
 8007842:	f240 811a 	bls.w	8007a7a <settings_store_global_setting+0x276>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007846:	2b09      	cmp	r3, #9
 8007848:	d904      	bls.n	8007854 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 800784a:	347e      	adds	r4, #126	; 0x7e
 800784c:	b2e4      	uxtb	r4, r4
      if (parameter < N_AXIS) {
 800784e:	2c03      	cmp	r4, #3
 8007850:	f240 811d 	bls.w	8007a8e <settings_store_global_setting+0x28a>
        #else
				return(STATUS_SETTING_DISABLED_LASER);
        #endif
        break;
      default:
        return(STATUS_INVALID_STATEMENT);
 8007854:	2003      	movs	r0, #3
 8007856:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t int_value = truncf(value);
 8007858:	4628      	mov	r0, r5
 800785a:	f7f9 fc2b 	bl	80010b4 <__aeabi_f2uiz>
 800785e:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 8007860:	2c20      	cmp	r4, #32
 8007862:	d8f7      	bhi.n	8007854 <settings_store_global_setting+0x50>
 8007864:	a301      	add	r3, pc, #4	; (adr r3, 800786c <settings_store_global_setting+0x68>)
 8007866:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800786a:	bf00      	nop
 800786c:	0800791f 	.word	0x0800791f
 8007870:	08007929 	.word	0x08007929
 8007874:	08007951 	.word	0x08007951
 8007878:	08007931 	.word	0x08007931
 800787c:	0800793d 	.word	0x0800793d
 8007880:	0800795d 	.word	0x0800795d
 8007884:	08007971 	.word	0x08007971
 8007888:	08007855 	.word	0x08007855
 800788c:	08007855 	.word	0x08007855
 8007890:	08007855 	.word	0x08007855
 8007894:	080079db 	.word	0x080079db
 8007898:	080079e3 	.word	0x080079e3
 800789c:	0800799f 	.word	0x0800799f
 80078a0:	08007a0f 	.word	0x08007a0f
 80078a4:	08007855 	.word	0x08007855
 80078a8:	08007855 	.word	0x08007855
 80078ac:	08007855 	.word	0x08007855
 80078b0:	08007855 	.word	0x08007855
 80078b4:	08007855 	.word	0x08007855
 80078b8:	08007855 	.word	0x08007855
 80078bc:	080079e9 	.word	0x080079e9
 80078c0:	080079f9 	.word	0x080079f9
 80078c4:	0800798b 	.word	0x0800798b
 80078c8:	080079d3 	.word	0x080079d3
 80078cc:	080079c7 	.word	0x080079c7
 80078d0:	080079cd 	.word	0x080079cd
 80078d4:	080079a5 	.word	0x080079a5
 80078d8:	080079ad 	.word	0x080079ad
 80078dc:	08007855 	.word	0x08007855
 80078e0:	08007855 	.word	0x08007855
 80078e4:	080079b3 	.word	0x080079b3
 80078e8:	080079bd 	.word	0x080079bd
 80078ec:	080078f5 	.word	0x080078f5
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 80078f0:	2004      	movs	r0, #4
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 80078f4:	4a6e      	ldr	r2, [pc, #440]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80078f6:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80078fa:	2800      	cmp	r0, #0
 80078fc:	f000 8098 	beq.w	8007a30 <settings_store_global_setting+0x22c>
 8007900:	f043 0302 	orr.w	r3, r3, #2
 8007904:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8007908:	210a      	movs	r1, #10
 800790a:	2000      	movs	r0, #0
 800790c:	f7fa f94a 	bl	8001ba4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007910:	226c      	movs	r2, #108	; 0x6c
 8007912:	4967      	ldr	r1, [pc, #412]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 8007914:	2001      	movs	r0, #1
 8007916:	f7fa f94b 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    }
  }
  write_global_settings();
  return(STATUS_OK);
 800791a:	2000      	movs	r0, #0
 800791c:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 800791e:	2802      	cmp	r0, #2
 8007920:	f200 80a7 	bhi.w	8007a72 <settings_store_global_setting+0x26e>
 8007924:	2006      	movs	r0, #6
 8007926:	bd38      	pop	{r3, r4, r5, pc}
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8007928:	4b61      	ldr	r3, [pc, #388]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 800792a:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
 800792e:	e7eb      	b.n	8007908 <settings_store_global_setting+0x104>
        settings.dir_invert_mask = int_value;
 8007930:	4b5f      	ldr	r3, [pc, #380]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 8007932:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007936:	f000 fd5f 	bl	80083f8 <st_generate_step_dir_invert_masks>
        break;
 800793a:	e7e5      	b.n	8007908 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 800793c:	4a5c      	ldr	r2, [pc, #368]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 800793e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8007942:	2800      	cmp	r0, #0
 8007944:	d079      	beq.n	8007a3a <settings_store_global_setting+0x236>
 8007946:	f043 0304 	orr.w	r3, r3, #4
 800794a:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 800794e:	e7db      	b.n	8007908 <settings_store_global_setting+0x104>
        settings.step_invert_mask = int_value;
 8007950:	4b57      	ldr	r3, [pc, #348]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 8007952:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007956:	f000 fd4f 	bl	80083f8 <st_generate_step_dir_invert_masks>
        break;
 800795a:	e7d5      	b.n	8007908 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 800795c:	4a54      	ldr	r2, [pc, #336]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 800795e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8007962:	2800      	cmp	r0, #0
 8007964:	d06e      	beq.n	8007a44 <settings_store_global_setting+0x240>
 8007966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800796a:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 800796e:	e7cb      	b.n	8007908 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8007970:	4b4f      	ldr	r3, [pc, #316]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 8007972:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007976:	2800      	cmp	r0, #0
 8007978:	d054      	beq.n	8007a24 <settings_store_global_setting+0x220>
 800797a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        probe_configure_invert_mask(false);
 800797e:	2000      	movs	r0, #0
 8007980:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007984:	f7fd fb08 	bl	8004f98 <probe_configure_invert_mask>
        break;
 8007988:	e7be      	b.n	8007908 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 800798a:	4a49      	ldr	r2, [pc, #292]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 800798c:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8007990:	2800      	cmp	r0, #0
 8007992:	d061      	beq.n	8007a58 <settings_store_global_setting+0x254>
 8007994:	f043 0310 	orr.w	r3, r3, #16
 8007998:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 800799c:	e7b4      	b.n	8007908 <settings_store_global_setting+0x104>
      case 12: settings.arc_tolerance = value; break;
 800799e:	4b44      	ldr	r3, [pc, #272]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079a0:	64dd      	str	r5, [r3, #76]	; 0x4c
 80079a2:	e7b1      	b.n	8007908 <settings_store_global_setting+0x104>
      case 26: settings.homing_debounce_delay = int_value; break;
 80079a4:	4b42      	ldr	r3, [pc, #264]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079a6:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 80079aa:	e7ad      	b.n	8007908 <settings_store_global_setting+0x104>
      case 27: settings.homing_pulloff = value; break;
 80079ac:	4b40      	ldr	r3, [pc, #256]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079ae:	669d      	str	r5, [r3, #104]	; 0x68
 80079b0:	e7aa      	b.n	8007908 <settings_store_global_setting+0x104>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80079b2:	4b3f      	ldr	r3, [pc, #252]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079b4:	651d      	str	r5, [r3, #80]	; 0x50
 80079b6:	f000 f91b 	bl	8007bf0 <spindle_init>
 80079ba:	e7a5      	b.n	8007908 <settings_store_global_setting+0x104>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80079bc:	4b3c      	ldr	r3, [pc, #240]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079be:	655d      	str	r5, [r3, #84]	; 0x54
 80079c0:	f000 f916 	bl	8007bf0 <spindle_init>
 80079c4:	e7a0      	b.n	8007908 <settings_store_global_setting+0x104>
      case 24: settings.homing_feed_rate = value; break;
 80079c6:	4b3a      	ldr	r3, [pc, #232]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079c8:	65dd      	str	r5, [r3, #92]	; 0x5c
 80079ca:	e79d      	b.n	8007908 <settings_store_global_setting+0x104>
      case 25: settings.homing_seek_rate = value; break;
 80079cc:	4b38      	ldr	r3, [pc, #224]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079ce:	661d      	str	r5, [r3, #96]	; 0x60
 80079d0:	e79a      	b.n	8007908 <settings_store_global_setting+0x104>
      case 23: settings.homing_dir_mask = int_value; break;
 80079d2:	4b37      	ldr	r3, [pc, #220]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079d4:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
 80079d8:	e796      	b.n	8007908 <settings_store_global_setting+0x104>
      case 10: settings.status_report_mask = int_value; break;
 80079da:	4b35      	ldr	r3, [pc, #212]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079dc:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
 80079e0:	e792      	b.n	8007908 <settings_store_global_setting+0x104>
      case 11: settings.junction_deviation = value; break;
 80079e2:	4b33      	ldr	r3, [pc, #204]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079e4:	649d      	str	r5, [r3, #72]	; 0x48
 80079e6:	e78f      	b.n	8007908 <settings_store_global_setting+0x104>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 80079e8:	4a31      	ldr	r2, [pc, #196]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079ea:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) {
 80079ee:	b370      	cbz	r0, 8007a4e <settings_store_global_setting+0x24a>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 80079f0:	06d9      	lsls	r1, r3, #27
 80079f2:	d457      	bmi.n	8007aa4 <settings_store_global_setting+0x2a0>
 80079f4:	200a      	movs	r0, #10
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 80079f8:	4b2d      	ldr	r3, [pc, #180]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 80079fa:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80079fe:	b380      	cbz	r0, 8007a62 <settings_store_global_setting+0x25e>
 8007a00:	f042 0208 	orr.w	r2, r2, #8
 8007a04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8007a08:	f7fb fac8 	bl	8002f9c <limits_init>
        break;
 8007a0c:	e77c      	b.n	8007908 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 8007a0e:	4b28      	ldr	r3, [pc, #160]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 8007a10:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007a14:	b148      	cbz	r0, 8007a2a <settings_store_global_setting+0x226>
 8007a16:	f042 0201 	orr.w	r2, r2, #1
 8007a1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 8007a1e:	f001 fe41 	bl	80096a4 <system_flag_wco_change>
        break;
 8007a22:	e771      	b.n	8007908 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8007a24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a28:	e7a9      	b.n	800797e <settings_store_global_setting+0x17a>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8007a2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a2e:	e7f4      	b.n	8007a1a <settings_store_global_setting+0x216>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8007a30:	f023 0302 	bic.w	r3, r3, #2
 8007a34:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a38:	e766      	b.n	8007908 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8007a3a:	f023 0304 	bic.w	r3, r3, #4
 8007a3e:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a42:	e761      	b.n	8007908 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 8007a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a48:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a4c:	e75c      	b.n	8007908 <settings_store_global_setting+0x104>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 8007a4e:	f023 0320 	bic.w	r3, r3, #32
 8007a52:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a56:	e757      	b.n	8007908 <settings_store_global_setting+0x104>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8007a58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007a5c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007a60:	e752      	b.n	8007908 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8007a62:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8007a66:	e7cd      	b.n	8007a04 <settings_store_global_setting+0x200>
            settings.max_rate[parameter] = value;
 8007a68:	4a11      	ldr	r2, [pc, #68]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8007a70:	e74a      	b.n	8007908 <settings_store_global_setting+0x104>
        settings.pulse_microseconds = int_value; break;
 8007a72:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 8007a74:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 8007a78:	e746      	b.n	8007908 <settings_store_global_setting+0x104>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	490d      	ldr	r1, [pc, #52]	; (8007ab4 <settings_store_global_setting+0x2b0>)
 8007a7e:	f103 0408 	add.w	r4, r3, #8
 8007a82:	f7f9 f915 	bl	8000cb0 <__aeabi_fmul>
 8007a86:	4b0a      	ldr	r3, [pc, #40]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 8007a88:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007a8c:	e73c      	b.n	8007908 <settings_store_global_setting+0x104>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8007a8e:	4b08      	ldr	r3, [pc, #32]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 8007a90:	340c      	adds	r4, #12
 8007a92:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8007a96:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8007a9a:	e735      	b.n	8007908 <settings_store_global_setting+0x104>
            settings.steps_per_mm[parameter] = value;
 8007a9c:	4a04      	ldr	r2, [pc, #16]	; (8007ab0 <settings_store_global_setting+0x2ac>)
 8007a9e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8007aa2:	e731      	b.n	8007908 <settings_store_global_setting+0x104>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8007aa4:	f043 0320 	orr.w	r3, r3, #32
 8007aa8:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007aac:	e72c      	b.n	8007908 <settings_store_global_setting+0x104>
 8007aae:	bf00      	nop
 8007ab0:	2000126c 	.word	0x2000126c
 8007ab4:	45610000 	.word	0x45610000

08007ab8 <settings_init>:
}


// Initialize the config subsystem
void settings_init() {
 8007ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t version = eeprom_get_char(0);
 8007aba:	2000      	movs	r0, #0
void settings_init() {
 8007abc:	b085      	sub	sp, #20
  uint8_t version = eeprom_get_char(0);
 8007abe:	f7fa f86b 	bl	8001b98 <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 8007ac2:	280a      	cmp	r0, #10
 8007ac4:	d077      	beq.n	8007bb6 <settings_init+0xfe>
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007ac6:	f44f 16f8 	mov.w	r6, #2031616	; 0x1f0000
  if(!read_global_settings()) {
    report_status_message(STATUS_SETTING_READ_FAIL);
 8007aca:	2007      	movs	r0, #7
 8007acc:	f7fe fcc0 	bl	8006450 <report_status_message>
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007ad0:	231f      	movs	r3, #31
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007ad2:	4c3d      	ldr	r4, [pc, #244]	; (8007bc8 <settings_init+0x110>)
 8007ad4:	2706      	movs	r7, #6
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007ad6:	f8c4 6042 	str.w	r6, [r4, #66]	; 0x42
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007ada:	4e3c      	ldr	r6, [pc, #240]	; (8007bcc <settings_init+0x114>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007adc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007ae0:	64e6      	str	r6, [r4, #76]	; 0x4c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007ae2:	2600      	movs	r6, #0
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007ae4:	22fa      	movs	r2, #250	; 0xfa
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007ae6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007aea:	2500      	movs	r5, #0
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007aec:	2144      	movs	r1, #68	; 0x44
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007aee:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007af2:	4f37      	ldr	r7, [pc, #220]	; (8007bd0 <settings_init+0x118>)
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007af4:	6566      	str	r6, [r4, #84]	; 0x54
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007af6:	64a7      	str	r7, [r4, #72]	; 0x48
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007af8:	4f36      	ldr	r7, [pc, #216]	; (8007bd4 <settings_init+0x11c>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007afa:	4e37      	ldr	r6, [pc, #220]	; (8007bd8 <settings_init+0x120>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007afc:	6527      	str	r7, [r4, #80]	; 0x50
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007afe:	4f37      	ldr	r7, [pc, #220]	; (8007bdc <settings_init+0x124>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007b00:	6626      	str	r6, [r4, #96]	; 0x60
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007b02:	65e7      	str	r7, [r4, #92]	; 0x5c
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007b04:	4e36      	ldr	r6, [pc, #216]	; (8007be0 <settings_init+0x128>)
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007b06:	4f37      	ldr	r7, [pc, #220]	; (8007be4 <settings_init+0x12c>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007b08:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007b0c:	66a3      	str	r3, [r4, #104]	; 0x68
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007b0e:	4a36      	ldr	r2, [pc, #216]	; (8007be8 <settings_init+0x130>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007b10:	4b36      	ldr	r3, [pc, #216]	; (8007bec <settings_init+0x134>)
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007b12:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8007b16:	4628      	mov	r0, r5
 8007b18:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007b1a:	6222      	str	r2, [r4, #32]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007b1c:	6262      	str	r2, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007b1e:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007b20:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007b22:	6323      	str	r3, [r4, #48]	; 0x30
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007b24:	6363      	str	r3, [r4, #52]	; 0x34
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007b26:	63a3      	str	r3, [r4, #56]	; 0x38
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007b28:	63e3      	str	r3, [r4, #60]	; 0x3c
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007b2a:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007b2e:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007b32:	6027      	str	r7, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007b34:	6067      	str	r7, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007b36:	60a7      	str	r7, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007b38:	60e7      	str	r7, [r4, #12]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007b3a:	6126      	str	r6, [r4, #16]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007b3c:	6166      	str	r6, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007b3e:	61a6      	str	r6, [r4, #24]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8007b40:	61e6      	str	r6, [r4, #28]
  eeprom_put_char(0, SETTINGS_VERSION);
 8007b42:	f7fa f82f 	bl	8001ba4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007b46:	4621      	mov	r1, r4
    memset(&coord_data, 0, sizeof(coord_data));
 8007b48:	f44f 7400 	mov.w	r4, #512	; 0x200
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007b4c:	226c      	movs	r2, #108	; 0x6c
 8007b4e:	2001      	movs	r0, #1
 8007b50:	f7fa f82e 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    memset(&coord_data, 0, sizeof(coord_data));
 8007b54:	9500      	str	r5, [sp, #0]
 8007b56:	9501      	str	r5, [sp, #4]
 8007b58:	9502      	str	r5, [sp, #8]
 8007b5a:	9503      	str	r5, [sp, #12]
    protocol_buffer_synchronize();
 8007b5c:	f7fe f982 	bl	8005e64 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007b60:	4620      	mov	r0, r4
 8007b62:	2210      	movs	r2, #16
 8007b64:	4669      	mov	r1, sp
 8007b66:	3411      	adds	r4, #17
 8007b68:	f7fa f822 	bl	8001bb0 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007b6c:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 8007b70:	d1f4      	bne.n	8007b5c <settings_init+0xa4>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007b72:	2100      	movs	r1, #0
 8007b74:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007b78:	f7fa f814 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	f240 3001 	movw	r0, #769	; 0x301
 8007b82:	f7fa f80f 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8007b86:	2100      	movs	r1, #0
 8007b88:	f240 3051 	movw	r0, #849	; 0x351
 8007b8c:	f7fa f80a 	bl	8001ba4 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007b90:	2100      	movs	r1, #0
 8007b92:	f240 3052 	movw	r0, #850	; 0x352
 8007b96:	f7fa f805 	bl	8001ba4 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007ba0:	f7fa f800 	bl	8001ba4 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	f240 30c1 	movw	r0, #961	; 0x3c1
 8007baa:	f7f9 fffb 	bl	8001ba4 <eeprom_put_char>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
    report_grbl_settings();
 8007bae:	f7fe fce7 	bl	8006580 <report_grbl_settings>
  }
}
 8007bb2:	b005      	add	sp, #20
 8007bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8007bb6:	226c      	movs	r2, #108	; 0x6c
 8007bb8:	2101      	movs	r1, #1
 8007bba:	4803      	ldr	r0, [pc, #12]	; (8007bc8 <settings_init+0x110>)
 8007bbc:	f7fa f84a 	bl	8001c54 <memcpy_from_eeprom_with_checksum>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d080      	beq.n	8007ac6 <settings_init+0xe>
}
 8007bc4:	b005      	add	sp, #20
 8007bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc8:	2000126c 	.word	0x2000126c
 8007bcc:	3b03126f 	.word	0x3b03126f
 8007bd0:	3c23d70a 	.word	0x3c23d70a
 8007bd4:	447a0000 	.word	0x447a0000
 8007bd8:	42c80000 	.word	0x42c80000
 8007bdc:	41200000 	.word	0x41200000
 8007be0:	44fa0000 	.word	0x44fa0000
 8007be4:	45a00000 	.word	0x45a00000
 8007be8:	4bdbba00 	.word	0x4bdbba00
 8007bec:	c38c0000 	.word	0xc38c0000

08007bf0 <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 8007bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007bf4:	4b37      	ldr	r3, [pc, #220]	; (8007cd4 <spindle_init+0xe4>)
{
 8007bf6:	b088      	sub	sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007bf8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bfa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007bfc:	f7f8 ff4e 	bl	8000a9c <__aeabi_fsub>
 8007c00:	4601      	mov	r1, r0
 8007c02:	4835      	ldr	r0, [pc, #212]	; (8007cd8 <spindle_init+0xe8>)
 8007c04:	f7f9 f908 	bl	8000e18 <__aeabi_fdiv>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
#ifdef USE_SPINDLE_DIR_AS_ENABLE_PIN
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
#else
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007c08:	2701      	movs	r7, #1
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007c0a:	4c34      	ldr	r4, [pc, #208]	; (8007cdc <spindle_init+0xec>)
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE);
 8007c0c:	4639      	mov	r1, r7
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007c0e:	6020      	str	r0, [r4, #0]
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE);
 8007c10:	2008      	movs	r0, #8
 8007c12:	f7f9 fe11 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007c16:	f04f 0803 	mov.w	r8, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007c1a:	2310      	movs	r3, #16


#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007c1c:	2400      	movs	r4, #0
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007c1e:	ae08      	add	r6, sp, #32
 8007c20:	f826 7d20 	strh.w	r7, [r6, #-32]!
  GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007c24:	4631      	mov	r1, r6
 8007c26:	482e      	ldr	r0, [pc, #184]	; (8007ce0 <spindle_init+0xf0>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007c28:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007c2c:	f88d 8002 	strb.w	r8, [sp, #2]
  GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007c30:	f7f9 fbe6 	bl	8001400 <GPIO_Init>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8007c34:	4639      	mov	r1, r7
 8007c36:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c3a:	f7f9 fdfd 	bl	8001838 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007c3e:	a801      	add	r0, sp, #4
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007c40:	9404      	str	r4, [sp, #16]
 8007c42:	9405      	str	r4, [sp, #20]
 8007c44:	9406      	str	r4, [sp, #24]
 8007c46:	9407      	str	r4, [sp, #28]
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007c48:	f7f9 feac 	bl	80019a4 <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8007c4c:	2263      	movs	r2, #99	; 0x63
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007c4e:	4b25      	ldr	r3, [pc, #148]	; (8007ce4 <spindle_init+0xf4>)
 8007c50:	4825      	ldr	r0, [pc, #148]	; (8007ce8 <spindle_init+0xf8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007c54:	4d25      	ldr	r5, [pc, #148]	; (8007cec <spindle_init+0xfc>)
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007c56:	fba0 0303 	umull	r0, r3, r0, r3
 8007c5a:	0c9b      	lsrs	r3, r3, #18
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007c5c:	a901      	add	r1, sp, #4
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007c5e:	3b01      	subs	r3, #1
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007c60:	4628      	mov	r0, r5
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8007c62:	f8ad 2008 	strh.w	r2, [sp, #8]
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007c66:	f8ad 3004 	strh.w	r3, [sp, #4]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8007c6a:	f8ad 4006 	strh.w	r4, [sp, #6]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8007c6e:	f8ad 400a 	strh.w	r4, [sp, #10]
  timerInitStructure.TIM_RepetitionCounter = 0;
 8007c72:	f88d 400c 	strb.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007c76:	f7f9 fdf7 	bl	8001868 <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8007c7a:	4b1d      	ldr	r3, [pc, #116]	; (8007cf0 <spindle_init+0x100>)
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM1, &outputChannelInit);
 8007c7c:	a904      	add	r1, sp, #16
 8007c7e:	4628      	mov	r0, r5
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8007c80:	9304      	str	r3, [sp, #16]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 8007c82:	f8cd 4016 	str.w	r4, [sp, #22]
  TIM_OC1Init(TIM1, &outputChannelInit);
 8007c86:	f7f9 fe45 	bl	8001914 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	2108      	movs	r1, #8
 8007c8e:	f7f9 feb9 	bl	8001a04 <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007c92:	4621      	mov	r1, r4
 8007c94:	4628      	mov	r0, r5
 8007c96:	f7f9 fe9b 	bl	80019d0 <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f7f9 fe89 	bl	80019b4 <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	2004      	movs	r0, #4
 8007ca6:	f7f9 fdc7 	bl	8001838 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007caa:	2218      	movs	r2, #24
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8007cac:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8007cb0:	4631      	mov	r1, r6
 8007cb2:	4810      	ldr	r0, [pc, #64]	; (8007cf4 <spindle_init+0x104>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007cb4:	f88d 2003 	strb.w	r2, [sp, #3]
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8007cb8:	f8ad 3000 	strh.w	r3, [sp]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007cbc:	f88d 8002 	strb.w	r8, [sp, #2]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8007cc0:	f7f9 fb9e 	bl	8001400 <GPIO_Init>
#ifdef VARIABLE_SPINDLE
#ifdef AVRTARGET
    SPINDLE_TCCRA_REGISTER &= ~(1<<SPINDLE_COMB_BIT); // Disable PWM. Output voltage is zero.
#endif
#if defined (STM32F103C8)
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f7f9 fe82 	bl	80019d0 <TIM_CtrlPWMOutputs>
}
 8007ccc:	b008      	add	sp, #32
 8007cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd2:	bf00      	nop
 8007cd4:	2000126c 	.word	0x2000126c
 8007cd8:	42c60000 	.word	0x42c60000
 8007cdc:	20000a5c 	.word	0x20000a5c
 8007ce0:	40010c00 	.word	0x40010c00
 8007ce4:	20000004 	.word	0x20000004
 8007ce8:	431bde83 	.word	0x431bde83
 8007cec:	40012c00 	.word	0x40012c00
 8007cf0:	00010060 	.word	0x00010060
 8007cf4:	40010800 	.word	0x40010800

08007cf8 <spindle_get_state>:
{
 8007cf8:	b508      	push	{r3, lr}
      pin = GPIO_ReadInputData(SPINDLE_DIRECTION_PORT);
 8007cfa:	4804      	ldr	r0, [pc, #16]	; (8007d0c <spindle_get_state+0x14>)
 8007cfc:	f7f9 fd36 	bl	800176c <GPIO_ReadInputData>
        if (pin & (1<<SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 8007d00:	f010 0f01 	tst.w	r0, #1
}
 8007d04:	bf14      	ite	ne
 8007d06:	2002      	movne	r0, #2
 8007d08:	2001      	moveq	r0, #1
 8007d0a:	bd08      	pop	{r3, pc}
 8007d0c:	40010c00 	.word	0x40010c00

08007d10 <spindle_stop>:
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007d10:	2100      	movs	r1, #0
 8007d12:	4801      	ldr	r0, [pc, #4]	; (8007d18 <spindle_stop+0x8>)
 8007d14:	f7f9 be5c 	b.w	80019d0 <TIM_CtrlPWMOutputs>
 8007d18:	40012c00 	.word	0x40012c00

08007d1c <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 8007d1c:	4601      	mov	r1, r0
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 8007d1e:	4803      	ldr	r0, [pc, #12]	; (8007d2c <spindle_set_speed+0x10>)
 8007d20:	8681      	strh	r1, [r0, #52]	; 0x34
				#else
					SetSpindleEnablebit();
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007d22:	b101      	cbz	r1, 8007d26 <spindle_set_speed+0xa>
			} else {
			#ifdef AVRTARGET
      SPINDLE_TCCRA_REGISTER |= (1<<SPINDLE_COMB_BIT); // Ensure PWM output is enabled.
			#endif
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007d24:	2101      	movs	r1, #1
 8007d26:	f7f9 be53 	b.w	80019d0 <TIM_CtrlPWMOutputs>
 8007d2a:	bf00      	nop
 8007d2c:	40012c00 	.word	0x40012c00

08007d30 <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007d32:	4b1e      	ldr	r3, [pc, #120]	; (8007dac <spindle_compute_pwm_value+0x7c>)
	{
 8007d34:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007d36:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8007d38:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	f7f9 f969 	bl	8001014 <__aeabi_fcmpge>
 8007d42:	4d1b      	ldr	r5, [pc, #108]	; (8007db0 <spindle_compute_pwm_value+0x80>)
 8007d44:	b110      	cbz	r0, 8007d4c <spindle_compute_pwm_value+0x1c>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
 8007d46:	612c      	str	r4, [r5, #16]
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007d48:	2064      	movs	r0, #100	; 0x64
 8007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007d4c:	7aa8      	ldrb	r0, [r5, #10]
 8007d4e:	f7f8 ff5b 	bl	8000c08 <__aeabi_i2f>
 8007d52:	4639      	mov	r1, r7
 8007d54:	f7f8 ffac 	bl	8000cb0 <__aeabi_fmul>
 8007d58:	4916      	ldr	r1, [pc, #88]	; (8007db4 <spindle_compute_pwm_value+0x84>)
 8007d5a:	f7f8 ffa9 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007d5e:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007d60:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007d62:	f7f9 f957 	bl	8001014 <__aeabi_fcmpge>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d1ed      	bne.n	8007d46 <spindle_compute_pwm_value+0x16>
		}
		else if (rpm <= settings.rpm_min) {
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	f7f9 f947 	bl	8001000 <__aeabi_fcmple>
 8007d72:	b140      	cbz	r0, 8007d86 <spindle_compute_pwm_value+0x56>
			if (rpm == 0.0f) { // S0 disables spindle
 8007d74:	2400      	movs	r4, #0
 8007d76:	4638      	mov	r0, r7
 8007d78:	4621      	mov	r1, r4
 8007d7a:	f7f9 f92d 	bl	8000fd8 <__aeabi_fcmpeq>
 8007d7e:	b190      	cbz	r0, 8007da6 <spindle_compute_pwm_value+0x76>
				sys.spindle_speed = 0.0f;
 8007d80:	612c      	str	r4, [r5, #16]
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 8007d82:	2000      	movs	r0, #0
 8007d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else {
			// Compute intermediate PWM value with linear spindle speed model.
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007d86:	4631      	mov	r1, r6
			sys.spindle_speed = rpm;
 8007d88:	612f      	str	r7, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	f7f8 fe86 	bl	8000a9c <__aeabi_fsub>
 8007d90:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <spindle_compute_pwm_value+0x88>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	f7f8 ff8c 	bl	8000cb0 <__aeabi_fmul>
 8007d98:	f002 fffc 	bl	800ad94 <floorf>
 8007d9c:	f7f9 f98a 	bl	80010b4 <__aeabi_f2uiz>
 8007da0:	3001      	adds	r0, #1
 8007da2:	b280      	uxth	r0, r0
		}
		return(pwm_value);
	}
 8007da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				sys.spindle_speed = settings.rpm_min;
 8007da6:	612e      	str	r6, [r5, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007da8:	2001      	movs	r0, #1
 8007daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dac:	2000126c 	.word	0x2000126c
 8007db0:	200010b0 	.word	0x200010b0
 8007db4:	3c23d70a 	.word	0x3c23d70a
 8007db8:	20000a5c 	.word	0x20000a5c

08007dbc <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sys.abort) { return; } // Block during abort.
 8007dbe:	4c3a      	ldr	r4, [pc, #232]	; (8007ea8 <spindle_set_state+0xec>)
 8007dc0:	7862      	ldrb	r2, [r4, #1]
 8007dc2:	bb02      	cbnz	r2, 8007e06 <spindle_set_state+0x4a>
 8007dc4:	4605      	mov	r5, r0
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8007dc6:	b1f8      	cbz	r0, 8007e08 <spindle_set_state+0x4c>
    #endif
    spindle_stop();
  
  } else {
    #ifndef USE_SPINDLE_DIR_AS_ENABLE_PIN
      if (state == SPINDLE_ENABLE_CW) {
 8007dc8:	2810      	cmp	r0, #16
 8007dca:	460e      	mov	r6, r1
 8007dcc:	d04e      	beq.n	8007e6c <spindle_set_state+0xb0>
        ResetSpindleDirectionBit();
	  }
	  else {
      SetSpindleDirectionBit();
 8007dce:	2201      	movs	r2, #1
 8007dd0:	4836      	ldr	r0, [pc, #216]	; (8007eac <spindle_set_state+0xf0>)
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	f7f9 fcd6 	bl	8001784 <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007dd8:	4b35      	ldr	r3, [pc, #212]	; (8007eb0 <spindle_set_state+0xf4>)
 8007dda:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007dde:	0792      	lsls	r2, r2, #30
 8007de0:	d41b      	bmi.n	8007e1a <spindle_set_state+0x5e>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007de2:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8007de4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8007de6:	4638      	mov	r0, r7
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f9 f913 	bl	8001014 <__aeabi_fcmpge>
 8007dee:	b1c0      	cbz	r0, 8007e22 <spindle_set_state+0x66>
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007df0:	2264      	movs	r2, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 8007df2:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007df4:	4b2f      	ldr	r3, [pc, #188]	; (8007eb4 <spindle_set_state+0xf8>)
 8007df6:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007df8:	2101      	movs	r1, #1
 8007dfa:	482e      	ldr	r0, [pc, #184]	; (8007eb4 <spindle_set_state+0xf8>)
 8007dfc:	f7f9 fde8 	bl	80019d0 <TIM_CtrlPWMOutputs>
        SetSpindleEnablebit();
      #endif    
    #endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007e00:	2300      	movs	r3, #0
 8007e02:	7323      	strb	r3, [r4, #12]
 8007e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 8007e08:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	4829      	ldr	r0, [pc, #164]	; (8007eb4 <spindle_set_state+0xf8>)
      sys.spindle_speed = 0.0f;
 8007e0e:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007e10:	f7f9 fdde 	bl	80019d0 <TIM_CtrlPWMOutputs>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007e14:	2300      	movs	r3, #0
 8007e16:	7323      	strb	r3, [r4, #12]
 8007e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007e1a:	2d20      	cmp	r5, #32
 8007e1c:	bf08      	it	eq
 8007e1e:	2600      	moveq	r6, #0
 8007e20:	e7df      	b.n	8007de2 <spindle_set_state+0x26>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007e22:	7aa0      	ldrb	r0, [r4, #10]
 8007e24:	f7f8 fef0 	bl	8000c08 <__aeabi_i2f>
 8007e28:	4923      	ldr	r1, [pc, #140]	; (8007eb8 <spindle_set_state+0xfc>)
 8007e2a:	f7f8 ff41 	bl	8000cb0 <__aeabi_fmul>
 8007e2e:	4631      	mov	r1, r6
 8007e30:	f7f8 ff3e 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007e34:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007e36:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007e38:	f7f9 f8ec 	bl	8001014 <__aeabi_fcmpge>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d1d7      	bne.n	8007df0 <spindle_set_state+0x34>
		else if (rpm <= settings.rpm_min) {
 8007e40:	4639      	mov	r1, r7
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7f9 f8dc 	bl	8001000 <__aeabi_fcmple>
 8007e48:	b1b0      	cbz	r0, 8007e78 <spindle_set_state+0xbc>
			if (rpm == 0.0f) { // S0 disables spindle
 8007e4a:	2500      	movs	r5, #0
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f7f9 f8c2 	bl	8000fd8 <__aeabi_fcmpeq>
 8007e54:	b320      	cbz	r0, 8007ea0 <spindle_set_state+0xe4>
		TIM1->CCR1 = pwm_value;
 8007e56:	2200      	movs	r2, #0
 8007e58:	4b16      	ldr	r3, [pc, #88]	; (8007eb4 <spindle_set_state+0xf8>)
				sys.spindle_speed = 0.0f;
 8007e5a:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007e5c:	869a      	strh	r2, [r3, #52]	; 0x34
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007e5e:	2100      	movs	r1, #0
 8007e60:	4814      	ldr	r0, [pc, #80]	; (8007eb4 <spindle_set_state+0xf8>)
 8007e62:	f7f9 fdb5 	bl	80019d0 <TIM_CtrlPWMOutputs>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007e66:	2300      	movs	r3, #0
 8007e68:	7323      	strb	r3, [r4, #12]
 8007e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ResetSpindleDirectionBit();
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	480f      	ldr	r0, [pc, #60]	; (8007eac <spindle_set_state+0xf0>)
 8007e70:	f7f9 fc88 	bl	8001784 <GPIO_WriteBit>
 8007e74:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <spindle_set_state+0xf4>)
 8007e76:	e7b4      	b.n	8007de2 <spindle_set_state+0x26>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007e78:	4639      	mov	r1, r7
 8007e7a:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8007e7c:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007e7e:	f7f8 fe0d 	bl	8000a9c <__aeabi_fsub>
 8007e82:	4b0e      	ldr	r3, [pc, #56]	; (8007ebc <spindle_set_state+0x100>)
 8007e84:	6819      	ldr	r1, [r3, #0]
 8007e86:	f7f8 ff13 	bl	8000cb0 <__aeabi_fmul>
 8007e8a:	f002 ff83 	bl	800ad94 <floorf>
 8007e8e:	f7f9 f911 	bl	80010b4 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8007e92:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <spindle_set_state+0xf8>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007e94:	3001      	adds	r0, #1
 8007e96:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 8007e98:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d0df      	beq.n	8007e5e <spindle_set_state+0xa2>
 8007e9e:	e7ab      	b.n	8007df8 <spindle_set_state+0x3c>
				sys.spindle_speed = settings.rpm_min;
 8007ea0:	6127      	str	r7, [r4, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	e7a6      	b.n	8007df4 <spindle_set_state+0x38>
 8007ea6:	bf00      	nop
 8007ea8:	200010b0 	.word	0x200010b0
 8007eac:	40010c00 	.word	0x40010c00
 8007eb0:	2000126c 	.word	0x2000126c
 8007eb4:	40012c00 	.word	0x40012c00
 8007eb8:	3c23d70a 	.word	0x3c23d70a
 8007ebc:	20000a5c 	.word	0x20000a5c

08007ec0 <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 8007ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 8007ec2:	4c3a      	ldr	r4, [pc, #232]	; (8007fac <spindle_sync+0xec>)
 8007ec4:	7823      	ldrb	r3, [r4, #0]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d005      	beq.n	8007ed6 <spindle_sync+0x16>
 8007eca:	4605      	mov	r5, r0
 8007ecc:	460e      	mov	r6, r1
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 8007ece:	f7fd ffc9 	bl	8005e64 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.
 8007ed2:	7862      	ldrb	r2, [r4, #1]
 8007ed4:	b102      	cbz	r2, 8007ed8 <spindle_sync+0x18>
 8007ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8007ed8:	b305      	cbz	r5, 8007f1c <spindle_sync+0x5c>
      if (state == SPINDLE_ENABLE_CW) {
 8007eda:	2d10      	cmp	r5, #16
 8007edc:	d048      	beq.n	8007f70 <spindle_sync+0xb0>
      SetSpindleDirectionBit();
 8007ede:	2201      	movs	r2, #1
 8007ee0:	4833      	ldr	r0, [pc, #204]	; (8007fb0 <spindle_sync+0xf0>)
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	f7f9 fc4e 	bl	8001784 <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007ee8:	4b32      	ldr	r3, [pc, #200]	; (8007fb4 <spindle_sync+0xf4>)
 8007eea:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007eee:	0792      	lsls	r2, r2, #30
 8007ef0:	d502      	bpl.n	8007ef8 <spindle_sync+0x38>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007ef2:	2d20      	cmp	r5, #32
 8007ef4:	bf08      	it	eq
 8007ef6:	2600      	moveq	r6, #0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007ef8:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8007efa:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8007efc:	4638      	mov	r0, r7
 8007efe:	4629      	mov	r1, r5
 8007f00:	f7f9 f888 	bl	8001014 <__aeabi_fcmpge>
 8007f04:	b188      	cbz	r0, 8007f2a <spindle_sync+0x6a>
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007f06:	2264      	movs	r2, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 8007f08:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007f0a:	4b2b      	ldr	r3, [pc, #172]	; (8007fb8 <spindle_sync+0xf8>)
 8007f0c:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007f0e:	2101      	movs	r1, #1
 8007f10:	4829      	ldr	r0, [pc, #164]	; (8007fb8 <spindle_sync+0xf8>)
 8007f12:	f7f9 fd5d 	bl	80019d0 <TIM_CtrlPWMOutputs>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007f16:	2300      	movs	r3, #0
 8007f18:	7323      	strb	r3, [r4, #12]
 8007f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 8007f1c:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4825      	ldr	r0, [pc, #148]	; (8007fb8 <spindle_sync+0xf8>)
      sys.spindle_speed = 0.0f;
 8007f22:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007f24:	f7f9 fd54 	bl	80019d0 <TIM_CtrlPWMOutputs>
 8007f28:	e7f5      	b.n	8007f16 <spindle_sync+0x56>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007f2a:	7aa0      	ldrb	r0, [r4, #10]
 8007f2c:	f7f8 fe6c 	bl	8000c08 <__aeabi_i2f>
 8007f30:	4922      	ldr	r1, [pc, #136]	; (8007fbc <spindle_sync+0xfc>)
 8007f32:	f7f8 febd 	bl	8000cb0 <__aeabi_fmul>
 8007f36:	4631      	mov	r1, r6
 8007f38:	f7f8 feba 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007f3c:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007f3e:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007f40:	f7f9 f868 	bl	8001014 <__aeabi_fcmpge>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1de      	bne.n	8007f06 <spindle_sync+0x46>
		else if (rpm <= settings.rpm_min) {
 8007f48:	4639      	mov	r1, r7
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f7f9 f858 	bl	8001000 <__aeabi_fcmple>
 8007f50:	b1a0      	cbz	r0, 8007f7c <spindle_sync+0xbc>
			if (rpm == 0.0f) { // S0 disables spindle
 8007f52:	2500      	movs	r5, #0
 8007f54:	4630      	mov	r0, r6
 8007f56:	4629      	mov	r1, r5
 8007f58:	f7f9 f83e 	bl	8000fd8 <__aeabi_fcmpeq>
 8007f5c:	b310      	cbz	r0, 8007fa4 <spindle_sync+0xe4>
		TIM1->CCR1 = pwm_value;
 8007f5e:	2200      	movs	r2, #0
 8007f60:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <spindle_sync+0xf8>)
				sys.spindle_speed = 0.0f;
 8007f62:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007f64:	869a      	strh	r2, [r3, #52]	; 0x34
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007f66:	2100      	movs	r1, #0
 8007f68:	4813      	ldr	r0, [pc, #76]	; (8007fb8 <spindle_sync+0xf8>)
 8007f6a:	f7f9 fd31 	bl	80019d0 <TIM_CtrlPWMOutputs>
 8007f6e:	e7d2      	b.n	8007f16 <spindle_sync+0x56>
        ResetSpindleDirectionBit();
 8007f70:	2101      	movs	r1, #1
 8007f72:	480f      	ldr	r0, [pc, #60]	; (8007fb0 <spindle_sync+0xf0>)
 8007f74:	f7f9 fc06 	bl	8001784 <GPIO_WriteBit>
 8007f78:	4b0e      	ldr	r3, [pc, #56]	; (8007fb4 <spindle_sync+0xf4>)
 8007f7a:	e7bd      	b.n	8007ef8 <spindle_sync+0x38>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8007f80:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007f82:	f7f8 fd8b 	bl	8000a9c <__aeabi_fsub>
 8007f86:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <spindle_sync+0x100>)
 8007f88:	6819      	ldr	r1, [r3, #0]
 8007f8a:	f7f8 fe91 	bl	8000cb0 <__aeabi_fmul>
 8007f8e:	f002 ff01 	bl	800ad94 <floorf>
 8007f92:	f7f9 f88f 	bl	80010b4 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8007f96:	4a08      	ldr	r2, [pc, #32]	; (8007fb8 <spindle_sync+0xf8>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	b29b      	uxth	r3, r3
		TIM1->CCR1 = pwm_value;
 8007f9c:	8693      	strh	r3, [r2, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0e1      	beq.n	8007f66 <spindle_sync+0xa6>
 8007fa2:	e7b4      	b.n	8007f0e <spindle_sync+0x4e>
				sys.spindle_speed = settings.rpm_min;
 8007fa4:	6127      	str	r7, [r4, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	e7af      	b.n	8007f0a <spindle_sync+0x4a>
 8007faa:	bf00      	nop
 8007fac:	200010b0 	.word	0x200010b0
 8007fb0:	40010c00 	.word	0x40010c00
 8007fb4:	2000126c 	.word	0x2000126c
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	3c23d70a 	.word	0x3c23d70a
 8007fc0:	20000a5c 	.word	0x20000a5c

08007fc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ffc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007fc8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007fca:	e003      	b.n	8007fd4 <LoopCopyDataInit>

08007fcc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007fcc:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8007fce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007fd0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007fd2:	3104      	adds	r1, #4

08007fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007fd4:	480b      	ldr	r0, [pc, #44]	; (8008004 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8007fd8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007fda:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007fdc:	d3f6      	bcc.n	8007fcc <CopyDataInit>
	ldr	r2, =_sbss
 8007fde:	4a0b      	ldr	r2, [pc, #44]	; (800800c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8007fe0:	e002      	b.n	8007fe8 <LoopFillZerobss>

08007fe2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007fe2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007fe4:	f842 3b04 	str.w	r3, [r2], #4

08007fe8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007fe8:	4b09      	ldr	r3, [pc, #36]	; (8008010 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8007fea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007fec:	d3f9      	bcc.n	8007fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007fee:	f001 fc0b 	bl	8009808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ff2:	f002 fe1f 	bl	800ac34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007ff6:	f7fb fb19 	bl	800362c <main>
	bx	lr
 8007ffa:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007ffc:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8008000:	0800c4c4 	.word	0x0800c4c4
	ldr	r0, =_sdata
 8008004:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008008:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 800800c:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8008010:	20001358 	.word	0x20001358

08008014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008014:	e7fe      	b.n	8008014 <ADC1_2_IRQHandler>
	...

08008018 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		mc_reset();
		return;
	}
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 800801a:	4d18      	ldr	r5, [pc, #96]	; (800807c <st_wake_up+0x64>)
  {
	  SetStepperDisableBit();
 800801c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8008020:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
	  SetStepperDisableBit();
 8008024:	4816      	ldr	r0, [pc, #88]	; (8008080 <st_wake_up+0x68>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8008026:	075b      	lsls	r3, r3, #29
 8008028:	d425      	bmi.n	8008076 <st_wake_up+0x5e>
  }
  else 
  { 
	  ResetStepperDisableBit();
 800802a:	f7f9 fba9 	bl	8001780 <GPIO_ResetBits>
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 800802e:	2401      	movs	r4, #1
  TIM3->SR = ~TIM_SR_UIF;
 8008030:	f64f 77fe 	movw	r7, #65534	; 0xfffe

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008034:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8008038:	4b12      	ldr	r3, [pc, #72]	; (8008084 <st_wake_up+0x6c>)
 800803a:	4813      	ldr	r0, [pc, #76]	; (8008088 <st_wake_up+0x70>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8008042:	fba0 0202 	umull	r0, r2, r0, r2
 8008046:	0c92      	lsrs	r2, r2, #18
 8008048:	fb03 f302 	mul.w	r3, r3, r2
  st.step_outbits = step_port_invert_mask;
 800804c:	480f      	ldr	r0, [pc, #60]	; (800808c <st_wake_up+0x74>)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 800804e:	4a10      	ldr	r2, [pc, #64]	; (8008090 <st_wake_up+0x78>)
  st.step_outbits = step_port_invert_mask;
 8008050:	4d10      	ldr	r5, [pc, #64]	; (8008094 <st_wake_up+0x7c>)
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008052:	6b06      	ldr	r6, [r0, #48]	; 0x30
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8008054:	b29b      	uxth	r3, r3
  st.step_outbits = step_port_invert_mask;
 8008056:	882d      	ldrh	r5, [r5, #0]
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8008058:	8593      	strh	r3, [r2, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 800805a:	8294      	strh	r4, [r2, #20]
  TIM3->SR = ~TIM_SR_UIF;
 800805c:	8217      	strh	r7, [r2, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800805e:	8872      	ldrh	r2, [r6, #2]
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8008060:	8243      	strh	r3, [r0, #18]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008062:	1e53      	subs	r3, r2, #1
 8008064:	b29b      	uxth	r3, r3
 8008066:	858b      	strh	r3, [r1, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 8008068:	828c      	strh	r4, [r1, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 800806a:	880b      	ldrh	r3, [r1, #0]
  st.step_outbits = step_port_invert_mask;
 800806c:	8285      	strh	r5, [r0, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 800806e:	b29b      	uxth	r3, r3
 8008070:	4323      	orrs	r3, r4
 8008072:	800b      	strh	r3, [r1, #0]
 8008074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  SetStepperDisableBit();
 8008076:	f7f9 fb81 	bl	800177c <GPIO_SetBits>
 800807a:	e7d8      	b.n	800802e <st_wake_up+0x16>
 800807c:	2000126c 	.word	0x2000126c
 8008080:	40010800 	.word	0x40010800
 8008084:	20000004 	.word	0x20000004
 8008088:	431bde83 	.word	0x431bde83
 800808c:	20000af4 	.word	0x20000af4
 8008090:	40000400 	.word	0x40000400
 8008094:	20000c04 	.word	0x20000c04

08008098 <st_go_idle>:
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008098:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 800809c:	2100      	movs	r1, #0
{
 800809e:	b538      	push	{r3, r4, r5, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80080a0:	8813      	ldrh	r3, [r2, #0]

  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80080a2:	4c18      	ldr	r4, [pc, #96]	; (8008104 <st_go_idle+0x6c>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80080a4:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80080a8:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80080ac:	041b      	lsls	r3, r3, #16
  busy = false;
 80080ae:	4d16      	ldr	r5, [pc, #88]	; (8008108 <st_go_idle+0x70>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80080b0:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80080b2:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80080b4:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 80080b6:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 80080b8:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80080ba:	d00e      	beq.n	80080da <st_go_idle+0x42>
 80080bc:	4b13      	ldr	r3, [pc, #76]	; (800810c <st_go_idle+0x74>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	d112      	bne.n	80080ea <st_go_idle+0x52>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80080c4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80080c8:	075b      	lsls	r3, r3, #29
 80080ca:	d414      	bmi.n	80080f6 <st_go_idle+0x5e>
  }
  else 
  { 
	  ResetStepperDisableBit();
  }
}
 80080cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  ResetStepperDisableBit();
 80080d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080d4:	480e      	ldr	r0, [pc, #56]	; (8008110 <st_go_idle+0x78>)
 80080d6:	f7f9 bb53 	b.w	8001780 <GPIO_ResetBits>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80080da:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <st_go_idle+0x7c>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1ec      	bne.n	80080bc <st_go_idle+0x24>
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <st_go_idle+0x74>)
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	2b80      	cmp	r3, #128	; 0x80
 80080e8:	d1ec      	bne.n	80080c4 <st_go_idle+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 80080ea:	f7fb ff47 	bl	8003f7c <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80080ee:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80080f2:	075a      	lsls	r2, r3, #29
 80080f4:	d4ea      	bmi.n	80080cc <st_go_idle+0x34>
	  SetStepperDisableBit();
 80080f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 80080fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  SetStepperDisableBit();
 80080fe:	4804      	ldr	r0, [pc, #16]	; (8008110 <st_go_idle+0x78>)
 8008100:	f7f9 bb3c 	b.w	800177c <GPIO_SetBits>
 8008104:	2000126c 	.word	0x2000126c
 8008108:	20000a60 	.word	0x20000a60
 800810c:	200010b0 	.word	0x200010b0
 8008110:	40010800 	.word	0x40010800
 8008114:	200010e8 	.word	0x200010e8

08008118 <TIM2_IRQHandler>:
ISR(TIMER1_COMPA_vect)
#endif
#ifdef WIN32
void Timer1Proc()
#endif
{
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 800811a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800811e:	8a1a      	ldrh	r2, [r3, #16]
 8008120:	07d2      	lsls	r2, r2, #31
 8008122:	f140 808f 	bpl.w	8008244 <TIM2_IRQHandler+0x12c>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
		TIM2->CNT = 0;
 8008126:	2200      	movs	r2, #0
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 8008128:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 800812c:	4d93      	ldr	r5, [pc, #588]	; (800837c <TIM2_IRQHandler+0x264>)
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 800812e:	8219      	strh	r1, [r3, #16]
		TIM2->CNT = 0;
 8008130:	849a      	strh	r2, [r3, #36]	; 0x24
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 8008132:	782a      	ldrb	r2, [r5, #0]
 8008134:	2a00      	cmp	r2, #0
 8008136:	f040 8085 	bne.w	8008244 <TIM2_IRQHandler+0x12c>
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 800813a:	f64f 77fc 	movw	r7, #65532	; 0xfffc
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
#endif
  busy = true;
 800813e:	2001      	movs	r0, #1
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8008140:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8008144:	4c8e      	ldr	r4, [pc, #568]	; (8008380 <TIM2_IRQHandler+0x268>)
 8008146:	f601 0102 	addw	r1, r1, #2050	; 0x802
 800814a:	68ce      	ldr	r6, [r1, #12]
 800814c:	8ae2      	ldrh	r2, [r4, #22]
 800814e:	f026 06f0 	bic.w	r6, r6, #240	; 0xf0
 8008152:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008156:	4332      	orrs	r2, r6
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8008158:	4e8a      	ldr	r6, [pc, #552]	; (8008384 <TIM2_IRQHandler+0x26c>)
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 800815a:	60ca      	str	r2, [r1, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 800815c:	8237      	strh	r7, [r6, #16]
      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 800815e:	68ca      	ldr	r2, [r1, #12]
 8008160:	8aa7      	ldrh	r7, [r4, #20]
 8008162:	f022 020f 	bic.w	r2, r2, #15
 8008166:	433a      	orrs	r2, r7
 8008168:	60ca      	str	r2, [r1, #12]
  TIM3->CR1 |= TIM_CR1_CEN;
 800816a:	8832      	ldrh	r2, [r6, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 800816c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  TIM3->CR1 |= TIM_CR1_CEN;
 800816e:	b292      	uxth	r2, r2
 8008170:	4302      	orrs	r2, r0
 8008172:	8032      	strh	r2, [r6, #0]
  busy = true;
 8008174:	7028      	strb	r0, [r5, #0]
  if (st.exec_segment == NULL) {
 8008176:	2900      	cmp	r1, #0
 8008178:	d07f      	beq.n	800827a <TIM2_IRQHandler+0x162>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 800817a:	4b83      	ldr	r3, [pc, #524]	; (8008388 <TIM2_IRQHandler+0x270>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b01      	cmp	r3, #1
 8008180:	f000 80bd 	beq.w	80082fe <TIM2_IRQHandler+0x1e6>

  // Reset step out bits.
  st.step_outbits = 0;
 8008184:	2300      	movs	r3, #0
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 8008186:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    st.counter_x += st.steps[X_AXIS];
 8008188:	6821      	ldr	r1, [r4, #0]
 800818a:	69a6      	ldr	r6, [r4, #24]
  if (st.counter_x > st.exec_block->step_event_count) {
 800818c:	6902      	ldr	r2, [r0, #16]
    st.counter_x += st.steps[X_AXIS];
 800818e:	4431      	add	r1, r6
  if (st.counter_x > st.exec_block->step_event_count) {
 8008190:	4291      	cmp	r1, r2
    st.counter_x += st.steps[X_AXIS];
 8008192:	6021      	str	r1, [r4, #0]
  st.step_outbits = 0;
 8008194:	82a3      	strh	r3, [r4, #20]
  if (st.counter_x > st.exec_block->step_event_count) {
 8008196:	d856      	bhi.n	8008246 <TIM2_IRQHandler+0x12e>
 8008198:	2602      	movs	r6, #2
    st.counter_x -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
    else { sys_position[X_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 800819a:	6861      	ldr	r1, [r4, #4]
 800819c:	69e7      	ldr	r7, [r4, #28]
 800819e:	4439      	add	r1, r7
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 80081a0:	428a      	cmp	r2, r1
    st.counter_y += st.steps[Y_AXIS];
 80081a2:	6061      	str	r1, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 80081a4:	d20a      	bcs.n	80081bc <TIM2_IRQHandler+0xa4>
    st.step_outbits |= (1<<Y_STEP_BIT);
    st.counter_y -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 80081a6:	8a83      	ldrh	r3, [r0, #20]
    st.counter_y -= st.exec_block->step_event_count;
 80081a8:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 80081aa:	069f      	lsls	r7, r3, #26
    st.counter_y -= st.exec_block->step_event_count;
 80081ac:	6061      	str	r1, [r4, #4]
    st.step_outbits |= (1<<Y_STEP_BIT);
 80081ae:	82a6      	strh	r6, [r4, #20]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 80081b0:	d55d      	bpl.n	800826e <TIM2_IRQHandler+0x156>
 80081b2:	4633      	mov	r3, r6
 80081b4:	4f75      	ldr	r7, [pc, #468]	; (800838c <TIM2_IRQHandler+0x274>)
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	3901      	subs	r1, #1
 80081ba:	6079      	str	r1, [r7, #4]
    else { sys_position[Y_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 80081bc:	68a1      	ldr	r1, [r4, #8]
 80081be:	6a26      	ldr	r6, [r4, #32]
 80081c0:	4431      	add	r1, r6
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 80081c2:	428a      	cmp	r2, r1
    st.counter_z += st.steps[Z_AXIS];
 80081c4:	60a1      	str	r1, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 80081c6:	d20f      	bcs.n	80081e8 <TIM2_IRQHandler+0xd0>
    st.step_outbits |= (1<<Z_STEP_BIT);
    st.counter_z -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80081c8:	8a86      	ldrh	r6, [r0, #20]
    st.counter_z -= st.exec_block->step_event_count;
 80081ca:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80081cc:	f016 0f40 	tst.w	r6, #64	; 0x40
 80081d0:	4e6e      	ldr	r6, [pc, #440]	; (800838c <TIM2_IRQHandler+0x274>)
    st.counter_z -= st.exec_block->step_event_count;
 80081d2:	60a1      	str	r1, [r4, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80081d4:	68b1      	ldr	r1, [r6, #8]
    st.step_outbits |= (1<<Z_STEP_BIT);
 80081d6:	f043 0304 	orr.w	r3, r3, #4
 80081da:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80081dc:	bf14      	ite	ne
 80081de:	f101 31ff 	addne.w	r1, r1, #4294967295
    else { sys_position[Z_AXIS]++; }
 80081e2:	3101      	addeq	r1, #1
    st.step_outbits |= (1<<Z_STEP_BIT);
 80081e4:	82a3      	strh	r3, [r4, #20]
    else { sys_position[Z_AXIS]++; }
 80081e6:	60b1      	str	r1, [r6, #8]
  }
// --- YSV 22-06-2018
  #if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_a += st.steps[A_AXIS];
 80081e8:	68e1      	ldr	r1, [r4, #12]
 80081ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081ec:	4431      	add	r1, r6
  #else
    st.counter_a += st.exec_block->steps[A_AXIS];
  #endif
  if (st.counter_a > st.exec_block->step_event_count) {
 80081ee:	428a      	cmp	r2, r1
    st.counter_a += st.steps[A_AXIS];
 80081f0:	60e1      	str	r1, [r4, #12]
  if (st.counter_a > st.exec_block->step_event_count) {
 80081f2:	d20e      	bcs.n	8008212 <TIM2_IRQHandler+0xfa>
    st.step_outbits |= (1<<A_STEP_BIT);
    st.counter_a -= st.exec_block->step_event_count;
 80081f4:	1a8a      	subs	r2, r1, r2
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80081f6:	4965      	ldr	r1, [pc, #404]	; (800838c <TIM2_IRQHandler+0x274>)
 80081f8:	8a80      	ldrh	r0, [r0, #20]
    st.counter_a -= st.exec_block->step_event_count;
 80081fa:	60e2      	str	r2, [r4, #12]
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80081fc:	68ca      	ldr	r2, [r1, #12]
 80081fe:	0600      	lsls	r0, r0, #24
    st.step_outbits |= (1<<A_STEP_BIT);
 8008200:	f043 0308 	orr.w	r3, r3, #8
 8008204:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 8008206:	bf4c      	ite	mi
 8008208:	f102 32ff 	addmi.w	r2, r2, #4294967295
    else { sys_position[A_AXIS]++; }
 800820c:	3201      	addpl	r2, #1
    st.step_outbits |= (1<<A_STEP_BIT);
 800820e:	82a3      	strh	r3, [r4, #20]
    else { sys_position[A_AXIS]++; }
 8008210:	60ca      	str	r2, [r1, #12]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8008212:	4a5f      	ldr	r2, [pc, #380]	; (8008390 <TIM2_IRQHandler+0x278>)
 8008214:	7811      	ldrb	r1, [r2, #0]
 8008216:	2904      	cmp	r1, #4
 8008218:	d025      	beq.n	8008266 <TIM2_IRQHandler+0x14e>

  st.step_count--; // Decrement step events count
 800821a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800821c:	3a01      	subs	r2, #1
 800821e:	b292      	uxth	r2, r2
 8008220:	8522      	strh	r2, [r4, #40]	; 0x28
  if (st.step_count == 0) {
 8008222:	b942      	cbnz	r2, 8008236 <TIM2_IRQHandler+0x11e>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8008224:	495b      	ldr	r1, [pc, #364]	; (8008394 <TIM2_IRQHandler+0x27c>)
    st.exec_segment = NULL;
 8008226:	6322      	str	r2, [r4, #48]	; 0x30
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8008228:	780a      	ldrb	r2, [r1, #0]
 800822a:	3201      	adds	r2, #1
 800822c:	b2d2      	uxtb	r2, r2
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
		segment_tail_next = 0;
 800822e:	2a0a      	cmp	r2, #10
 8008230:	bf08      	it	eq
 8008232:	2200      	moveq	r2, #0
	segment_buffer_tail = segment_tail_next;
 8008234:	700a      	strb	r2, [r1, #0]
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
  busy = false;
 8008236:	2100      	movs	r1, #0
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8008238:	4a57      	ldr	r2, [pc, #348]	; (8008398 <TIM2_IRQHandler+0x280>)
  busy = false;
 800823a:	7029      	strb	r1, [r5, #0]
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 800823c:	8812      	ldrh	r2, [r2, #0]
 800823e:	4053      	eors	r3, r2
 8008240:	82a3      	strh	r3, [r4, #20]
 8008242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    st.step_outbits |= (1<<X_STEP_BIT);
 8008246:	2301      	movs	r3, #1
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8008248:	4f50      	ldr	r7, [pc, #320]	; (800838c <TIM2_IRQHandler+0x274>)
 800824a:	8a86      	ldrh	r6, [r0, #20]
    st.counter_x -= st.exec_block->step_event_count;
 800824c:	1a89      	subs	r1, r1, r2
 800824e:	6021      	str	r1, [r4, #0]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	f016 0f10 	tst.w	r6, #16
 8008256:	bf14      	ite	ne
 8008258:	f101 31ff 	addne.w	r1, r1, #4294967295
    else { sys_position[X_AXIS]++; }
 800825c:	3101      	addeq	r1, #1
    st.step_outbits |= (1<<X_STEP_BIT);
 800825e:	82a3      	strh	r3, [r4, #20]
 8008260:	2603      	movs	r6, #3
    else { sys_position[X_AXIS]++; }
 8008262:	6039      	str	r1, [r7, #0]
 8008264:	e799      	b.n	800819a <TIM2_IRQHandler+0x82>
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8008266:	88d2      	ldrh	r2, [r2, #6]
 8008268:	4013      	ands	r3, r2
 800826a:	82a3      	strh	r3, [r4, #20]
 800826c:	e7d5      	b.n	800821a <TIM2_IRQHandler+0x102>
    else { sys_position[Y_AXIS]++; }
 800826e:	4633      	mov	r3, r6
 8008270:	4e46      	ldr	r6, [pc, #280]	; (800838c <TIM2_IRQHandler+0x274>)
 8008272:	6871      	ldr	r1, [r6, #4]
 8008274:	3101      	adds	r1, #1
 8008276:	6071      	str	r1, [r6, #4]
 8008278:	e7a0      	b.n	80081bc <TIM2_IRQHandler+0xa4>
    if (segment_buffer_head != segment_buffer_tail) {
 800827a:	4a46      	ldr	r2, [pc, #280]	; (8008394 <TIM2_IRQHandler+0x27c>)
 800827c:	4e47      	ldr	r6, [pc, #284]	; (800839c <TIM2_IRQHandler+0x284>)
 800827e:	7810      	ldrb	r0, [r2, #0]
 8008280:	7836      	ldrb	r6, [r6, #0]
 8008282:	4286      	cmp	r6, r0
 8008284:	d03e      	beq.n	8008304 <TIM2_IRQHandler+0x1ec>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8008286:	7810      	ldrb	r0, [r2, #0]
 8008288:	4a45      	ldr	r2, [pc, #276]	; (80083a0 <TIM2_IRQHandler+0x288>)
 800828a:	b2c0      	uxtb	r0, r0
 800828c:	00c7      	lsls	r7, r0, #3
 800828e:	19d6      	adds	r6, r2, r7
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008290:	8871      	ldrh	r1, [r6, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8008292:	6326      	str	r6, [r4, #48]	; 0x30
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008294:	3901      	subs	r1, #1
 8008296:	b289      	uxth	r1, r1
 8008298:	8599      	strh	r1, [r3, #44]	; 0x2c
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 800829a:	f832 1030 	ldrh.w	r1, [r2, r0, lsl #3]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 800829e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80082a2:	7930      	ldrb	r0, [r6, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 80082a4:	8521      	strh	r1, [r4, #40]	; 0x28
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 80082a6:	4283      	cmp	r3, r0
 80082a8:	d053      	beq.n	8008352 <TIM2_IRQHandler+0x23a>
        st.exec_block = &st_block_buffer[st.exec_block_index];
 80082aa:	4b3e      	ldr	r3, [pc, #248]	; (80083a4 <TIM2_IRQHandler+0x28c>)
 80082ac:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80082b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 80082b4:	6919      	ldr	r1, [r3, #16]
        st.exec_block_index = st.exec_segment->st_block_index;
 80082b6:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 80082ba:	0849      	lsrs	r1, r1, #1
        st.exec_block = &st_block_buffer[st.exec_block_index];
 80082bc:	62e3      	str	r3, [r4, #44]	; 0x2c
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 80082be:	60e1      	str	r1, [r4, #12]
 80082c0:	60a1      	str	r1, [r4, #8]
 80082c2:	6061      	str	r1, [r4, #4]
 80082c4:	6021      	str	r1, [r4, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80082c6:	4838      	ldr	r0, [pc, #224]	; (80083a8 <TIM2_IRQHandler+0x290>)
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80082c8:	443a      	add	r2, r7
 80082ca:	7951      	ldrb	r1, [r2, #5]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80082cc:	f8b0 c000 	ldrh.w	ip, [r0]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80082d0:	7990      	ldrb	r0, [r2, #6]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80082d2:	681a      	ldr	r2, [r3, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80082d4:	8a9f      	ldrh	r7, [r3, #20]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80082d6:	685e      	ldr	r6, [r3, #4]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80082d8:	fa22 fe01 	lsr.w	lr, r2, r1
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80082dc:	689a      	ldr	r2, [r3, #8]
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80082de:	68db      	ldr	r3, [r3, #12]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80082e0:	40ce      	lsrs	r6, r1
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80082e2:	40ca      	lsrs	r2, r1
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80082e4:	ea87 070c 	eor.w	r7, r7, ip
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80082e8:	fa23 f101 	lsr.w	r1, r3, r1
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80082ec:	f8c4 e018 	str.w	lr, [r4, #24]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80082f0:	82e7      	strh	r7, [r4, #22]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80082f2:	61e6      	str	r6, [r4, #28]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80082f4:	6222      	str	r2, [r4, #32]
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80082f6:	6261      	str	r1, [r4, #36]	; 0x24
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80082f8:	f7ff fd10 	bl	8007d1c <spindle_set_speed>
 80082fc:	e73d      	b.n	800817a <TIM2_IRQHandler+0x62>
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 80082fe:	f7fc fe6f 	bl	8004fe0 <probe_state_monitor>
 8008302:	e73f      	b.n	8008184 <TIM2_IRQHandler+0x6c>
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008304:	881a      	ldrh	r2, [r3, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008306:	4e29      	ldr	r6, [pc, #164]	; (80083ac <TIM2_IRQHandler+0x294>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008308:	f022 0201 	bic.w	r2, r2, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800830c:	f896 0046 	ldrb.w	r0, [r6, #70]	; 0x46
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008310:	0412      	lsls	r2, r2, #16
 8008312:	0c12      	lsrs	r2, r2, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008314:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008316:	801a      	strh	r2, [r3, #0]
  TIM2->CNT = 0;
 8008318:	8499      	strh	r1, [r3, #36]	; 0x24
  busy = false;
 800831a:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800831c:	d01b      	beq.n	8008356 <TIM2_IRQHandler+0x23e>
 800831e:	4b1c      	ldr	r3, [pc, #112]	; (8008390 <TIM2_IRQHandler+0x278>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b04      	cmp	r3, #4
 8008324:	d01f      	beq.n	8008366 <TIM2_IRQHandler+0x24e>
    delay_ms(settings.stepper_idle_lock_time);
 8008326:	f7fb fe29 	bl	8003f7c <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800832a:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800832e:	075b      	lsls	r3, r3, #29
 8008330:	d51d      	bpl.n	800836e <TIM2_IRQHandler+0x256>
	  ResetStepperDisableBit();
 8008332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008336:	481e      	ldr	r0, [pc, #120]	; (80083b0 <TIM2_IRQHandler+0x298>)
 8008338:	f7f9 fa22 	bl	8001780 <GPIO_ResetBits>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 800833c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800833e:	7d9b      	ldrb	r3, [r3, #22]
 8008340:	b113      	cbz	r3, 8008348 <TIM2_IRQHandler+0x230>
 8008342:	2000      	movs	r0, #0
 8008344:	f7ff fcea 	bl	8007d1c <spindle_set_speed>
}
 8008348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 800834c:	2004      	movs	r0, #4
 800834e:	f001 ba13 	b.w	8009778 <system_set_exec_state_flag>
 8008352:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008354:	e7b7      	b.n	80082c6 <TIM2_IRQHandler+0x1ae>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008356:	4b17      	ldr	r3, [pc, #92]	; (80083b4 <TIM2_IRQHandler+0x29c>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1df      	bne.n	800831e <TIM2_IRQHandler+0x206>
 800835e:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <TIM2_IRQHandler+0x278>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b80      	cmp	r3, #128	; 0x80
 8008364:	d0df      	beq.n	8008326 <TIM2_IRQHandler+0x20e>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008366:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800836a:	075b      	lsls	r3, r3, #29
 800836c:	d5e1      	bpl.n	8008332 <TIM2_IRQHandler+0x21a>
	  SetStepperDisableBit();
 800836e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008372:	480f      	ldr	r0, [pc, #60]	; (80083b0 <TIM2_IRQHandler+0x298>)
 8008374:	f7f9 fa02 	bl	800177c <GPIO_SetBits>
 8008378:	e7e0      	b.n	800833c <TIM2_IRQHandler+0x224>
 800837a:	bf00      	nop
 800837c:	20000a60 	.word	0x20000a60
 8008380:	20000af4 	.word	0x20000af4
 8008384:	40000400 	.word	0x40000400
 8008388:	200010c6 	.word	0x200010c6
 800838c:	200010d8 	.word	0x200010d8
 8008390:	200010b0 	.word	0x200010b0
 8008394:	20000af1 	.word	0x20000af1
 8008398:	20000c04 	.word	0x20000c04
 800839c:	20000af0 	.word	0x20000af0
 80083a0:	20000aa0 	.word	0x20000aa0
 80083a4:	20000b28 	.word	0x20000b28
 80083a8:	20000a62 	.word	0x20000a62
 80083ac:	2000126c 	.word	0x2000126c
 80083b0:	40010800 	.word	0x40010800
 80083b4:	200010e8 	.word	0x200010e8

080083b8 <TIM3_IRQHandler>:
ISR(TIMER0_OVF_vect)
#endif
#ifdef WIN32
void Timer0Proc()
#endif
{
 80083b8:	b410      	push	{r4}
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
		TIM3->CR1 &= ~TIM_CR1_CEN;
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
		TIM3->CNT = 0;
 80083ba:	2000      	movs	r0, #0
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 80083bc:	f64f 74fc 	movw	r4, #65532	; 0xfffc
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80083c0:	490a      	ldr	r1, [pc, #40]	; (80083ec <TIM3_IRQHandler+0x34>)
 80083c2:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <TIM3_IRQHandler+0x38>)
 80083c4:	68ca      	ldr	r2, [r1, #12]
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	f022 020f 	bic.w	r2, r2, #15
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	4313      	orrs	r3, r2
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80083d2:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <TIM3_IRQHandler+0x3c>)
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80083d4:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80083d6:	8813      	ldrh	r3, [r2, #0]
 80083d8:	f023 0301 	bic.w	r3, r3, #1
 80083dc:	041b      	lsls	r3, r3, #16
 80083de:	0c1b      	lsrs	r3, r3, #16
 80083e0:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 80083e2:	8214      	strh	r4, [r2, #16]
		TIM3->CNT = 0;
 80083e4:	8490      	strh	r0, [r2, #36]	; 0x24
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 80083e6:	bc10      	pop	{r4}
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40010800 	.word	0x40010800
 80083f0:	20000c04 	.word	0x20000c04
 80083f4:	40000400 	.word	0x40000400

080083f8 <st_generate_step_dir_invert_masks>:



// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
 80083f8:	4b16      	ldr	r3, [pc, #88]	; (8008454 <st_generate_step_dir_invert_masks+0x5c>)
 80083fa:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 80083fe:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
  uint8_t idx;
  step_port_invert_mask = 0;
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008402:	f011 0f01 	tst.w	r1, #1
 8008406:	bf14      	ite	ne
 8008408:	2310      	movne	r3, #16
 800840a:	2300      	moveq	r3, #0
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800840c:	f000 0201 	and.w	r2, r0, #1
 8008410:	f010 0f02 	tst.w	r0, #2
 8008414:	bf18      	it	ne
 8008416:	f042 0202 	orrne.w	r2, r2, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800841a:	f011 0f02 	tst.w	r1, #2
 800841e:	bf18      	it	ne
 8008420:	f043 0320 	orrne.w	r3, r3, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008424:	f010 0f04 	tst.w	r0, #4
 8008428:	bf18      	it	ne
 800842a:	f042 0204 	orrne.w	r2, r2, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800842e:	f011 0f04 	tst.w	r1, #4
 8008432:	bf18      	it	ne
 8008434:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008438:	0700      	lsls	r0, r0, #28
 800843a:	bf48      	it	mi
 800843c:	f042 0208 	orrmi.w	r2, r2, #8
 8008440:	4805      	ldr	r0, [pc, #20]	; (8008458 <st_generate_step_dir_invert_masks+0x60>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008442:	0709      	lsls	r1, r1, #28
 8008444:	4905      	ldr	r1, [pc, #20]	; (800845c <st_generate_step_dir_invert_masks+0x64>)
 8008446:	bf48      	it	mi
 8008448:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800844c:	8002      	strh	r2, [r0, #0]
 800844e:	800b      	strh	r3, [r1, #0]
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	2000126c 	.word	0x2000126c
 8008458:	20000c04 	.word	0x20000c04
 800845c:	20000a62 	.word	0x20000a62

08008460 <st_reset>:
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008460:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 8008464:	2100      	movs	r1, #0
}


// Reset and clear stepper subsystem variables
void st_reset()
{
 8008466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008468:	8813      	ldrh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800846a:	4c41      	ldr	r4, [pc, #260]	; (8008570 <st_reset+0x110>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800846c:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008470:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008474:	041b      	lsls	r3, r3, #16
  busy = false;
 8008476:	4d3f      	ldr	r5, [pc, #252]	; (8008574 <st_reset+0x114>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008478:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800847a:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800847c:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 800847e:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 8008480:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008482:	d060      	beq.n	8008546 <st_reset+0xe6>
 8008484:	4b3c      	ldr	r3, [pc, #240]	; (8008578 <st_reset+0x118>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b04      	cmp	r3, #4
 800848a:	d164      	bne.n	8008556 <st_reset+0xf6>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800848c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8008490:	075b      	lsls	r3, r3, #29
 8008492:	d466      	bmi.n	8008562 <st_reset+0x102>
	  ResetStepperDisableBit();
 8008494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008498:	4838      	ldr	r0, [pc, #224]	; (800857c <st_reset+0x11c>)
 800849a:	f7f9 f971 	bl	8001780 <GPIO_ResetBits>
  // Initialize stepper driver idle state.
  st_go_idle();
  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 800849e:	2238      	movs	r2, #56	; 0x38
 80084a0:	2100      	movs	r1, #0
 80084a2:	4837      	ldr	r0, [pc, #220]	; (8008580 <st_reset+0x120>)
 80084a4:	f002 fbf9 	bl	800ac9a <memset>
  memset(&st, 0, sizeof(stepper_t));
 80084a8:	2234      	movs	r2, #52	; 0x34
 80084aa:	2100      	movs	r1, #0
 80084ac:	4835      	ldr	r0, [pc, #212]	; (8008584 <st_reset+0x124>)
 80084ae:	f002 fbf4 	bl	800ac9a <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80084b2:	2100      	movs	r1, #0
 80084b4:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  segment_buffer_tail = 0;
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 80084b8:	2601      	movs	r6, #1
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80084ba:	4f33      	ldr	r7, [pc, #204]	; (8008588 <st_reset+0x128>)
  segment_buffer_head = 0; // empty = tail
 80084bc:	4833      	ldr	r0, [pc, #204]	; (800858c <st_reset+0x12c>)
  segment_buffer_tail = 0;
 80084be:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 80085a4 <st_reset+0x144>
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80084c2:	f013 0f01 	tst.w	r3, #1
  segment_buffer_tail = 0;
 80084c6:	f88e 1000 	strb.w	r1, [lr]
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80084ca:	6039      	str	r1, [r7, #0]
  busy = false;
 80084cc:	7029      	strb	r1, [r5, #0]
  segment_buffer_head = 0; // empty = tail
 80084ce:	7001      	strb	r1, [r0, #0]
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80084d0:	bf18      	it	ne
 80084d2:	2110      	movne	r1, #16
 80084d4:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  segment_next_head = 1;
 80084d8:	4c2d      	ldr	r4, [pc, #180]	; (8008590 <st_reset+0x130>)
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80084da:	ea02 0006 	and.w	r0, r2, r6
  segment_next_head = 1;
 80084de:	7026      	strb	r6, [r4, #0]
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80084e0:	0796      	lsls	r6, r2, #30
 80084e2:	bf48      	it	mi
 80084e4:	f040 0002 	orrmi.w	r0, r0, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80084e8:	079d      	lsls	r5, r3, #30
 80084ea:	bf48      	it	mi
 80084ec:	f041 0120 	orrmi.w	r1, r1, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80084f0:	0754      	lsls	r4, r2, #29
 80084f2:	bf48      	it	mi
 80084f4:	f040 0004 	orrmi.w	r0, r0, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80084f8:	075f      	lsls	r7, r3, #29
 80084fa:	bf48      	it	mi
 80084fc:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008500:	0716      	lsls	r6, r2, #28
 8008502:	bf48      	it	mi
 8008504:	f040 0008 	orrmi.w	r0, r0, #8
 8008508:	4c22      	ldr	r4, [pc, #136]	; (8008594 <st_reset+0x134>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800850a:	071d      	lsls	r5, r3, #28
 800850c:	4d22      	ldr	r5, [pc, #136]	; (8008598 <st_reset+0x138>)

  st_generate_step_dir_invert_masks();
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 800850e:	4b1d      	ldr	r3, [pc, #116]	; (8008584 <st_reset+0x124>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008510:	bf48      	it	mi
 8008512:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 8008516:	4a21      	ldr	r2, [pc, #132]	; (800859c <st_reset+0x13c>)
 8008518:	8029      	strh	r1, [r5, #0]
 800851a:	8020      	strh	r0, [r4, #0]
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 800851c:	82d9      	strh	r1, [r3, #22]
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 800851e:	8813      	ldrh	r3, [r2, #0]
 8008520:	07dc      	lsls	r4, r3, #31
 8008522:	d4fc      	bmi.n	800851e <st_reset+0xbe>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8008524:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008528:	4c14      	ldr	r4, [pc, #80]	; (800857c <st_reset+0x11c>)
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 800852a:	8213      	strh	r3, [r2, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 800852c:	68e3      	ldr	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 800852e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008532:	f023 030f 	bic.w	r3, r3, #15
 8008536:	4303      	orrs	r3, r0
 8008538:	60e3      	str	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 800853a:	68e3      	ldr	r3, [r4, #12]
 800853c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008540:	4319      	orrs	r1, r3
 8008542:	60e1      	str	r1, [r4, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 8008544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008546:	4b16      	ldr	r3, [pc, #88]	; (80085a0 <st_reset+0x140>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d19a      	bne.n	8008484 <st_reset+0x24>
 800854e:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <st_reset+0x118>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b80      	cmp	r3, #128	; 0x80
 8008554:	d19a      	bne.n	800848c <st_reset+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 8008556:	f7fb fd11 	bl	8003f7c <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800855a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800855e:	075f      	lsls	r7, r3, #29
 8008560:	d498      	bmi.n	8008494 <st_reset+0x34>
	  SetStepperDisableBit();
 8008562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008566:	4805      	ldr	r0, [pc, #20]	; (800857c <st_reset+0x11c>)
 8008568:	f7f9 f908 	bl	800177c <GPIO_SetBits>
 800856c:	e797      	b.n	800849e <st_reset+0x3e>
 800856e:	bf00      	nop
 8008570:	2000126c 	.word	0x2000126c
 8008574:	20000a60 	.word	0x20000a60
 8008578:	200010b0 	.word	0x200010b0
 800857c:	40010800 	.word	0x40010800
 8008580:	20000a68 	.word	0x20000a68
 8008584:	20000af4 	.word	0x20000af4
 8008588:	20000a64 	.word	0x20000a64
 800858c:	20000af0 	.word	0x20000af0
 8008590:	20000af2 	.word	0x20000af2
 8008594:	20000c04 	.word	0x20000c04
 8008598:	20000a62 	.word	0x20000a62
 800859c:	40000400 	.word	0x40000400
 80085a0:	200010e8 	.word	0x200010e8
 80085a4:	20000af1 	.word	0x20000af1

080085a8 <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 80085a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 80085ac:	2101      	movs	r1, #1
{
 80085ae:	b086      	sub	sp, #24
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 80085b0:	2004      	movs	r0, #4
 80085b2:	f7f9 f941 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80085b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80085ba:	2610      	movs	r6, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80085bc:	2303      	movs	r3, #3
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80085be:	ad06      	add	r5, sp, #24
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80085c0:	4f52      	ldr	r7, [pc, #328]	; (800870c <stepper_init+0x164>)
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80085c2:	f825 2d14 	strh.w	r2, [r5, #-20]!
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80085c6:	4629      	mov	r1, r5
 80085c8:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80085ca:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80085ce:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80085d2:	f7f8 ff15 	bl	8001400 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 80085d6:	2101      	movs	r1, #1
 80085d8:	2004      	movs	r0, #4
 80085da:	f7f9 f92d 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80085de:	230f      	movs	r3, #15
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80085e0:	4629      	mov	r1, r5
 80085e2:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80085e4:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80085e8:	f7f8 ff0a 	bl	8001400 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 80085ec:	2101      	movs	r1, #1
 80085ee:	2004      	movs	r0, #4
 80085f0:	f7f9 f922 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 80085f4:	23f0      	movs	r3, #240	; 0xf0
void TIM_Configuration(TIM_TypeDef* TIMER, u16 Period, u16 Prescaler, u8 PP)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 80085f6:	2400      	movs	r4, #0
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80085f8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8008720 <stepper_init+0x178>
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 80085fc:	4629      	mov	r1, r5
 80085fe:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 8008600:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 8008604:	f7f8 fefc 	bl	8001400 <GPIO_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008608:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 800860c:	a903      	add	r1, sp, #12
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 800860e:	f043 0301 	orr.w	r3, r3, #1
 8008612:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008616:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 800861a:	f8ad 4010 	strh.w	r4, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 800861e:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8008622:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008626:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 800862a:	f7f9 f91d 	bl	8001868 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 800862e:	2101      	movs	r1, #1
 8008630:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008634:	f7f9 f9ee 	bl	8001a14 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8008638:	2201      	movs	r2, #1
 800863a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800863e:	4611      	mov	r1, r2
 8008640:	f7f9 f9d6 	bl	80019f0 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8008644:	2101      	movs	r1, #1
 8008646:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800864a:	f7f9 f9b3 	bl	80019b4 <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800864e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008652:	f7f8 fd4f 	bl	80010f4 <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 8008656:	4b2e      	ldr	r3, [pc, #184]	; (8008710 <stepper_init+0x168>)
 8008658:	af06      	add	r7, sp, #24
 800865a:	f847 3d10 	str.w	r3, [r7, #-16]!
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800865e:	4638      	mov	r0, r7
 8008660:	f7f8 fd52 	bl	8001108 <NVIC_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8008664:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008668:	4d2a      	ldr	r5, [pc, #168]	; (8008714 <stepper_init+0x16c>)
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 800866a:	f043 0302 	orr.w	r3, r3, #2
 800866e:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008672:	a903      	add	r1, sp, #12
 8008674:	4628      	mov	r0, r5
	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 8008676:	f8ad 4010 	strh.w	r4, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 800867a:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800867e:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008682:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008686:	f7f9 f8ef 	bl	8001868 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 800868a:	4628      	mov	r0, r5
 800868c:	2101      	movs	r1, #1
 800868e:	f7f9 f9c1 	bl	8001a14 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8008692:	2201      	movs	r2, #1
 8008694:	4628      	mov	r0, r5
 8008696:	4611      	mov	r1, r2
 8008698:	f7f9 f9aa 	bl	80019f0 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 800869c:	2101      	movs	r1, #1
 800869e:	4628      	mov	r0, r5
 80086a0:	f7f9 f988 	bl	80019b4 <TIM_Cmd>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80086a4:	f44f 7040 	mov.w	r0, #768	; 0x300
 80086a8:	f7f8 fd24 	bl	80010f4 <NVIC_PriorityGroupConfig>
	NVIC_Init(&NVIC_InitStructure);
 80086ac:	4638      	mov	r0, r7
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80086ae:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 80086b2:	4b19      	ldr	r3, [pc, #100]	; (8008718 <stepper_init+0x170>)
 80086b4:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 80086b6:	f7f8 fd27 	bl	8001108 <NVIC_Init>
 80086ba:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80086be:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80086c2:	883b      	ldrh	r3, [r7, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80086c4:	4a15      	ldr	r2, [pc, #84]	; (800871c <stepper_init+0x174>)
 80086c6:	f023 0301 	bic.w	r3, r3, #1
 80086ca:	40b3      	lsls	r3, r6
 80086cc:	40f3      	lsrs	r3, r6
 80086ce:	803b      	strh	r3, [r7, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 80086d0:	8a3b      	ldrh	r3, [r7, #16]
 80086d2:	f023 0301 	bic.w	r3, r3, #1
 80086d6:	40b3      	lsls	r3, r6
 80086d8:	40f3      	lsrs	r3, r6
 80086da:	823b      	strh	r3, [r7, #16]
	TIM2->CNT = 0;
 80086dc:	84bc      	strh	r4, [r7, #36]	; 0x24
	TIM3->CR1 &= ~TIM_CR1_CEN;
 80086de:	882b      	ldrh	r3, [r5, #0]
 80086e0:	f023 0301 	bic.w	r3, r3, #1
 80086e4:	40b3      	lsls	r3, r6
 80086e6:	40f3      	lsrs	r3, r6
 80086e8:	802b      	strh	r3, [r5, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 80086ea:	8a2b      	ldrh	r3, [r5, #16]
 80086ec:	f023 0303 	bic.w	r3, r3, #3
 80086f0:	40b3      	lsls	r3, r6
 80086f2:	40f3      	lsrs	r3, r6
 80086f4:	822b      	strh	r3, [r5, #16]
	TIM3->CNT = 0;
 80086f6:	84ac      	strh	r4, [r5, #36]	; 0x24
 80086f8:	f882 431d 	strb.w	r4, [r2, #797]	; 0x31d
 80086fc:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8008700:	6010      	str	r0, [r2, #0]
 8008702:	6011      	str	r1, [r2, #0]
}
 8008704:	b006      	add	sp, #24
 8008706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800870a:	bf00      	nop
 800870c:	40010800 	.word	0x40010800
 8008710:	0101011c 	.word	0x0101011c
 8008714:	40000400 	.word	0x40000400
 8008718:	0101011d 	.word	0x0101011d
 800871c:	e000e100 	.word	0xe000e100
 8008720:	40021000 	.word	0x40021000

08008724 <st_update_plan_block_parameters>:
{
 8008724:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 8008726:	4c08      	ldr	r4, [pc, #32]	; (8008748 <st_update_plan_block_parameters+0x24>)
 8008728:	6825      	ldr	r5, [r4, #0]
 800872a:	b15d      	cbz	r5, 8008744 <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 800872c:	4b07      	ldr	r3, [pc, #28]	; (800874c <st_update_plan_block_parameters+0x28>)
 800872e:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008730:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8008732:	f042 0201 	orr.w	r2, r2, #1
 8008736:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008738:	4608      	mov	r0, r1
 800873a:	f7f8 fab9 	bl	8000cb0 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 800873e:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008740:	61a8      	str	r0, [r5, #24]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	bd38      	pop	{r3, r4, r5, pc}
 8008746:	bf00      	nop
 8008748:	20000a64 	.word	0x20000a64
 800874c:	20000a68 	.word	0x20000a68

08008750 <st_prep_buffer>:
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8008750:	4b35      	ldr	r3, [pc, #212]	; (8008828 <st_prep_buffer+0xd8>)
 8008752:	791b      	ldrb	r3, [r3, #4]
 8008754:	07db      	lsls	r3, r3, #31
 8008756:	f100 84c4 	bmi.w	80090e2 <st_prep_buffer+0x992>
{
 800875a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875e:	b091      	sub	sp, #68	; 0x44
 8008760:	4b32      	ldr	r3, [pc, #200]	; (800882c <st_prep_buffer+0xdc>)
 8008762:	781f      	ldrb	r7, [r3, #0]
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8008764:	4b32      	ldr	r3, [pc, #200]	; (8008830 <st_prep_buffer+0xe0>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	42bb      	cmp	r3, r7
 800876a:	f000 8318 	beq.w	8008d9e <st_prep_buffer+0x64e>
    if (pl_block == NULL) {
 800876e:	4b31      	ldr	r3, [pc, #196]	; (8008834 <st_prep_buffer+0xe4>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 833a 	beq.w	8008dee <st_prep_buffer+0x69e>
 800877a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8008848 <st_prep_buffer+0xf8>
 800877e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 8008782:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	4b2b      	ldr	r3, [pc, #172]	; (8008838 <st_prep_buffer+0xe8>)
 800878a:	930e      	str	r3, [sp, #56]	; 0x38
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 800878c:	4b2b      	ldr	r3, [pc, #172]	; (800883c <st_prep_buffer+0xec>)
    prep_segment->st_block_index = prep.st_block_index;
 800878e:	492c      	ldr	r1, [pc, #176]	; (8008840 <st_prep_buffer+0xf0>)
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008790:	781b      	ldrb	r3, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 8008792:	f89a 2000 	ldrb.w	r2, [sl]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008796:	930c      	str	r3, [sp, #48]	; 0x30
    prep_segment->st_block_index = prep.st_block_index;
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	9307      	str	r3, [sp, #28]
 800879c:	18cb      	adds	r3, r1, r3
 800879e:	711a      	strb	r2, [r3, #4]
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 80087a0:	f8da 1010 	ldr.w	r1, [sl, #16]
 80087a4:	4658      	mov	r0, fp
 80087a6:	f7f8 f979 	bl	8000a9c <__aeabi_fsub>
 80087aa:	2100      	movs	r1, #0
 80087ac:	9004      	str	r0, [sp, #16]
 80087ae:	f7f8 fc31 	bl	8001014 <__aeabi_fcmpge>
 80087b2:	b908      	cbnz	r0, 80087b8 <st_prep_buffer+0x68>
 80087b4:	2300      	movs	r3, #0
 80087b6:	9304      	str	r3, [sp, #16]
						mm_remaining = prep.accelerate_until;
 80087b8:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80087bc:	4658      	mov	r0, fp
 80087be:	4619      	mov	r1, r3
						mm_remaining = prep.accelerate_until;
 80087c0:	461c      	mov	r4, r3
 80087c2:	9302      	str	r3, [sp, #8]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80087c4:	f7f8 f96a 	bl	8000a9c <__aeabi_fsub>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 80087c8:	f8da 3020 	ldr.w	r3, [sl, #32]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80087cc:	4601      	mov	r1, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 80087ce:	461d      	mov	r5, r3
 80087d0:	930d      	str	r3, [sp, #52]	; 0x34
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80087d2:	f7f8 f965 	bl	8000aa0 <__addsf3>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 80087d6:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80087da:	9006      	str	r0, [sp, #24]
 80087dc:	4629      	mov	r1, r5
 80087de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
          if (mm_var < prep.decelerate_after) { // End of cruise.
 80087e2:	461e      	mov	r6, r3
 80087e4:	9305      	str	r3, [sp, #20]
 80087e6:	f7f8 fb17 	bl	8000e18 <__aeabi_fdiv>
 80087ea:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80087ee:	900a      	str	r0, [sp, #40]	; 0x28
 80087f0:	9303      	str	r3, [sp, #12]
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 80087f2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80087f6:	4631      	mov	r1, r6
 80087f8:	4620      	mov	r0, r4
 80087fa:	f8da 701c 	ldr.w	r7, [sl, #28]
 80087fe:	f8da 8018 	ldr.w	r8, [sl, #24]
 8008802:	9308      	str	r3, [sp, #32]
 8008804:	f7f8 fbe8 	bl	8000fd8 <__aeabi_fcmpeq>
 8008808:	2800      	cmp	r0, #0
 800880a:	f000 827f 	beq.w	8008d0c <st_prep_buffer+0x5bc>
 800880e:	f04f 0302 	mov.w	r3, #2
 8008812:	4d0c      	ldr	r5, [pc, #48]	; (8008844 <st_prep_buffer+0xf4>)
 8008814:	b2db      	uxtb	r3, r3
 8008816:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 800881a:	2400      	movs	r4, #0
 800881c:	462e      	mov	r6, r5
 800881e:	9309      	str	r3, [sp, #36]	; 0x24
 8008820:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008824:	e01e      	b.n	8008864 <st_prep_buffer+0x114>
 8008826:	bf00      	nop
 8008828:	200010b0 	.word	0x200010b0
 800882c:	20000af2 	.word	0x20000af2
 8008830:	20000af1 	.word	0x20000af1
 8008834:	20000a64 	.word	0x20000a64
 8008838:	20000c00 	.word	0x20000c00
 800883c:	20000af0 	.word	0x20000af0
 8008840:	20000aa0 	.word	0x20000aa0
 8008844:	392ec33e 	.word	0x392ec33e
 8008848:	20000a68 	.word	0x20000a68
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800884c:	4621      	mov	r1, r4
 800884e:	4630      	mov	r0, r6
 8008850:	f7f8 f924 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008854:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008856:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008858:	4658      	mov	r0, fp
 800885a:	f7f8 fbe5 	bl	8001028 <__aeabi_fcmpgt>
 800885e:	2800      	cmp	r0, #0
 8008860:	f000 80cf 	beq.w	8008a02 <st_prep_buffer+0x2b2>
      switch (prep.ramp_type) {
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d044      	beq.n	80088f4 <st_prep_buffer+0x1a4>
 800886a:	f0c0 81a4 	bcc.w	8008bb6 <st_prep_buffer+0x466>
 800886e:	2b03      	cmp	r3, #3
 8008870:	d17f      	bne.n	8008972 <st_prep_buffer+0x222>
          speed_var = pl_block->acceleration*time_var;
 8008872:	9b00      	ldr	r3, [sp, #0]
 8008874:	4628      	mov	r0, r5
 8008876:	6a19      	ldr	r1, [r3, #32]
 8008878:	f7f8 fa1a 	bl	8000cb0 <__aeabi_fmul>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 800887c:	4651      	mov	r1, sl
          speed_var = pl_block->acceleration*time_var;
 800887e:	4681      	mov	r9, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008880:	4638      	mov	r0, r7
 8008882:	f7f8 f90b 	bl	8000a9c <__aeabi_fsub>
 8008886:	4601      	mov	r1, r0
 8008888:	4648      	mov	r0, r9
 800888a:	f7f8 fbc3 	bl	8001014 <__aeabi_fcmpge>
 800888e:	2800      	cmp	r0, #0
 8008890:	f000 81d0 	beq.w	8008c34 <st_prep_buffer+0x4e4>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008894:	4639      	mov	r1, r7
 8008896:	4650      	mov	r0, sl
 8008898:	f7f8 f902 	bl	8000aa0 <__addsf3>
 800889c:	4601      	mov	r1, r0
 800889e:	9806      	ldr	r0, [sp, #24]
 80088a0:	f7f8 faba 	bl	8000e18 <__aeabi_fdiv>
      dt += time_var; // Add computed ramp time to total segment time.
 80088a4:	4601      	mov	r1, r0
 80088a6:	4620      	mov	r0, r4
 80088a8:	f7f8 f8fa 	bl	8000aa0 <__addsf3>
 80088ac:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80088ae:	4601      	mov	r1, r0
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7f8 fbb9 	bl	8001028 <__aeabi_fcmpgt>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f040 8207 	bne.w	8008cca <st_prep_buffer+0x57a>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 80088bc:	9f02      	ldr	r7, [sp, #8]
 80088be:	9904      	ldr	r1, [sp, #16]
 80088c0:	4638      	mov	r0, r7
 80088c2:	f7f8 fbb1 	bl	8001028 <__aeabi_fcmpgt>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	f000 83cc 	beq.w	8009064 <st_prep_buffer+0x914>
          dt_max += DT_SEGMENT;
 80088cc:	4630      	mov	r0, r6
 80088ce:	49a0      	ldr	r1, [pc, #640]	; (8008b50 <st_prep_buffer+0x400>)
 80088d0:	f7f8 f8e6 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 80088d4:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 80088d6:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 80088d8:	f7f8 f8e0 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80088dc:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 80088de:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80088e0:	4638      	mov	r0, r7
 80088e2:	f7f8 fba1 	bl	8001028 <__aeabi_fcmpgt>
 80088e6:	46bb      	mov	fp, r7
 80088e8:	2800      	cmp	r0, #0
 80088ea:	f000 81fc 	beq.w	8008ce6 <st_prep_buffer+0x596>
            prep.ramp_type = RAMP_CRUISE;
 80088ee:	2301      	movs	r3, #1
            prep.current_speed = prep.maximum_speed;
 80088f0:	4657      	mov	r7, sl
            prep.ramp_type = RAMP_CRUISE;
 80088f2:	9303      	str	r3, [sp, #12]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 80088f4:	4629      	mov	r1, r5
 80088f6:	4650      	mov	r0, sl
 80088f8:	f7f8 f9da 	bl	8000cb0 <__aeabi_fmul>
 80088fc:	4601      	mov	r1, r0
 80088fe:	4658      	mov	r0, fp
 8008900:	f7f8 f8cc 	bl	8000a9c <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008904:	9905      	ldr	r1, [sp, #20]
            mm_remaining = mm_var;
 8008906:	46d9      	mov	r9, fp
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8008908:	4683      	mov	fp, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 800890a:	f7f8 fb6f 	bl	8000fec <__aeabi_fcmplt>
 800890e:	2800      	cmp	r0, #0
 8008910:	f000 81bd 	beq.w	8008c8e <st_prep_buffer+0x53e>
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8008914:	f8dd b014 	ldr.w	fp, [sp, #20]
 8008918:	4648      	mov	r0, r9
 800891a:	4659      	mov	r1, fp
 800891c:	f7f8 f8be 	bl	8000a9c <__aeabi_fsub>
 8008920:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008922:	f7f8 f9c5 	bl	8000cb0 <__aeabi_fmul>
      dt += time_var; // Add computed ramp time to total segment time.
 8008926:	4601      	mov	r1, r0
 8008928:	4620      	mov	r0, r4
 800892a:	f7f8 f8b9 	bl	8000aa0 <__addsf3>
 800892e:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008930:	4601      	mov	r1, r0
 8008932:	4630      	mov	r0, r6
 8008934:	f7f8 fb78 	bl	8001028 <__aeabi_fcmpgt>
 8008938:	2800      	cmp	r0, #0
 800893a:	f040 81b5 	bne.w	8008ca8 <st_prep_buffer+0x558>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 800893e:	9904      	ldr	r1, [sp, #16]
 8008940:	4658      	mov	r0, fp
 8008942:	f7f8 fb71 	bl	8001028 <__aeabi_fcmpgt>
 8008946:	2800      	cmp	r0, #0
 8008948:	f000 81ba 	beq.w	8008cc0 <st_prep_buffer+0x570>
          dt_max += DT_SEGMENT;
 800894c:	4630      	mov	r0, r6
 800894e:	4980      	ldr	r1, [pc, #512]	; (8008b50 <st_prep_buffer+0x400>)
 8008950:	f7f8 f8a6 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008954:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008956:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8008958:	f7f8 f8a0 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800895c:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 800895e:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008960:	4658      	mov	r0, fp
 8008962:	f7f8 fb61 	bl	8001028 <__aeabi_fcmpgt>
 8008966:	2800      	cmp	r0, #0
 8008968:	f000 81aa 	beq.w	8008cc0 <st_prep_buffer+0x570>
 800896c:	2302      	movs	r3, #2
 800896e:	9303      	str	r3, [sp, #12]
            prep.ramp_type = RAMP_DECEL;
 8008970:	9301      	str	r3, [sp, #4]
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008972:	9b00      	ldr	r3, [sp, #0]
 8008974:	4628      	mov	r0, r5
 8008976:	6a19      	ldr	r1, [r3, #32]
 8008978:	f7f8 f99a 	bl	8000cb0 <__aeabi_fmul>
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 800897c:	4639      	mov	r1, r7
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 800897e:	4681      	mov	r9, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008980:	f7f8 fb34 	bl	8000fec <__aeabi_fcmplt>
 8008984:	2800      	cmp	r0, #0
 8008986:	f000 8141 	beq.w	8008c0c <st_prep_buffer+0x4bc>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 800898a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800898e:	4648      	mov	r0, r9
 8008990:	f7f8 f98e 	bl	8000cb0 <__aeabi_fmul>
 8008994:	4639      	mov	r1, r7
 8008996:	f7f8 f881 	bl	8000a9c <__aeabi_fsub>
 800899a:	4629      	mov	r1, r5
 800899c:	f7f8 f988 	bl	8000cb0 <__aeabi_fmul>
 80089a0:	4659      	mov	r1, fp
 80089a2:	f7f8 f87d 	bl	8000aa0 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 80089a6:	4641      	mov	r1, r8
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 80089a8:	900b      	str	r0, [sp, #44]	; 0x2c
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 80089aa:	f7f8 fb3d 	bl	8001028 <__aeabi_fcmpgt>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	f000 812c 	beq.w	8008c0c <st_prep_buffer+0x4bc>
              prep.current_speed -= speed_var;
 80089b4:	4638      	mov	r0, r7
 80089b6:	4649      	mov	r1, r9
 80089b8:	f7f8 f870 	bl	8000a9c <__aeabi_fsub>
 80089bc:	4607      	mov	r7, r0
              mm_remaining = mm_var;
 80089be:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
      dt += time_var; // Add computed ramp time to total segment time.
 80089c2:	4629      	mov	r1, r5
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7f8 f86b 	bl	8000aa0 <__addsf3>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80089ca:	4631      	mov	r1, r6
      dt += time_var; // Add computed ramp time to total segment time.
 80089cc:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80089ce:	f7f8 fb0d 	bl	8000fec <__aeabi_fcmplt>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f47f af3a 	bne.w	800884c <st_prep_buffer+0xfc>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 80089d8:	4659      	mov	r1, fp
 80089da:	9804      	ldr	r0, [sp, #16]
 80089dc:	f7f8 fb06 	bl	8000fec <__aeabi_fcmplt>
 80089e0:	b178      	cbz	r0, 8008a02 <st_prep_buffer+0x2b2>
          dt_max += DT_SEGMENT;
 80089e2:	4630      	mov	r0, r6
 80089e4:	495a      	ldr	r1, [pc, #360]	; (8008b50 <st_prep_buffer+0x400>)
 80089e6:	f7f8 f85b 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 80089ea:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 80089ec:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 80089ee:	f7f8 f855 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80089f2:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 80089f4:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80089f6:	4658      	mov	r0, fp
 80089f8:	f7f8 fb16 	bl	8001028 <__aeabi_fcmpgt>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	f47f af31 	bne.w	8008864 <st_prep_buffer+0x114>
 8008a02:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8008a06:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008a0a:	f8ca 701c 	str.w	r7, [sl, #28]
 8008a0e:	f88a 3014 	strb.w	r3, [sl, #20]
      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8008a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	7d9b      	ldrb	r3, [r3, #22]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 817a 	bne.w	8008d12 <st_prep_buffer+0x5c2>
 8008a1e:	4b4d      	ldr	r3, [pc, #308]	; (8008b54 <st_prep_buffer+0x404>)
 8008a20:	f893 8004 	ldrb.w	r8, [r3, #4]
 8008a24:	f018 0f08 	tst.w	r8, #8
 8008a28:	f040 81bc 	bne.w	8008da4 <st_prep_buffer+0x654>
 8008a2c:	f89a 0034 	ldrb.w	r0, [sl, #52]	; 0x34
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8008a30:	9a07      	ldr	r2, [sp, #28]
 8008a32:	4b49      	ldr	r3, [pc, #292]	; (8008b58 <st_prep_buffer+0x408>)
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8008a34:	f8da 100c 	ldr.w	r1, [sl, #12]
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8008a38:	4413      	add	r3, r2
 8008a3a:	7198      	strb	r0, [r3, #6]
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8008a3c:	4658      	mov	r0, fp
 8008a3e:	f7f8 f937 	bl	8000cb0 <__aeabi_fmul>
 8008a42:	4606      	mov	r6, r0
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8008a44:	f002 f932 	bl	800acac <ceilf>
 8008a48:	4605      	mov	r5, r0
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008a4a:	f8da 0008 	ldr.w	r0, [sl, #8]
 8008a4e:	f002 f92d 	bl	800acac <ceilf>
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008a52:	4629      	mov	r1, r5
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008a54:	4607      	mov	r7, r0
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008a56:	f7f8 f821 	bl	8000a9c <__aeabi_fsub>
 8008a5a:	f7f8 fb2b 	bl	80010b4 <__aeabi_f2uiz>
 8008a5e:	4b3e      	ldr	r3, [pc, #248]	; (8008b58 <st_prep_buffer+0x408>)
 8008a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a62:	fa1f f980 	uxth.w	r9, r0
 8008a66:	f823 9032 	strh.w	r9, [r3, r2, lsl #3]
    if (prep_segment->n_step == 0) {
 8008a6a:	f1b9 0f00 	cmp.w	r9, #0
 8008a6e:	d103      	bne.n	8008a78 <st_prep_buffer+0x328>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8008a70:	f018 0f02 	tst.w	r8, #2
 8008a74:	f040 83a1 	bne.w	80091ba <st_prep_buffer+0xa6a>
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008a7e:	f7f8 f80f 	bl	8000aa0 <__addsf3>
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008a82:	4631      	mov	r1, r6
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008a84:	4604      	mov	r4, r0
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008a86:	4638      	mov	r0, r7
 8008a88:	f7f8 f808 	bl	8000a9c <__aeabi_fsub>
 8008a8c:	4601      	mov	r1, r0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f7f8 f9c2 	bl	8000e18 <__aeabi_fdiv>
 8008a94:	4604      	mov	r4, r0
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 8008a96:	4a31      	ldr	r2, [pc, #196]	; (8008b5c <st_prep_buffer+0x40c>)
 8008a98:	4b31      	ldr	r3, [pc, #196]	; (8008b60 <st_prep_buffer+0x410>)
 8008a9a:	6817      	ldr	r7, [r2, #0]
 8008a9c:	4831      	ldr	r0, [pc, #196]	; (8008b64 <st_prep_buffer+0x414>)
 8008a9e:	fba3 2307 	umull	r2, r3, r3, r7
 8008aa2:	0c9b      	lsrs	r3, r3, #18
 8008aa4:	fb00 f003 	mul.w	r0, r0, r3
 8008aa8:	f7f8 f8aa 	bl	8000c00 <__aeabi_ui2f>
 8008aac:	492e      	ldr	r1, [pc, #184]	; (8008b68 <st_prep_buffer+0x418>)
 8008aae:	f7f8 f8ff 	bl	8000cb0 <__aeabi_fmul>
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	f7f8 f8fc 	bl	8000cb0 <__aeabi_fmul>
 8008ab8:	f002 f8f8 	bl	800acac <ceilf>
 8008abc:	f7f8 fafa 	bl	80010b4 <__aeabi_f2uiz>
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 8008ac0:	4b2a      	ldr	r3, [pc, #168]	; (8008b6c <st_prep_buffer+0x41c>)
 8008ac2:	fba3 3707 	umull	r3, r7, r3, r7
 8008ac6:	ebb0 2f57 	cmp.w	r0, r7, lsr #9
 8008aca:	f080 8137 	bcs.w	8008d3c <st_prep_buffer+0x5ec>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	9907      	ldr	r1, [sp, #28]
 8008ad2:	4b21      	ldr	r3, [pc, #132]	; (8008b58 <st_prep_buffer+0x408>)
 8008ad4:	440b      	add	r3, r1
 8008ad6:	715a      	strb	r2, [r3, #5]
 8008ad8:	460a      	mov	r2, r1
 8008ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ade:	4298      	cmp	r0, r3
 8008ae0:	bf28      	it	cs
 8008ae2:	4618      	movcs	r0, r3
    segment_buffer_head = segment_next_head;
 8008ae4:	4b22      	ldr	r3, [pc, #136]	; (8008b70 <st_prep_buffer+0x420>)
 8008ae6:	491c      	ldr	r1, [pc, #112]	; (8008b58 <st_prep_buffer+0x408>)
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	440a      	add	r2, r1
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008aec:	1c5f      	adds	r7, r3, #1
 8008aee:	b2ff      	uxtb	r7, r7
 8008af0:	8050      	strh	r0, [r2, #2]
    segment_buffer_head = segment_next_head;
 8008af2:	4a20      	ldr	r2, [pc, #128]	; (8008b74 <st_prep_buffer+0x424>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008af4:	2f0a      	cmp	r7, #10
    segment_buffer_head = segment_next_head;
 8008af6:	7013      	strb	r3, [r2, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008af8:	f000 8131 	beq.w	8008d5e <st_prep_buffer+0x60e>
    pl_block->millimeters = mm_remaining;
 8008afc:	4b1e      	ldr	r3, [pc, #120]	; (8008b78 <st_prep_buffer+0x428>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008afe:	4a1c      	ldr	r2, [pc, #112]	; (8008b70 <st_prep_buffer+0x420>)
    pl_block->millimeters = mm_remaining;
 8008b00:	681b      	ldr	r3, [r3, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008b02:	7017      	strb	r7, [r2, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008b04:	4631      	mov	r1, r6
    pl_block->millimeters = mm_remaining;
 8008b06:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
    prep.steps_remaining = n_steps_remaining;
 8008b0a:	f8ca 5008 	str.w	r5, [sl, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f7f7 ffc4 	bl	8000a9c <__aeabi_fsub>
 8008b14:	4621      	mov	r1, r4
 8008b16:	f7f8 f8cb 	bl	8000cb0 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8008b1a:	f8da 1018 	ldr.w	r1, [sl, #24]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008b1e:	f8ca 0004 	str.w	r0, [sl, #4]
    if (mm_remaining == prep.mm_complete) {
 8008b22:	4658      	mov	r0, fp
 8008b24:	f7f8 fa58 	bl	8000fd8 <__aeabi_fcmpeq>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	f43f ae1b 	beq.w	8008764 <st_prep_buffer+0x14>
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 8008b2e:	4658      	mov	r0, fp
 8008b30:	2100      	movs	r1, #0
 8008b32:	f7f8 fa79 	bl	8001028 <__aeabi_fcmpgt>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f040 833f 	bne.w	80091ba <st_prep_buffer+0xa6a>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8008b3c:	f018 0304 	ands.w	r3, r8, #4
 8008b40:	f040 833b 	bne.w	80091ba <st_prep_buffer+0xa6a>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 8008b44:	4a0c      	ldr	r2, [pc, #48]	; (8008b78 <st_prep_buffer+0x428>)
 8008b46:	6013      	str	r3, [r2, #0]
        plan_discard_current_block();
 8008b48:	f7fb fc10 	bl	800436c <plan_discard_current_block>
 8008b4c:	e608      	b.n	8008760 <st_prep_buffer+0x10>
 8008b4e:	bf00      	nop
 8008b50:	392ec33e 	.word	0x392ec33e
 8008b54:	200010b0 	.word	0x200010b0
 8008b58:	20000aa0 	.word	0x20000aa0
 8008b5c:	20000004 	.word	0x20000004
 8008b60:	431bde83 	.word	0x431bde83
 8008b64:	000f4240 	.word	0x000f4240
 8008b68:	42700000 	.word	0x42700000
 8008b6c:	10624dd3 	.word	0x10624dd3
 8008b70:	20000af2 	.word	0x20000af2
 8008b74:	20000af0 	.word	0x20000af0
 8008b78:	20000a64 	.word	0x20000a64
            prep.current_speed += speed_var;
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	4638      	mov	r0, r7
 8008b80:	f7f7 ff8e 	bl	8000aa0 <__addsf3>
      dt += time_var; // Add computed ramp time to total segment time.
 8008b84:	4629      	mov	r1, r5
            prep.current_speed += speed_var;
 8008b86:	4607      	mov	r7, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7f7 ff89 	bl	8000aa0 <__addsf3>
 8008b8e:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008b90:	4601      	mov	r1, r0
 8008b92:	4630      	mov	r0, r6
 8008b94:	f7f8 fa48 	bl	8001028 <__aeabi_fcmpgt>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	f43f af1d 	beq.w	80089d8 <st_prep_buffer+0x288>
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	f7f7 ff7b 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008ba6:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008ba8:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008baa:	4658      	mov	r0, fp
 8008bac:	f7f8 fa3c 	bl	8001028 <__aeabi_fcmpgt>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	f43f af26 	beq.w	8008a02 <st_prep_buffer+0x2b2>
          speed_var = pl_block->acceleration*time_var;
 8008bb6:	9b00      	ldr	r3, [sp, #0]
 8008bb8:	4628      	mov	r0, r5
 8008bba:	6a19      	ldr	r1, [r3, #32]
 8008bbc:	f7f8 f878 	bl	8000cb0 <__aeabi_fmul>
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008bc0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
          speed_var = pl_block->acceleration*time_var;
 8008bc4:	4681      	mov	r9, r0
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008bc6:	f7f8 f873 	bl	8000cb0 <__aeabi_fmul>
 8008bca:	4639      	mov	r1, r7
 8008bcc:	f7f7 ff68 	bl	8000aa0 <__addsf3>
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	f7f8 f86d 	bl	8000cb0 <__aeabi_fmul>
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	4658      	mov	r0, fp
 8008bda:	f7f7 ff5f 	bl	8000a9c <__aeabi_fsub>
 8008bde:	4683      	mov	fp, r0
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8008be0:	4601      	mov	r1, r0
 8008be2:	9802      	ldr	r0, [sp, #8]
 8008be4:	f7f8 fa20 	bl	8001028 <__aeabi_fcmpgt>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d0c7      	beq.n	8008b7c <st_prep_buffer+0x42c>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008bec:	4639      	mov	r1, r7
 8008bee:	4650      	mov	r0, sl
 8008bf0:	f7f7 ff56 	bl	8000aa0 <__addsf3>
 8008bf4:	4601      	mov	r1, r0
 8008bf6:	9806      	ldr	r0, [sp, #24]
 8008bf8:	f7f8 f90e 	bl	8000e18 <__aeabi_fdiv>
 8008bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bfe:	4605      	mov	r5, r0
            prep.current_speed = prep.maximum_speed;
 8008c00:	4657      	mov	r7, sl
 8008c02:	9303      	str	r3, [sp, #12]
 8008c04:	9301      	str	r3, [sp, #4]
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8008c06:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008c0a:	e6da      	b.n	80089c2 <st_prep_buffer+0x272>
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008c0c:	4658      	mov	r0, fp
 8008c0e:	4641      	mov	r1, r8
 8008c10:	f7f7 ff44 	bl	8000a9c <__aeabi_fsub>
 8008c14:	4601      	mov	r1, r0
 8008c16:	f7f7 ff43 	bl	8000aa0 <__addsf3>
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	9f08      	ldr	r7, [sp, #32]
 8008c1e:	4605      	mov	r5, r0
 8008c20:	4638      	mov	r0, r7
 8008c22:	f7f7 ff3d 	bl	8000aa0 <__addsf3>
 8008c26:	4601      	mov	r1, r0
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f7f8 f8f5 	bl	8000e18 <__aeabi_fdiv>
          mm_remaining = prep.mm_complete;
 8008c2e:	46c3      	mov	fp, r8
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008c30:	4605      	mov	r5, r0
 8008c32:	e6c6      	b.n	80089c2 <st_prep_buffer+0x272>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8008c34:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008c38:	4648      	mov	r0, r9
 8008c3a:	f7f8 f839 	bl	8000cb0 <__aeabi_fmul>
 8008c3e:	4639      	mov	r1, r7
 8008c40:	f7f7 ff2c 	bl	8000a9c <__aeabi_fsub>
 8008c44:	4629      	mov	r1, r5
 8008c46:	f7f8 f833 	bl	8000cb0 <__aeabi_fmul>
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	4658      	mov	r0, fp
 8008c4e:	f7f7 ff27 	bl	8000aa0 <__addsf3>
            prep.current_speed -= speed_var;
 8008c52:	4649      	mov	r1, r9
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8008c54:	4683      	mov	fp, r0
            prep.current_speed -= speed_var;
 8008c56:	4638      	mov	r0, r7
 8008c58:	f7f7 ff20 	bl	8000a9c <__aeabi_fsub>
      dt += time_var; // Add computed ramp time to total segment time.
 8008c5c:	4629      	mov	r1, r5
            prep.current_speed -= speed_var;
 8008c5e:	4607      	mov	r7, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008c60:	4620      	mov	r0, r4
 8008c62:	f7f7 ff1d 	bl	8000aa0 <__addsf3>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c66:	4631      	mov	r1, r6
      dt += time_var; // Add computed ramp time to total segment time.
 8008c68:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c6a:	f7f8 f9bf 	bl	8000fec <__aeabi_fcmplt>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f43f aeb2 	beq.w	80089d8 <st_prep_buffer+0x288>
 8008c74:	4621      	mov	r1, r4
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7f7 ff10 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c7c:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c7e:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c80:	4658      	mov	r0, fp
 8008c82:	f7f8 f9d1 	bl	8001028 <__aeabi_fcmpgt>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f47f adf3 	bne.w	8008872 <st_prep_buffer+0x122>
 8008c8c:	e6b9      	b.n	8008a02 <st_prep_buffer+0x2b2>
      dt += time_var; // Add computed ramp time to total segment time.
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4620      	mov	r0, r4
 8008c92:	f7f7 ff05 	bl	8000aa0 <__addsf3>
 8008c96:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c98:	4601      	mov	r1, r0
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7f8 f9c4 	bl	8001028 <__aeabi_fcmpgt>
 8008ca0:	bb38      	cbnz	r0, 8008cf2 <st_prep_buffer+0x5a2>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	e697      	b.n	80089d8 <st_prep_buffer+0x288>
 8008ca8:	4621      	mov	r1, r4
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7f7 fef6 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008cb0:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008cb2:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008cb4:	4658      	mov	r0, fp
 8008cb6:	f7f8 f9b7 	bl	8001028 <__aeabi_fcmpgt>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	f47f ae56 	bne.w	800896c <st_prep_buffer+0x21c>
            prep.ramp_type = RAMP_DECEL;
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8008cc6:	9303      	str	r3, [sp, #12]
 8008cc8:	e69d      	b.n	8008a06 <st_prep_buffer+0x2b6>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f7f7 fee5 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008cd2:	f8dd b008 	ldr.w	fp, [sp, #8]
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008cd6:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008cd8:	4641      	mov	r1, r8
 8008cda:	4658      	mov	r0, fp
 8008cdc:	f7f8 f9a4 	bl	8001028 <__aeabi_fcmpgt>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	f47f ae04 	bne.w	80088ee <st_prep_buffer+0x19e>
            prep.ramp_type = RAMP_CRUISE;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
            prep.current_speed = prep.maximum_speed;
 8008cec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
            prep.ramp_type = RAMP_CRUISE;
 8008cee:	9303      	str	r3, [sp, #12]
 8008cf0:	e689      	b.n	8008a06 <st_prep_buffer+0x2b6>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f7f7 fed1 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008cfa:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008cfc:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008cfe:	4658      	mov	r0, fp
 8008d00:	f7f8 f992 	bl	8001028 <__aeabi_fcmpgt>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	f47f adf5 	bne.w	80088f4 <st_prep_buffer+0x1a4>
 8008d0a:	e67a      	b.n	8008a02 <st_prep_buffer+0x2b2>
 8008d0c:	f04f 0301 	mov.w	r3, #1
 8008d10:	e57f      	b.n	8008812 <st_prep_buffer+0xc2>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8008d12:	9b00      	ldr	r3, [sp, #0]
 8008d14:	7d9b      	ldrb	r3, [r3, #22]
 8008d16:	f013 0f30 	tst.w	r3, #48	; 0x30
 8008d1a:	d15c      	bne.n	8008dd6 <st_prep_buffer+0x686>
 8008d1c:	4bb2      	ldr	r3, [pc, #712]	; (8008fe8 <st_prep_buffer+0x898>)
 8008d1e:	f893 8004 	ldrb.w	r8, [r3, #4]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008d22:	2300      	movs	r3, #0
          sys.spindle_speed = 0.0;
 8008d24:	2100      	movs	r1, #0
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008d26:	4618      	mov	r0, r3
          sys.spindle_speed = 0.0;
 8008d28:	4aaf      	ldr	r2, [pc, #700]	; (8008fe8 <st_prep_buffer+0x898>)
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008d2a:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
          sys.spindle_speed = 0.0;
 8008d2e:	6111      	str	r1, [r2, #16]
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8008d30:	4bad      	ldr	r3, [pc, #692]	; (8008fe8 <st_prep_buffer+0x898>)
 8008d32:	f008 08f7 	and.w	r8, r8, #247	; 0xf7
 8008d36:	f883 8004 	strb.w	r8, [r3, #4]
 8008d3a:	e679      	b.n	8008a30 <st_prep_buffer+0x2e0>
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 8008d3c:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
 8008d40:	d240      	bcs.n	8008dc4 <st_prep_buffer+0x674>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4aa9      	ldr	r2, [pc, #676]	; (8008fec <st_prep_buffer+0x89c>)
 8008d46:	9907      	ldr	r1, [sp, #28]
 8008d48:	440a      	add	r2, r1
 8008d4a:	7153      	strb	r3, [r2, #5]
        prep_segment->n_step <<= prep_segment->amass_level;
 8008d4c:	4aa7      	ldr	r2, [pc, #668]	; (8008fec <st_prep_buffer+0x89c>)
 8008d4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d50:	fa09 f903 	lsl.w	r9, r9, r3
 8008d54:	f822 9031 	strh.w	r9, [r2, r1, lsl #3]
        cycles >>= prep_segment->amass_level;
 8008d58:	40d8      	lsrs	r0, r3
 8008d5a:	9a07      	ldr	r2, [sp, #28]
 8008d5c:	e6bd      	b.n	8008ada <st_prep_buffer+0x38a>
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d5e:	2200      	movs	r2, #0
    pl_block->millimeters = mm_remaining;
 8008d60:	4ba3      	ldr	r3, [pc, #652]	; (8008ff0 <st_prep_buffer+0x8a0>)
    prep.steps_remaining = n_steps_remaining;
 8008d62:	f8ca 5008 	str.w	r5, [sl, #8]
    pl_block->millimeters = mm_remaining;
 8008d66:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d68:	4628      	mov	r0, r5
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d6a:	4da2      	ldr	r5, [pc, #648]	; (8008ff4 <st_prep_buffer+0x8a4>)
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d6c:	4631      	mov	r1, r6
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d6e:	702a      	strb	r2, [r5, #0]
    pl_block->millimeters = mm_remaining;
 8008d70:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d74:	f7f7 fe92 	bl	8000a9c <__aeabi_fsub>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	f7f7 ff99 	bl	8000cb0 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8008d7e:	4659      	mov	r1, fp
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d80:	f8ca 0004 	str.w	r0, [sl, #4]
    if (mm_remaining == prep.mm_complete) {
 8008d84:	f8da 0018 	ldr.w	r0, [sl, #24]
 8008d88:	f7f8 f926 	bl	8000fd8 <__aeabi_fcmpeq>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f47f aece 	bne.w	8008b2e <st_prep_buffer+0x3de>
 8008d92:	4607      	mov	r7, r0
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8008d94:	4b98      	ldr	r3, [pc, #608]	; (8008ff8 <st_prep_buffer+0x8a8>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	42bb      	cmp	r3, r7
 8008d9a:	f47f ace8 	bne.w	800876e <st_prep_buffer+0x1e>
}
 8008d9e:	b011      	add	sp, #68	; 0x44
 8008da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8008da4:	9b00      	ldr	r3, [sp, #0]
 8008da6:	7d9b      	ldrb	r3, [r3, #22]
 8008da8:	f013 0f30 	tst.w	r3, #48	; 0x30
 8008dac:	d0b9      	beq.n	8008d22 <st_prep_buffer+0x5d2>
          float rpm = pl_block->spindle_speed;
 8008dae:	9b00      	ldr	r3, [sp, #0]
 8008db0:	6b58      	ldr	r0, [r3, #52]	; 0x34
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8008db2:	f7fe ffbd 	bl	8007d30 <spindle_compute_pwm_value>
 8008db6:	4b8c      	ldr	r3, [pc, #560]	; (8008fe8 <st_prep_buffer+0x898>)
 8008db8:	b2c0      	uxtb	r0, r0
 8008dba:	f88a 0034 	strb.w	r0, [sl, #52]	; 0x34
 8008dbe:	f893 8004 	ldrb.w	r8, [r3, #4]
 8008dc2:	e7b5      	b.n	8008d30 <st_prep_buffer+0x5e0>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 8008dc4:	ebb0 1fd7 	cmp.w	r0, r7, lsr #7
 8008dc8:	d25d      	bcs.n	8008e86 <st_prep_buffer+0x736>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	4a87      	ldr	r2, [pc, #540]	; (8008fec <st_prep_buffer+0x89c>)
 8008dce:	9907      	ldr	r1, [sp, #28]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	7153      	strb	r3, [r2, #5]
 8008dd4:	e7ba      	b.n	8008d4c <st_prep_buffer+0x5fc>
          float rpm = pl_block->spindle_speed;
 8008dd6:	9b00      	ldr	r3, [sp, #0]
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8008dd8:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
          float rpm = pl_block->spindle_speed;
 8008ddc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8008dde:	f8da 001c 	ldr.w	r0, [sl, #28]
 8008de2:	f7f7 ff65 	bl	8000cb0 <__aeabi_fmul>
 8008de6:	4629      	mov	r1, r5
 8008de8:	f7f7 ff62 	bl	8000cb0 <__aeabi_fmul>
 8008dec:	e7e1      	b.n	8008db2 <st_prep_buffer+0x662>
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8008dee:	4b7e      	ldr	r3, [pc, #504]	; (8008fe8 <st_prep_buffer+0x898>)
 8008df0:	791b      	ldrb	r3, [r3, #4]
 8008df2:	075c      	lsls	r4, r3, #29
 8008df4:	d54e      	bpl.n	8008e94 <st_prep_buffer+0x744>
 8008df6:	f7fb fad3 	bl	80043a0 <plan_get_system_motion_block>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	4b7c      	ldr	r3, [pc, #496]	; (8008ff0 <st_prep_buffer+0x8a0>)
 8008dfe:	9000      	str	r0, [sp, #0]
 8008e00:	6018      	str	r0, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8008e02:	2a00      	cmp	r2, #0
 8008e04:	d0cb      	beq.n	8008d9e <st_prep_buffer+0x64e>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8008e06:	f8df a204 	ldr.w	sl, [pc, #516]	; 800900c <st_prep_buffer+0x8bc>
 8008e0a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8008e0e:	f014 0101 	ands.w	r1, r4, #1
 8008e12:	d046      	beq.n	8008ea2 <st_prep_buffer+0x752>
          prep.recalculate_flag = false;
 8008e14:	2300      	movs	r3, #0
 8008e16:	4974      	ldr	r1, [pc, #464]	; (8008fe8 <st_prep_buffer+0x898>)
 8008e18:	f88a 3001 	strb.w	r3, [sl, #1]
 8008e1c:	790d      	ldrb	r5, [r1, #4]
 8008e1e:	4b77      	ldr	r3, [pc, #476]	; (8008ffc <st_prep_buffer+0x8ac>)
 8008e20:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 8008e24:	f005 0602 	and.w	r6, r5, #2
 8008e28:	930e      	str	r3, [sp, #56]	; 0x38
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008e2a:	2200      	movs	r2, #0
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8008e2c:	9b00      	ldr	r3, [sp, #0]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008e2e:	f8ca 2018 	str.w	r2, [sl, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8008e32:	6a1f      	ldr	r7, [r3, #32]
 8008e34:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008e38:	4639      	mov	r1, r7
 8008e3a:	f7f7 ffed 	bl	8000e18 <__aeabi_fdiv>
 8008e3e:	4604      	mov	r4, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8008e40:	2e00      	cmp	r6, #0
 8008e42:	f000 808e 	beq.w	8008f62 <st_prep_buffer+0x812>
				prep.ramp_type = RAMP_DECEL;
 8008e46:	f04f 0802 	mov.w	r8, #2
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8008e4a:	9b00      	ldr	r3, [sp, #0]
				prep.ramp_type = RAMP_DECEL;
 8008e4c:	f88a 8014 	strb.w	r8, [sl, #20]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8008e50:	699c      	ldr	r4, [r3, #24]
 8008e52:	4621      	mov	r1, r4
 8008e54:	f7f7 ff2c 	bl	8000cb0 <__aeabi_fmul>
 8008e58:	4601      	mov	r1, r0
 8008e5a:	4658      	mov	r0, fp
 8008e5c:	f7f7 fe1e 	bl	8000a9c <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 8008e60:	2100      	movs	r1, #0
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8008e62:	4606      	mov	r6, r0
				if (decel_dist < 0.0f) {
 8008e64:	f7f8 f8c2 	bl	8000fec <__aeabi_fcmplt>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	f040 814a 	bne.w	8009102 <st_prep_buffer+0x9b2>
					prep.exit_speed = 0.0f;
 8008e6e:	2300      	movs	r3, #0
					prep.mm_complete = decel_dist; // End of feed hold.
 8008e70:	f8ca 6018 	str.w	r6, [sl, #24]
					prep.exit_speed = 0.0f;
 8008e74:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
 8008e78:	f8cd 8004 	str.w	r8, [sp, #4]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8008e7c:	4b5a      	ldr	r3, [pc, #360]	; (8008fe8 <st_prep_buffer+0x898>)
 8008e7e:	f045 0508 	orr.w	r5, r5, #8
 8008e82:	711d      	strb	r5, [r3, #4]
 8008e84:	e482      	b.n	800878c <st_prep_buffer+0x3c>
        else { prep_segment->amass_level = 3; }
 8008e86:	2203      	movs	r2, #3
 8008e88:	4958      	ldr	r1, [pc, #352]	; (8008fec <st_prep_buffer+0x89c>)
 8008e8a:	9f07      	ldr	r7, [sp, #28]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	4439      	add	r1, r7
 8008e90:	714a      	strb	r2, [r1, #5]
 8008e92:	e75b      	b.n	8008d4c <st_prep_buffer+0x5fc>
      else { pl_block = plan_get_current_block(); }
 8008e94:	f7fb fa90 	bl	80043b8 <plan_get_current_block>
 8008e98:	4b55      	ldr	r3, [pc, #340]	; (8008ff0 <st_prep_buffer+0x8a0>)
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	9000      	str	r0, [sp, #0]
 8008e9e:	6018      	str	r0, [r3, #0]
 8008ea0:	e7af      	b.n	8008e02 <st_prep_buffer+0x6b2>
  block_index++;
 8008ea2:	f89a 2000 	ldrb.w	r2, [sl]
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8008ea6:	4b56      	ldr	r3, [pc, #344]	; (8009000 <st_prep_buffer+0x8b0>)
  block_index++;
 8008ea8:	3201      	adds	r2, #1
 8008eaa:	b2d2      	uxtb	r2, r2
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8008eac:	2a09      	cmp	r2, #9
 8008eae:	f000 8119 	beq.w	80090e4 <st_prep_buffer+0x994>
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8008eb8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008ebc:	9e00      	ldr	r6, [sp, #0]
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 8008ebe:	f88a 2000 	strb.w	r2, [sl]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008ec2:	4635      	mov	r5, r6
 8008ec4:	6830      	ldr	r0, [r6, #0]
 8008ec6:	6872      	ldr	r2, [r6, #4]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008ec8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008ecc:	00c0      	lsls	r0, r0, #3
 8008ece:	68ad      	ldr	r5, [r5, #8]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008ed0:	8ab6      	ldrh	r6, [r6, #20]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008ed2:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
 8008ed6:	9800      	ldr	r0, [sp, #0]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008ed8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008edc:	00d2      	lsls	r2, r2, #3
 8008ede:	68c1      	ldr	r1, [r0, #12]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008ee0:	6900      	ldr	r0, [r0, #16]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008ee2:	605a      	str	r2, [r3, #4]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008ee4:	4a45      	ldr	r2, [pc, #276]	; (8008ffc <st_prep_buffer+0x8ac>)
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008ee6:	829e      	strh	r6, [r3, #20]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008ee8:	4616      	mov	r6, r2
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008eea:	00c9      	lsls	r1, r1, #3
 8008eec:	00ed      	lsls	r5, r5, #3
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008eee:	920e      	str	r2, [sp, #56]	; 0x38
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008ef0:	00c2      	lsls	r2, r0, #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008ef2:	609d      	str	r5, [r3, #8]
 8008ef4:	60d9      	str	r1, [r3, #12]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008ef6:	611a      	str	r2, [r3, #16]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008ef8:	6037      	str	r7, [r6, #0]
        prep.steps_remaining = (float)pl_block->step_event_count;
 8008efa:	f7f7 fe81 	bl	8000c00 <__aeabi_ui2f>
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008efe:	9d00      	ldr	r5, [sp, #0]
        prep.steps_remaining = (float)pl_block->step_event_count;
 8008f00:	f8ca 0008 	str.w	r0, [sl, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008f04:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
 8008f08:	4659      	mov	r1, fp
 8008f0a:	f7f7 ff85 	bl	8000e18 <__aeabi_fdiv>
 8008f0e:	4601      	mov	r1, r0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008f10:	483c      	ldr	r0, [pc, #240]	; (8009004 <st_prep_buffer+0x8b4>)
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008f12:	f8ca 100c 	str.w	r1, [sl, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008f16:	f7f7 ff7f 	bl	8000e18 <__aeabi_fdiv>
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008f1a:	4b33      	ldr	r3, [pc, #204]	; (8008fe8 <st_prep_buffer+0x898>)
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008f1c:	f8ca 0010 	str.w	r0, [sl, #16]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008f20:	791d      	ldrb	r5, [r3, #4]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8008f22:	2300      	movs	r3, #0
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008f24:	f015 0602 	ands.w	r6, r5, #2
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8008f28:	f8ca 3004 	str.w	r3, [sl, #4]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008f2c:	d170      	bne.n	8009010 <st_prep_buffer+0x8c0>
 8008f2e:	f014 0808 	ands.w	r8, r4, #8
 8008f32:	d16d      	bne.n	8009010 <st_prep_buffer+0x8c0>
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8008f34:	9b00      	ldr	r3, [sp, #0]
 8008f36:	6998      	ldr	r0, [r3, #24]
 8008f38:	f001 ffd0 	bl	800aedc <sqrtf>
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008f3c:	4b32      	ldr	r3, [pc, #200]	; (8009008 <st_prep_buffer+0x8b8>)
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8008f3e:	f8ca 001c 	str.w	r0, [sl, #28]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008f42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
        st_prep_block->is_pwm_rate_adjusted = false;
 8008f46:	f887 8016 	strb.w	r8, [r7, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008f4a:	0799      	lsls	r1, r3, #30
 8008f4c:	d475      	bmi.n	800903a <st_prep_buffer+0x8ea>
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f8ca 3018 	str.w	r3, [sl, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8008f54:	9b00      	ldr	r3, [sp, #0]
 8008f56:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008f5a:	6a19      	ldr	r1, [r3, #32]
 8008f5c:	f7f7 ff5c 	bl	8000e18 <__aeabi_fdiv>
 8008f60:	4604      	mov	r4, r0
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8008f62:	2300      	movs	r3, #0
 8008f64:	f88a 3014 	strb.w	r3, [sl, #20]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8008f68:	076b      	lsls	r3, r5, #29
				prep.accelerate_until = pl_block->millimeters;
 8008f6a:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8008f6e:	f140 80bc 	bpl.w	80090ea <st_prep_buffer+0x99a>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 8008f72:	2300      	movs	r3, #0
 8008f74:	4698      	mov	r8, r3
 8008f76:	9800      	ldr	r0, [sp, #0]
 8008f78:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8008f7c:	f7fb fa58 	bl	8004430 <plan_compute_profile_nominal_speed>
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8008f80:	4601      	mov	r1, r0
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8008f82:	4681      	mov	r9, r0
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8008f84:	f7f7 fe94 	bl	8000cb0 <__aeabi_fmul>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8008f88:	4b19      	ldr	r3, [pc, #100]	; (8008ff0 <st_prep_buffer+0x8a0>)
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8008f8a:	4606      	mov	r6, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	699d      	ldr	r5, [r3, #24]
 8008f90:	9300      	str	r3, [sp, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8008f92:	4629      	mov	r1, r5
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8008f94:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8008f98:	f7f8 f828 	bl	8000fec <__aeabi_fcmplt>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d068      	beq.n	8009072 <st_prep_buffer+0x922>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7f7 fd7a 	bl	8000a9c <__aeabi_fsub>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	f7f7 fe81 	bl	8000cb0 <__aeabi_fmul>
 8008fae:	4659      	mov	r1, fp
 8008fb0:	f7f7 fd76 	bl	8000aa0 <__addsf3>
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8008fb4:	2100      	movs	r1, #0
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8008fb6:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8008fba:	f7f8 f821 	bl	8001000 <__aeabi_fcmple>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	f040 80c5 	bne.w	800914e <st_prep_buffer+0x9fe>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8008fc4:	4641      	mov	r1, r8
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f7f7 fd68 	bl	8000a9c <__aeabi_fsub>
 8008fcc:	4621      	mov	r1, r4
 8008fce:	f7f7 fe6f 	bl	8000cb0 <__aeabi_fmul>
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	f88a 3014 	strb.w	r3, [sl, #20]
 8008fd8:	9301      	str	r3, [sp, #4]
 8008fda:	4b03      	ldr	r3, [pc, #12]	; (8008fe8 <st_prep_buffer+0x898>)
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8008fdc:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
						prep.maximum_speed = nominal_speed;
 8008fe0:	f8ca 9020 	str.w	r9, [sl, #32]
 8008fe4:	791d      	ldrb	r5, [r3, #4]
 8008fe6:	e749      	b.n	8008e7c <st_prep_buffer+0x72c>
 8008fe8:	200010b0 	.word	0x200010b0
 8008fec:	20000aa0 	.word	0x20000aa0
 8008ff0:	20000a64 	.word	0x20000a64
 8008ff4:	20000af2 	.word	0x20000af2
 8008ff8:	20000af1 	.word	0x20000af1
 8008ffc:	20000c00 	.word	0x20000c00
 8009000:	20000b28 	.word	0x20000b28
 8009004:	3fa00000 	.word	0x3fa00000
 8009008:	2000126c 	.word	0x2000126c
 800900c:	20000a68 	.word	0x20000a68
          prep.current_speed = prep.exit_speed;
 8009010:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8009014:	f024 0408 	bic.w	r4, r4, #8
          prep.current_speed = prep.exit_speed;
 8009018:	f8ca 101c 	str.w	r1, [sl, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 800901c:	4608      	mov	r0, r1
 800901e:	f7f7 fe47 	bl	8000cb0 <__aeabi_fmul>
        st_prep_block->is_pwm_rate_adjusted = false;
 8009022:	2200      	movs	r2, #0
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8009024:	9900      	ldr	r1, [sp, #0]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009026:	4b72      	ldr	r3, [pc, #456]	; (80091f0 <st_prep_buffer+0xaa0>)
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8009028:	6188      	str	r0, [r1, #24]
        if (settings.flags & BITFLAG_LASER_MODE) {
 800902a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 800902e:	f88a 4001 	strb.w	r4, [sl, #1]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009032:	0798      	lsls	r0, r3, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 8009034:	75ba      	strb	r2, [r7, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009036:	f57f aef8 	bpl.w	8008e2a <st_prep_buffer+0x6da>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 800903a:	9c00      	ldr	r4, [sp, #0]
 800903c:	7da3      	ldrb	r3, [r4, #22]
 800903e:	069a      	lsls	r2, r3, #26
 8009040:	f57f aef3 	bpl.w	8008e2a <st_prep_buffer+0x6da>
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8009044:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009046:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800904a:	f7f7 fee5 	bl	8000e18 <__aeabi_fdiv>
            st_prep_block->is_pwm_rate_adjusted = true;
 800904e:	2301      	movs	r3, #1
 8009050:	75bb      	strb	r3, [r7, #22]
 8009052:	4b68      	ldr	r3, [pc, #416]	; (80091f4 <st_prep_buffer+0xaa4>)
 8009054:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8009058:	791d      	ldrb	r5, [r3, #4]
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 800905a:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
 800905e:	f005 0602 	and.w	r6, r5, #2
 8009062:	e6e2      	b.n	8008e2a <st_prep_buffer+0x6da>
            prep.ramp_type = RAMP_CRUISE;
 8009064:	2301      	movs	r3, #1
 8009066:	46bb      	mov	fp, r7
 8009068:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
            prep.current_speed = prep.maximum_speed;
 800906c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
            prep.ramp_type = RAMP_CRUISE;
 800906e:	9303      	str	r3, [sp, #12]
 8009070:	e4c9      	b.n	8008a06 <st_prep_buffer+0x2b6>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8009072:	4641      	mov	r1, r8
 8009074:	4628      	mov	r0, r5
 8009076:	f7f7 fd11 	bl	8000a9c <__aeabi_fsub>
 800907a:	4621      	mov	r1, r4
 800907c:	f7f7 fe18 	bl	8000cb0 <__aeabi_fmul>
 8009080:	4659      	mov	r1, fp
 8009082:	f7f7 fd0d 	bl	8000aa0 <__addsf3>
				float intersect_distance =
 8009086:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800908a:	f7f7 fe11 	bl	8000cb0 <__aeabi_fmul>
				} else if (intersect_distance > 0.0f) {
 800908e:	2100      	movs	r1, #0
				float intersect_distance =
 8009090:	4607      	mov	r7, r0
				} else if (intersect_distance > 0.0f) {
 8009092:	f7f7 ffc9 	bl	8001028 <__aeabi_fcmpgt>
 8009096:	2800      	cmp	r0, #0
 8009098:	d04c      	beq.n	8009134 <st_prep_buffer+0x9e4>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 800909a:	4639      	mov	r1, r7
 800909c:	4658      	mov	r0, fp
 800909e:	f7f7 ffc3 	bl	8001028 <__aeabi_fcmpgt>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d03f      	beq.n	8009126 <st_prep_buffer+0x9d6>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 80090a6:	4641      	mov	r1, r8
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7f7 fcf7 	bl	8000a9c <__aeabi_fsub>
 80090ae:	4621      	mov	r1, r4
 80090b0:	f7f7 fdfe 	bl	8000cb0 <__aeabi_fmul>
 80090b4:	4601      	mov	r1, r0
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 80090b6:	4638      	mov	r0, r7
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 80090b8:	f8ca 102c 	str.w	r1, [sl, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 80090bc:	f7f7 ffb4 	bl	8001028 <__aeabi_fcmpgt>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d061      	beq.n	8009188 <st_prep_buffer+0xa38>
							prep.maximum_speed = nominal_speed;
 80090c4:	f8ca 9020 	str.w	r9, [sl, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 80090c8:	4629      	mov	r1, r5
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7f7 ff84 	bl	8000fd8 <__aeabi_fcmpeq>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d07a      	beq.n	80091ca <st_prep_buffer+0xa7a>
								prep.ramp_type = RAMP_CRUISE;
 80090d4:	2301      	movs	r3, #1
 80090d6:	4a47      	ldr	r2, [pc, #284]	; (80091f4 <st_prep_buffer+0xaa4>)
 80090d8:	f88a 3014 	strb.w	r3, [sl, #20]
 80090dc:	7915      	ldrb	r5, [r2, #4]
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	e6cc      	b.n	8008e7c <st_prep_buffer+0x72c>
 80090e2:	4770      	bx	lr
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 80090e4:	460a      	mov	r2, r1
 80090e6:	461f      	mov	r7, r3
 80090e8:	e6e8      	b.n	8008ebc <st_prep_buffer+0x76c>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 80090ea:	f7fb f979 	bl	80043e0 <plan_get_exec_block_exit_speed_sqr>
 80090ee:	4680      	mov	r8, r0
          prep.exit_speed = sqrtf(exit_speed_sqr);
 80090f0:	f001 fef4 	bl	800aedc <sqrtf>
 80090f4:	4b40      	ldr	r3, [pc, #256]	; (80091f8 <st_prep_buffer+0xaa8>)
 80090f6:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	e73c      	b.n	8008f7c <st_prep_buffer+0x82c>
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 8009102:	4639      	mov	r1, r7
 8009104:	4638      	mov	r0, r7
 8009106:	f7f7 fccb 	bl	8000aa0 <__addsf3>
 800910a:	4659      	mov	r1, fp
 800910c:	f7f7 fdd0 	bl	8000cb0 <__aeabi_fmul>
 8009110:	4601      	mov	r1, r0
 8009112:	4620      	mov	r0, r4
 8009114:	f7f7 fcc2 	bl	8000a9c <__aeabi_fsub>
 8009118:	f001 fee0 	bl	800aedc <sqrtf>
 800911c:	f8cd 8004 	str.w	r8, [sp, #4]
 8009120:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8009124:	e6aa      	b.n	8008e7c <st_prep_buffer+0x72c>
            prep.ramp_type = RAMP_DECEL;
 8009126:	2302      	movs	r3, #2
 8009128:	4a32      	ldr	r2, [pc, #200]	; (80091f4 <st_prep_buffer+0xaa4>)
 800912a:	f88a 3014 	strb.w	r3, [sl, #20]
 800912e:	7915      	ldrb	r5, [r2, #4]
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	e6a3      	b.n	8008e7c <st_prep_buffer+0x72c>
 8009134:	4a2f      	ldr	r2, [pc, #188]	; (80091f4 <st_prep_buffer+0xaa4>)
					prep.maximum_speed = prep.exit_speed;
 8009136:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800913a:	7915      	ldrb	r5, [r2, #4]
 800913c:	f89a 2014 	ldrb.w	r2, [sl, #20]
 8009140:	f8ca 3020 	str.w	r3, [sl, #32]
 8009144:	9201      	str	r2, [sp, #4]
					prep.accelerate_until = 0.0f;
 8009146:	2200      	movs	r2, #0
 8009148:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
 800914c:	e696      	b.n	8008e7c <st_prep_buffer+0x72c>
            prep.ramp_type = RAMP_DECEL;
 800914e:	2402      	movs	r4, #2
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009150:	9b00      	ldr	r3, [sp, #0]
            prep.ramp_type = RAMP_DECEL;
 8009152:	f88a 4014 	strb.w	r4, [sl, #20]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009156:	6a19      	ldr	r1, [r3, #32]
 8009158:	4658      	mov	r0, fp
 800915a:	f7f7 fda9 	bl	8000cb0 <__aeabi_fmul>
 800915e:	4601      	mov	r1, r0
 8009160:	f7f7 fc9e 	bl	8000aa0 <__addsf3>
 8009164:	4601      	mov	r1, r0
 8009166:	4628      	mov	r0, r5
 8009168:	f7f7 fc98 	bl	8000a9c <__aeabi_fsub>
 800916c:	f001 feb6 	bl	800aedc <sqrtf>
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8009170:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009174:	9401      	str	r4, [sp, #4]
 8009176:	f043 0308 	orr.w	r3, r3, #8
 800917a:	f88a 3001 	strb.w	r3, [sl, #1]
 800917e:	4b1d      	ldr	r3, [pc, #116]	; (80091f4 <st_prep_buffer+0xaa4>)
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009180:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8009184:	791d      	ldrb	r5, [r3, #4]
 8009186:	e679      	b.n	8008e7c <st_prep_buffer+0x72c>
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8009188:	9b00      	ldr	r3, [sp, #0]
 800918a:	6a19      	ldr	r1, [r3, #32]
							prep.accelerate_until = intersect_distance;
 800918c:	f8ca 7028 	str.w	r7, [sl, #40]	; 0x28
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8009190:	4608      	mov	r0, r1
							prep.decelerate_after = intersect_distance;
 8009192:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8009196:	f7f7 fc83 	bl	8000aa0 <__addsf3>
 800919a:	4639      	mov	r1, r7
 800919c:	f7f7 fd88 	bl	8000cb0 <__aeabi_fmul>
 80091a0:	4641      	mov	r1, r8
 80091a2:	f7f7 fc7d 	bl	8000aa0 <__addsf3>
 80091a6:	f001 fe99 	bl	800aedc <sqrtf>
 80091aa:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <st_prep_buffer+0xaa4>)
 80091ac:	f8ca 0020 	str.w	r0, [sl, #32]
 80091b0:	791d      	ldrb	r5, [r3, #4]
 80091b2:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	e660      	b.n	8008e7c <st_prep_buffer+0x72c>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 80091ba:	4b0e      	ldr	r3, [pc, #56]	; (80091f4 <st_prep_buffer+0xaa4>)
 80091bc:	f048 0901 	orr.w	r9, r8, #1
 80091c0:	f883 9004 	strb.w	r9, [r3, #4]
}
 80091c4:	b011      	add	sp, #68	; 0x44
 80091c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 80091ca:	4631      	mov	r1, r6
 80091cc:	4628      	mov	r0, r5
 80091ce:	f7f7 fc65 	bl	8000a9c <__aeabi_fsub>
 80091d2:	4621      	mov	r1, r4
 80091d4:	f7f7 fd6c 	bl	8000cb0 <__aeabi_fmul>
 80091d8:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80091dc:	f7f7 fc60 	bl	8000aa0 <__addsf3>
 80091e0:	4b04      	ldr	r3, [pc, #16]	; (80091f4 <st_prep_buffer+0xaa4>)
 80091e2:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
 80091e6:	791d      	ldrb	r5, [r3, #4]
 80091e8:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	e645      	b.n	8008e7c <st_prep_buffer+0x72c>
 80091f0:	2000126c 	.word	0x2000126c
 80091f4:	200010b0 	.word	0x200010b0
 80091f8:	20000a64 	.word	0x20000a64

080091fc <st_get_realtime_rate>:
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 80091fc:	4b04      	ldr	r3, [pc, #16]	; (8009210 <st_get_realtime_rate+0x14>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 8009204:	bf1a      	itte	ne
 8009206:	4b03      	ldrne	r3, [pc, #12]	; (8009214 <st_get_realtime_rate+0x18>)
 8009208:	69d8      	ldrne	r0, [r3, #28]
  return 0.0f;
 800920a:	2000      	moveq	r0, #0
}
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	200010b0 	.word	0x200010b0
 8009214:	20000a68 	.word	0x20000a68

08009218 <system_init>:

#include "grbl.h"


void system_init()
{
 8009218:	b510      	push	{r4, lr}
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 800921a:	2101      	movs	r1, #1
{
 800921c:	b084      	sub	sp, #16
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 800921e:	2009      	movs	r0, #9
 8009220:	f7f8 fb0a 	bl	8001838 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8009224:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 8009228:	2101      	movs	r1, #1
 800922a:	481a      	ldr	r0, [pc, #104]	; (8009294 <system_init+0x7c>)
 800922c:	f7f8 fab0 	bl	8001790 <GPIO_PinRemapConfig>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8009230:	2203      	movs	r2, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8009232:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8009234:	a904      	add	r1, sp, #16
 8009236:	f821 4d10 	strh.w	r4, [r1, #-16]!
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 800923a:	4817      	ldr	r0, [pc, #92]	; (8009298 <system_init+0x80>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800923c:	f88d 2002 	strb.w	r2, [sp, #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8009240:	f88d 3003 	strb.w	r3, [sp, #3]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8009244:	f7f8 f8dc 	bl	8001400 <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 8009248:	2105      	movs	r1, #5
 800924a:	2001      	movs	r0, #1
 800924c:	f7f8 fad6 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 8009250:	2106      	movs	r1, #6
 8009252:	2001      	movs	r0, #1
 8009254:	f7f8 fad2 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 8009258:	2107      	movs	r1, #7
 800925a:	2001      	movs	r0, #1
 800925c:	f7f8 face 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 8009260:	2108      	movs	r1, #8
 8009262:	2001      	movs	r0, #1
 8009264:	f7f8 faca 	bl	80017fc <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8009268:	2100      	movs	r1, #0
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 800926a:	2210      	movs	r2, #16
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800926c:	2301      	movs	r3, #1
  EXTI_Init(&EXTI_InitStructure);
 800926e:	a802      	add	r0, sp, #8
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8009270:	f88d 100c 	strb.w	r1, [sp, #12]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8009274:	f88d 200d 	strb.w	r2, [sp, #13]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009278:	f88d 300e 	strb.w	r3, [sp, #14]
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 800927c:	9402      	str	r4, [sp, #8]
  EXTI_Init(&EXTI_InitStructure);
 800927e:	f7f7 ff75 	bl	800116c <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 8009282:	4b06      	ldr	r3, [pc, #24]	; (800929c <system_init+0x84>)
 8009284:	a804      	add	r0, sp, #16
 8009286:	f840 3d0c 	str.w	r3, [r0, #-12]!
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
  NVIC_Init(&NVIC_InitStructure);
 800928a:	f7f7 ff3d 	bl	8001108 <NVIC_Init>
#endif
}
 800928e:	b004      	add	sp, #16
 8009290:	bd10      	pop	{r4, pc}
 8009292:	bf00      	nop
 8009294:	00300200 	.word	0x00300200
 8009298:	40010c00 	.word	0x40010c00
 800929c:	01020217 	.word	0x01020217

080092a0 <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 80092a0:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 80092a2:	480a      	ldr	r0, [pc, #40]	; (80092cc <system_control_get_state+0x2c>)
 80092a4:	f7f8 fa62 	bl	800176c <GPIO_ReadInputData>
#endif
  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 80092a8:	b168      	cbz	r0, 80092c6 <system_control_get_state+0x26>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80092aa:	f080 0320 	eor.w	r3, r0, #32
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80092ae:	0641      	lsls	r1, r0, #25
  uint8_t control_state = 0;
 80092b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80092b4:	bf58      	it	pl
 80092b6:	f043 0302 	orrpl.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80092ba:	0602      	lsls	r2, r0, #24
 80092bc:	d401      	bmi.n	80092c2 <system_control_get_state+0x22>
 80092be:	f043 0304 	orr.w	r3, r3, #4
  }
  return(control_state);
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	bd08      	pop	{r3, pc}
  uint8_t control_state = 0;
 80092c6:	4603      	mov	r3, r0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	bd08      	pop	{r3, pc}
 80092cc:	40010c00 	.word	0x40010c00

080092d0 <EXTI9_5_IRQHandler>:
  }
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
 80092d0:	b508      	push	{r3, lr}
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 80092d2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80092d6:	f7f7 ff95 	bl	8001204 <EXTI_ClearITPendingBit>
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 80092da:	481b      	ldr	r0, [pc, #108]	; (8009348 <EXTI9_5_IRQHandler+0x78>)
 80092dc:	f7f8 fa46 	bl	800176c <GPIO_ReadInputData>
  if (pin) {
 80092e0:	b1b8      	cbz	r0, 8009312 <EXTI9_5_IRQHandler+0x42>
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80092e2:	f010 0220 	ands.w	r2, r0, #32
  uint8_t control_state = 0;
 80092e6:	bf0c      	ite	eq
 80092e8:	2301      	moveq	r3, #1
 80092ea:	2300      	movne	r3, #0
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80092ec:	0641      	lsls	r1, r0, #25
 80092ee:	d411      	bmi.n	8009314 <EXTI9_5_IRQHandler+0x44>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80092f0:	0600      	lsls	r0, r0, #24
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80092f2:	f043 0302 	orr.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80092f6:	d419      	bmi.n	800932c <EXTI9_5_IRQHandler+0x5c>
	uint8_t pin = system_control_get_state();
	if (pin) 
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
 80092f8:	07db      	lsls	r3, r3, #31
 80092fa:	d40f      	bmi.n	800931c <EXTI9_5_IRQHandler+0x4c>
		{
			mc_reset();
		}
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_CYCLE_START))
		{
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 80092fc:	4a13      	ldr	r2, [pc, #76]	; (800934c <EXTI9_5_IRQHandler+0x7c>)
 80092fe:	7813      	ldrb	r3, [r2, #0]
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	7013      	strb	r3, [r2, #0]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8009306:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800930a:	4b11      	ldr	r3, [pc, #68]	; (8009350 <EXTI9_5_IRQHandler+0x80>)
 800930c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
}
}
 8009310:	bd08      	pop	{r3, pc}
 8009312:	bd08      	pop	{r3, pc}
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009314:	0601      	lsls	r1, r0, #24
 8009316:	d5ef      	bpl.n	80092f8 <EXTI9_5_IRQHandler+0x28>
	if (pin) 
 8009318:	2a00      	cmp	r2, #0
 800931a:	d1fa      	bne.n	8009312 <EXTI9_5_IRQHandler+0x42>
			mc_reset();
 800931c:	f7fa fd3e 	bl	8003d9c <mc_reset>
 8009320:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009324:	4b0a      	ldr	r3, [pc, #40]	; (8009350 <EXTI9_5_IRQHandler+0x80>)
 8009326:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 800932a:	bd08      	pop	{r3, pc}
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
 800932c:	2a00      	cmp	r2, #0
 800932e:	d0f5      	beq.n	800931c <EXTI9_5_IRQHandler+0x4c>
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 8009330:	4a06      	ldr	r2, [pc, #24]	; (800934c <EXTI9_5_IRQHandler+0x7c>)
 8009332:	7813      	ldrb	r3, [r2, #0]
 8009334:	f043 0308 	orr.w	r3, r3, #8
 8009338:	7013      	strb	r3, [r2, #0]
 800933a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800933e:	4b04      	ldr	r3, [pc, #16]	; (8009350 <EXTI9_5_IRQHandler+0x80>)
 8009340:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8009344:	bd08      	pop	{r3, pc}
 8009346:	bf00      	nop
 8009348:	40010c00 	.word	0x40010c00
 800934c:	200010c5 	.word	0x200010c5
 8009350:	e000e100 	.word	0xe000e100

08009354 <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8009354:	2000      	movs	r0, #0
 8009356:	4770      	bx	lr

08009358 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4605      	mov	r5, r0
 800935c:	2400      	movs	r4, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 800935e:	4629      	mov	r1, r5
 8009360:	b2e0      	uxtb	r0, r4
 8009362:	f7fe fa01 	bl	8007768 <settings_read_startup_line>
 8009366:	b128      	cbz	r0, 8009374 <system_execute_startup+0x1c>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
    } else {
      if (line[0] != 0) {
 8009368:	782b      	ldrb	r3, [r5, #0]
 800936a:	b94b      	cbnz	r3, 8009380 <system_execute_startup+0x28>
 800936c:	3401      	adds	r4, #1
  for (n=0; n < N_STARTUP_LINE; n++) {
 800936e:	2c02      	cmp	r4, #2
 8009370:	d1f5      	bne.n	800935e <system_execute_startup+0x6>
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
      }
    }
  }
}
 8009372:	bd38      	pop	{r3, r4, r5, pc}
      line[0] = 0;
 8009374:	7028      	strb	r0, [r5, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 8009376:	2107      	movs	r1, #7
 8009378:	4628      	mov	r0, r5
 800937a:	f7fd fdbb 	bl	8006ef4 <report_execute_startup_message>
 800937e:	e7f5      	b.n	800936c <system_execute_startup+0x14>
        uint8_t status_code = gc_execute_line(line);
 8009380:	4628      	mov	r0, r5
 8009382:	f7f8 fca7 	bl	8001cd4 <gc_execute_line>
        report_execute_startup_message(line,status_code);
 8009386:	4601      	mov	r1, r0
 8009388:	4628      	mov	r0, r5
 800938a:	f7fd fdb3 	bl	8006ef4 <report_execute_startup_message>
 800938e:	e7ed      	b.n	800936c <system_execute_startup+0x14>

08009390 <system_execute_line>:
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
  uint8_t char_counter = 1;
 8009390:	2301      	movs	r3, #1
{
 8009392:	b570      	push	{r4, r5, r6, lr}
  uint8_t helper_var = 0; // Helper variable
  float parameter, value;
  switch( line[char_counter] ) {
 8009394:	7844      	ldrb	r4, [r0, #1]
{
 8009396:	b084      	sub	sp, #16
  switch( line[char_counter] ) {
 8009398:	2c43      	cmp	r4, #67	; 0x43
{
 800939a:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 800939c:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 80093a0:	d034      	beq.n	800940c <system_execute_line+0x7c>
 80093a2:	d939      	bls.n	8009418 <system_execute_line+0x88>
 80093a4:	2c4a      	cmp	r4, #74	; 0x4a
 80093a6:	d108      	bne.n	80093ba <system_execute_line+0x2a>
    case 0 : report_grbl_help(); break;
    case 'J' : // Jogging
      // Execute only if in IDLE or JOG states.
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 80093a8:	4b93      	ldr	r3, [pc, #588]	; (80095f8 <system_execute_line+0x268>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80093b0:	d039      	beq.n	8009426 <system_execute_line+0x96>
                report_startup_line(helper_var,line);
              }
            }
            break;
          } else { // Store startup line [IDLE Only] Prevents motion during ALARM.
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 80093b2:	2408      	movs	r4, #8
            return(settings_store_global_setting((uint8_t)parameter, value));
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
}
 80093b4:	4620      	mov	r0, r4
 80093b6:	b004      	add	sp, #16
 80093b8:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 80093ba:	2c58      	cmp	r4, #88	; 0x58
 80093bc:	d026      	beq.n	800940c <system_execute_line+0x7c>
 80093be:	2c47      	cmp	r4, #71	; 0x47
 80093c0:	d024      	beq.n	800940c <system_execute_line+0x7c>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 80093c2:	4e8d      	ldr	r6, [pc, #564]	; (80095f8 <system_execute_line+0x268>)
 80093c4:	7833      	ldrb	r3, [r6, #0]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d8f3      	bhi.n	80093b2 <system_execute_line+0x22>
      switch( line[1] ) {
 80093ca:	3c23      	subs	r4, #35	; 0x23
 80093cc:	2c30      	cmp	r4, #48	; 0x30
 80093ce:	f200 80b6 	bhi.w	800953e <system_execute_line+0x1ae>
 80093d2:	e8df f004 	tbb	[pc, r4]
 80093d6:	b4ad      	.short	0xb4ad
 80093d8:	b4b4b4b4 	.word	0xb4b4b4b4
 80093dc:	b4b4b4b4 	.word	0xb4b4b4b4
 80093e0:	b4b4b4b4 	.word	0xb4b4b4b4
 80093e4:	b4b4b4b4 	.word	0xb4b4b4b4
 80093e8:	b4b4b4b4 	.word	0xb4b4b4b4
 80093ec:	b4b4b4b4 	.word	0xb4b4b4b4
 80093f0:	b4b4b4b4 	.word	0xb4b4b4b4
 80093f4:	b4b4b4b4 	.word	0xb4b4b4b4
 80093f8:	a6b4b4b4 	.word	0xa6b4b4b4
 80093fc:	b4b4b48d 	.word	0xb4b4b48d
 8009400:	b4b468b4 	.word	0xb4b468b4
 8009404:	49b4      	.short	0x49b4
 8009406:	7c          	.byte	0x7c
 8009407:	00          	.byte	0x00
  switch( line[char_counter] ) {
 8009408:	2c24      	cmp	r4, #36	; 0x24
 800940a:	d1da      	bne.n	80093c2 <system_execute_line+0x32>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 800940c:	78ad      	ldrb	r5, [r5, #2]
 800940e:	b18d      	cbz	r5, 8009434 <system_execute_line+0xa4>
            default: return(STATUS_INVALID_STATEMENT);
 8009410:	2403      	movs	r4, #3
}
 8009412:	4620      	mov	r0, r4
 8009414:	b004      	add	sp, #16
 8009416:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 8009418:	2c00      	cmp	r4, #0
 800941a:	d1f5      	bne.n	8009408 <system_execute_line+0x78>
    case 0 : report_grbl_help(); break;
 800941c:	f7fd f8aa 	bl	8006574 <report_grbl_help>
}
 8009420:	4620      	mov	r0, r4
 8009422:	b004      	add	sp, #16
 8009424:	bd70      	pop	{r4, r5, r6, pc}
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 8009426:	7883      	ldrb	r3, [r0, #2]
 8009428:	2b3d      	cmp	r3, #61	; 0x3d
 800942a:	d1f1      	bne.n	8009410 <system_execute_line+0x80>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 800942c:	f7f8 fc52 	bl	8001cd4 <gc_execute_line>
 8009430:	4604      	mov	r4, r0
 8009432:	e7bf      	b.n	80093b4 <system_execute_line+0x24>
      switch( line[1] ) {
 8009434:	2c43      	cmp	r4, #67	; 0x43
 8009436:	f000 80a0 	beq.w	800957a <system_execute_line+0x1ea>
 800943a:	d90b      	bls.n	8009454 <system_execute_line+0xc4>
 800943c:	2c47      	cmp	r4, #71	; 0x47
 800943e:	f000 80a9 	beq.w	8009594 <system_execute_line+0x204>
 8009442:	2c58      	cmp	r4, #88	; 0x58
 8009444:	d104      	bne.n	8009450 <system_execute_line+0xc0>
          if (sys.state == STATE_ALARM) {
 8009446:	4e6c      	ldr	r6, [pc, #432]	; (80095f8 <system_execute_line+0x268>)
 8009448:	7833      	ldrb	r3, [r6, #0]
 800944a:	2b01      	cmp	r3, #1
 800944c:	f000 80a6 	beq.w	800959c <system_execute_line+0x20c>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009450:	2400      	movs	r4, #0
 8009452:	e7af      	b.n	80093b4 <system_execute_line+0x24>
      switch( line[1] ) {
 8009454:	2c24      	cmp	r4, #36	; 0x24
 8009456:	d1fb      	bne.n	8009450 <system_execute_line+0xc0>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 8009458:	4b67      	ldr	r3, [pc, #412]	; (80095f8 <system_execute_line+0x268>)
 800945a:	781c      	ldrb	r4, [r3, #0]
 800945c:	f014 0418 	ands.w	r4, r4, #24
 8009460:	d1a7      	bne.n	80093b2 <system_execute_line+0x22>
          else { report_grbl_settings(); }
 8009462:	f7fd f88d 	bl	8006580 <report_grbl_settings>
          break;
 8009466:	e7a5      	b.n	80093b4 <system_execute_line+0x24>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8009468:	78ab      	ldrb	r3, [r5, #2]
 800946a:	2b53      	cmp	r3, #83	; 0x53
 800946c:	d1d0      	bne.n	8009410 <system_execute_line+0x80>
 800946e:	78eb      	ldrb	r3, [r5, #3]
 8009470:	2b54      	cmp	r3, #84	; 0x54
 8009472:	d1cd      	bne.n	8009410 <system_execute_line+0x80>
 8009474:	792b      	ldrb	r3, [r5, #4]
 8009476:	2b3d      	cmp	r3, #61	; 0x3d
 8009478:	d1ca      	bne.n	8009410 <system_execute_line+0x80>
 800947a:	79ab      	ldrb	r3, [r5, #6]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1c7      	bne.n	8009410 <system_execute_line+0x80>
          switch (line[5]) {
 8009480:	796b      	ldrb	r3, [r5, #5]
 8009482:	2b24      	cmp	r3, #36	; 0x24
 8009484:	f000 8107 	beq.w	8009696 <system_execute_line+0x306>
 8009488:	2b2a      	cmp	r3, #42	; 0x2a
 800948a:	f000 8100 	beq.w	800968e <system_execute_line+0x2fe>
 800948e:	2b23      	cmp	r3, #35	; 0x23
 8009490:	d1be      	bne.n	8009410 <system_execute_line+0x80>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 8009492:	2002      	movs	r0, #2
 8009494:	f7fe f8d0 	bl	8007638 <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 8009498:	2009      	movs	r0, #9
 800949a:	f7fd f807 	bl	80064ac <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800949e:	2400      	movs	r4, #0
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 80094a0:	f7fa fc7c 	bl	8003d9c <mc_reset>
          break;
 80094a4:	e786      	b.n	80093b4 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 80094a6:	2202      	movs	r2, #2
 80094a8:	78ac      	ldrb	r4, [r5, #2]
 80094aa:	f88d 2007 	strb.w	r2, [sp, #7]
 80094ae:	2c00      	cmp	r4, #0
 80094b0:	d047      	beq.n	8009542 <system_execute_line+0x1b2>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f47f af7d 	bne.w	80093b2 <system_execute_line+0x22>
            helper_var = true;  // Set helper_var to flag storing method.
 80094b8:	2401      	movs	r4, #1
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80094ba:	f10d 0107 	add.w	r1, sp, #7
 80094be:	aa02      	add	r2, sp, #8
 80094c0:	4628      	mov	r0, r5
 80094c2:	f7fa fc9b 	bl	8003dfc <read_float>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d16e      	bne.n	80095a8 <system_execute_line+0x218>
 80094ca:	2402      	movs	r4, #2
 80094cc:	e772      	b.n	80093b4 <system_execute_line+0x24>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 80094ce:	78ab      	ldrb	r3, [r5, #2]
 80094d0:	2b4c      	cmp	r3, #76	; 0x4c
 80094d2:	d19d      	bne.n	8009410 <system_execute_line+0x80>
 80094d4:	78eb      	ldrb	r3, [r5, #3]
 80094d6:	2b50      	cmp	r3, #80	; 0x50
 80094d8:	d19a      	bne.n	8009410 <system_execute_line+0x80>
 80094da:	792c      	ldrb	r4, [r5, #4]
 80094dc:	2c00      	cmp	r4, #0
 80094de:	d197      	bne.n	8009410 <system_execute_line+0x80>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80094e0:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 80094e2:	4a46      	ldr	r2, [pc, #280]	; (80095fc <system_execute_line+0x26c>)
 80094e4:	7813      	ldrb	r3, [r2, #0]
 80094e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ea:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 80094ec:	b662      	cpsie	i
 80094ee:	e761      	b.n	80093b4 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) {
 80094f0:	2302      	movs	r3, #2
 80094f2:	78ac      	ldrb	r4, [r5, #2]
 80094f4:	f88d 3007 	strb.w	r3, [sp, #7]
 80094f8:	2c00      	cmp	r4, #0
 80094fa:	f000 80a1 	beq.w	8009640 <system_execute_line+0x2b0>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 80094fe:	2c3d      	cmp	r4, #61	; 0x3d
 8009500:	f04f 0303 	mov.w	r3, #3
 8009504:	d184      	bne.n	8009410 <system_execute_line+0x80>
                line[char_counter-helper_var] = line[char_counter];
 8009506:	5cec      	ldrb	r4, [r5, r3]
 8009508:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 800950a:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 800950c:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2c00      	cmp	r4, #0
 8009514:	d1f7      	bne.n	8009506 <system_execute_line+0x176>
              settings_store_build_info(line);
 8009516:	4628      	mov	r0, r5
 8009518:	f88d 3007 	strb.w	r3, [sp, #7]
 800951c:	f7fe f876 	bl	800760c <settings_store_build_info>
 8009520:	e748      	b.n	80093b4 <system_execute_line+0x24>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8009522:	4b37      	ldr	r3, [pc, #220]	; (8009600 <system_execute_line+0x270>)
 8009524:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009528:	06db      	lsls	r3, r3, #27
 800952a:	d46b      	bmi.n	8009604 <system_execute_line+0x274>
 800952c:	2405      	movs	r4, #5
 800952e:	e741      	b.n	80093b4 <system_execute_line+0x24>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8009530:	78ac      	ldrb	r4, [r5, #2]
 8009532:	2c00      	cmp	r4, #0
 8009534:	f47f af6c 	bne.w	8009410 <system_execute_line+0x80>
          else { report_ngc_parameters(); }
 8009538:	f7fd fb4e 	bl	8006bd8 <report_ngc_parameters>
          break;
 800953c:	e73a      	b.n	80093b4 <system_execute_line+0x24>
  uint8_t helper_var = 0; // Helper variable
 800953e:	2400      	movs	r4, #0
 8009540:	e7bb      	b.n	80094ba <system_execute_line+0x12a>
 8009542:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 8009544:	4630      	mov	r0, r6
 8009546:	4629      	mov	r1, r5
 8009548:	f7fe f90e 	bl	8007768 <settings_read_startup_line>
 800954c:	b968      	cbnz	r0, 800956a <system_execute_line+0x1da>
                report_status_message(STATUS_SETTING_READ_FAIL);
 800954e:	2007      	movs	r0, #7
 8009550:	f7fc ff7e 	bl	8006450 <report_status_message>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 8009554:	2c00      	cmp	r4, #0
 8009556:	f47f af7b 	bne.w	8009450 <system_execute_line+0xc0>
 800955a:	2401      	movs	r4, #1
 800955c:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 800955e:	4630      	mov	r0, r6
 8009560:	4629      	mov	r1, r5
 8009562:	f7fe f901 	bl	8007768 <settings_read_startup_line>
 8009566:	2800      	cmp	r0, #0
 8009568:	d0f1      	beq.n	800954e <system_execute_line+0x1be>
                report_startup_line(helper_var,line);
 800956a:	4630      	mov	r0, r6
 800956c:	4629      	mov	r1, r5
 800956e:	f7fd fca9 	bl	8006ec4 <report_startup_line>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 8009572:	2c00      	cmp	r4, #0
 8009574:	f47f af6c 	bne.w	8009450 <system_execute_line+0xc0>
 8009578:	e7ef      	b.n	800955a <system_execute_line+0x1ca>
          if ( sys.state == STATE_CHECK_MODE ) {
 800957a:	4b1f      	ldr	r3, [pc, #124]	; (80095f8 <system_execute_line+0x268>)
 800957c:	781c      	ldrb	r4, [r3, #0]
 800957e:	2c02      	cmp	r4, #2
 8009580:	d057      	beq.n	8009632 <system_execute_line+0x2a2>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 8009582:	2c00      	cmp	r4, #0
 8009584:	f47f af15 	bne.w	80093b2 <system_execute_line+0x22>
            sys.state = STATE_CHECK_MODE;
 8009588:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 800958a:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 800958c:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 800958e:	f7fc ff8d 	bl	80064ac <report_feedback_message>
 8009592:	e70f      	b.n	80093b4 <system_execute_line+0x24>
          report_gcode_modes();
 8009594:	f7fd fbde 	bl	8006d54 <report_gcode_modes>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009598:	462c      	mov	r4, r5
          break;
 800959a:	e70b      	b.n	80093b4 <system_execute_line+0x24>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 800959c:	2003      	movs	r0, #3
 800959e:	f7fc ff85 	bl	80064ac <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80095a2:	462c      	mov	r4, r5
            sys.state = STATE_IDLE;
 80095a4:	7035      	strb	r5, [r6, #0]
 80095a6:	e705      	b.n	80093b4 <system_execute_line+0x24>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 80095a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80095ac:	1c53      	adds	r3, r2, #1
 80095ae:	5caa      	ldrb	r2, [r5, r2]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2a3d      	cmp	r2, #61	; 0x3d
 80095b4:	f88d 3007 	strb.w	r3, [sp, #7]
 80095b8:	f47f af2a 	bne.w	8009410 <system_execute_line+0x80>
          if (helper_var) { // Store startup line
 80095bc:	2c00      	cmp	r4, #0
 80095be:	d046      	beq.n	800964e <system_execute_line+0x2be>
 80095c0:	4618      	mov	r0, r3
              line[char_counter-helper_var] = line[char_counter];
 80095c2:	5ce9      	ldrb	r1, [r5, r3]
 80095c4:	1a1a      	subs	r2, r3, r0
 80095c6:	54a9      	strb	r1, [r5, r2]
 80095c8:	18ea      	adds	r2, r5, r3
            } while (line[char_counter++] != 0);
 80095ca:	7812      	ldrb	r2, [r2, #0]
 80095cc:	3301      	adds	r3, #1
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2a00      	cmp	r2, #0
 80095d2:	d1f6      	bne.n	80095c2 <system_execute_line+0x232>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 80095d4:	4628      	mov	r0, r5
 80095d6:	f88d 3007 	strb.w	r3, [sp, #7]
 80095da:	f7f8 fb7b 	bl	8001cd4 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 80095de:	4604      	mov	r4, r0
 80095e0:	2800      	cmp	r0, #0
 80095e2:	f47f aee7 	bne.w	80093b4 <system_execute_line+0x24>
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 80095e6:	9802      	ldr	r0, [sp, #8]
 80095e8:	f7f7 fd64 	bl	80010b4 <__aeabi_f2uiz>
              settings_store_startup_line(helper_var,line);
 80095ec:	4629      	mov	r1, r5
 80095ee:	b2c0      	uxtb	r0, r0
 80095f0:	f7fd fffa 	bl	80075e8 <settings_store_startup_line>
 80095f4:	e6de      	b.n	80093b4 <system_execute_line+0x24>
 80095f6:	bf00      	nop
 80095f8:	200010b0 	.word	0x200010b0
 80095fc:	200010c5 	.word	0x200010c5
 8009600:	2000126c 	.word	0x2000126c
          sys.state = STATE_HOMING; // Set system state variable
 8009604:	2304      	movs	r3, #4
          if (line[2] == 0) {
 8009606:	78a8      	ldrb	r0, [r5, #2]
          sys.state = STATE_HOMING; // Set system state variable
 8009608:	7033      	strb	r3, [r6, #0]
          if (line[2] == 0) {
 800960a:	2800      	cmp	r0, #0
 800960c:	f47f af00 	bne.w	8009410 <system_execute_line+0x80>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 8009610:	f7fa fb0e 	bl	8003c30 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 8009614:	7874      	ldrb	r4, [r6, #1]
 8009616:	2c00      	cmp	r4, #0
 8009618:	f47f af1a 	bne.w	8009450 <system_execute_line+0xc0>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 800961c:	7034      	strb	r4, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 800961e:	f7fe fd3b 	bl	8008098 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 8009622:	78ab      	ldrb	r3, [r5, #2]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f47f af13 	bne.w	8009450 <system_execute_line+0xc0>
 800962a:	4628      	mov	r0, r5
 800962c:	f7ff fe94 	bl	8009358 <system_execute_startup>
 8009630:	e6c0      	b.n	80093b4 <system_execute_line+0x24>
            mc_reset();
 8009632:	f7fa fbb3 	bl	8003d9c <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 8009636:	2005      	movs	r0, #5
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009638:	462c      	mov	r4, r5
            report_feedback_message(MESSAGE_DISABLED);
 800963a:	f7fc ff37 	bl	80064ac <report_feedback_message>
 800963e:	e6b9      	b.n	80093b4 <system_execute_line+0x24>
            settings_read_build_info(line);
 8009640:	4628      	mov	r0, r5
 8009642:	f7fe f8ad 	bl	80077a0 <settings_read_build_info>
            report_build_info(line);
 8009646:	4628      	mov	r0, r5
 8009648:	f7fd fc78 	bl	8006f3c <report_build_info>
 800964c:	e6b2      	b.n	80093b4 <system_execute_line+0x24>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800964e:	f10d 0107 	add.w	r1, sp, #7
 8009652:	aa03      	add	r2, sp, #12
 8009654:	4628      	mov	r0, r5
 8009656:	f7fa fbd1 	bl	8003dfc <read_float>
 800965a:	2800      	cmp	r0, #0
 800965c:	f43f af35 	beq.w	80094ca <system_execute_line+0x13a>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 8009660:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009664:	5ceb      	ldrb	r3, [r5, r3]
 8009666:	2b00      	cmp	r3, #0
 8009668:	f47f aed2 	bne.w	8009410 <system_execute_line+0x80>
 800966c:	9c02      	ldr	r4, [sp, #8]
 800966e:	490c      	ldr	r1, [pc, #48]	; (80096a0 <system_execute_line+0x310>)
 8009670:	4620      	mov	r0, r4
 8009672:	f7f7 fcd9 	bl	8001028 <__aeabi_fcmpgt>
 8009676:	2800      	cmp	r0, #0
 8009678:	f47f aeca 	bne.w	8009410 <system_execute_line+0x80>
            return(settings_store_global_setting((uint8_t)parameter, value));
 800967c:	4620      	mov	r0, r4
 800967e:	f7f7 fd19 	bl	80010b4 <__aeabi_f2uiz>
 8009682:	9903      	ldr	r1, [sp, #12]
 8009684:	b2c0      	uxtb	r0, r0
 8009686:	f7fe f8bd 	bl	8007804 <settings_store_global_setting>
 800968a:	4604      	mov	r4, r0
 800968c:	e692      	b.n	80093b4 <system_execute_line+0x24>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 800968e:	20ff      	movs	r0, #255	; 0xff
 8009690:	f7fd ffd2 	bl	8007638 <settings_restore>
 8009694:	e700      	b.n	8009498 <system_execute_line+0x108>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 8009696:	2001      	movs	r0, #1
 8009698:	f7fd ffce 	bl	8007638 <settings_restore>
 800969c:	e6fc      	b.n	8009498 <system_execute_line+0x108>
 800969e:	bf00      	nop
 80096a0:	437f0000 	.word	0x437f0000

080096a4 <system_flag_wco_change>:
{
 80096a4:	b508      	push	{r3, lr}
    protocol_buffer_synchronize();
 80096a6:	f7fc fbdd 	bl	8005e64 <protocol_buffer_synchronize>
  sys.report_wco_counter = 0;
 80096aa:	2200      	movs	r2, #0
 80096ac:	4b01      	ldr	r3, [pc, #4]	; (80096b4 <system_flag_wco_change+0x10>)
 80096ae:	735a      	strb	r2, [r3, #13]
 80096b0:	bd08      	pop	{r3, pc}
 80096b2:	bf00      	nop
 80096b4:	200010b0 	.word	0x200010b0

080096b8 <system_convert_array_steps_to_mpos>:
{
 80096b8:	b570      	push	{r4, r5, r6, lr}
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096ba:	4d10      	ldr	r5, [pc, #64]	; (80096fc <system_convert_array_steps_to_mpos+0x44>)
{
 80096bc:	4604      	mov	r4, r0
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096be:	6808      	ldr	r0, [r1, #0]
{
 80096c0:	460e      	mov	r6, r1
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096c2:	f7f7 faa1 	bl	8000c08 <__aeabi_i2f>
 80096c6:	6829      	ldr	r1, [r5, #0]
 80096c8:	f7f7 fba6 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096cc:	6020      	str	r0, [r4, #0]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096ce:	6870      	ldr	r0, [r6, #4]
 80096d0:	f7f7 fa9a 	bl	8000c08 <__aeabi_i2f>
 80096d4:	6869      	ldr	r1, [r5, #4]
 80096d6:	f7f7 fb9f 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096da:	6060      	str	r0, [r4, #4]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096dc:	68b0      	ldr	r0, [r6, #8]
 80096de:	f7f7 fa93 	bl	8000c08 <__aeabi_i2f>
 80096e2:	68a9      	ldr	r1, [r5, #8]
 80096e4:	f7f7 fb98 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096e8:	60a0      	str	r0, [r4, #8]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096ea:	68f0      	ldr	r0, [r6, #12]
 80096ec:	f7f7 fa8c 	bl	8000c08 <__aeabi_i2f>
 80096f0:	68e9      	ldr	r1, [r5, #12]
 80096f2:	f7f7 fb91 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096f6:	60e0      	str	r0, [r4, #12]
 80096f8:	bd70      	pop	{r4, r5, r6, pc}
 80096fa:	bf00      	nop
 80096fc:	2000126c 	.word	0x2000126c

08009700 <system_check_travel_limits>:
{
 8009700:	b570      	push	{r4, r5, r6, lr}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009702:	6806      	ldr	r6, [r0, #0]
{
 8009704:	4604      	mov	r4, r0
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009706:	2100      	movs	r1, #0
 8009708:	4630      	mov	r0, r6
 800970a:	f7f7 fc8d 	bl	8001028 <__aeabi_fcmpgt>
 800970e:	2800      	cmp	r0, #0
 8009710:	d12d      	bne.n	800976e <system_check_travel_limits+0x6e>
 8009712:	4d18      	ldr	r5, [pc, #96]	; (8009774 <system_check_travel_limits+0x74>)
 8009714:	4630      	mov	r0, r6
 8009716:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8009718:	f7f7 fc68 	bl	8000fec <__aeabi_fcmplt>
 800971c:	bb38      	cbnz	r0, 800976e <system_check_travel_limits+0x6e>
 800971e:	6866      	ldr	r6, [r4, #4]
 8009720:	2100      	movs	r1, #0
 8009722:	4630      	mov	r0, r6
 8009724:	f7f7 fc80 	bl	8001028 <__aeabi_fcmpgt>
 8009728:	bb08      	cbnz	r0, 800976e <system_check_travel_limits+0x6e>
 800972a:	4630      	mov	r0, r6
 800972c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800972e:	f7f7 fc5d 	bl	8000fec <__aeabi_fcmplt>
 8009732:	b9e0      	cbnz	r0, 800976e <system_check_travel_limits+0x6e>
 8009734:	68a6      	ldr	r6, [r4, #8]
 8009736:	2100      	movs	r1, #0
 8009738:	4630      	mov	r0, r6
 800973a:	f7f7 fc75 	bl	8001028 <__aeabi_fcmpgt>
 800973e:	b9b0      	cbnz	r0, 800976e <system_check_travel_limits+0x6e>
 8009740:	4630      	mov	r0, r6
 8009742:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8009744:	f7f7 fc52 	bl	8000fec <__aeabi_fcmplt>
 8009748:	b988      	cbnz	r0, 800976e <system_check_travel_limits+0x6e>
 800974a:	68e4      	ldr	r4, [r4, #12]
 800974c:	2100      	movs	r1, #0
 800974e:	4620      	mov	r0, r4
 8009750:	f7f7 fc6a 	bl	8001028 <__aeabi_fcmpgt>
 8009754:	b958      	cbnz	r0, 800976e <system_check_travel_limits+0x6e>
 8009756:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8009758:	4620      	mov	r0, r4
 800975a:	f7f7 fc47 	bl	8000fec <__aeabi_fcmplt>
 800975e:	f04f 0301 	mov.w	r3, #1
 8009762:	b108      	cbz	r0, 8009768 <system_check_travel_limits+0x68>
 8009764:	b2d8      	uxtb	r0, r3
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	4603      	mov	r3, r0
 800976a:	b2d8      	uxtb	r0, r3
 800976c:	bd70      	pop	{r4, r5, r6, pc}
 800976e:	2001      	movs	r0, #1
}
 8009770:	bd70      	pop	{r4, r5, r6, pc}
 8009772:	bf00      	nop
 8009774:	2000126c 	.word	0x2000126c

08009778 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8009778:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
 800977a:	4a03      	ldr	r2, [pc, #12]	; (8009788 <system_set_exec_state_flag+0x10>)
 800977c:	7813      	ldrb	r3, [r2, #0]
 800977e:	4318      	orrs	r0, r3
 8009780:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009782:	b662      	cpsie	i
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	200010c5 	.word	0x200010c5

0800978c <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i");
 800978c:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 800978e:	4a03      	ldr	r2, [pc, #12]	; (800979c <system_clear_exec_state_flag+0x10>)
 8009790:	7813      	ldrb	r3, [r2, #0]
 8009792:	ea23 0000 	bic.w	r0, r3, r0
 8009796:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009798:	b662      	cpsie	i
 800979a:	4770      	bx	lr
 800979c:	200010c5 	.word	0x200010c5

080097a0 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i");
 80097a0:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 80097a2:	4b02      	ldr	r3, [pc, #8]	; (80097ac <system_set_exec_alarm+0xc>)
 80097a4:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i");
 80097a6:	b662      	cpsie	i
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	200010e8 	.word	0x200010e8

080097b0 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i");
 80097b0:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 80097b2:	2200      	movs	r2, #0
 80097b4:	4b01      	ldr	r3, [pc, #4]	; (80097bc <system_clear_exec_alarm+0xc>)
 80097b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 80097b8:	b662      	cpsie	i
 80097ba:	4770      	bx	lr
 80097bc:	200010e8 	.word	0x200010e8

080097c0 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i");
 80097c0:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 80097c2:	4a03      	ldr	r2, [pc, #12]	; (80097d0 <system_set_exec_motion_override_flag+0x10>)
 80097c4:	7813      	ldrb	r3, [r2, #0]
 80097c6:	4318      	orrs	r0, r3
 80097c8:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 80097ca:	b662      	cpsie	i
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	200010ac 	.word	0x200010ac

080097d4 <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i");
 80097d4:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 80097d6:	4a03      	ldr	r2, [pc, #12]	; (80097e4 <system_set_exec_accessory_override_flag+0x10>)
 80097d8:	7813      	ldrb	r3, [r2, #0]
 80097da:	4318      	orrs	r0, r3
 80097dc:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 80097de:	b662      	cpsie	i
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	200010c4 	.word	0x200010c4

080097e8 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i");
 80097e8:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 80097ea:	2200      	movs	r2, #0
 80097ec:	4b01      	ldr	r3, [pc, #4]	; (80097f4 <system_clear_exec_motion_overrides+0xc>)
 80097ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 80097f0:	b662      	cpsie	i
 80097f2:	4770      	bx	lr
 80097f4:	200010ac 	.word	0x200010ac

080097f8 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i");
 80097f8:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 80097fa:	2200      	movs	r2, #0
 80097fc:	4b01      	ldr	r3, [pc, #4]	; (8009804 <system_clear_exec_accessory_overrides+0xc>)
 80097fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009800:	b662      	cpsie	i
 8009802:	4770      	bx	lr
 8009804:	200010c4 	.word	0x200010c4

08009808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009808:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800980a:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 800980c:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8009810:	4b3a      	ldr	r3, [pc, #232]	; (80098fc <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009812:	493b      	ldr	r1, [pc, #236]	; (8009900 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8009814:	6818      	ldr	r0, [r3, #0]
{
 8009816:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8009818:	f040 0001 	orr.w	r0, r0, #1
 800981c:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800981e:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009820:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009822:	4001      	ands	r1, r0
 8009824:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009826:	6819      	ldr	r1, [r3, #0]
 8009828:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800982c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009830:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009832:	6819      	ldr	r1, [r3, #0]
 8009834:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009838:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800983a:	6859      	ldr	r1, [r3, #4]
 800983c:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8009840:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 8009842:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009844:	9400      	str	r4, [sp, #0]
 8009846:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8009848:	6819      	ldr	r1, [r3, #0]
 800984a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800984e:	6019      	str	r1, [r3, #0]
 8009850:	e003      	b.n	800985a <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009852:	9b00      	ldr	r3, [sp, #0]
 8009854:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009858:	d009      	beq.n	800986e <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800985a:	6813      	ldr	r3, [r2, #0]
 800985c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009860:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8009862:	9b00      	ldr	r3, [sp, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009868:	9b01      	ldr	r3, [sp, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0f1      	beq.n	8009852 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800986e:	4b23      	ldr	r3, [pc, #140]	; (80098fc <SystemInit+0xf4>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8009876:	bf18      	it	ne
 8009878:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800987a:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d006      	beq.n	8009890 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8009882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009886:	4b1f      	ldr	r3, [pc, #124]	; (8009904 <SystemInit+0xfc>)
 8009888:	609a      	str	r2, [r3, #8]
}
 800988a:	b002      	add	sp, #8
 800988c:	bc30      	pop	{r4, r5}
 800988e:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009890:	491d      	ldr	r1, [pc, #116]	; (8009908 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009892:	4b1a      	ldr	r3, [pc, #104]	; (80098fc <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009894:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009896:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009898:	f040 0010 	orr.w	r0, r0, #16
 800989c:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800989e:	6808      	ldr	r0, [r1, #0]
 80098a0:	f020 0003 	bic.w	r0, r0, #3
 80098a4:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80098a6:	6808      	ldr	r0, [r1, #0]
 80098a8:	f040 0002 	orr.w	r0, r0, #2
 80098ac:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80098ae:	6859      	ldr	r1, [r3, #4]
 80098b0:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80098b2:	6859      	ldr	r1, [r3, #4]
 80098b4:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80098b6:	6859      	ldr	r1, [r3, #4]
 80098b8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80098bc:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80098be:	6859      	ldr	r1, [r3, #4]
 80098c0:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 80098c4:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80098c6:	6859      	ldr	r1, [r3, #4]
 80098c8:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 80098cc:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 80098ce:	6819      	ldr	r1, [r3, #0]
 80098d0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80098d4:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80098d6:	6813      	ldr	r3, [r2, #0]
 80098d8:	019b      	lsls	r3, r3, #6
 80098da:	d5fc      	bpl.n	80098d6 <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80098dc:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80098de:	4907      	ldr	r1, [pc, #28]	; (80098fc <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80098e0:	f023 0303 	bic.w	r3, r3, #3
 80098e4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80098e6:	6853      	ldr	r3, [r2, #4]
 80098e8:	f043 0302 	orr.w	r3, r3, #2
 80098ec:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80098ee:	684b      	ldr	r3, [r1, #4]
 80098f0:	f003 030c 	and.w	r3, r3, #12
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	d1fa      	bne.n	80098ee <SystemInit+0xe6>
 80098f8:	e7c3      	b.n	8009882 <SystemInit+0x7a>
 80098fa:	bf00      	nop
 80098fc:	40021000 	.word	0x40021000
 8009900:	f8ff0000 	.word	0xf8ff0000
 8009904:	e000ed00 	.word	0xe000ed00
 8009908:	40022000 	.word	0x40022000

0800990c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800990c:	b508      	push	{r3, lr}
  if (Length == 0)
 800990e:	b138      	cbz	r0, 8009920 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8009910:	4b06      	ldr	r3, [pc, #24]	; (800992c <Standard_GetConfiguration+0x20>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8009918:	4b05      	ldr	r3, [pc, #20]	; (8009930 <Standard_GetConfiguration+0x24>)
 800991a:	6818      	ldr	r0, [r3, #0]
 800991c:	300a      	adds	r0, #10
}
 800991e:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 8009920:	2201      	movs	r2, #1
 8009922:	4b03      	ldr	r3, [pc, #12]	; (8009930 <Standard_GetConfiguration+0x24>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	821a      	strh	r2, [r3, #16]
    return 0;
 8009928:	bd08      	pop	{r3, pc}
 800992a:	bf00      	nop
 800992c:	20001304 	.word	0x20001304
 8009930:	20001308 	.word	0x20001308

08009934 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8009934:	b508      	push	{r3, lr}
  if (Length == 0)
 8009936:	b138      	cbz	r0, 8009948 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8009938:	4b06      	ldr	r3, [pc, #24]	; (8009954 <Standard_GetInterface+0x20>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8009940:	4b05      	ldr	r3, [pc, #20]	; (8009958 <Standard_GetInterface+0x24>)
 8009942:	6818      	ldr	r0, [r3, #0]
 8009944:	300c      	adds	r0, #12
}
 8009946:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 8009948:	2201      	movs	r2, #1
 800994a:	4b03      	ldr	r3, [pc, #12]	; (8009958 <Standard_GetInterface+0x24>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	821a      	strh	r2, [r3, #16]
    return 0;
 8009950:	bd08      	pop	{r3, pc}
 8009952:	bf00      	nop
 8009954:	20001304 	.word	0x20001304
 8009958:	20001308 	.word	0x20001308

0800995c <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800995c:	b508      	push	{r3, lr}
  if (Length == 0)
 800995e:	2800      	cmp	r0, #0
 8009960:	d033      	beq.n	80099ca <Standard_GetStatus+0x6e>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8009962:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009964:	4b1e      	ldr	r3, [pc, #120]	; (80099e0 <Standard_GetStatus+0x84>)
  StatusInfo.w = 0;
 8009966:	481f      	ldr	r0, [pc, #124]	; (80099e4 <Standard_GetStatus+0x88>)
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009968:	681a      	ldr	r2, [r3, #0]
  StatusInfo.w = 0;
 800996a:	8001      	strh	r1, [r0, #0]
 800996c:	7813      	ldrb	r3, [r2, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800996e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8009972:	d016      	beq.n	80099a2 <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009974:	2b01      	cmp	r3, #1
 8009976:	d027      	beq.n	80099c8 <Standard_GetStatus+0x6c>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009978:	2b02      	cmp	r3, #2
 800997a:	d124      	bne.n	80099c6 <Standard_GetStatus+0x6a>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800997c:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800997e:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009988:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    if (ValBit(wIndex0, 7))
 800998c:	0612      	lsls	r2, r2, #24
      if (_GetTxStallStatus(Related_Endpoint))
 800998e:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 8009990:	d420      	bmi.n	80099d4 <Standard_GetStatus+0x78>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8009992:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800999a:	d10e      	bne.n	80099ba <Standard_GetStatus+0x5e>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 800999c:	2301      	movs	r3, #1
 800999e:	7003      	strb	r3, [r0, #0]
 80099a0:	e00b      	b.n	80099ba <Standard_GetStatus+0x5e>
    uint8_t Feature = pInformation->Current_Feature;
 80099a2:	7a52      	ldrb	r2, [r2, #9]
    if (ValBit(Feature, 5))
 80099a4:	0693      	lsls	r3, r2, #26
 80099a6:	bf4c      	ite	mi
 80099a8:	2302      	movmi	r3, #2
 80099aa:	7803      	ldrbpl	r3, [r0, #0]
    if (ValBit(Feature, 6))
 80099ac:	0651      	lsls	r1, r2, #25
      SetBit(StatusInfo0, 0);
 80099ae:	bf4c      	ite	mi
 80099b0:	f043 0301 	orrmi.w	r3, r3, #1
      ClrBit(StatusInfo0, 0);
 80099b4:	f023 0301 	bicpl.w	r3, r3, #1
 80099b8:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80099ba:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <Standard_GetStatus+0x8c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 80099c2:	4808      	ldr	r0, [pc, #32]	; (80099e4 <Standard_GetStatus+0x88>)
 80099c4:	bd08      	pop	{r3, pc}
    return NULL;
 80099c6:	4608      	mov	r0, r1
}
 80099c8:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80099ca:	2202      	movs	r2, #2
 80099cc:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <Standard_GetStatus+0x84>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	821a      	strh	r2, [r3, #16]
    return 0;
 80099d2:	bd08      	pop	{r3, pc}
      if (_GetTxStallStatus(Related_Endpoint))
 80099d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099d8:	2b10      	cmp	r3, #16
 80099da:	d1ee      	bne.n	80099ba <Standard_GetStatus+0x5e>
 80099dc:	e7de      	b.n	800999c <Standard_GetStatus+0x40>
 80099de:	bf00      	nop
 80099e0:	20001308 	.word	0x20001308
 80099e4:	200012d8 	.word	0x200012d8
 80099e8:	20001304 	.word	0x20001304

080099ec <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80099ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80099f0:	4f24      	ldr	r7, [pc, #144]	; (8009a84 <DataStageIn+0x98>)
 80099f2:	683d      	ldr	r5, [r7, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80099f4:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80099f6:	b92c      	cbnz	r4, 8009a04 <DataStageIn+0x18>
  uint32_t ControlState = pInformation->ControlState;
 80099f8:	7a2e      	ldrb	r6, [r5, #8]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80099fa:	2e04      	cmp	r6, #4
 80099fc:	d02b      	beq.n	8009a56 <DataStageIn+0x6a>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80099fe:	8aab      	ldrh	r3, [r5, #20]
 8009a00:	2604      	movs	r6, #4
 8009a02:	e004      	b.n	8009a0e <DataStageIn+0x22>
 8009a04:	8aab      	ldrh	r3, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8009a06:	429c      	cmp	r4, r3
 8009a08:	bf8c      	ite	hi
 8009a0a:	2602      	movhi	r6, #2
 8009a0c:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8009a0e:	429c      	cmp	r4, r3
 8009a10:	bf28      	it	cs
 8009a12:	461c      	movcs	r4, r3
 8009a14:	69ab      	ldr	r3, [r5, #24]
 8009a16:	4620      	mov	r0, r4
 8009a18:	4798      	blx	r3
 8009a1a:	4680      	mov	r8, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f000 fdd3 	bl	800a5c8 <GetEPTxAddr>
 8009a22:	4622      	mov	r2, r4
 8009a24:	4601      	mov	r1, r0
 8009a26:	4640      	mov	r0, r8
 8009a28:	f000 fce4 	bl	800a3f4 <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	2000      	movs	r0, #0
 8009a30:	f000 fde6 	bl	800a600 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8009a34:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009a36:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  pEPinfo->Usb_wLength -= Length;
 8009a3a:	8a2b      	ldrh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8009a3c:	8a69      	ldrh	r1, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 8009a3e:	1b1b      	subs	r3, r3, r4
 8009a40:	822b      	strh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8009a42:	440c      	add	r4, r1
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009a44:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <DataStageIn+0x9c>)
  vSetEPTxStatus(EP_TX_VALID);
 8009a46:	4911      	ldr	r1, [pc, #68]	; (8009a8c <DataStageIn+0xa0>)
  pEPinfo->Usb_wOffset += Length;
 8009a48:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8009a4a:	8008      	strh	r0, [r1, #0]
 8009a4c:	683d      	ldr	r5, [r7, #0]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009a4e:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8009a50:	722e      	strb	r6, [r5, #8]
}
 8009a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Data_Mul_MaxPacketSize == TRUE)
 8009a56:	4b0e      	ldr	r3, [pc, #56]	; (8009a90 <DataStageIn+0xa4>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	2a01      	cmp	r2, #1
 8009a5c:	d006      	beq.n	8009a6c <DataStageIn+0x80>
      vSetEPTxStatus(EP_TX_STALL);
 8009a5e:	2210      	movs	r2, #16
 8009a60:	2607      	movs	r6, #7
 8009a62:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <DataStageIn+0xa0>)
 8009a64:	801a      	strh	r2, [r3, #0]
  pInformation->ControlState = ControlState;
 8009a66:	722e      	strb	r6, [r5, #8]
}
 8009a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Send0LengthData();
 8009a6c:	2730      	movs	r7, #48	; 0x30
 8009a6e:	4909      	ldr	r1, [pc, #36]	; (8009a94 <DataStageIn+0xa8>)
 8009a70:	4a09      	ldr	r2, [pc, #36]	; (8009a98 <DataStageIn+0xac>)
 8009a72:	6809      	ldr	r1, [r1, #0]
 8009a74:	4805      	ldr	r0, [pc, #20]	; (8009a8c <DataStageIn+0xa0>)
 8009a76:	b289      	uxth	r1, r1
 8009a78:	440a      	add	r2, r1
 8009a7a:	0052      	lsls	r2, r2, #1
 8009a7c:	6014      	str	r4, [r2, #0]
      Data_Mul_MaxPacketSize = FALSE;
 8009a7e:	601c      	str	r4, [r3, #0]
      Send0LengthData();
 8009a80:	8007      	strh	r7, [r0, #0]
 8009a82:	e7e5      	b.n	8009a50 <DataStageIn+0x64>
 8009a84:	20001308 	.word	0x20001308
 8009a88:	2000130e 	.word	0x2000130e
 8009a8c:	20001310 	.word	0x20001310
 8009a90:	20000c08 	.word	0x20000c08
 8009a94:	40005c50 	.word	0x40005c50
 8009a98:	20003002 	.word	0x20003002

08009a9c <Standard_ClearFeature>:
{
 8009a9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8009a9e:	4b30      	ldr	r3, [pc, #192]	; (8009b60 <Standard_ClearFeature+0xc4>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	7818      	ldrb	r0, [r3, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009aa4:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8009aa8:	d003      	beq.n	8009ab2 <Standard_ClearFeature+0x16>
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009aaa:	2802      	cmp	r0, #2
 8009aac:	d006      	beq.n	8009abc <Standard_ClearFeature+0x20>
  return USB_UNSUPPORT;
 8009aae:	2002      	movs	r0, #2
}
 8009ab0:	bd38      	pop	{r3, r4, r5, pc}
    ClrBit(pInformation->Current_Feature, 5);
 8009ab2:	7a5a      	ldrb	r2, [r3, #9]
 8009ab4:	f022 0220 	bic.w	r2, r2, #32
 8009ab8:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8009abc:	885a      	ldrh	r2, [r3, #2]
 8009abe:	2a00      	cmp	r2, #0
 8009ac0:	d1f6      	bne.n	8009ab0 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8009ac2:	791a      	ldrb	r2, [r3, #4]
 8009ac4:	2a00      	cmp	r2, #0
 8009ac6:	d1f3      	bne.n	8009ab0 <Standard_ClearFeature+0x14>
    wIndex0 = pInformation->USBwIndex0;
 8009ac8:	7958      	ldrb	r0, [r3, #5]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009aca:	4d26      	ldr	r5, [pc, #152]	; (8009b64 <Standard_ClearFeature+0xc8>)
    if (ValBit(pInformation->USBwIndex0, 7))
 8009acc:	b241      	sxtb	r1, r0
    rEP = wIndex0 & ~0x80;
 8009ace:	f020 0080 	bic.w	r0, r0, #128	; 0x80
      Status = _GetEPTxStatus(Related_Endpoint);
 8009ad2:	0084      	lsls	r4, r0, #2
 8009ad4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8009ad8:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8009adc:	6822      	ldr	r2, [r4, #0]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009ade:	782d      	ldrb	r5, [r5, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 8009ae0:	2900      	cmp	r1, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 8009ae2:	bfb4      	ite	lt
 8009ae4:	f002 0230 	andlt.w	r2, r2, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 8009ae8:	f402 5240 	andge.w	r2, r2, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009aec:	42a8      	cmp	r0, r5
 8009aee:	d2de      	bcs.n	8009aae <Standard_ClearFeature+0x12>
 8009af0:	2a00      	cmp	r2, #0
 8009af2:	d0dc      	beq.n	8009aae <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8009af4:	7a9b      	ldrb	r3, [r3, #10]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0d9      	beq.n	8009aae <Standard_ClearFeature+0x12>
    if (wIndex0 & 0x80)
 8009afa:	2900      	cmp	r1, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 8009afc:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 8009afe:	db0a      	blt.n	8009b16 <Standard_ClearFeature+0x7a>
      if (_GetRxStallStatus(Related_Endpoint))
 8009b00:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b08:	d012      	beq.n	8009b30 <Standard_ClearFeature+0x94>
    pUser_Standard_Requests->User_ClearFeature();
 8009b0a:	4b17      	ldr	r3, [pc, #92]	; (8009b68 <Standard_ClearFeature+0xcc>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	4798      	blx	r3
    return USB_SUCCESS;
 8009b12:	2000      	movs	r0, #0
 8009b14:	bd38      	pop	{r3, r4, r5, pc}
      if (_GetTxStallStatus(Related_Endpoint ))
 8009b16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b1a:	2b10      	cmp	r3, #16
 8009b1c:	d1f5      	bne.n	8009b0a <Standard_ClearFeature+0x6e>
        ClearDTOG_TX(Related_Endpoint);
 8009b1e:	b2c4      	uxtb	r4, r0
 8009b20:	4620      	mov	r0, r4
 8009b22:	f000 fd1f 	bl	800a564 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8009b26:	4620      	mov	r0, r4
 8009b28:	2130      	movs	r1, #48	; 0x30
 8009b2a:	f000 fc9d 	bl	800a468 <SetEPTxStatus>
 8009b2e:	e7ec      	b.n	8009b0a <Standard_ClearFeature+0x6e>
        if (Related_Endpoint == ENDP0)
 8009b30:	b990      	cbnz	r0, 8009b58 <Standard_ClearFeature+0xbc>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8009b32:	4b0e      	ldr	r3, [pc, #56]	; (8009b6c <Standard_ClearFeature+0xd0>)
 8009b34:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009b38:	f000 fd70 	bl	800a61c <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	e7d8      	b.n	8009b0a <Standard_ClearFeature+0x6e>
          ClearDTOG_RX(Related_Endpoint);
 8009b58:	f000 fcf2 	bl	800a540 <ClearDTOG_RX>
 8009b5c:	e7ee      	b.n	8009b3c <Standard_ClearFeature+0xa0>
 8009b5e:	bf00      	nop
 8009b60:	20001308 	.word	0x20001308
 8009b64:	2000009c 	.word	0x2000009c
 8009b68:	20001304 	.word	0x20001304
 8009b6c:	2000006c 	.word	0x2000006c

08009b70 <Standard_SetEndPointFeature>:
{
 8009b70:	b538      	push	{r3, r4, r5, lr}
  wIndex0 = pInformation->USBwIndex0;
 8009b72:	4b21      	ldr	r3, [pc, #132]	; (8009bf8 <Standard_SetEndPointFeature+0x88>)
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009b74:	4d21      	ldr	r5, [pc, #132]	; (8009bfc <Standard_SetEndPointFeature+0x8c>)
  wIndex0 = pInformation->USBwIndex0;
 8009b76:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009b78:	782d      	ldrb	r5, [r5, #0]
  wIndex0 = pInformation->USBwIndex0;
 8009b7a:	7942      	ldrb	r2, [r0, #5]
  if (ValBit(pInformation->USBwIndex0, 7))
 8009b7c:	b254      	sxtb	r4, r2
  rEP = wIndex0 & ~0x80;
 8009b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    Status = _GetEPTxStatus(Related_Endpoint);
 8009b82:	0093      	lsls	r3, r2, #2
 8009b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b88:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8009b8c:	6819      	ldr	r1, [r3, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 8009b8e:	2c00      	cmp	r4, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 8009b90:	bfb4      	ite	lt
 8009b92:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 8009b96:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009b9a:	42aa      	cmp	r2, r5
 8009b9c:	d301      	bcc.n	8009ba2 <Standard_SetEndPointFeature+0x32>
    return USB_UNSUPPORT;
 8009b9e:	2002      	movs	r0, #2
}
 8009ba0:	bd38      	pop	{r3, r4, r5, pc}
      || pInformation->USBwValue != 0 || Status == 0
 8009ba2:	8842      	ldrh	r2, [r0, #2]
 8009ba4:	2a00      	cmp	r2, #0
 8009ba6:	d1fa      	bne.n	8009b9e <Standard_SetEndPointFeature+0x2e>
 8009ba8:	2900      	cmp	r1, #0
 8009baa:	d0f8      	beq.n	8009b9e <Standard_SetEndPointFeature+0x2e>
      || pInformation->Current_Configuration == 0)
 8009bac:	7a82      	ldrb	r2, [r0, #10]
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	d0f5      	beq.n	8009b9e <Standard_SetEndPointFeature+0x2e>
    if (wIndex0 & 0x80)
 8009bb2:	2c00      	cmp	r4, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8009bb4:	681a      	ldr	r2, [r3, #0]
    if (wIndex0 & 0x80)
 8009bb6:	db11      	blt.n	8009bdc <Standard_SetEndPointFeature+0x6c>
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8009bb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009bbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009bc0:	b292      	uxth	r2, r2
 8009bc2:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8009bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009bce:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 8009bd0:	4b0b      	ldr	r3, [pc, #44]	; (8009c00 <Standard_SetEndPointFeature+0x90>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	4798      	blx	r3
  return USB_SUCCESS;
 8009bd8:	2000      	movs	r0, #0
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8009bdc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009be4:	b292      	uxth	r2, r2
 8009be6:	f082 0210 	eor.w	r2, r2, #16
 8009bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009bf2:	601a      	str	r2, [r3, #0]
 8009bf4:	e7ec      	b.n	8009bd0 <Standard_SetEndPointFeature+0x60>
 8009bf6:	bf00      	nop
 8009bf8:	20001308 	.word	0x20001308
 8009bfc:	2000009c 	.word	0x2000009c
 8009c00:	20001304 	.word	0x20001304

08009c04 <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <Standard_GetDescriptorData+0x18>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8009c0a:	b110      	cbz	r0, 8009c12 <Standard_GetDescriptorData+0xe>
  return pDesc->Descriptor + wOffset;
 8009c0c:	6808      	ldr	r0, [r1, #0]
 8009c0e:	4410      	add	r0, r2
}
 8009c10:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8009c12:	8889      	ldrh	r1, [r1, #4]
 8009c14:	1a8a      	subs	r2, r1, r2
 8009c16:	821a      	strh	r2, [r3, #16]
    return 0;
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	20001308 	.word	0x20001308

08009c20 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8009c20:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 8009c22:	4ea7      	ldr	r6, [pc, #668]	; (8009ec0 <Setup0_Process+0x2a0>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009c24:	4ba7      	ldr	r3, [pc, #668]	; (8009ec4 <Setup0_Process+0x2a4>)
  if (pInformation->ControlState != PAUSE)
 8009c26:	6834      	ldr	r4, [r6, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009c28:	681a      	ldr	r2, [r3, #0]
  if (pInformation->ControlState != PAUSE)
 8009c2a:	7a23      	ldrb	r3, [r4, #8]
{
 8009c2c:	b083      	sub	sp, #12
  if (pInformation->ControlState != PAUSE)
 8009c2e:	2b09      	cmp	r3, #9
 8009c30:	d039      	beq.n	8009ca6 <Setup0_Process+0x86>
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009c32:	4ba5      	ldr	r3, [pc, #660]	; (8009ec8 <Setup0_Process+0x2a8>)
 8009c34:	b292      	uxth	r2, r2
 8009c36:	4413      	add	r3, r2
 8009c38:	005b      	lsls	r3, r3, #1
 8009c3a:	881d      	ldrh	r5, [r3, #0]
 8009c3c:	006d      	lsls	r5, r5, #1
 8009c3e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8009c42:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8009c46:	782b      	ldrb	r3, [r5, #0]
 8009c48:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8009c4a:	786b      	ldrb	r3, [r5, #1]
 8009c4c:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8009c4e:	88a8      	ldrh	r0, [r5, #4]
 8009c50:	f000 fd16 	bl	800a680 <ByteSwap>
 8009c54:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8009c56:	8928      	ldrh	r0, [r5, #8]
 8009c58:	6834      	ldr	r4, [r6, #0]
 8009c5a:	f000 fd11 	bl	800a680 <ByteSwap>
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8009c5e:	2201      	movs	r2, #1
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8009c60:	80a0      	strh	r0, [r4, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	6834      	ldr	r4, [r6, #0]
 8009c66:	80e3      	strh	r3, [r4, #6]
  pInformation->ControlState = SETTING_UP;
 8009c68:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8009c6a:	b30b      	cbz	r3, 8009cb0 <Setup0_Process+0x90>
  uint32_t Request_No = pInformation->USBbRequest;
 8009c6c:	7860      	ldrb	r0, [r4, #1]
  if (Request_No == GET_DESCRIPTOR)
 8009c6e:	2806      	cmp	r0, #6
 8009c70:	f000 8091 	beq.w	8009d96 <Setup0_Process+0x176>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d14b      	bne.n	8009d10 <Setup0_Process+0xf0>
 8009c78:	8861      	ldrh	r1, [r4, #2]
 8009c7a:	2900      	cmp	r1, #0
 8009c7c:	f000 80a3 	beq.w	8009dc6 <Setup0_Process+0x1a6>
 8009c80:	4d92      	ldr	r5, [pc, #584]	; (8009ecc <Setup0_Process+0x2ac>)
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8009c88:	2803      	cmp	r0, #3
 8009c8a:	f000 8112 	beq.w	8009eb2 <Setup0_Process+0x292>
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8009c8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009c92:	6833      	ldr	r3, [r6, #0]
 8009c94:	8a1a      	ldrh	r2, [r3, #16]
 8009c96:	428a      	cmp	r2, r1
 8009c98:	f000 8092 	beq.w	8009dc0 <Setup0_Process+0x1a0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8009c9c:	2802      	cmp	r0, #2
 8009c9e:	d147      	bne.n	8009d30 <Setup0_Process+0x110>
    pInformation->ControlState = STALLED;
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	721a      	strb	r2, [r3, #8]
 8009ca4:	e01c      	b.n	8009ce0 <Setup0_Process+0xc0>
  pInformation->ControlState = SETTING_UP;
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	88e3      	ldrh	r3, [r4, #6]
 8009caa:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1dd      	bne.n	8009c6c <Setup0_Process+0x4c>
 8009cb0:	7823      	ldrb	r3, [r4, #0]
  uint32_t RequestNo = pInformation->USBbRequest;
 8009cb2:	7867      	ldrb	r7, [r4, #1]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009cb4:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8009cb8:	d047      	beq.n	8009d4a <Setup0_Process+0x12a>
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	f000 80cf 	beq.w	8009e5e <Setup0_Process+0x23e>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	f000 8129 	beq.w	8009f18 <Setup0_Process+0x2f8>
 8009cc6:	4d81      	ldr	r5, [pc, #516]	; (8009ecc <Setup0_Process+0x2ac>)
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	4638      	mov	r0, r7
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8009cd0:	2803      	cmp	r0, #3
 8009cd2:	f000 8157 	beq.w	8009f84 <Setup0_Process+0x364>
 8009cd6:	6834      	ldr	r4, [r6, #0]
  if (Result != USB_SUCCESS)
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d04f      	beq.n	8009d7c <Setup0_Process+0x15c>
          || (pInformation->Current_Configuration != 0))
 8009cdc:	2308      	movs	r3, #8
  pInformation->ControlState = ControlState;
 8009cde:	7223      	strb	r3, [r4, #8]
{
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8009ce0:	4b7b      	ldr	r3, [pc, #492]	; (8009ed0 <Setup0_Process+0x2b0>)
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009ce8:	f000 fc98 	bl	800a61c <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8009cec:	6833      	ldr	r3, [r6, #0]
 8009cee:	7a18      	ldrb	r0, [r3, #8]
 8009cf0:	2808      	cmp	r0, #8
 8009cf2:	d106      	bne.n	8009d02 <Setup0_Process+0xe2>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8009cf4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8009cf8:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8009cfa:	4976      	ldr	r1, [pc, #472]	; (8009ed4 <Setup0_Process+0x2b4>)
    vSetEPTxStatus(EP_TX_STALL);
 8009cfc:	4b76      	ldr	r3, [pc, #472]	; (8009ed8 <Setup0_Process+0x2b8>)
    vSetEPRxStatus(EP_RX_STALL);
 8009cfe:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8009d00:	801a      	strh	r2, [r3, #0]
}
 8009d02:	f1a0 0009 	sub.w	r0, r0, #9
 8009d06:	fab0 f080 	clz	r0, r0
 8009d0a:	0940      	lsrs	r0, r0, #5
 8009d0c:	b003      	add	sp, #12
 8009d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (Request_No == GET_CONFIGURATION)
 8009d10:	2808      	cmp	r0, #8
 8009d12:	d16a      	bne.n	8009dea <Setup0_Process+0x1ca>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009d14:	7823      	ldrb	r3, [r4, #0]
 8009d16:	065b      	lsls	r3, r3, #25
 8009d18:	d1b2      	bne.n	8009c80 <Setup0_Process+0x60>
      CopyRoutine = Standard_GetConfiguration;
 8009d1a:	4b70      	ldr	r3, [pc, #448]	; (8009edc <Setup0_Process+0x2bc>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8009d1c:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8009d1e:	61a3      	str	r3, [r4, #24]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8009d20:	8260      	strh	r0, [r4, #18]
    (*CopyRoutine)(0);
 8009d22:	4798      	blx	r3
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8009d24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009d28:	6833      	ldr	r3, [r6, #0]
 8009d2a:	8a1a      	ldrh	r2, [r3, #16]
 8009d2c:	428a      	cmp	r2, r1
 8009d2e:	d047      	beq.n	8009dc0 <Setup0_Process+0x1a0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	d0b5      	beq.n	8009ca0 <Setup0_Process+0x80>
  if (ValBit(pInformation->USBbmRequestType, 7))
 8009d34:	f993 1000 	ldrsb.w	r1, [r3]
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	db79      	blt.n	8009e30 <Setup0_Process+0x210>
    pInformation->ControlState = OUT_DATA;
 8009d3c:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8009d3e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8009d42:	4a64      	ldr	r2, [pc, #400]	; (8009ed4 <Setup0_Process+0x2b4>)
    pInformation->ControlState = OUT_DATA;
 8009d44:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8009d46:	8011      	strh	r1, [r2, #0]
 8009d48:	e7ca      	b.n	8009ce0 <Setup0_Process+0xc0>
    if (RequestNo == SET_CONFIGURATION)
 8009d4a:	2f09      	cmp	r7, #9
 8009d4c:	f000 8102 	beq.w	8009f54 <Setup0_Process+0x334>
    else if (RequestNo == SET_ADDRESS)
 8009d50:	2f05      	cmp	r7, #5
 8009d52:	f000 80cf 	beq.w	8009ef4 <Setup0_Process+0x2d4>
    else if (RequestNo == SET_FEATURE)
 8009d56:	2f03      	cmp	r7, #3
 8009d58:	f000 80e7 	beq.w	8009f2a <Setup0_Process+0x30a>
    else if (RequestNo == CLEAR_FEATURE)
 8009d5c:	2f01      	cmp	r7, #1
 8009d5e:	d1b2      	bne.n	8009cc6 <Setup0_Process+0xa6>
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8009d60:	78e3      	ldrb	r3, [r4, #3]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d1af      	bne.n	8009cc6 <Setup0_Process+0xa6>
          && pInformation->USBwIndex == 0
 8009d66:	88a3      	ldrh	r3, [r4, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1ac      	bne.n	8009cc6 <Setup0_Process+0xa6>
          && ValBit(pInformation->Current_Feature, 5))
 8009d6c:	7a63      	ldrb	r3, [r4, #9]
 8009d6e:	069b      	lsls	r3, r3, #26
 8009d70:	d5a9      	bpl.n	8009cc6 <Setup0_Process+0xa6>
        Result = Standard_ClearFeature();
 8009d72:	f7ff fe93 	bl	8009a9c <Standard_ClearFeature>
  if (Result != USB_SUCCESS)
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d1a5      	bne.n	8009cc6 <Setup0_Process+0xa6>
 8009d7a:	6834      	ldr	r4, [r6, #0]
  USB_StatusIn();
 8009d7c:	2500      	movs	r5, #0
 8009d7e:	2030      	movs	r0, #48	; 0x30
 8009d80:	4a50      	ldr	r2, [pc, #320]	; (8009ec4 <Setup0_Process+0x2a4>)
 8009d82:	4b57      	ldr	r3, [pc, #348]	; (8009ee0 <Setup0_Process+0x2c0>)
 8009d84:	6812      	ldr	r2, [r2, #0]
 8009d86:	4954      	ldr	r1, [pc, #336]	; (8009ed8 <Setup0_Process+0x2b8>)
 8009d88:	b292      	uxth	r2, r2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	601d      	str	r5, [r3, #0]
 8009d90:	2306      	movs	r3, #6
 8009d92:	8008      	strh	r0, [r1, #0]
 8009d94:	e7a3      	b.n	8009cde <Setup0_Process+0xbe>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009d96:	7823      	ldrb	r3, [r4, #0]
 8009d98:	065d      	lsls	r5, r3, #25
 8009d9a:	f47f af71 	bne.w	8009c80 <Setup0_Process+0x60>
      uint8_t wValue1 = pInformation->USBwValue1;
 8009d9e:	78a3      	ldrb	r3, [r4, #2]
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8009da0:	4d4a      	ldr	r5, [pc, #296]	; (8009ecc <Setup0_Process+0x2ac>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	f000 80eb 	beq.w	8009f7e <Setup0_Process+0x35e>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	f000 8086 	beq.w	8009eba <Setup0_Process+0x29a>
      else if (wValue1 == STRING_DESCRIPTOR)
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	f47f af67 	bne.w	8009c82 <Setup0_Process+0x62>
        CopyRoutine = pProperty->GetStringDescriptor;
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (CopyRoutine)
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1af      	bne.n	8009d1c <Setup0_Process+0xfc>
 8009dbc:	2006      	movs	r0, #6
 8009dbe:	e760      	b.n	8009c82 <Setup0_Process+0x62>
    pInformation->ControlState = PAUSE;
 8009dc0:	2209      	movs	r2, #9
 8009dc2:	721a      	strb	r2, [r3, #8]
 8009dc4:	e78c      	b.n	8009ce0 <Setup0_Process+0xc0>
           && (pInformation->USBwIndex1 == 0))
 8009dc6:	6863      	ldr	r3, [r4, #4]
 8009dc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dd0:	f47f af56 	bne.w	8009c80 <Setup0_Process+0x60>
 8009dd4:	7820      	ldrb	r0, [r4, #0]
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009dd6:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8009dda:	f040 80d6 	bne.w	8009f8a <Setup0_Process+0x36a>
        && (pInformation->USBwIndex == 0))
 8009dde:	88a3      	ldrh	r3, [r4, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f47f af4d 	bne.w	8009c80 <Setup0_Process+0x60>
        CopyRoutine = Standard_GetStatus;
 8009de6:	4b3f      	ldr	r3, [pc, #252]	; (8009ee4 <Setup0_Process+0x2c4>)
 8009de8:	e798      	b.n	8009d1c <Setup0_Process+0xfc>
  else if (Request_No == GET_INTERFACE)
 8009dea:	280a      	cmp	r0, #10
 8009dec:	f47f af48 	bne.w	8009c80 <Setup0_Process+0x60>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009df0:	7823      	ldrb	r3, [r4, #0]
 8009df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	f47f af42 	bne.w	8009c80 <Setup0_Process+0x60>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8009dfc:	7aa3      	ldrb	r3, [r4, #10]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f43f af3e 	beq.w	8009c80 <Setup0_Process+0x60>
 8009e04:	8861      	ldrh	r1, [r4, #2]
 8009e06:	2900      	cmp	r1, #0
 8009e08:	f47f af3a 	bne.w	8009c80 <Setup0_Process+0x60>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8009e0c:	6863      	ldr	r3, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8009e0e:	4d2f      	ldr	r5, [pc, #188]	; (8009ecc <Setup0_Process+0x2ac>)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8009e10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e18:	f47f af33 	bne.w	8009c82 <Setup0_Process+0x62>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	7960      	ldrb	r0, [r4, #5]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	4798      	blx	r3
 8009e24:	2800      	cmp	r0, #0
 8009e26:	f040 80ed 	bne.w	800a004 <Setup0_Process+0x3e4>
 8009e2a:	6834      	ldr	r4, [r6, #0]
      CopyRoutine = Standard_GetInterface;
 8009e2c:	4b2e      	ldr	r3, [pc, #184]	; (8009ee8 <Setup0_Process+0x2c8>)
 8009e2e:	e775      	b.n	8009d1c <Setup0_Process+0xfc>
    __IO uint32_t wLength = pInformation->USBwLength;
 8009e30:	88d9      	ldrh	r1, [r3, #6]
 8009e32:	9101      	str	r1, [sp, #4]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8009e34:	9801      	ldr	r0, [sp, #4]
 8009e36:	4282      	cmp	r2, r0
 8009e38:	d834      	bhi.n	8009ea4 <Setup0_Process+0x284>
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8009e3a:	4291      	cmp	r1, r2
 8009e3c:	f240 80ab 	bls.w	8009f96 <Setup0_Process+0x376>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8009e40:	4922      	ldr	r1, [pc, #136]	; (8009ecc <Setup0_Process+0x2ac>)
 8009e42:	6809      	ldr	r1, [r1, #0]
 8009e44:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 8009e48:	b281      	uxth	r1, r0
 8009e4a:	4291      	cmp	r1, r2
 8009e4c:	f240 80a8 	bls.w	8009fa0 <Setup0_Process+0x380>
        Data_Mul_MaxPacketSize = FALSE;
 8009e50:	2000      	movs	r0, #0
 8009e52:	4a26      	ldr	r2, [pc, #152]	; (8009eec <Setup0_Process+0x2cc>)
 8009e54:	6010      	str	r0, [r2, #0]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8009e56:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 8009e58:	f7ff fdc8 	bl	80099ec <DataStageIn>
 8009e5c:	e740      	b.n	8009ce0 <Setup0_Process+0xc0>
    if (RequestNo == SET_INTERFACE)
 8009e5e:	2f0b      	cmp	r7, #11
 8009e60:	f47f af31 	bne.w	8009cc6 <Setup0_Process+0xa6>
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8009e64:	4d19      	ldr	r5, [pc, #100]	; (8009ecc <Setup0_Process+0x2ac>)
 8009e66:	78e1      	ldrb	r1, [r4, #3]
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	7960      	ldrb	r0, [r4, #5]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	4798      	blx	r3
  if (pInformation->Current_Configuration != 0)
 8009e70:	6833      	ldr	r3, [r6, #0]
 8009e72:	7a9a      	ldrb	r2, [r3, #10]
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	f43f af27 	beq.w	8009cc8 <Setup0_Process+0xa8>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	f47f af24 	bne.w	8009cc8 <Setup0_Process+0xa8>
 8009e80:	791a      	ldrb	r2, [r3, #4]
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	f47f af20 	bne.w	8009cc8 <Setup0_Process+0xa8>
        || (pInformation->USBwValue1 != 0))
 8009e88:	789b      	ldrb	r3, [r3, #2]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f47f af1c 	bne.w	8009cc8 <Setup0_Process+0xa8>
      pUser_Standard_Requests->User_SetInterface();
 8009e90:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <Setup0_Process+0x2d0>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8009e98:	6834      	ldr	r4, [r6, #0]
 8009e9a:	7962      	ldrb	r2, [r4, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8009e9c:	78e3      	ldrb	r3, [r4, #3]
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8009e9e:	72e2      	strb	r2, [r4, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8009ea0:	7323      	strb	r3, [r4, #12]
 8009ea2:	e76b      	b.n	8009d7c <Setup0_Process+0x15c>
 8009ea4:	4a09      	ldr	r2, [pc, #36]	; (8009ecc <Setup0_Process+0x2ac>)
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8009ea6:	9901      	ldr	r1, [sp, #4]
 8009ea8:	6812      	ldr	r2, [r2, #0]
 8009eaa:	8219      	strh	r1, [r3, #16]
 8009eac:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8009eb0:	e7d1      	b.n	8009e56 <Setup0_Process+0x236>
      pInformation->ControlState = PAUSE;
 8009eb2:	2209      	movs	r2, #9
 8009eb4:	6833      	ldr	r3, [r6, #0]
 8009eb6:	721a      	strb	r2, [r3, #8]
 8009eb8:	e712      	b.n	8009ce0 <Setup0_Process+0xc0>
        CopyRoutine = pProperty->GetConfigDescriptor;
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	e77b      	b.n	8009db8 <Setup0_Process+0x198>
 8009ec0:	20001308 	.word	0x20001308
 8009ec4:	40005c50 	.word	0x40005c50
 8009ec8:	20003004 	.word	0x20003004
 8009ecc:	200012e0 	.word	0x200012e0
 8009ed0:	2000006c 	.word	0x2000006c
 8009ed4:	2000130e 	.word	0x2000130e
 8009ed8:	20001310 	.word	0x20001310
 8009edc:	0800990d 	.word	0x0800990d
 8009ee0:	20003002 	.word	0x20003002
 8009ee4:	0800995d 	.word	0x0800995d
 8009ee8:	08009935 	.word	0x08009935
 8009eec:	20000c08 	.word	0x20000c08
 8009ef0:	20001304 	.word	0x20001304
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8009ef4:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f6ff aeef 	blt.w	8009cdc <Setup0_Process+0xbc>
 8009efe:	78a3      	ldrb	r3, [r4, #2]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f47f aeeb 	bne.w	8009cdc <Setup0_Process+0xbc>
          || (pInformation->USBwIndex != 0)
 8009f06:	88a3      	ldrh	r3, [r4, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f47f aee7 	bne.w	8009cdc <Setup0_Process+0xbc>
          || (pInformation->Current_Configuration != 0))
 8009f0e:	7aa3      	ldrb	r3, [r4, #10]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f43f af33 	beq.w	8009d7c <Setup0_Process+0x15c>
 8009f16:	e6e1      	b.n	8009cdc <Setup0_Process+0xbc>
    if (RequestNo == CLEAR_FEATURE)
 8009f18:	2f01      	cmp	r7, #1
 8009f1a:	f43f af2a 	beq.w	8009d72 <Setup0_Process+0x152>
    else if (RequestNo == SET_FEATURE)
 8009f1e:	2f03      	cmp	r7, #3
 8009f20:	f47f aed1 	bne.w	8009cc6 <Setup0_Process+0xa6>
      Result = Standard_SetEndPointFeature();
 8009f24:	f7ff fe24 	bl	8009b70 <Standard_SetEndPointFeature>
 8009f28:	e725      	b.n	8009d76 <Setup0_Process+0x156>
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8009f2a:	78e3      	ldrb	r3, [r4, #3]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	f47f aeca 	bne.w	8009cc6 <Setup0_Process+0xa6>
          && (pInformation->USBwIndex == 0)
 8009f32:	88a3      	ldrh	r3, [r4, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f47f aec6 	bne.w	8009cc6 <Setup0_Process+0xa6>
          && (ValBit(pInformation->Current_Feature, 5)))
 8009f3a:	7a63      	ldrb	r3, [r4, #9]
 8009f3c:	069a      	lsls	r2, r3, #26
 8009f3e:	f57f aec2 	bpl.w	8009cc6 <Setup0_Process+0xa6>
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009f42:	4a32      	ldr	r2, [pc, #200]	; (800a00c <Setup0_Process+0x3ec>)
  SetBit(pInformation->Current_Feature, 5);
 8009f44:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009f48:	6812      	ldr	r2, [r2, #0]
  SetBit(pInformation->Current_Feature, 5);
 8009f4a:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009f4c:	69d3      	ldr	r3, [r2, #28]
 8009f4e:	4798      	blx	r3
 8009f50:	6834      	ldr	r4, [r6, #0]
 8009f52:	e713      	b.n	8009d7c <Setup0_Process+0x15c>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8009f54:	4a2e      	ldr	r2, [pc, #184]	; (800a010 <Setup0_Process+0x3f0>)
  if ((pInformation->USBwValue0 <=
 8009f56:	78e3      	ldrb	r3, [r4, #3]
 8009f58:	7852      	ldrb	r2, [r2, #1]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	f4ff aeb3 	bcc.w	8009cc6 <Setup0_Process+0xa6>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8009f60:	78a2      	ldrb	r2, [r4, #2]
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	f47f aeaf 	bne.w	8009cc6 <Setup0_Process+0xa6>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8009f68:	88a2      	ldrh	r2, [r4, #4]
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	f47f aeab 	bne.w	8009cc6 <Setup0_Process+0xa6>
    pUser_Standard_Requests->User_SetConfiguration();
 8009f70:	4a26      	ldr	r2, [pc, #152]	; (800a00c <Setup0_Process+0x3ec>)
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8009f72:	72a3      	strb	r3, [r4, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8009f74:	6813      	ldr	r3, [r2, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	4798      	blx	r3
 8009f7a:	6834      	ldr	r4, [r6, #0]
 8009f7c:	e6fe      	b.n	8009d7c <Setup0_Process+0x15c>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8009f7e:	682b      	ldr	r3, [r5, #0]
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	e719      	b.n	8009db8 <Setup0_Process+0x198>
 8009f84:	6834      	ldr	r4, [r6, #0]
    if (Result == USB_NOT_READY)
 8009f86:	2309      	movs	r3, #9
 8009f88:	e6a9      	b.n	8009cde <Setup0_Process+0xbe>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009f8a:	2801      	cmp	r0, #1
 8009f8c:	d02d      	beq.n	8009fea <Setup0_Process+0x3ca>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009f8e:	2802      	cmp	r0, #2
 8009f90:	d011      	beq.n	8009fb6 <Setup0_Process+0x396>
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8009f92:	2000      	movs	r0, #0
 8009f94:	e674      	b.n	8009c80 <Setup0_Process+0x60>
 8009f96:	4a1f      	ldr	r2, [pc, #124]	; (800a014 <Setup0_Process+0x3f4>)
 8009f98:	6812      	ldr	r2, [r2, #0]
 8009f9a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8009f9e:	e75a      	b.n	8009e56 <Setup0_Process+0x236>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8009fa0:	fb92 f4f0 	sdiv	r4, r2, r0
 8009fa4:	fb00 2214 	mls	r2, r0, r4, r2
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	f47f af54 	bne.w	8009e56 <Setup0_Process+0x236>
        Data_Mul_MaxPacketSize = TRUE;
 8009fae:	2001      	movs	r0, #1
 8009fb0:	4a19      	ldr	r2, [pc, #100]	; (800a018 <Setup0_Process+0x3f8>)
 8009fb2:	6010      	str	r0, [r2, #0]
 8009fb4:	e74f      	b.n	8009e56 <Setup0_Process+0x236>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8009fb6:	7960      	ldrb	r0, [r4, #5]
 8009fb8:	f000 020f 	and.w	r2, r0, #15
        Status = _GetEPTxStatus(Related_Endpoint);
 8009fbc:	0093      	lsls	r3, r2, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 8009fbe:	0601      	lsls	r1, r0, #24
        Status = _GetEPTxStatus(Related_Endpoint);
 8009fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8009fc4:	4912      	ldr	r1, [pc, #72]	; (800a010 <Setup0_Process+0x3f0>)
        Status = _GetEPTxStatus(Related_Endpoint);
 8009fc6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8009fca:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8009fcc:	7809      	ldrb	r1, [r1, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 8009fce:	bf4c      	ite	mi
 8009fd0:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 8009fd4:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8009fd8:	428a      	cmp	r2, r1
 8009fda:	d2da      	bcs.n	8009f92 <Setup0_Process+0x372>
 8009fdc:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 8009fe0:	d1d7      	bne.n	8009f92 <Setup0_Process+0x372>
          && (Status != 0))
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f47f aeff 	bne.w	8009de6 <Setup0_Process+0x1c6>
 8009fe8:	e64a      	b.n	8009c80 <Setup0_Process+0x60>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8009fea:	4d0a      	ldr	r5, [pc, #40]	; (800a014 <Setup0_Process+0x3f4>)
 8009fec:	7960      	ldrb	r0, [r4, #5]
 8009fee:	682b      	ldr	r3, [r5, #0]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	4798      	blx	r3
 8009ff4:	b930      	cbnz	r0, 800a004 <Setup0_Process+0x3e4>
          && (pInformation->Current_Configuration != 0))
 8009ff6:	6834      	ldr	r4, [r6, #0]
 8009ff8:	7aa3      	ldrb	r3, [r4, #10]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f47f aef3 	bne.w	8009de6 <Setup0_Process+0x1c6>
 800a000:	7860      	ldrb	r0, [r4, #1]
 800a002:	e63e      	b.n	8009c82 <Setup0_Process+0x62>
 800a004:	6833      	ldr	r3, [r6, #0]
 800a006:	7858      	ldrb	r0, [r3, #1]
 800a008:	e63b      	b.n	8009c82 <Setup0_Process+0x62>
 800a00a:	bf00      	nop
 800a00c:	20001304 	.word	0x20001304
 800a010:	2000009c 	.word	0x2000009c
 800a014:	200012e0 	.word	0x200012e0
 800a018:	20000c08 	.word	0x20000c08

0800a01c <In0_Process>:
{
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a01e:	4c29      	ldr	r4, [pc, #164]	; (800a0c4 <In0_Process+0xa8>)
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a024:	2a02      	cmp	r2, #2
 800a026:	d026      	beq.n	800a076 <In0_Process+0x5a>
 800a028:	2a04      	cmp	r2, #4
 800a02a:	d024      	beq.n	800a076 <In0_Process+0x5a>
  else if (ControlState == WAIT_STATUS_IN)
 800a02c:	2a06      	cmp	r2, #6
 800a02e:	d018      	beq.n	800a062 <In0_Process+0x46>
 800a030:	2108      	movs	r1, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a032:	4a25      	ldr	r2, [pc, #148]	; (800a0c8 <In0_Process+0xac>)
  pInformation->ControlState = ControlState;
 800a034:	7219      	strb	r1, [r3, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a036:	2000      	movs	r0, #0
 800a038:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a03c:	f000 faee 	bl	800a61c <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a040:	6823      	ldr	r3, [r4, #0]
 800a042:	7a18      	ldrb	r0, [r3, #8]
 800a044:	2808      	cmp	r0, #8
 800a046:	d106      	bne.n	800a056 <In0_Process+0x3a>
    vSetEPRxStatus(EP_RX_STALL);
 800a048:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a04c:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a04e:	491f      	ldr	r1, [pc, #124]	; (800a0cc <In0_Process+0xb0>)
    vSetEPTxStatus(EP_TX_STALL);
 800a050:	4b1f      	ldr	r3, [pc, #124]	; (800a0d0 <In0_Process+0xb4>)
    vSetEPRxStatus(EP_RX_STALL);
 800a052:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a054:	801a      	strh	r2, [r3, #0]
}
 800a056:	f1a0 0009 	sub.w	r0, r0, #9
 800a05a:	fab0 f080 	clz	r0, r0
 800a05e:	0940      	lsrs	r0, r0, #5
 800a060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a062:	785a      	ldrb	r2, [r3, #1]
 800a064:	2a05      	cmp	r2, #5
 800a066:	d00b      	beq.n	800a080 <In0_Process+0x64>
    (*pProperty->Process_Status_IN)();
 800a068:	4b1a      	ldr	r3, [pc, #104]	; (800a0d4 <In0_Process+0xb8>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	4798      	blx	r3
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	2108      	movs	r1, #8
 800a074:	e7dd      	b.n	800a032 <In0_Process+0x16>
    DataStageIn();
 800a076:	f7ff fcb9 	bl	80099ec <DataStageIn>
    ControlState = pInformation->ControlState;
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	7a19      	ldrb	r1, [r3, #8]
 800a07e:	e7d8      	b.n	800a032 <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a080:	781a      	ldrb	r2, [r3, #0]
 800a082:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800a086:	d1ef      	bne.n	800a068 <In0_Process+0x4c>
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a088:	4913      	ldr	r1, [pc, #76]	; (800a0d8 <In0_Process+0xbc>)
      SetDeviceAddress(pInformation->USBwValue0);
 800a08a:	f893 e003 	ldrb.w	lr, [r3, #3]
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a08e:	780d      	ldrb	r5, [r1, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800a090:	b175      	cbz	r5, 800a0b0 <In0_Process+0x94>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a092:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a096:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a09a:	4910      	ldr	r1, [pc, #64]	; (800a0dc <In0_Process+0xc0>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a09c:	680b      	ldr	r3, [r1, #0]
 800a09e:	ea42 0006 	orr.w	r0, r2, r6
 800a0a2:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a0a4:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a0a6:	4303      	orrs	r3, r0
  for (i = 0; i < nEP; i++)
 800a0a8:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a0aa:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a0ae:	d1f5      	bne.n	800a09c <In0_Process+0x80>
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a0b0:	490b      	ldr	r1, [pc, #44]	; (800a0e0 <In0_Process+0xc4>)
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a0b2:	4a0c      	ldr	r2, [pc, #48]	; (800a0e4 <In0_Process+0xc8>)
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a0b4:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
 800a0b8:	600b      	str	r3, [r1, #0]
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a0ba:	6813      	ldr	r3, [r2, #0]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	4798      	blx	r3
 800a0c0:	e7d2      	b.n	800a068 <In0_Process+0x4c>
 800a0c2:	bf00      	nop
 800a0c4:	20001308 	.word	0x20001308
 800a0c8:	2000006c 	.word	0x2000006c
 800a0cc:	2000130e 	.word	0x2000130e
 800a0d0:	20001310 	.word	0x20001310
 800a0d4:	200012e0 	.word	0x200012e0
 800a0d8:	2000009c 	.word	0x2000009c
 800a0dc:	40005c00 	.word	0x40005c00
 800a0e0:	40005c4c 	.word	0x40005c4c
 800a0e4:	20001304 	.word	0x20001304

0800a0e8 <Out0_Process>:
{
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a0ea:	4d3c      	ldr	r5, [pc, #240]	; (800a1dc <Out0_Process+0xf4>)
 800a0ec:	682c      	ldr	r4, [r5, #0]
 800a0ee:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d007      	beq.n	800a104 <Out0_Process+0x1c>
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d005      	beq.n	800a104 <Out0_Process+0x1c>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800a0f8:	2b03      	cmp	r3, #3
 800a0fa:	d01c      	beq.n	800a136 <Out0_Process+0x4e>
 800a0fc:	2b05      	cmp	r3, #5
 800a0fe:	d01a      	beq.n	800a136 <Out0_Process+0x4e>
  else if (ControlState == WAIT_STATUS_OUT)
 800a100:	2b07      	cmp	r3, #7
 800a102:	d049      	beq.n	800a198 <Out0_Process+0xb0>
 800a104:	2308      	movs	r3, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a106:	4a36      	ldr	r2, [pc, #216]	; (800a1e0 <Out0_Process+0xf8>)
  pInformation->ControlState = ControlState;
 800a108:	7223      	strb	r3, [r4, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a10a:	2000      	movs	r0, #0
 800a10c:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a110:	f000 fa84 	bl	800a61c <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	7a18      	ldrb	r0, [r3, #8]
 800a118:	2808      	cmp	r0, #8
 800a11a:	d106      	bne.n	800a12a <Out0_Process+0x42>
    vSetEPRxStatus(EP_RX_STALL);
 800a11c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a120:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a122:	4930      	ldr	r1, [pc, #192]	; (800a1e4 <Out0_Process+0xfc>)
    vSetEPTxStatus(EP_TX_STALL);
 800a124:	4b30      	ldr	r3, [pc, #192]	; (800a1e8 <Out0_Process+0x100>)
    vSetEPRxStatus(EP_RX_STALL);
 800a126:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a128:	801a      	strh	r2, [r3, #0]
  return Post0_Process();
 800a12a:	f1a0 0009 	sub.w	r0, r0, #9
 800a12e:	fab0 f080 	clz	r0, r0
 800a132:	0940      	lsrs	r0, r0, #5
}
 800a134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pEPinfo->CopyData && save_rLength)
 800a136:	69a3      	ldr	r3, [r4, #24]
  save_rLength = pEPinfo->Usb_rLength;
 800a138:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 800a13a:	b1bb      	cbz	r3, 800a16c <Out0_Process+0x84>
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	d032      	beq.n	800a1a6 <Out0_Process+0xbe>
    Length = pEPinfo->PacketSize;
 800a140:	8aa6      	ldrh	r6, [r4, #20]
    Buffer = (*pEPinfo->CopyData)(Length);
 800a142:	4296      	cmp	r6, r2
 800a144:	bf28      	it	cs
 800a146:	4616      	movcs	r6, r2
 800a148:	4630      	mov	r0, r6
 800a14a:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 800a14c:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a14e:	8a63      	ldrh	r3, [r4, #18]
    pEPinfo->Usb_rLength -= Length;
 800a150:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 800a152:	4433      	add	r3, r6
    Buffer = (*pEPinfo->CopyData)(Length);
 800a154:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800a156:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a158:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800a15a:	2000      	movs	r0, #0
 800a15c:	f000 fa42 	bl	800a5e4 <GetEPRxAddr>
 800a160:	4632      	mov	r2, r6
 800a162:	4601      	mov	r1, r0
 800a164:	4638      	mov	r0, r7
 800a166:	f000 f959 	bl	800a41c <PMAToUserBufferCopy>
 800a16a:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->Usb_rLength != 0)
 800a16c:	b302      	cbz	r2, 800a1b0 <Out0_Process+0xc8>
    SetEPTxCount(ENDP0, 0);
 800a16e:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a170:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a174:	4b1b      	ldr	r3, [pc, #108]	; (800a1e4 <Out0_Process+0xfc>)
    SetEPTxCount(ENDP0, 0);
 800a176:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a178:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800a17a:	f000 fa41 	bl	800a600 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a17e:	2230      	movs	r2, #48	; 0x30
 800a180:	8a23      	ldrh	r3, [r4, #16]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a182:	8aa1      	ldrh	r1, [r4, #20]
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a184:	4818      	ldr	r0, [pc, #96]	; (800a1e8 <Out0_Process+0x100>)
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a186:	4299      	cmp	r1, r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a188:	8002      	strh	r2, [r0, #0]
 800a18a:	682a      	ldr	r2, [r5, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a18c:	d922      	bls.n	800a1d4 <Out0_Process+0xec>
    if (pEPinfo->Usb_rLength > 0)
 800a18e:	b31b      	cbz	r3, 800a1d8 <Out0_Process+0xf0>
      pInformation->ControlState = LAST_OUT_DATA;
 800a190:	2305      	movs	r3, #5
 800a192:	4614      	mov	r4, r2
 800a194:	7213      	strb	r3, [r2, #8]
 800a196:	e7b6      	b.n	800a106 <Out0_Process+0x1e>
    (*pProperty->Process_Status_OUT)();
 800a198:	4b14      	ldr	r3, [pc, #80]	; (800a1ec <Out0_Process+0x104>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	4798      	blx	r3
 800a1a0:	682c      	ldr	r4, [r5, #0]
 800a1a2:	2308      	movs	r3, #8
 800a1a4:	e7af      	b.n	800a106 <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a1a6:	8aa3      	ldrh	r3, [r4, #20]
 800a1a8:	b933      	cbnz	r3, 800a1b8 <Out0_Process+0xd0>
    pInformation->ControlState = OUT_DATA;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	7223      	strb	r3, [r4, #8]
 800a1ae:	e7aa      	b.n	800a106 <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a1b0:	8aa3      	ldrh	r3, [r4, #20]
 800a1b2:	682c      	ldr	r4, [r5, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d0f8      	beq.n	800a1aa <Out0_Process+0xc2>
 800a1b8:	480b      	ldr	r0, [pc, #44]	; (800a1e8 <Out0_Process+0x100>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a1ba:	2306      	movs	r3, #6
      USB_StatusIn();
 800a1bc:	2700      	movs	r7, #0
 800a1be:	2630      	movs	r6, #48	; 0x30
 800a1c0:	4a0b      	ldr	r2, [pc, #44]	; (800a1f0 <Out0_Process+0x108>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a1c2:	7223      	strb	r3, [r4, #8]
      USB_StatusIn();
 800a1c4:	6811      	ldr	r1, [r2, #0]
 800a1c6:	4a0b      	ldr	r2, [pc, #44]	; (800a1f4 <Out0_Process+0x10c>)
 800a1c8:	b289      	uxth	r1, r1
 800a1ca:	440a      	add	r2, r1
 800a1cc:	0052      	lsls	r2, r2, #1
 800a1ce:	6017      	str	r7, [r2, #0]
 800a1d0:	8006      	strh	r6, [r0, #0]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800a1d2:	e798      	b.n	800a106 <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	e7e8      	b.n	800a1aa <Out0_Process+0xc2>
    if (pEPinfo->Usb_rLength > 0)
 800a1d8:	4614      	mov	r4, r2
 800a1da:	e7ee      	b.n	800a1ba <Out0_Process+0xd2>
 800a1dc:	20001308 	.word	0x20001308
 800a1e0:	2000006c 	.word	0x2000006c
 800a1e4:	2000130e 	.word	0x2000130e
 800a1e8:	20001310 	.word	0x20001310
 800a1ec:	200012e0 	.word	0x200012e0
 800a1f0:	40005c50 	.word	0x40005c50
 800a1f4:	20003002 	.word	0x20003002

0800a1f8 <SetDeviceAddress>:
{
 800a1f8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a1fa:	4b0c      	ldr	r3, [pc, #48]	; (800a22c <SetDeviceAddress+0x34>)
 800a1fc:	781d      	ldrb	r5, [r3, #0]
  for (i = 0; i < nEP; i++)
 800a1fe:	b17d      	cbz	r5, 800a220 <SetDeviceAddress+0x28>
 800a200:	2200      	movs	r2, #0
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a202:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a206:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a20a:	4909      	ldr	r1, [pc, #36]	; (800a230 <SetDeviceAddress+0x38>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a20c:	680b      	ldr	r3, [r1, #0]
 800a20e:	ea42 0406 	orr.w	r4, r2, r6
 800a212:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a214:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a216:	4323      	orrs	r3, r4
  for (i = 0; i < nEP; i++)
 800a218:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a21a:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a21e:	d1f5      	bne.n	800a20c <SetDeviceAddress+0x14>
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a220:	4b04      	ldr	r3, [pc, #16]	; (800a234 <SetDeviceAddress+0x3c>)
 800a222:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800a226:	6018      	str	r0, [r3, #0]
#endif  /* STM32F10X_CL */  
}
 800a228:	bcf0      	pop	{r4, r5, r6, r7}
 800a22a:	4770      	bx	lr
 800a22c:	2000009c 	.word	0x2000009c
 800a230:	40005c00 	.word	0x40005c00
 800a234:	40005c4c 	.word	0x40005c4c

0800a238 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop

0800a23c <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800a23c:	b470      	push	{r4, r5, r6}
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 800a23e:	2602      	movs	r6, #2
  pInformation = &Device_Info;
 800a240:	4a06      	ldr	r2, [pc, #24]	; (800a25c <USB_Init+0x20>)
 800a242:	4d07      	ldr	r5, [pc, #28]	; (800a260 <USB_Init+0x24>)
  pProperty = &Device_Property;
 800a244:	4c07      	ldr	r4, [pc, #28]	; (800a264 <USB_Init+0x28>)
 800a246:	4b08      	ldr	r3, [pc, #32]	; (800a268 <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 800a248:	4908      	ldr	r1, [pc, #32]	; (800a26c <USB_Init+0x30>)
 800a24a:	4809      	ldr	r0, [pc, #36]	; (800a270 <USB_Init+0x34>)
  pInformation->ControlState = 2;
 800a24c:	7216      	strb	r6, [r2, #8]
  pProperty = &Device_Property;
 800a24e:	6023      	str	r3, [r4, #0]
  pInformation = &Device_Info;
 800a250:	602a      	str	r2, [r5, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800a252:	681b      	ldr	r3, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800a254:	6008      	str	r0, [r1, #0]
}
 800a256:	bc70      	pop	{r4, r5, r6}
  pProperty->Init();
 800a258:	4718      	bx	r3
 800a25a:	bf00      	nop
 800a25c:	200012e8 	.word	0x200012e8
 800a260:	20001308 	.word	0x20001308
 800a264:	200012e0 	.word	0x200012e0
 800a268:	2000006c 	.word	0x2000006c
 800a26c:	20001304 	.word	0x20001304
 800a270:	200000c0 	.word	0x200000c0

0800a274 <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800a274:	2300      	movs	r3, #0
{
 800a276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a27a:	4e56      	ldr	r6, [pc, #344]	; (800a3d4 <CTR_LP+0x160>)
 800a27c:	b084      	sub	sp, #16
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a27e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800a3ec <CTR_LP+0x178>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a282:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800a3f0 <CTR_LP+0x17c>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800a286:	4f54      	ldr	r7, [pc, #336]	; (800a3d8 <CTR_LP+0x164>)
  __IO uint16_t wEPVal = 0;
 800a288:	f8ad 300e 	strh.w	r3, [sp, #14]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a28c:	f8d9 3000 	ldr.w	r3, [r9]
	    SaveRState = _GetENDPOINT(ENDP0);
 800a290:	4c52      	ldr	r4, [pc, #328]	; (800a3dc <CTR_LP+0x168>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a292:	b299      	uxth	r1, r3
 800a294:	041b      	lsls	r3, r3, #16
	    SaveRState = _GetENDPOINT(ENDP0);
 800a296:	4d52      	ldr	r5, [pc, #328]	; (800a3e0 <CTR_LP+0x16c>)
	    SaveTState = SaveRState & EPTX_STAT;
 800a298:	4a52      	ldr	r2, [pc, #328]	; (800a3e4 <CTR_LP+0x170>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a29a:	8031      	strh	r1, [r6, #0]
 800a29c:	f140 808e 	bpl.w	800a3bc <CTR_LP+0x148>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a2a0:	8833      	ldrh	r3, [r6, #0]
 800a2a2:	f003 030f 	and.w	r3, r3, #15
      wEPVal = _GetENDPOINT(EPindex);
 800a2a6:	0099      	lsls	r1, r3, #2
 800a2a8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800a2ac:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a2b0:	f888 3000 	strb.w	r3, [r8]
    if (EPindex == 0)
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d130      	bne.n	800a31a <CTR_LP+0xa6>
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800a2b8:	f64b 7abf 	movw	sl, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800a2c2:	882b      	ldrh	r3, [r5, #0]
 800a2c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a2c8:	8013      	strh	r3, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 800a2ca:	882b      	ldrh	r3, [r5, #0]
 800a2cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a2d0:	802b      	strh	r3, [r5, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	ea03 030a 	and.w	r3, r3, sl
 800a2d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a2dc:	f083 0320 	eor.w	r3, r3, #32
 800a2e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e8:	6023      	str	r3, [r4, #0]
      if ((wIstr & ISTR_DIR) == 0)
 800a2ea:	8833      	ldrh	r3, [r6, #0]
 800a2ec:	06d8      	lsls	r0, r3, #27
 800a2ee:	d53c      	bpl.n	800a36a <CTR_LP+0xf6>
        wEPVal = _GetENDPOINT(ENDP0);
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f8ad 300e 	strh.w	r3, [sp, #14]
        if ((wEPVal &EP_SETUP) != 0)
 800a2f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a2fc:	0519      	lsls	r1, r3, #20
 800a2fe:	d460      	bmi.n	800a3c2 <CTR_LP+0x14e>
        else if ((wEPVal & EP_CTR_RX) != 0)
 800a300:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a304:	041b      	lsls	r3, r3, #16
 800a306:	d5c1      	bpl.n	800a28c <CTR_LP+0x18>
          _ClearEP_CTR_RX(ENDP0);
 800a308:	f640 718f 	movw	r1, #3983	; 0xf8f
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	9201      	str	r2, [sp, #4]
 800a310:	400b      	ands	r3, r1
 800a312:	6023      	str	r3, [r4, #0]
          Out0_Process();
 800a314:	f7ff fee8 	bl	800a0e8 <Out0_Process>
 800a318:	e02f      	b.n	800a37a <CTR_LP+0x106>
      wEPVal = _GetENDPOINT(EPindex);
 800a31a:	680a      	ldr	r2, [r1, #0]
 800a31c:	b292      	uxth	r2, r2
 800a31e:	f8ad 200e 	strh.w	r2, [sp, #14]
      if ((wEPVal & EP_CTR_RX) != 0)
 800a322:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800a326:	0410      	lsls	r0, r2, #16
 800a328:	d414      	bmi.n	800a354 <CTR_LP+0xe0>
      if ((wEPVal & EP_CTR_TX) != 0)
 800a32a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a32e:	061a      	lsls	r2, r3, #24
 800a330:	d5ac      	bpl.n	800a28c <CTR_LP+0x18>
        _ClearEP_CTR_TX(EPindex);
 800a332:	f648 700f 	movw	r0, #36623	; 0x8f0f
 800a336:	f898 2000 	ldrb.w	r2, [r8]
 800a33a:	0093      	lsls	r3, r2, #2
 800a33c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a340:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800a344:	6819      	ldr	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800a346:	3a01      	subs	r2, #1
        _ClearEP_CTR_TX(EPindex);
 800a348:	4001      	ands	r1, r0
        (*pEpInt_IN[EPindex-1])();
 800a34a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
        _ClearEP_CTR_TX(EPindex);
 800a34e:	6019      	str	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800a350:	4790      	blx	r2
 800a352:	e79b      	b.n	800a28c <CTR_LP+0x18>
        _ClearEP_CTR_RX(EPindex);
 800a354:	f640 748f 	movw	r4, #3983	; 0xf8f
 800a358:	680a      	ldr	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a35a:	4823      	ldr	r0, [pc, #140]	; (800a3e8 <CTR_LP+0x174>)
        _ClearEP_CTR_RX(EPindex);
 800a35c:	4022      	ands	r2, r4
        (*pEpInt_OUT[EPindex-1])();
 800a35e:	3b01      	subs	r3, #1
 800a360:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        _ClearEP_CTR_RX(EPindex);
 800a364:	600a      	str	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a366:	4798      	blx	r3
 800a368:	e7df      	b.n	800a32a <CTR_LP+0xb6>
        _ClearEP_CTR_TX(ENDP0);
 800a36a:	f648 710f 	movw	r1, #36623	; 0x8f0f
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	9201      	str	r2, [sp, #4]
 800a372:	400b      	ands	r3, r1
 800a374:	6023      	str	r3, [r4, #0]
        In0_Process();
 800a376:	f7ff fe51 	bl	800a01c <In0_Process>
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	8829      	ldrh	r1, [r5, #0]
 800a37e:	ea03 0a0a 	and.w	sl, r3, sl
 800a382:	9a01      	ldr	r2, [sp, #4]
 800a384:	882b      	ldrh	r3, [r5, #0]
 800a386:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 800a38a:	bf18      	it	ne
 800a38c:	f48a 5a80 	eorne.w	sl, sl, #4096	; 0x1000
 800a390:	049e      	lsls	r6, r3, #18
 800a392:	8813      	ldrh	r3, [r2, #0]
 800a394:	bf48      	it	mi
 800a396:	f48a 5a00 	eormi.w	sl, sl, #8192	; 0x2000
 800a39a:	06dd      	lsls	r5, r3, #27
 800a39c:	8813      	ldrh	r3, [r2, #0]
 800a39e:	bf48      	it	mi
 800a3a0:	f08a 0a10 	eormi.w	sl, sl, #16
 800a3a4:	069c      	lsls	r4, r3, #26
 800a3a6:	bf48      	it	mi
 800a3a8:	f08a 0a20 	eormi.w	sl, sl, #32
 800a3ac:	f44a 4a00 	orr.w	sl, sl, #32768	; 0x8000
 800a3b0:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800a3b4:	4a09      	ldr	r2, [pc, #36]	; (800a3dc <CTR_LP+0x168>)
 800a3b6:	fa1f f38a 	uxth.w	r3, sl
 800a3ba:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800a3bc:	b004      	add	sp, #16
 800a3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800a3c2:	f640 718f 	movw	r1, #3983	; 0xf8f
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	9201      	str	r2, [sp, #4]
 800a3ca:	400b      	ands	r3, r1
 800a3cc:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800a3ce:	f7ff fc27 	bl	8009c20 <Setup0_Process>
 800a3d2:	e7d2      	b.n	800a37a <CTR_LP+0x106>
 800a3d4:	20001354 	.word	0x20001354
 800a3d8:	20000024 	.word	0x20000024
 800a3dc:	40005c00 	.word	0x40005c00
 800a3e0:	2000130e 	.word	0x2000130e
 800a3e4:	20001310 	.word	0x20001310
 800a3e8:	20000040 	.word	0x20000040
 800a3ec:	40005c44 	.word	0x40005c44
 800a3f0:	200012e4 	.word	0x200012e4

0800a3f4 <UserToPMABufferCopy>:
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a3f4:	3201      	adds	r2, #1
  uint32_t i, temp1;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800a3f6:	1052      	asrs	r2, r2, #1
 800a3f8:	d00e      	beq.n	800a418 <UserToPMABufferCopy+0x24>
 800a3fa:	2300      	movs	r3, #0
{
 800a3fc:	b410      	push	{r4}
 800a3fe:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800a402:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 800a406:	0049      	lsls	r1, r1, #1
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a408:	f830 4b02 	ldrh.w	r4, [r0], #2
 800a40c:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 800a410:	3301      	adds	r3, #1
  for (i = n; i != 0; i--)
 800a412:	429a      	cmp	r2, r3
 800a414:	d1f8      	bne.n	800a408 <UserToPMABufferCopy+0x14>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800a416:	bc10      	pop	{r4}
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop

0800a41c <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a41c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a420:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a422:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800a426:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a428:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 800a42c:	d005      	beq.n	800a43a <PMAToUserBufferCopy+0x1e>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a42e:	f851 3b04 	ldr.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 800a432:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a434:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 800a438:	d1f9      	bne.n	800a42e <PMAToUserBufferCopy+0x12>
 800a43a:	4770      	bx	lr

0800a43c <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800a43c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800a440:	4a01      	ldr	r2, [pc, #4]	; (800a448 <SetBTABLE+0xc>)
 800a442:	4003      	ands	r3, r0
 800a444:	6013      	str	r3, [r2, #0]
 800a446:	4770      	bx	lr
 800a448:	40005c50 	.word	0x40005c50

0800a44c <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800a44c:	0080      	lsls	r0, r0, #2
 800a44e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a452:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a456:	6803      	ldr	r3, [r0, #0]
 800a458:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a45c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a460:	4319      	orrs	r1, r3
 800a462:	b289      	uxth	r1, r1
 800a464:	6001      	str	r1, [r0, #0]
 800a466:	4770      	bx	lr

0800a468 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800a468:	0080      	lsls	r0, r0, #2
 800a46a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a46e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a472:	6803      	ldr	r3, [r0, #0]
 800a474:	06ca      	lsls	r2, r1, #27
 800a476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a47a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a47e:	b29b      	uxth	r3, r3
 800a480:	bf48      	it	mi
 800a482:	f083 0310 	eormi.w	r3, r3, #16
 800a486:	068a      	lsls	r2, r1, #26
 800a488:	bf48      	it	mi
 800a48a:	f083 0320 	eormi.w	r3, r3, #32
 800a48e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a496:	6003      	str	r3, [r0, #0]
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop

0800a49c <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800a49c:	0080      	lsls	r0, r0, #2
 800a49e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a4a2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a4a6:	6803      	ldr	r3, [r0, #0]
 800a4a8:	04ca      	lsls	r2, r1, #19
 800a4aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	bf48      	it	mi
 800a4b6:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800a4ba:	048a      	lsls	r2, r1, #18
 800a4bc:	bf48      	it	mi
 800a4be:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 800a4c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ca:	6003      	str	r3, [r0, #0]
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop

0800a4d0 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800a4d0:	0080      	lsls	r0, r0, #2
 800a4d2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a4d6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a4da:	6803      	ldr	r3, [r0, #0]
 800a4dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a4ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f2:	6003      	str	r3, [r0, #0]
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop

0800a4f8 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800a4f8:	0080      	lsls	r0, r0, #2
 800a4fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a4fe:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a502:	6803      	ldr	r3, [r0, #0]
 800a504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a51a:	6003      	str	r3, [r0, #0]
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop

0800a520 <Clear_Status_Out>:
 800a520:	f640 630f 	movw	r3, #3599	; 0xe0f
 800a524:	0080      	lsls	r0, r0, #2
 800a526:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a52a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a52e:	6802      	ldr	r2, [r0, #0]
 800a530:	4013      	ands	r3, r2
 800a532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a53a:	6003      	str	r3, [r0, #0]
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop

0800a540 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800a540:	0080      	lsls	r0, r0, #2
 800a542:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a546:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a54a:	6803      	ldr	r3, [r0, #0]
 800a54c:	045b      	lsls	r3, r3, #17
 800a54e:	d508      	bpl.n	800a562 <ClearDTOG_RX+0x22>
 800a550:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a554:	6803      	ldr	r3, [r0, #0]
 800a556:	4013      	ands	r3, r2
 800a558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a55c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a560:	6003      	str	r3, [r0, #0]
 800a562:	4770      	bx	lr

0800a564 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800a564:	0080      	lsls	r0, r0, #2
 800a566:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a56a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a56e:	6803      	ldr	r3, [r0, #0]
 800a570:	065b      	lsls	r3, r3, #25
 800a572:	d508      	bpl.n	800a586 <ClearDTOG_TX+0x22>
 800a574:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a578:	6803      	ldr	r3, [r0, #0]
 800a57a:	4013      	ands	r3, r2
 800a57c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a584:	6003      	str	r3, [r0, #0]
 800a586:	4770      	bx	lr

0800a588 <SetEPTxAddr>:
 800a588:	4b06      	ldr	r3, [pc, #24]	; (800a5a4 <SetEPTxAddr+0x1c>)
 800a58a:	0849      	lsrs	r1, r1, #1
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	0049      	lsls	r1, r1, #1
 800a590:	b29b      	uxth	r3, r3
 800a592:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a596:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800a59a:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800a59e:	0040      	lsls	r0, r0, #1
 800a5a0:	6001      	str	r1, [r0, #0]
 800a5a2:	4770      	bx	lr
 800a5a4:	40005c50 	.word	0x40005c50

0800a5a8 <SetEPRxAddr>:
 800a5a8:	4a05      	ldr	r2, [pc, #20]	; (800a5c0 <SetEPRxAddr+0x18>)
 800a5aa:	4b06      	ldr	r3, [pc, #24]	; (800a5c4 <SetEPRxAddr+0x1c>)
 800a5ac:	6812      	ldr	r2, [r2, #0]
 800a5ae:	0849      	lsrs	r1, r1, #1
 800a5b0:	b292      	uxth	r2, r2
 800a5b2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a5b6:	4413      	add	r3, r2
 800a5b8:	0049      	lsls	r1, r1, #1
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	6019      	str	r1, [r3, #0]
 800a5be:	4770      	bx	lr
 800a5c0:	40005c50 	.word	0x40005c50
 800a5c4:	20003004 	.word	0x20003004

0800a5c8 <GetEPTxAddr>:
 800a5c8:	4b05      	ldr	r3, [pc, #20]	; (800a5e0 <GetEPTxAddr+0x18>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a5d2:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800a5d6:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800a5da:	0040      	lsls	r0, r0, #1
 800a5dc:	8800      	ldrh	r0, [r0, #0]
 800a5de:	4770      	bx	lr
 800a5e0:	40005c50 	.word	0x40005c50

0800a5e4 <GetEPRxAddr>:
 800a5e4:	4a04      	ldr	r2, [pc, #16]	; (800a5f8 <GetEPRxAddr+0x14>)
 800a5e6:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <GetEPRxAddr+0x18>)
 800a5e8:	6812      	ldr	r2, [r2, #0]
 800a5ea:	b292      	uxth	r2, r2
 800a5ec:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a5f0:	4403      	add	r3, r0
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	8818      	ldrh	r0, [r3, #0]
 800a5f6:	4770      	bx	lr
 800a5f8:	40005c50 	.word	0x40005c50
 800a5fc:	20003004 	.word	0x20003004

0800a600 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800a600:	4a04      	ldr	r2, [pc, #16]	; (800a614 <SetEPTxCount+0x14>)
 800a602:	4b05      	ldr	r3, [pc, #20]	; (800a618 <SetEPTxCount+0x18>)
 800a604:	6812      	ldr	r2, [r2, #0]
 800a606:	b292      	uxth	r2, r2
 800a608:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a60c:	4403      	add	r3, r0
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	6019      	str	r1, [r3, #0]
 800a612:	4770      	bx	lr
 800a614:	40005c50 	.word	0x40005c50
 800a618:	20003002 	.word	0x20003002

0800a61c <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800a61c:	4a0e      	ldr	r2, [pc, #56]	; (800a658 <SetEPRxCount+0x3c>)
 800a61e:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <SetEPRxCount+0x40>)
 800a620:	6812      	ldr	r2, [r2, #0]
 800a622:	293e      	cmp	r1, #62	; 0x3e
 800a624:	b292      	uxth	r2, r2
 800a626:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a62a:	4403      	add	r3, r0
 800a62c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a630:	d90a      	bls.n	800a648 <SetEPRxCount+0x2c>
 800a632:	094a      	lsrs	r2, r1, #5
 800a634:	06c8      	lsls	r0, r1, #27
 800a636:	bf04      	itt	eq
 800a638:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a63c:	b292      	uxtheq	r2, r2
 800a63e:	0292      	lsls	r2, r2, #10
 800a640:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	4770      	bx	lr
 800a648:	084a      	lsrs	r2, r1, #1
 800a64a:	07c9      	lsls	r1, r1, #31
 800a64c:	bf48      	it	mi
 800a64e:	3201      	addmi	r2, #1
 800a650:	0292      	lsls	r2, r2, #10
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	40005c50 	.word	0x40005c50
 800a65c:	20003006 	.word	0x20003006

0800a660 <GetEPRxCount>:
 800a660:	4a05      	ldr	r2, [pc, #20]	; (800a678 <GetEPRxCount+0x18>)
 800a662:	4b06      	ldr	r3, [pc, #24]	; (800a67c <GetEPRxCount+0x1c>)
 800a664:	6812      	ldr	r2, [r2, #0]
 800a666:	b292      	uxth	r2, r2
 800a668:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a66c:	4403      	add	r3, r0
 800a66e:	005b      	lsls	r3, r3, #1
 800a670:	6818      	ldr	r0, [r3, #0]
 800a672:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a676:	4770      	bx	lr
 800a678:	40005c50 	.word	0x40005c50
 800a67c:	20003006 	.word	0x20003006

0800a680 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800a680:	b2c3      	uxtb	r3, r0
 800a682:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800a684:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop

0800a68c <USB_SIL_Init>:
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800a68c:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 800a68e:	f44f 4306 	mov.w	r3, #34304	; 0x8600
{
 800a692:	b410      	push	{r4}
  wInterrupt_Mask = IMR_MSK;
 800a694:	4903      	ldr	r1, [pc, #12]	; (800a6a4 <USB_SIL_Init+0x18>)
  _SetISTR(0);
 800a696:	4c04      	ldr	r4, [pc, #16]	; (800a6a8 <USB_SIL_Init+0x1c>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800a698:	4a04      	ldr	r2, [pc, #16]	; (800a6ac <USB_SIL_Init+0x20>)
  _SetISTR(0);
 800a69a:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800a69c:	800b      	strh	r3, [r1, #0]
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 800a69e:	bc10      	pop	{r4}
  _SetCNTR(wInterrupt_Mask);
 800a6a0:	6013      	str	r3, [r2, #0]
}
 800a6a2:	4770      	bx	lr
 800a6a4:	2000130c 	.word	0x2000130c
 800a6a8:	40005c44 	.word	0x40005c44
 800a6ac:	40005c40 	.word	0x40005c40

0800a6b0 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800a6b0:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800a6b2:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800a6b6:	4628      	mov	r0, r5
{
 800a6b8:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800a6ba:	f7ff ffd1 	bl	800a660 <GetEPRxCount>
 800a6be:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f7ff ff8f 	bl	800a5e4 <GetEPRxAddr>
 800a6c6:	4622      	mov	r2, r4
 800a6c8:	4601      	mov	r1, r0
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7ff fea6 	bl	800a41c <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}

0800a6d4 <Set_USBClock>:

/*******************************************************************************
 * Description    : Configures USB Clock input (48MHz)
 *******************************************************************************/
void Set_USBClock(void)
{
 800a6d4:	b508      	push	{r3, lr}
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	f7f7 f8a8 	bl	800182c <RCC_USBCLKConfig>

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
}
 800a6dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a6e6:	f7f7 b8b3 	b.w	8001850 <RCC_APB1PeriphClockCmd>
 800a6ea:	bf00      	nop

0800a6ec <USB_Interrupts_Config>:

/*******************************************************************************
 * Description    : Configures the USB interrupts
 *******************************************************************************/
void USB_Interrupts_Config(void)
{
 800a6ec:	b500      	push	{lr}
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800a6ee:	f44f 60c0 	mov.w	r0, #1536	; 0x600
{
 800a6f2:	b083      	sub	sp, #12
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800a6f4:	f7f6 fcfe 	bl	80010f4 <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800a6f8:	4b04      	ldr	r3, [pc, #16]	; (800a70c <USB_Interrupts_Config+0x20>)
 800a6fa:	a802      	add	r0, sp, #8
 800a6fc:	f840 3d04 	str.w	r3, [r0, #-4]!
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800a700:	f7f6 fd02 	bl	8001108 <NVIC_Init>
}
 800a704:	b003      	add	sp, #12
 800a706:	f85d fb04 	ldr.w	pc, [sp], #4
 800a70a:	bf00      	nop
 800a70c:	01000114 	.word	0x01000114

0800a710 <USB_Cable_Config>:

/*******************************************************************************
 * Description    : Software Connection/Disconnection of USB Cable
 *******************************************************************************/
void USB_Cable_Config(FunctionalState NewState)
{
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop

0800a714 <Get_SerialNum>:
 *******************************************************************************/
void Get_SerialNum(void)
{
	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800a714:	4a3a      	ldr	r2, [pc, #232]	; (800a800 <Get_SerialNum+0xec>)
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800a716:	493b      	ldr	r1, [pc, #236]	; (800a804 <Get_SerialNum+0xf0>)
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800a718:	4b3b      	ldr	r3, [pc, #236]	; (800a808 <Get_SerialNum+0xf4>)
	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800a71a:	6812      	ldr	r2, [r2, #0]
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800a71c:	6809      	ldr	r1, [r1, #0]
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800a71e:	681b      	ldr	r3, [r3, #0]

	Device_Serial0 += Device_Serial2;

	if (Device_Serial0 != 0)
 800a720:	18d2      	adds	r2, r2, r3
 800a722:	d06c      	beq.n	800a7fe <Get_SerialNum+0xea>
{
 800a724:	b410      	push	{r4}
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;

		pbuf[2 * idx + 1] = 0;
 800a726:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800a728:	0f10      	lsrs	r0, r2, #28
			pbuf[2 * idx] = (value >> 28) + '0';
 800a72a:	4b38      	ldr	r3, [pc, #224]	; (800a80c <Get_SerialNum+0xf8>)
		if (((value >> 28)) < 0xA)
 800a72c:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a72e:	bf94      	ite	ls
 800a730:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a732:	3037      	addhi	r0, #55	; 0x37
 800a734:	7098      	strb	r0, [r3, #2]
		if (((value >> 28)) < 0xA)
 800a736:	f3c2 6003 	ubfx	r0, r2, #24, #4
 800a73a:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a73c:	bf94      	ite	ls
 800a73e:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a740:	3037      	addhi	r0, #55	; 0x37
 800a742:	7118      	strb	r0, [r3, #4]
		if (((value >> 28)) < 0xA)
 800a744:	f3c2 5003 	ubfx	r0, r2, #20, #4
 800a748:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a74a:	bf94      	ite	ls
 800a74c:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a74e:	3037      	addhi	r0, #55	; 0x37
 800a750:	7198      	strb	r0, [r3, #6]
		if (((value >> 28)) < 0xA)
 800a752:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800a756:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a758:	bf94      	ite	ls
 800a75a:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a75c:	3037      	addhi	r0, #55	; 0x37
 800a75e:	7218      	strb	r0, [r3, #8]
		if (((value >> 28)) < 0xA)
 800a760:	f3c2 3003 	ubfx	r0, r2, #12, #4
 800a764:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a766:	bf94      	ite	ls
 800a768:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a76a:	3037      	addhi	r0, #55	; 0x37
 800a76c:	7298      	strb	r0, [r3, #10]
		if (((value >> 28)) < 0xA)
 800a76e:	f3c2 2003 	ubfx	r0, r2, #8, #4
 800a772:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a774:	bf94      	ite	ls
 800a776:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a778:	3037      	addhi	r0, #55	; 0x37
 800a77a:	7318      	strb	r0, [r3, #12]
		if (((value >> 28)) < 0xA)
 800a77c:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800a780:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a782:	bf94      	ite	ls
 800a784:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a786:	3037      	addhi	r0, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800a788:	70dc      	strb	r4, [r3, #3]
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a78a:	7398      	strb	r0, [r3, #14]
		pbuf[2 * idx + 1] = 0;
 800a78c:	2400      	movs	r4, #0
 800a78e:	2000      	movs	r0, #0
 800a790:	715c      	strb	r4, [r3, #5]
 800a792:	73d8      	strb	r0, [r3, #15]
 800a794:	2400      	movs	r4, #0
 800a796:	2000      	movs	r0, #0
 800a798:	71dc      	strb	r4, [r3, #7]
 800a79a:	7458      	strb	r0, [r3, #17]
 800a79c:	2400      	movs	r4, #0
 800a79e:	2000      	movs	r0, #0
 800a7a0:	725c      	strb	r4, [r3, #9]
 800a7a2:	74d8      	strb	r0, [r3, #19]
 800a7a4:	2400      	movs	r4, #0
 800a7a6:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800a7a8:	f002 020f 	and.w	r2, r2, #15
 800a7ac:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7ae:	bf94      	ite	ls
 800a7b0:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7b2:	3237      	addhi	r2, #55	; 0x37
 800a7b4:	741a      	strb	r2, [r3, #16]
		if (((value >> 28)) < 0xA)
 800a7b6:	0f0a      	lsrs	r2, r1, #28
 800a7b8:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7ba:	bf94      	ite	ls
 800a7bc:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7be:	3237      	addhi	r2, #55	; 0x37
 800a7c0:	749a      	strb	r2, [r3, #18]
		if (((value >> 28)) < 0xA)
 800a7c2:	f3c1 6203 	ubfx	r2, r1, #24, #4
 800a7c6:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7c8:	bf94      	ite	ls
 800a7ca:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7cc:	3237      	addhi	r2, #55	; 0x37
 800a7ce:	751a      	strb	r2, [r3, #20]
		if (((value >> 28)) < 0xA)
 800a7d0:	f3c1 5203 	ubfx	r2, r1, #20, #4
 800a7d4:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7d6:	bf94      	ite	ls
 800a7d8:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7da:	3237      	addhi	r2, #55	; 0x37
 800a7dc:	759a      	strb	r2, [r3, #22]
		if (((value >> 28)) < 0xA)
 800a7de:	f3c1 4203 	ubfx	r2, r1, #16, #4
 800a7e2:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7e4:	bf94      	ite	ls
 800a7e6:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7e8:	3237      	addhi	r2, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800a7ea:	72dc      	strb	r4, [r3, #11]
 800a7ec:	7558      	strb	r0, [r3, #21]
 800a7ee:	2400      	movs	r4, #0
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7f0:	761a      	strb	r2, [r3, #24]
		pbuf[2 * idx + 1] = 0;
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	735c      	strb	r4, [r3, #13]
 800a7f8:	75d8      	strb	r0, [r3, #23]
 800a7fa:	765a      	strb	r2, [r3, #25]
}
 800a7fc:	bc10      	pop	{r4}
 800a7fe:	4770      	bx	lr
 800a800:	1ffff7e8 	.word	0x1ffff7e8
 800a804:	1ffff7ec 	.word	0x1ffff7ec
 800a808:	1ffff7f0 	.word	0x1ffff7f0
 800a80c:	20000008 	.word	0x20000008

0800a810 <EP1_IN_Callback.part.0>:
	uint8_t head;

	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
	head = serial_tx_buffer_head;
	txUsbLock = 0; // this may be removed
 800a810:	2100      	movs	r1, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a812:	2001      	movs	r0, #1
void EP1_IN_Callback(void)
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a816:	4b2a      	ldr	r3, [pc, #168]	; (800a8c0 <EP1_IN_Callback.part.0+0xb0>)

	if ((head != serial_tx_buffer_tail)) {
 800a818:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a8d0 <EP1_IN_Callback.part.0+0xc0>
	head = serial_tx_buffer_head;
 800a81c:	4a29      	ldr	r2, [pc, #164]	; (800a8c4 <EP1_IN_Callback.part.0+0xb4>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a81e:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 800a820:	7019      	strb	r1, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 800a822:	f89c 3000 	ldrb.w	r3, [ip]
	head = serial_tx_buffer_head;
 800a826:	7811      	ldrb	r1, [r2, #0]
	if ((head != serial_tx_buffer_tail)) {
 800a828:	4299      	cmp	r1, r3
 800a82a:	d040      	beq.n	800a8ae <EP1_IN_Callback.part.0+0x9e>
		if (head > serial_tx_buffer_tail)
 800a82c:	f89c 3000 	ldrb.w	r3, [ip]
 800a830:	4299      	cmp	r1, r3
			USB_Tx_length = head - serial_tx_buffer_tail;
 800a832:	f89c 3000 	ldrb.w	r3, [ip]
		else
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 800a836:	bf98      	it	ls
 800a838:	3180      	addls	r1, #128	; 0x80
 800a83a:	1ac9      	subs	r1, r1, r3
 800a83c:	b289      	uxth	r1, r1

		if (USB_Tx_length != 0) {
 800a83e:	2900      	cmp	r1, #0
 800a840:	d035      	beq.n	800a8ae <EP1_IN_Callback.part.0+0x9e>
 800a842:	2940      	cmp	r1, #64	; 0x40
				USB_Tx_length = 64;

			// UserToPMABufferCopy(&serial_tx_buffer[serial_tx_buffer_tail], ENDP1_TXADDR, USB_Tx_length);

			{
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a844:	4e20      	ldr	r6, [pc, #128]	; (800a8c8 <EP1_IN_Callback.part.0+0xb8>)
 800a846:	bf28      	it	cs
 800a848:	2140      	movcs	r1, #64	; 0x40
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
				uint32_t i;
				uint16_t temp1;
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);

				for (i = 0; i<n; i++) {
 800a84a:	2500      	movs	r5, #0
 800a84c:	4637      	mov	r7, r6
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a84e:	f89c 2000 	ldrb.w	r2, [ip]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800a852:	f101 0e01 	add.w	lr, r1, #1
 800a856:	4c1d      	ldr	r4, [pc, #116]	; (800a8cc <EP1_IN_Callback.part.0+0xbc>)
 800a858:	ea4f 0e6e 	mov.w	lr, lr, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a85c:	4432      	add	r2, r6
					temp1 = (uint16_t) *pbUsrBuf;
					pbUsrBuf++;
 800a85e:	1c53      	adds	r3, r2, #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800a860:	1b98      	subs	r0, r3, r6
						pbUsrBuf = serial_tx_buffer;

					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a862:	2880      	cmp	r0, #128	; 0x80
 800a864:	bf08      	it	eq
 800a866:	463b      	moveq	r3, r7
 800a868:	7810      	ldrb	r0, [r2, #0]
 800a86a:	f813 2b01 	ldrb.w	r2, [r3], #1
				for (i = 0; i<n; i++) {
 800a86e:	3501      	adds	r5, #1
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a870:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
					pdwVal++;
					pbUsrBuf++;
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800a874:	1b9a      	subs	r2, r3, r6
 800a876:	2a80      	cmp	r2, #128	; 0x80
 800a878:	bf14      	ite	ne
 800a87a:	461a      	movne	r2, r3
 800a87c:	463a      	moveq	r2, r7
				for (i = 0; i<n; i++) {
 800a87e:	45ae      	cmp	lr, r5
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a880:	f824 0c04 	strh.w	r0, [r4, #-4]
 800a884:	f104 0404 	add.w	r4, r4, #4
				for (i = 0; i<n; i++) {
 800a888:	d8e9      	bhi.n	800a85e <EP1_IN_Callback.part.0+0x4e>
						pbUsrBuf = serial_tx_buffer;
					}
			}

		serial_tx_buffer_tail += USB_Tx_length;
 800a88a:	f89c 3000 	ldrb.w	r3, [ip]
 800a88e:	440b      	add	r3, r1
 800a890:	b2db      	uxtb	r3, r3
 800a892:	f88c 3000 	strb.w	r3, [ip]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800a896:	f89c 3000 	ldrb.w	r3, [ip]
 800a89a:	061b      	lsls	r3, r3, #24
 800a89c:	d408      	bmi.n	800a8b0 <EP1_IN_Callback.part.0+0xa0>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
		SetEPTxCount(ENDP1, USB_Tx_length);
 800a89e:	2001      	movs	r0, #1
 800a8a0:	f7ff feae 	bl	800a600 <SetEPTxCount>
		SetEPTxValid(ENDP1);
		}
	}
}
 800a8a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SetEPTxValid(ENDP1);
 800a8a8:	2001      	movs	r0, #1
 800a8aa:	f7ff be11 	b.w	800a4d0 <SetEPTxValid>
 800a8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 800a8b0:	f89c 3000 	ldrb.w	r3, [ip]
 800a8b4:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800a8b8:	f88c 3000 	strb.w	r3, [ip]
 800a8bc:	e7ef      	b.n	800a89e <EP1_IN_Callback.part.0+0x8e>
 800a8be:	bf00      	nop
 800a8c0:	20000c0c 	.word	0x20000c0c
 800a8c4:	20000a5a 	.word	0x20000a5a
 800a8c8:	200010ec 	.word	0x200010ec
 800a8cc:	40006184 	.word	0x40006184
 800a8d0:	20000a5b 	.word	0x20000a5b

0800a8d4 <EP3_OUT_Callback>:
{
 800a8d4:	b510      	push	{r4, lr}
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800a8d6:	4c07      	ldr	r4, [pc, #28]	; (800a8f4 <EP3_OUT_Callback+0x20>)
 800a8d8:	2003      	movs	r0, #3
 800a8da:	4621      	mov	r1, r4
 800a8dc:	f7ff fee8 	bl	800a6b0 <USB_SIL_Read>
	OnUsbDataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800a8e0:	b2c1      	uxtb	r1, r0
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f7fc fda4 	bl	8007430 <OnUsbDataRx>
}
 800a8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SetEPRxValid(ENDP3);
 800a8ec:	2003      	movs	r0, #3
 800a8ee:	f7ff be03 	b.w	800a4f8 <SetEPRxValid>
 800a8f2:	bf00      	nop
 800a8f4:	20001314 	.word	0x20001314

0800a8f8 <EP1_IN_Callback>:
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800a8f8:	4b04      	ldr	r3, [pc, #16]	; (800a90c <EP1_IN_Callback+0x14>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a900:	2b20      	cmp	r3, #32
 800a902:	d000      	beq.n	800a906 <EP1_IN_Callback+0xe>
 800a904:	4770      	bx	lr
 800a906:	f7ff bf83 	b.w	800a810 <EP1_IN_Callback.part.0>
 800a90a:	bf00      	nop
 800a90c:	40005c04 	.word	0x40005c04

0800a910 <SOF_Callback>:

/*	\brief Start Of Frame (SOF) callback
 */
void SOF_Callback(void)
{
	if(bDeviceState == CONFIGURED)
 800a910:	4b06      	ldr	r3, [pc, #24]	; (800a92c <SOF_Callback+0x1c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b05      	cmp	r3, #5
 800a916:	d000      	beq.n	800a91a <SOF_Callback+0xa>
 800a918:	4770      	bx	lr
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800a91a:	4b05      	ldr	r3, [pc, #20]	; (800a930 <SOF_Callback+0x20>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a922:	2b20      	cmp	r3, #32
 800a924:	d1f8      	bne.n	800a918 <SOF_Callback+0x8>
 800a926:	f7ff bf73 	b.w	800a810 <EP1_IN_Callback.part.0>
 800a92a:	bf00      	nop
 800a92c:	20000c10 	.word	0x20000c10
 800a930:	40005c04 	.word	0x40005c04

0800a934 <USB_Istr>:
* Return         :
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 800a934:	4917      	ldr	r1, [pc, #92]	; (800a994 <USB_Istr+0x60>)
{
 800a936:	b570      	push	{r4, r5, r6, lr}
  wIstr = _GetISTR();
 800a938:	680b      	ldr	r3, [r1, #0]
 800a93a:	4c17      	ldr	r4, [pc, #92]	; (800a998 <USB_Istr+0x64>)
 800a93c:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800a93e:	4d17      	ldr	r5, [pc, #92]	; (800a99c <USB_Istr+0x68>)
  wIstr = _GetISTR();
 800a940:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800a942:	8822      	ldrh	r2, [r4, #0]
 800a944:	882b      	ldrh	r3, [r5, #0]
 800a946:	401a      	ands	r2, r3
 800a948:	0590      	lsls	r0, r2, #22
 800a94a:	d416      	bmi.n	800a97a <USB_Istr+0x46>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800a94c:	8822      	ldrh	r2, [r4, #0]
 800a94e:	401a      	ands	r2, r3
 800a950:	0412      	lsls	r2, r2, #16
 800a952:	d40e      	bmi.n	800a972 <USB_Istr+0x3e>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800a954:	8822      	ldrh	r2, [r4, #0]
 800a956:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800a95a:	4213      	tst	r3, r2
 800a95c:	d100      	bne.n	800a960 <USB_Istr+0x2c>
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
  {
    _SetISTR((uint16_t)CLR_RESET);
 800a960:	f64f 31ff 	movw	r1, #64511	; 0xfbff
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800a964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SetISTR((uint16_t)CLR_RESET);
 800a968:	4a0a      	ldr	r2, [pc, #40]	; (800a994 <USB_Istr+0x60>)
    Device_Property.Reset();
 800a96a:	4b0d      	ldr	r3, [pc, #52]	; (800a9a0 <USB_Istr+0x6c>)
    _SetISTR((uint16_t)CLR_RESET);
 800a96c:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	4718      	bx	r3
    CTR_LP();
 800a972:	f7ff fc7f 	bl	800a274 <CTR_LP>
 800a976:	882b      	ldrh	r3, [r5, #0]
 800a978:	e7ec      	b.n	800a954 <USB_Istr+0x20>
    _SetISTR((uint16_t)CLR_SOF);
 800a97a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 800a97e:	4a09      	ldr	r2, [pc, #36]	; (800a9a4 <USB_Istr+0x70>)
    _SetISTR((uint16_t)CLR_SOF);
 800a980:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 800a982:	7813      	ldrb	r3, [r2, #0]
 800a984:	3301      	adds	r3, #1
 800a986:	b2db      	uxtb	r3, r3
 800a988:	7013      	strb	r3, [r2, #0]
    SOF_Callback();
 800a98a:	f7ff ffc1 	bl	800a910 <SOF_Callback>
 800a98e:	882b      	ldrh	r3, [r5, #0]
 800a990:	e7dc      	b.n	800a94c <USB_Istr+0x18>
 800a992:	bf00      	nop
 800a994:	40005c44 	.word	0x40005c44
 800a998:	20001354 	.word	0x20001354
 800a99c:	2000130c 	.word	0x2000130c
 800a9a0:	2000006c 	.word	0x2000006c
 800a9a4:	20000c0d 	.word	0x20000c0d

0800a9a8 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 800a9a8:	4b03      	ldr	r3, [pc, #12]	; (800a9b8 <Virtual_Com_Port_SetConfiguration+0x10>)
 800a9aa:	7a9b      	ldrb	r3, [r3, #10]
 800a9ac:	b113      	cbz	r3, 800a9b4 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800a9ae:	2205      	movs	r2, #5
 800a9b0:	4b02      	ldr	r3, [pc, #8]	; (800a9bc <Virtual_Com_Port_SetConfiguration+0x14>)
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	200012e8 	.word	0x200012e8
 800a9bc:	20000c10 	.word	0x20000c10

0800a9c0 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800a9c0:	2204      	movs	r2, #4
 800a9c2:	4b01      	ldr	r3, [pc, #4]	; (800a9c8 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 800a9c4:	601a      	str	r2, [r3, #0]
 800a9c6:	4770      	bx	lr
 800a9c8:	20000c10 	.word	0x20000c10

0800a9cc <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 800a9cc:	4b03      	ldr	r3, [pc, #12]	; (800a9dc <Virtual_Com_Port_Status_In+0x10>)
 800a9ce:	781a      	ldrb	r2, [r3, #0]
 800a9d0:	2a20      	cmp	r2, #32
  {
    Request = 0;
 800a9d2:	bf04      	itt	eq
 800a9d4:	2200      	moveq	r2, #0
 800a9d6:	701a      	strbeq	r2, [r3, #0]
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	20000c0e 	.word	0x20000c0e

0800a9e0 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop

0800a9e4 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800a9e4:	2821      	cmp	r0, #33	; 0x21
 800a9e6:	d004      	beq.n	800a9f2 <Virtual_Com_Port_Data_Setup+0xe>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800a9e8:	2820      	cmp	r0, #32
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	d011      	beq.n	800aa12 <Virtual_Com_Port_Data_Setup+0x2e>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800a9ee:	2002      	movs	r0, #2
 800a9f0:	4770      	bx	lr
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800a9f2:	4b0f      	ldr	r3, [pc, #60]	; (800aa30 <Virtual_Com_Port_Data_Setup+0x4c>)
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	7813      	ldrb	r3, [r2, #0]
 800a9f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9fc:	2b21      	cmp	r3, #33	; 0x21
 800a9fe:	d1f6      	bne.n	800a9ee <Virtual_Com_Port_Data_Setup+0xa>
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800aa00:	490c      	ldr	r1, [pc, #48]	; (800aa34 <Virtual_Com_Port_Data_Setup+0x50>)
{
 800aa02:	b510      	push	{r4, lr}
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800aa04:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800aa06:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800aa08:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	4788      	blx	r1
  return USB_SUCCESS;
 800aa0e:	4620      	mov	r0, r4
 800aa10:	bd10      	pop	{r4, pc}
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800aa12:	4a07      	ldr	r2, [pc, #28]	; (800aa30 <Virtual_Com_Port_Data_Setup+0x4c>)
 800aa14:	6812      	ldr	r2, [r2, #0]
 800aa16:	7811      	ldrb	r1, [r2, #0]
 800aa18:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800aa1c:	2921      	cmp	r1, #33	; 0x21
 800aa1e:	d003      	beq.n	800aa28 <Virtual_Com_Port_Data_Setup+0x44>
    Request = SET_LINE_CODING;
 800aa20:	4a05      	ldr	r2, [pc, #20]	; (800aa38 <Virtual_Com_Port_Data_Setup+0x54>)
    return USB_UNSUPPORT;
 800aa22:	2002      	movs	r0, #2
    Request = SET_LINE_CODING;
 800aa24:	7013      	strb	r3, [r2, #0]
 800aa26:	4770      	bx	lr
 800aa28:	4803      	ldr	r0, [pc, #12]	; (800aa38 <Virtual_Com_Port_Data_Setup+0x54>)
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800aa2a:	4904      	ldr	r1, [pc, #16]	; (800aa3c <Virtual_Com_Port_Data_Setup+0x58>)
    Request = SET_LINE_CODING;
 800aa2c:	7003      	strb	r3, [r0, #0]
 800aa2e:	e7e8      	b.n	800aa02 <Virtual_Com_Port_Data_Setup+0x1e>
 800aa30:	20001308 	.word	0x20001308
 800aa34:	0800abc9 	.word	0x0800abc9
 800aa38:	20000c0e 	.word	0x20000c0e
 800aa3c:	0800aa75 	.word	0x0800aa75

0800aa40 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800aa40:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <Virtual_Com_Port_NoData_Setup+0x20>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa4a:	2b21      	cmp	r3, #33	; 0x21
 800aa4c:	d001      	beq.n	800aa52 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800aa4e:	2002      	movs	r0, #2
}
 800aa50:	4770      	bx	lr
    if (RequestNo == SET_COMM_FEATURE)
 800aa52:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aa56:	2802      	cmp	r0, #2
      return USB_SUCCESS;
 800aa58:	bf14      	ite	ne
 800aa5a:	2002      	movne	r0, #2
 800aa5c:	2000      	moveq	r0, #0
 800aa5e:	4770      	bx	lr
 800aa60:	20001308 	.word	0x20001308

0800aa64 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800aa64:	b109      	cbz	r1, 800aa6a <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800aa66:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 800aa68:	4770      	bx	lr
  else if (Interface > 1)
 800aa6a:	2801      	cmp	r0, #1
  return USB_SUCCESS;
 800aa6c:	bf8c      	ite	hi
 800aa6e:	2002      	movhi	r0, #2
 800aa70:	2000      	movls	r0, #0
 800aa72:	4770      	bx	lr

0800aa74 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800aa74:	b108      	cbz	r0, 800aa7a <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800aa76:	4803      	ldr	r0, [pc, #12]	; (800aa84 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 800aa78:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800aa7a:	2208      	movs	r2, #8
 800aa7c:	4b02      	ldr	r3, [pc, #8]	; (800aa88 <Virtual_Com_Port_SetLineCoding+0x14>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	821a      	strh	r2, [r3, #16]
    return NULL;
 800aa82:	4770      	bx	lr
 800aa84:	200000e4 	.word	0x200000e4
 800aa88:	20001308 	.word	0x20001308

0800aa8c <Virtual_Com_Port_init>:
{
 800aa8c:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800aa8e:	2400      	movs	r4, #0
  Get_SerialNum();
 800aa90:	f7ff fe40 	bl	800a714 <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 800aa94:	4b04      	ldr	r3, [pc, #16]	; (800aaa8 <Virtual_Com_Port_init+0x1c>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	729c      	strb	r4, [r3, #10]
  PowerOn();
 800aa9a:	f000 f8a1 	bl	800abe0 <PowerOn>
  USB_SIL_Init();
 800aa9e:	f7ff fdf5 	bl	800a68c <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 800aaa2:	4b02      	ldr	r3, [pc, #8]	; (800aaac <Virtual_Com_Port_init+0x20>)
 800aaa4:	601c      	str	r4, [r3, #0]
 800aaa6:	bd10      	pop	{r4, pc}
 800aaa8:	20001308 	.word	0x20001308
 800aaac:	20000c10 	.word	0x20000c10

0800aab0 <Virtual_Com_Port_Reset>:
{
 800aab0:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800aab2:	2400      	movs	r4, #0
 800aab4:	4b32      	ldr	r3, [pc, #200]	; (800ab80 <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800aab6:	4a33      	ldr	r2, [pc, #204]	; (800ab84 <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 800aab8:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800aaba:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 800aabc:	729c      	strb	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800aabe:	725a      	strb	r2, [r3, #9]
  pInformation->Current_Interface = 0;
 800aac0:	72dc      	strb	r4, [r3, #11]
  SetBTABLE(BTABLE_ADDRESS);
 800aac2:	4620      	mov	r0, r4
 800aac4:	f7ff fcba 	bl	800a43c <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 800aac8:	4620      	mov	r0, r4
 800aaca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aace:	f7ff fcbd 	bl	800a44c <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800aad2:	4620      	mov	r0, r4
 800aad4:	2110      	movs	r1, #16
 800aad6:	f7ff fcc7 	bl	800a468 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800aada:	4620      	mov	r0, r4
 800aadc:	2140      	movs	r1, #64	; 0x40
 800aade:	f7ff fd63 	bl	800a5a8 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800aae2:	2180      	movs	r1, #128	; 0x80
 800aae4:	4620      	mov	r0, r4
 800aae6:	f7ff fd4f 	bl	800a588 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 800aaea:	4620      	mov	r0, r4
 800aaec:	f7ff fd18 	bl	800a520 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800aaf0:	4b25      	ldr	r3, [pc, #148]	; (800ab88 <Virtual_Com_Port_Reset+0xd8>)
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800aaf8:	f7ff fd90 	bl	800a61c <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800aafc:	4620      	mov	r0, r4
 800aafe:	f7ff fcfb 	bl	800a4f8 <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 800ab02:	4621      	mov	r1, r4
 800ab04:	2001      	movs	r0, #1
 800ab06:	f7ff fca1 	bl	800a44c <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800ab0a:	21c0      	movs	r1, #192	; 0xc0
 800ab0c:	2001      	movs	r0, #1
 800ab0e:	f7ff fd3b 	bl	800a588 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800ab12:	2120      	movs	r1, #32
 800ab14:	2001      	movs	r0, #1
 800ab16:	f7ff fca7 	bl	800a468 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	2001      	movs	r0, #1
 800ab1e:	f7ff fcbd 	bl	800a49c <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 800ab22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ab26:	2002      	movs	r0, #2
 800ab28:	f7ff fc90 	bl	800a44c <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800ab2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab30:	2002      	movs	r0, #2
 800ab32:	f7ff fd29 	bl	800a588 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800ab36:	4621      	mov	r1, r4
 800ab38:	2002      	movs	r0, #2
 800ab3a:	f7ff fcaf 	bl	800a49c <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800ab3e:	2120      	movs	r1, #32
 800ab40:	2002      	movs	r0, #2
 800ab42:	f7ff fc91 	bl	800a468 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 800ab46:	4621      	mov	r1, r4
 800ab48:	2003      	movs	r0, #3
 800ab4a:	f7ff fc7f 	bl	800a44c <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800ab4e:	f44f 7188 	mov.w	r1, #272	; 0x110
 800ab52:	2003      	movs	r0, #3
 800ab54:	f7ff fd28 	bl	800a5a8 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800ab58:	2140      	movs	r1, #64	; 0x40
 800ab5a:	2003      	movs	r0, #3
 800ab5c:	f7ff fd5e 	bl	800a61c <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800ab60:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800ab64:	2003      	movs	r0, #3
 800ab66:	f7ff fc99 	bl	800a49c <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	2003      	movs	r0, #3
 800ab6e:	f7ff fc7b 	bl	800a468 <SetEPTxStatus>
  SetDeviceAddress(0);
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7ff fb40 	bl	800a1f8 <SetDeviceAddress>
  bDeviceState = ATTACHED;
 800ab78:	2201      	movs	r2, #1
 800ab7a:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <Virtual_Com_Port_Reset+0xdc>)
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	bd10      	pop	{r4, pc}
 800ab80:	20001308 	.word	0x20001308
 800ab84:	0800c038 	.word	0x0800c038
 800ab88:	2000006c 	.word	0x2000006c
 800ab8c:	20000c10 	.word	0x20000c10

0800ab90 <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800ab90:	4901      	ldr	r1, [pc, #4]	; (800ab98 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 800ab92:	f7ff b837 	b.w	8009c04 <Standard_GetDescriptorData>
 800ab96:	bf00      	nop
 800ab98:	20000064 	.word	0x20000064

0800ab9c <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800ab9c:	4901      	ldr	r1, [pc, #4]	; (800aba4 <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 800ab9e:	f7ff b831 	b.w	8009c04 <Standard_GetDescriptorData>
 800aba2:	bf00      	nop
 800aba4:	2000005c 	.word	0x2000005c

0800aba8 <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 800aba8:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <Virtual_Com_Port_GetStringDescriptor+0x18>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d804      	bhi.n	800abbc <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800abb2:	4904      	ldr	r1, [pc, #16]	; (800abc4 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800abb4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abb8:	f7ff b824 	b.w	8009c04 <Standard_GetDescriptorData>
}
 800abbc:	2000      	movs	r0, #0
 800abbe:	4770      	bx	lr
 800abc0:	20001308 	.word	0x20001308
 800abc4:	200000a0 	.word	0x200000a0

0800abc8 <Virtual_Com_Port_GetLineCoding>:
 800abc8:	b108      	cbz	r0, 800abce <Virtual_Com_Port_GetLineCoding+0x6>
 800abca:	4803      	ldr	r0, [pc, #12]	; (800abd8 <Virtual_Com_Port_GetLineCoding+0x10>)
 800abcc:	4770      	bx	lr
 800abce:	2208      	movs	r2, #8
 800abd0:	4b02      	ldr	r3, [pc, #8]	; (800abdc <Virtual_Com_Port_GetLineCoding+0x14>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	821a      	strh	r2, [r3, #16]
 800abd6:	4770      	bx	lr
 800abd8:	200000e4 	.word	0x200000e4
 800abdc:	20001308 	.word	0x20001308

0800abe0 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800abe0:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800abe2:	2001      	movs	r0, #1
 800abe4:	f7ff fd94 	bl	800a710 <USB_Cable_Config>
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800abe8:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800abea:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  _SetCNTR(wRegVal);
 800abee:	2001      	movs	r0, #1
 800abf0:	4b04      	ldr	r3, [pc, #16]	; (800ac04 <PowerOn+0x24>)
  _SetISTR(0);
 800abf2:	4d05      	ldr	r5, [pc, #20]	; (800ac08 <PowerOn+0x28>)
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800abf4:	4c05      	ldr	r4, [pc, #20]	; (800ac0c <PowerOn+0x2c>)
  _SetCNTR(wRegVal);
 800abf6:	6018      	str	r0, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800abf8:	601a      	str	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 800abfa:	4610      	mov	r0, r2
  _SetISTR(0);
 800abfc:	602a      	str	r2, [r5, #0]
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800abfe:	8021      	strh	r1, [r4, #0]
  _SetCNTR(wInterrupt_Mask);
 800ac00:	6019      	str	r1, [r3, #0]
}
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	40005c40 	.word	0x40005c40
 800ac08:	40005c44 	.word	0x40005c44
 800ac0c:	2000130c 	.word	0x2000130c

0800ac10 <NMI_Handler>:
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop

0800ac14 <HardFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
 800ac14:	e7fe      	b.n	800ac14 <HardFault_Handler>
 800ac16:	bf00      	nop

0800ac18 <MemManage_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
 800ac18:	e7fe      	b.n	800ac18 <MemManage_Handler>
 800ac1a:	bf00      	nop

0800ac1c <BusFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
 800ac1c:	e7fe      	b.n	800ac1c <BusFault_Handler>
 800ac1e:	bf00      	nop

0800ac20 <UsageFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
 800ac20:	e7fe      	b.n	800ac20 <UsageFault_Handler>
 800ac22:	bf00      	nop

0800ac24 <SVC_Handler>:
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop

0800ac28 <DebugMon_Handler>:
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop

0800ac2c <PendSV_Handler>:
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop

0800ac30 <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 800ac30:	f7ff be80 	b.w	800a934 <USB_Istr>

0800ac34 <__libc_init_array>:
 800ac34:	b570      	push	{r4, r5, r6, lr}
 800ac36:	2500      	movs	r5, #0
 800ac38:	4e0c      	ldr	r6, [pc, #48]	; (800ac6c <__libc_init_array+0x38>)
 800ac3a:	4c0d      	ldr	r4, [pc, #52]	; (800ac70 <__libc_init_array+0x3c>)
 800ac3c:	1ba4      	subs	r4, r4, r6
 800ac3e:	10a4      	asrs	r4, r4, #2
 800ac40:	42a5      	cmp	r5, r4
 800ac42:	d109      	bne.n	800ac58 <__libc_init_array+0x24>
 800ac44:	f001 f8d4 	bl	800bdf0 <_init>
 800ac48:	2500      	movs	r5, #0
 800ac4a:	4e0a      	ldr	r6, [pc, #40]	; (800ac74 <__libc_init_array+0x40>)
 800ac4c:	4c0a      	ldr	r4, [pc, #40]	; (800ac78 <__libc_init_array+0x44>)
 800ac4e:	1ba4      	subs	r4, r4, r6
 800ac50:	10a4      	asrs	r4, r4, #2
 800ac52:	42a5      	cmp	r5, r4
 800ac54:	d105      	bne.n	800ac62 <__libc_init_array+0x2e>
 800ac56:	bd70      	pop	{r4, r5, r6, pc}
 800ac58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac5c:	4798      	blx	r3
 800ac5e:	3501      	adds	r5, #1
 800ac60:	e7ee      	b.n	800ac40 <__libc_init_array+0xc>
 800ac62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac66:	4798      	blx	r3
 800ac68:	3501      	adds	r5, #1
 800ac6a:	e7f2      	b.n	800ac52 <__libc_init_array+0x1e>
 800ac6c:	0800c4bc 	.word	0x0800c4bc
 800ac70:	0800c4bc 	.word	0x0800c4bc
 800ac74:	0800c4bc 	.word	0x0800c4bc
 800ac78:	0800c4c0 	.word	0x0800c4c0

0800ac7c <memcmp>:
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	3901      	subs	r1, #1
 800ac80:	4402      	add	r2, r0
 800ac82:	4290      	cmp	r0, r2
 800ac84:	d101      	bne.n	800ac8a <memcmp+0xe>
 800ac86:	2000      	movs	r0, #0
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ac8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ac92:	42a3      	cmp	r3, r4
 800ac94:	d0f5      	beq.n	800ac82 <memcmp+0x6>
 800ac96:	1b18      	subs	r0, r3, r4
 800ac98:	bd10      	pop	{r4, pc}

0800ac9a <memset>:
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	4402      	add	r2, r0
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d100      	bne.n	800aca4 <memset+0xa>
 800aca2:	4770      	bx	lr
 800aca4:	f803 1b01 	strb.w	r1, [r3], #1
 800aca8:	e7f9      	b.n	800ac9e <memset+0x4>
	...

0800acac <ceilf>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800acb2:	0df5      	lsrs	r5, r6, #23
 800acb4:	3d7f      	subs	r5, #127	; 0x7f
 800acb6:	2d16      	cmp	r5, #22
 800acb8:	4601      	mov	r1, r0
 800acba:	4604      	mov	r4, r0
 800acbc:	dc26      	bgt.n	800ad0c <ceilf+0x60>
 800acbe:	2d00      	cmp	r5, #0
 800acc0:	da0e      	bge.n	800ace0 <ceilf+0x34>
 800acc2:	4918      	ldr	r1, [pc, #96]	; (800ad24 <ceilf+0x78>)
 800acc4:	f7f5 feec 	bl	8000aa0 <__addsf3>
 800acc8:	2100      	movs	r1, #0
 800acca:	f7f6 f9ad 	bl	8001028 <__aeabi_fcmpgt>
 800acce:	b128      	cbz	r0, 800acdc <ceilf+0x30>
 800acd0:	2c00      	cmp	r4, #0
 800acd2:	db23      	blt.n	800ad1c <ceilf+0x70>
 800acd4:	2e00      	cmp	r6, #0
 800acd6:	bf18      	it	ne
 800acd8:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800acdc:	4621      	mov	r1, r4
 800acde:	e01b      	b.n	800ad18 <ceilf+0x6c>
 800ace0:	4e11      	ldr	r6, [pc, #68]	; (800ad28 <ceilf+0x7c>)
 800ace2:	412e      	asrs	r6, r5
 800ace4:	4230      	tst	r0, r6
 800ace6:	d017      	beq.n	800ad18 <ceilf+0x6c>
 800ace8:	490e      	ldr	r1, [pc, #56]	; (800ad24 <ceilf+0x78>)
 800acea:	f7f5 fed9 	bl	8000aa0 <__addsf3>
 800acee:	2100      	movs	r1, #0
 800acf0:	f7f6 f99a 	bl	8001028 <__aeabi_fcmpgt>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d0f1      	beq.n	800acdc <ceilf+0x30>
 800acf8:	2c00      	cmp	r4, #0
 800acfa:	bfc2      	ittt	gt
 800acfc:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800ad00:	fa43 f505 	asrgt.w	r5, r3, r5
 800ad04:	1964      	addgt	r4, r4, r5
 800ad06:	ea24 0406 	bic.w	r4, r4, r6
 800ad0a:	e7e7      	b.n	800acdc <ceilf+0x30>
 800ad0c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ad10:	d302      	bcc.n	800ad18 <ceilf+0x6c>
 800ad12:	f7f5 fec5 	bl	8000aa0 <__addsf3>
 800ad16:	4601      	mov	r1, r0
 800ad18:	4608      	mov	r0, r1
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ad20:	e7dc      	b.n	800acdc <ceilf+0x30>
 800ad22:	bf00      	nop
 800ad24:	7149f2ca 	.word	0x7149f2ca
 800ad28:	007fffff 	.word	0x007fffff

0800ad2c <cosf>:
 800ad2c:	b507      	push	{r0, r1, r2, lr}
 800ad2e:	4a18      	ldr	r2, [pc, #96]	; (800ad90 <cosf+0x64>)
 800ad30:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ad34:	4293      	cmp	r3, r2
 800ad36:	4601      	mov	r1, r0
 800ad38:	dc03      	bgt.n	800ad42 <cosf+0x16>
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	f000 fb52 	bl	800b3e4 <__kernel_cosf>
 800ad40:	e004      	b.n	800ad4c <cosf+0x20>
 800ad42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ad46:	db04      	blt.n	800ad52 <cosf+0x26>
 800ad48:	f7f5 fea8 	bl	8000a9c <__aeabi_fsub>
 800ad4c:	b003      	add	sp, #12
 800ad4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad52:	4669      	mov	r1, sp
 800ad54:	f000 f99c 	bl	800b090 <__ieee754_rem_pio2f>
 800ad58:	f000 0203 	and.w	r2, r0, #3
 800ad5c:	2a01      	cmp	r2, #1
 800ad5e:	d005      	beq.n	800ad6c <cosf+0x40>
 800ad60:	2a02      	cmp	r2, #2
 800ad62:	d00a      	beq.n	800ad7a <cosf+0x4e>
 800ad64:	b972      	cbnz	r2, 800ad84 <cosf+0x58>
 800ad66:	9901      	ldr	r1, [sp, #4]
 800ad68:	9800      	ldr	r0, [sp, #0]
 800ad6a:	e7e7      	b.n	800ad3c <cosf+0x10>
 800ad6c:	9901      	ldr	r1, [sp, #4]
 800ad6e:	9800      	ldr	r0, [sp, #0]
 800ad70:	f000 fe5a 	bl	800ba28 <__kernel_sinf>
 800ad74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ad78:	e7e8      	b.n	800ad4c <cosf+0x20>
 800ad7a:	9901      	ldr	r1, [sp, #4]
 800ad7c:	9800      	ldr	r0, [sp, #0]
 800ad7e:	f000 fb31 	bl	800b3e4 <__kernel_cosf>
 800ad82:	e7f7      	b.n	800ad74 <cosf+0x48>
 800ad84:	2201      	movs	r2, #1
 800ad86:	9901      	ldr	r1, [sp, #4]
 800ad88:	9800      	ldr	r0, [sp, #0]
 800ad8a:	f000 fe4d 	bl	800ba28 <__kernel_sinf>
 800ad8e:	e7dd      	b.n	800ad4c <cosf+0x20>
 800ad90:	3f490fd8 	.word	0x3f490fd8

0800ad94 <floorf>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800ad9a:	0df5      	lsrs	r5, r6, #23
 800ad9c:	3d7f      	subs	r5, #127	; 0x7f
 800ad9e:	2d16      	cmp	r5, #22
 800ada0:	4601      	mov	r1, r0
 800ada2:	4604      	mov	r4, r0
 800ada4:	dc26      	bgt.n	800adf4 <floorf+0x60>
 800ada6:	2d00      	cmp	r5, #0
 800ada8:	da0e      	bge.n	800adc8 <floorf+0x34>
 800adaa:	4917      	ldr	r1, [pc, #92]	; (800ae08 <floorf+0x74>)
 800adac:	f7f5 fe78 	bl	8000aa0 <__addsf3>
 800adb0:	2100      	movs	r1, #0
 800adb2:	f7f6 f939 	bl	8001028 <__aeabi_fcmpgt>
 800adb6:	b128      	cbz	r0, 800adc4 <floorf+0x30>
 800adb8:	2c00      	cmp	r4, #0
 800adba:	da23      	bge.n	800ae04 <floorf+0x70>
 800adbc:	4b13      	ldr	r3, [pc, #76]	; (800ae0c <floorf+0x78>)
 800adbe:	2e00      	cmp	r6, #0
 800adc0:	bf18      	it	ne
 800adc2:	461c      	movne	r4, r3
 800adc4:	4621      	mov	r1, r4
 800adc6:	e01b      	b.n	800ae00 <floorf+0x6c>
 800adc8:	4e11      	ldr	r6, [pc, #68]	; (800ae10 <floorf+0x7c>)
 800adca:	412e      	asrs	r6, r5
 800adcc:	4230      	tst	r0, r6
 800adce:	d017      	beq.n	800ae00 <floorf+0x6c>
 800add0:	490d      	ldr	r1, [pc, #52]	; (800ae08 <floorf+0x74>)
 800add2:	f7f5 fe65 	bl	8000aa0 <__addsf3>
 800add6:	2100      	movs	r1, #0
 800add8:	f7f6 f926 	bl	8001028 <__aeabi_fcmpgt>
 800addc:	2800      	cmp	r0, #0
 800adde:	d0f1      	beq.n	800adc4 <floorf+0x30>
 800ade0:	2c00      	cmp	r4, #0
 800ade2:	bfbe      	ittt	lt
 800ade4:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800ade8:	fa43 f505 	asrlt.w	r5, r3, r5
 800adec:	1964      	addlt	r4, r4, r5
 800adee:	ea24 0406 	bic.w	r4, r4, r6
 800adf2:	e7e7      	b.n	800adc4 <floorf+0x30>
 800adf4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800adf8:	d302      	bcc.n	800ae00 <floorf+0x6c>
 800adfa:	f7f5 fe51 	bl	8000aa0 <__addsf3>
 800adfe:	4601      	mov	r1, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	bd70      	pop	{r4, r5, r6, pc}
 800ae04:	2400      	movs	r4, #0
 800ae06:	e7dd      	b.n	800adc4 <floorf+0x30>
 800ae08:	7149f2ca 	.word	0x7149f2ca
 800ae0c:	bf800000 	.word	0xbf800000
 800ae10:	007fffff 	.word	0x007fffff

0800ae14 <lroundf>:
 800ae14:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800ae1e:	b510      	push	{r4, lr}
 800ae20:	bfb4      	ite	lt
 800ae22:	f04f 34ff 	movlt.w	r4, #4294967295
 800ae26:	2401      	movge	r4, #1
 800ae28:	2a1e      	cmp	r2, #30
 800ae2a:	dc1b      	bgt.n	800ae64 <lroundf+0x50>
 800ae2c:	2a00      	cmp	r2, #0
 800ae2e:	da04      	bge.n	800ae3a <lroundf+0x26>
 800ae30:	3201      	adds	r2, #1
 800ae32:	bf18      	it	ne
 800ae34:	2400      	movne	r4, #0
 800ae36:	4620      	mov	r0, r4
 800ae38:	bd10      	pop	{r4, pc}
 800ae3a:	2a16      	cmp	r2, #22
 800ae3c:	bfd8      	it	le
 800ae3e:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800ae42:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800ae46:	bfd8      	it	le
 800ae48:	4113      	asrle	r3, r2
 800ae4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800ae4e:	bfcd      	iteet	gt
 800ae50:	3b96      	subgt	r3, #150	; 0x96
 800ae52:	185b      	addle	r3, r3, r1
 800ae54:	f1c2 0217 	rsble	r2, r2, #23
 800ae58:	fa01 f303 	lslgt.w	r3, r1, r3
 800ae5c:	bfd8      	it	le
 800ae5e:	40d3      	lsrle	r3, r2
 800ae60:	435c      	muls	r4, r3
 800ae62:	e7e8      	b.n	800ae36 <lroundf+0x22>
 800ae64:	f7f6 f900 	bl	8001068 <__aeabi_f2iz>
 800ae68:	4604      	mov	r4, r0
 800ae6a:	e7e4      	b.n	800ae36 <lroundf+0x22>

0800ae6c <sinf>:
 800ae6c:	b507      	push	{r0, r1, r2, lr}
 800ae6e:	4a19      	ldr	r2, [pc, #100]	; (800aed4 <sinf+0x68>)
 800ae70:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ae74:	4293      	cmp	r3, r2
 800ae76:	4601      	mov	r1, r0
 800ae78:	dc04      	bgt.n	800ae84 <sinf+0x18>
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	f000 fdd3 	bl	800ba28 <__kernel_sinf>
 800ae82:	e004      	b.n	800ae8e <sinf+0x22>
 800ae84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae88:	db04      	blt.n	800ae94 <sinf+0x28>
 800ae8a:	f7f5 fe07 	bl	8000a9c <__aeabi_fsub>
 800ae8e:	b003      	add	sp, #12
 800ae90:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae94:	4669      	mov	r1, sp
 800ae96:	f000 f8fb 	bl	800b090 <__ieee754_rem_pio2f>
 800ae9a:	f000 0003 	and.w	r0, r0, #3
 800ae9e:	2801      	cmp	r0, #1
 800aea0:	d006      	beq.n	800aeb0 <sinf+0x44>
 800aea2:	2802      	cmp	r0, #2
 800aea4:	d009      	beq.n	800aeba <sinf+0x4e>
 800aea6:	b980      	cbnz	r0, 800aeca <sinf+0x5e>
 800aea8:	2201      	movs	r2, #1
 800aeaa:	9901      	ldr	r1, [sp, #4]
 800aeac:	9800      	ldr	r0, [sp, #0]
 800aeae:	e7e6      	b.n	800ae7e <sinf+0x12>
 800aeb0:	9901      	ldr	r1, [sp, #4]
 800aeb2:	9800      	ldr	r0, [sp, #0]
 800aeb4:	f000 fa96 	bl	800b3e4 <__kernel_cosf>
 800aeb8:	e7e9      	b.n	800ae8e <sinf+0x22>
 800aeba:	2201      	movs	r2, #1
 800aebc:	9901      	ldr	r1, [sp, #4]
 800aebe:	9800      	ldr	r0, [sp, #0]
 800aec0:	f000 fdb2 	bl	800ba28 <__kernel_sinf>
 800aec4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800aec8:	e7e1      	b.n	800ae8e <sinf+0x22>
 800aeca:	9901      	ldr	r1, [sp, #4]
 800aecc:	9800      	ldr	r0, [sp, #0]
 800aece:	f000 fa89 	bl	800b3e4 <__kernel_cosf>
 800aed2:	e7f7      	b.n	800aec4 <sinf+0x58>
 800aed4:	3f490fd8 	.word	0x3f490fd8

0800aed8 <atan2f>:
 800aed8:	f000 b84a 	b.w	800af70 <__ieee754_atan2f>

0800aedc <sqrtf>:
 800aedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aede:	b08b      	sub	sp, #44	; 0x2c
 800aee0:	4604      	mov	r4, r0
 800aee2:	f000 fa2d 	bl	800b340 <__ieee754_sqrtf>
 800aee6:	4b20      	ldr	r3, [pc, #128]	; (800af68 <sqrtf+0x8c>)
 800aee8:	4606      	mov	r6, r0
 800aeea:	f993 5000 	ldrsb.w	r5, [r3]
 800aeee:	1c6b      	adds	r3, r5, #1
 800aef0:	d02a      	beq.n	800af48 <sqrtf+0x6c>
 800aef2:	4621      	mov	r1, r4
 800aef4:	4620      	mov	r0, r4
 800aef6:	f7f6 f8a1 	bl	800103c <__aeabi_fcmpun>
 800aefa:	4607      	mov	r7, r0
 800aefc:	bb20      	cbnz	r0, 800af48 <sqrtf+0x6c>
 800aefe:	2100      	movs	r1, #0
 800af00:	4620      	mov	r0, r4
 800af02:	f7f6 f873 	bl	8000fec <__aeabi_fcmplt>
 800af06:	b1f8      	cbz	r0, 800af48 <sqrtf+0x6c>
 800af08:	2301      	movs	r3, #1
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	4b17      	ldr	r3, [pc, #92]	; (800af6c <sqrtf+0x90>)
 800af0e:	4620      	mov	r0, r4
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	9708      	str	r7, [sp, #32]
 800af14:	f7f5 fa80 	bl	8000418 <__aeabi_f2d>
 800af18:	2200      	movs	r2, #0
 800af1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af22:	2300      	movs	r3, #0
 800af24:	b99d      	cbnz	r5, 800af4e <sqrtf+0x72>
 800af26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af2a:	4668      	mov	r0, sp
 800af2c:	f000 fdf2 	bl	800bb14 <matherr>
 800af30:	b1a8      	cbz	r0, 800af5e <sqrtf+0x82>
 800af32:	9b08      	ldr	r3, [sp, #32]
 800af34:	b11b      	cbz	r3, 800af3e <sqrtf+0x62>
 800af36:	f000 ff55 	bl	800bde4 <__errno>
 800af3a:	9b08      	ldr	r3, [sp, #32]
 800af3c:	6003      	str	r3, [r0, #0]
 800af3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af42:	f7f5 fd57 	bl	80009f4 <__aeabi_d2f>
 800af46:	4606      	mov	r6, r0
 800af48:	4630      	mov	r0, r6
 800af4a:	b00b      	add	sp, #44	; 0x2c
 800af4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af4e:	4610      	mov	r0, r2
 800af50:	4619      	mov	r1, r3
 800af52:	f7f5 fbdf 	bl	8000714 <__aeabi_ddiv>
 800af56:	2d02      	cmp	r5, #2
 800af58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af5c:	d1e5      	bne.n	800af2a <sqrtf+0x4e>
 800af5e:	f000 ff41 	bl	800bde4 <__errno>
 800af62:	2321      	movs	r3, #33	; 0x21
 800af64:	6003      	str	r3, [r0, #0]
 800af66:	e7e4      	b.n	800af32 <sqrtf+0x56>
 800af68:	200000ec 	.word	0x200000ec
 800af6c:	0800c0c6 	.word	0x0800c0c6

0800af70 <__ieee754_atan2f>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af76:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800af7a:	4603      	mov	r3, r0
 800af7c:	dc05      	bgt.n	800af8a <__ieee754_atan2f+0x1a>
 800af7e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800af82:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800af86:	4607      	mov	r7, r0
 800af88:	dd04      	ble.n	800af94 <__ieee754_atan2f+0x24>
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7f5 fd88 	bl	8000aa0 <__addsf3>
 800af90:	4603      	mov	r3, r0
 800af92:	e010      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800af94:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800af98:	d103      	bne.n	800afa2 <__ieee754_atan2f+0x32>
 800af9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af9e:	f000 bdbb 	b.w	800bb18 <atanf>
 800afa2:	178c      	asrs	r4, r1, #30
 800afa4:	f004 0402 	and.w	r4, r4, #2
 800afa8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800afac:	b92a      	cbnz	r2, 800afba <__ieee754_atan2f+0x4a>
 800afae:	2c02      	cmp	r4, #2
 800afb0:	d023      	beq.n	800affa <__ieee754_atan2f+0x8a>
 800afb2:	2c03      	cmp	r4, #3
 800afb4:	d023      	beq.n	800affe <__ieee754_atan2f+0x8e>
 800afb6:	4618      	mov	r0, r3
 800afb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afba:	b91e      	cbnz	r6, 800afc4 <__ieee754_atan2f+0x54>
 800afbc:	2f00      	cmp	r7, #0
 800afbe:	da53      	bge.n	800b068 <__ieee754_atan2f+0xf8>
 800afc0:	4b2a      	ldr	r3, [pc, #168]	; (800b06c <__ieee754_atan2f+0xfc>)
 800afc2:	e7f8      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800afc4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800afc8:	d11b      	bne.n	800b002 <__ieee754_atan2f+0x92>
 800afca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800afce:	d10b      	bne.n	800afe8 <__ieee754_atan2f+0x78>
 800afd0:	2c02      	cmp	r4, #2
 800afd2:	d005      	beq.n	800afe0 <__ieee754_atan2f+0x70>
 800afd4:	2c03      	cmp	r4, #3
 800afd6:	d005      	beq.n	800afe4 <__ieee754_atan2f+0x74>
 800afd8:	2c01      	cmp	r4, #1
 800afda:	d141      	bne.n	800b060 <__ieee754_atan2f+0xf0>
 800afdc:	4b24      	ldr	r3, [pc, #144]	; (800b070 <__ieee754_atan2f+0x100>)
 800afde:	e7ea      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800afe0:	4b24      	ldr	r3, [pc, #144]	; (800b074 <__ieee754_atan2f+0x104>)
 800afe2:	e7e8      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800afe4:	4b24      	ldr	r3, [pc, #144]	; (800b078 <__ieee754_atan2f+0x108>)
 800afe6:	e7e6      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800afe8:	2c02      	cmp	r4, #2
 800afea:	d006      	beq.n	800affa <__ieee754_atan2f+0x8a>
 800afec:	2c03      	cmp	r4, #3
 800afee:	d006      	beq.n	800affe <__ieee754_atan2f+0x8e>
 800aff0:	2c01      	cmp	r4, #1
 800aff2:	d137      	bne.n	800b064 <__ieee754_atan2f+0xf4>
 800aff4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aff8:	e7dd      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800affa:	4b20      	ldr	r3, [pc, #128]	; (800b07c <__ieee754_atan2f+0x10c>)
 800affc:	e7db      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800affe:	4b20      	ldr	r3, [pc, #128]	; (800b080 <__ieee754_atan2f+0x110>)
 800b000:	e7d9      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800b002:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b006:	d0d9      	beq.n	800afbc <__ieee754_atan2f+0x4c>
 800b008:	1b92      	subs	r2, r2, r6
 800b00a:	15d2      	asrs	r2, r2, #23
 800b00c:	2a3c      	cmp	r2, #60	; 0x3c
 800b00e:	dc17      	bgt.n	800b040 <__ieee754_atan2f+0xd0>
 800b010:	2900      	cmp	r1, #0
 800b012:	da01      	bge.n	800b018 <__ieee754_atan2f+0xa8>
 800b014:	323c      	adds	r2, #60	; 0x3c
 800b016:	db15      	blt.n	800b044 <__ieee754_atan2f+0xd4>
 800b018:	4618      	mov	r0, r3
 800b01a:	f7f5 fefd 	bl	8000e18 <__aeabi_fdiv>
 800b01e:	f000 fe8b 	bl	800bd38 <fabsf>
 800b022:	f000 fd79 	bl	800bb18 <atanf>
 800b026:	4603      	mov	r3, r0
 800b028:	2c01      	cmp	r4, #1
 800b02a:	d00d      	beq.n	800b048 <__ieee754_atan2f+0xd8>
 800b02c:	2c02      	cmp	r4, #2
 800b02e:	d00e      	beq.n	800b04e <__ieee754_atan2f+0xde>
 800b030:	2c00      	cmp	r4, #0
 800b032:	d0c0      	beq.n	800afb6 <__ieee754_atan2f+0x46>
 800b034:	4913      	ldr	r1, [pc, #76]	; (800b084 <__ieee754_atan2f+0x114>)
 800b036:	4618      	mov	r0, r3
 800b038:	f7f5 fd32 	bl	8000aa0 <__addsf3>
 800b03c:	490f      	ldr	r1, [pc, #60]	; (800b07c <__ieee754_atan2f+0x10c>)
 800b03e:	e00c      	b.n	800b05a <__ieee754_atan2f+0xea>
 800b040:	4b11      	ldr	r3, [pc, #68]	; (800b088 <__ieee754_atan2f+0x118>)
 800b042:	e7f1      	b.n	800b028 <__ieee754_atan2f+0xb8>
 800b044:	2300      	movs	r3, #0
 800b046:	e7ef      	b.n	800b028 <__ieee754_atan2f+0xb8>
 800b048:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b04c:	e7b3      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800b04e:	490d      	ldr	r1, [pc, #52]	; (800b084 <__ieee754_atan2f+0x114>)
 800b050:	4618      	mov	r0, r3
 800b052:	f7f5 fd25 	bl	8000aa0 <__addsf3>
 800b056:	4601      	mov	r1, r0
 800b058:	4808      	ldr	r0, [pc, #32]	; (800b07c <__ieee754_atan2f+0x10c>)
 800b05a:	f7f5 fd1f 	bl	8000a9c <__aeabi_fsub>
 800b05e:	e797      	b.n	800af90 <__ieee754_atan2f+0x20>
 800b060:	4b0a      	ldr	r3, [pc, #40]	; (800b08c <__ieee754_atan2f+0x11c>)
 800b062:	e7a8      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800b064:	2300      	movs	r3, #0
 800b066:	e7a6      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800b068:	4b07      	ldr	r3, [pc, #28]	; (800b088 <__ieee754_atan2f+0x118>)
 800b06a:	e7a4      	b.n	800afb6 <__ieee754_atan2f+0x46>
 800b06c:	bfc90fdb 	.word	0xbfc90fdb
 800b070:	bf490fdb 	.word	0xbf490fdb
 800b074:	4016cbe4 	.word	0x4016cbe4
 800b078:	c016cbe4 	.word	0xc016cbe4
 800b07c:	40490fdb 	.word	0x40490fdb
 800b080:	c0490fdb 	.word	0xc0490fdb
 800b084:	33bbbd2e 	.word	0x33bbbd2e
 800b088:	3fc90fdb 	.word	0x3fc90fdb
 800b08c:	3f490fdb 	.word	0x3f490fdb

0800b090 <__ieee754_rem_pio2f>:
 800b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b094:	4a9d      	ldr	r2, [pc, #628]	; (800b30c <__ieee754_rem_pio2f+0x27c>)
 800b096:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b09a:	4295      	cmp	r5, r2
 800b09c:	b087      	sub	sp, #28
 800b09e:	460c      	mov	r4, r1
 800b0a0:	4607      	mov	r7, r0
 800b0a2:	dc04      	bgt.n	800b0ae <__ieee754_rem_pio2f+0x1e>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	6020      	str	r0, [r4, #0]
 800b0a8:	604b      	str	r3, [r1, #4]
 800b0aa:	2600      	movs	r6, #0
 800b0ac:	e01a      	b.n	800b0e4 <__ieee754_rem_pio2f+0x54>
 800b0ae:	4a98      	ldr	r2, [pc, #608]	; (800b310 <__ieee754_rem_pio2f+0x280>)
 800b0b0:	4295      	cmp	r5, r2
 800b0b2:	dc4b      	bgt.n	800b14c <__ieee754_rem_pio2f+0xbc>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	4997      	ldr	r1, [pc, #604]	; (800b314 <__ieee754_rem_pio2f+0x284>)
 800b0b8:	f025 050f 	bic.w	r5, r5, #15
 800b0bc:	4e96      	ldr	r6, [pc, #600]	; (800b318 <__ieee754_rem_pio2f+0x288>)
 800b0be:	dd23      	ble.n	800b108 <__ieee754_rem_pio2f+0x78>
 800b0c0:	f7f5 fcec 	bl	8000a9c <__aeabi_fsub>
 800b0c4:	42b5      	cmp	r5, r6
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	d010      	beq.n	800b0ec <__ieee754_rem_pio2f+0x5c>
 800b0ca:	4994      	ldr	r1, [pc, #592]	; (800b31c <__ieee754_rem_pio2f+0x28c>)
 800b0cc:	f7f5 fce6 	bl	8000a9c <__aeabi_fsub>
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	6020      	str	r0, [r4, #0]
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	f7f5 fce1 	bl	8000a9c <__aeabi_fsub>
 800b0da:	4990      	ldr	r1, [pc, #576]	; (800b31c <__ieee754_rem_pio2f+0x28c>)
 800b0dc:	f7f5 fcde 	bl	8000a9c <__aeabi_fsub>
 800b0e0:	2601      	movs	r6, #1
 800b0e2:	6060      	str	r0, [r4, #4]
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	b007      	add	sp, #28
 800b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ec:	498c      	ldr	r1, [pc, #560]	; (800b320 <__ieee754_rem_pio2f+0x290>)
 800b0ee:	f7f5 fcd5 	bl	8000a9c <__aeabi_fsub>
 800b0f2:	498c      	ldr	r1, [pc, #560]	; (800b324 <__ieee754_rem_pio2f+0x294>)
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	f7f5 fcd1 	bl	8000a9c <__aeabi_fsub>
 800b0fa:	4601      	mov	r1, r0
 800b0fc:	6020      	str	r0, [r4, #0]
 800b0fe:	4628      	mov	r0, r5
 800b100:	f7f5 fccc 	bl	8000a9c <__aeabi_fsub>
 800b104:	4987      	ldr	r1, [pc, #540]	; (800b324 <__ieee754_rem_pio2f+0x294>)
 800b106:	e7e9      	b.n	800b0dc <__ieee754_rem_pio2f+0x4c>
 800b108:	f7f5 fcca 	bl	8000aa0 <__addsf3>
 800b10c:	42b5      	cmp	r5, r6
 800b10e:	4607      	mov	r7, r0
 800b110:	d00e      	beq.n	800b130 <__ieee754_rem_pio2f+0xa0>
 800b112:	4982      	ldr	r1, [pc, #520]	; (800b31c <__ieee754_rem_pio2f+0x28c>)
 800b114:	f7f5 fcc4 	bl	8000aa0 <__addsf3>
 800b118:	4601      	mov	r1, r0
 800b11a:	6020      	str	r0, [r4, #0]
 800b11c:	4638      	mov	r0, r7
 800b11e:	f7f5 fcbd 	bl	8000a9c <__aeabi_fsub>
 800b122:	497e      	ldr	r1, [pc, #504]	; (800b31c <__ieee754_rem_pio2f+0x28c>)
 800b124:	f7f5 fcbc 	bl	8000aa0 <__addsf3>
 800b128:	f04f 36ff 	mov.w	r6, #4294967295
 800b12c:	6060      	str	r0, [r4, #4]
 800b12e:	e7d9      	b.n	800b0e4 <__ieee754_rem_pio2f+0x54>
 800b130:	497b      	ldr	r1, [pc, #492]	; (800b320 <__ieee754_rem_pio2f+0x290>)
 800b132:	f7f5 fcb5 	bl	8000aa0 <__addsf3>
 800b136:	497b      	ldr	r1, [pc, #492]	; (800b324 <__ieee754_rem_pio2f+0x294>)
 800b138:	4605      	mov	r5, r0
 800b13a:	f7f5 fcb1 	bl	8000aa0 <__addsf3>
 800b13e:	4601      	mov	r1, r0
 800b140:	6020      	str	r0, [r4, #0]
 800b142:	4628      	mov	r0, r5
 800b144:	f7f5 fcaa 	bl	8000a9c <__aeabi_fsub>
 800b148:	4976      	ldr	r1, [pc, #472]	; (800b324 <__ieee754_rem_pio2f+0x294>)
 800b14a:	e7eb      	b.n	800b124 <__ieee754_rem_pio2f+0x94>
 800b14c:	4a76      	ldr	r2, [pc, #472]	; (800b328 <__ieee754_rem_pio2f+0x298>)
 800b14e:	4295      	cmp	r5, r2
 800b150:	f300 808c 	bgt.w	800b26c <__ieee754_rem_pio2f+0x1dc>
 800b154:	f000 fdf0 	bl	800bd38 <fabsf>
 800b158:	4974      	ldr	r1, [pc, #464]	; (800b32c <__ieee754_rem_pio2f+0x29c>)
 800b15a:	4680      	mov	r8, r0
 800b15c:	f7f5 fda8 	bl	8000cb0 <__aeabi_fmul>
 800b160:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b164:	f7f5 fc9c 	bl	8000aa0 <__addsf3>
 800b168:	f7f5 ff7e 	bl	8001068 <__aeabi_f2iz>
 800b16c:	4606      	mov	r6, r0
 800b16e:	f7f5 fd4b 	bl	8000c08 <__aeabi_i2f>
 800b172:	4968      	ldr	r1, [pc, #416]	; (800b314 <__ieee754_rem_pio2f+0x284>)
 800b174:	4682      	mov	sl, r0
 800b176:	f7f5 fd9b 	bl	8000cb0 <__aeabi_fmul>
 800b17a:	4601      	mov	r1, r0
 800b17c:	4640      	mov	r0, r8
 800b17e:	f7f5 fc8d 	bl	8000a9c <__aeabi_fsub>
 800b182:	4966      	ldr	r1, [pc, #408]	; (800b31c <__ieee754_rem_pio2f+0x28c>)
 800b184:	4680      	mov	r8, r0
 800b186:	4650      	mov	r0, sl
 800b188:	f7f5 fd92 	bl	8000cb0 <__aeabi_fmul>
 800b18c:	2e1f      	cmp	r6, #31
 800b18e:	4681      	mov	r9, r0
 800b190:	dc0c      	bgt.n	800b1ac <__ieee754_rem_pio2f+0x11c>
 800b192:	4a67      	ldr	r2, [pc, #412]	; (800b330 <__ieee754_rem_pio2f+0x2a0>)
 800b194:	1e71      	subs	r1, r6, #1
 800b196:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b19a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d004      	beq.n	800b1ac <__ieee754_rem_pio2f+0x11c>
 800b1a2:	4649      	mov	r1, r9
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	f7f5 fc79 	bl	8000a9c <__aeabi_fsub>
 800b1aa:	e009      	b.n	800b1c0 <__ieee754_rem_pio2f+0x130>
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	f7f5 fc74 	bl	8000a9c <__aeabi_fsub>
 800b1b4:	15ed      	asrs	r5, r5, #23
 800b1b6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b1ba:	1aeb      	subs	r3, r5, r3
 800b1bc:	2b08      	cmp	r3, #8
 800b1be:	dc01      	bgt.n	800b1c4 <__ieee754_rem_pio2f+0x134>
 800b1c0:	6020      	str	r0, [r4, #0]
 800b1c2:	e024      	b.n	800b20e <__ieee754_rem_pio2f+0x17e>
 800b1c4:	4956      	ldr	r1, [pc, #344]	; (800b320 <__ieee754_rem_pio2f+0x290>)
 800b1c6:	4650      	mov	r0, sl
 800b1c8:	f7f5 fd72 	bl	8000cb0 <__aeabi_fmul>
 800b1cc:	4681      	mov	r9, r0
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	f7f5 fc63 	bl	8000a9c <__aeabi_fsub>
 800b1d6:	4601      	mov	r1, r0
 800b1d8:	4683      	mov	fp, r0
 800b1da:	4640      	mov	r0, r8
 800b1dc:	f7f5 fc5e 	bl	8000a9c <__aeabi_fsub>
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	f7f5 fc5b 	bl	8000a9c <__aeabi_fsub>
 800b1e6:	4680      	mov	r8, r0
 800b1e8:	494e      	ldr	r1, [pc, #312]	; (800b324 <__ieee754_rem_pio2f+0x294>)
 800b1ea:	4650      	mov	r0, sl
 800b1ec:	f7f5 fd60 	bl	8000cb0 <__aeabi_fmul>
 800b1f0:	4641      	mov	r1, r8
 800b1f2:	f7f5 fc53 	bl	8000a9c <__aeabi_fsub>
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	4681      	mov	r9, r0
 800b1fa:	4658      	mov	r0, fp
 800b1fc:	f7f5 fc4e 	bl	8000a9c <__aeabi_fsub>
 800b200:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b204:	1aed      	subs	r5, r5, r3
 800b206:	2d19      	cmp	r5, #25
 800b208:	dc15      	bgt.n	800b236 <__ieee754_rem_pio2f+0x1a6>
 800b20a:	46d8      	mov	r8, fp
 800b20c:	6020      	str	r0, [r4, #0]
 800b20e:	6825      	ldr	r5, [r4, #0]
 800b210:	4640      	mov	r0, r8
 800b212:	4629      	mov	r1, r5
 800b214:	f7f5 fc42 	bl	8000a9c <__aeabi_fsub>
 800b218:	4649      	mov	r1, r9
 800b21a:	f7f5 fc3f 	bl	8000a9c <__aeabi_fsub>
 800b21e:	2f00      	cmp	r7, #0
 800b220:	6060      	str	r0, [r4, #4]
 800b222:	f6bf af5f 	bge.w	800b0e4 <__ieee754_rem_pio2f+0x54>
 800b226:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b22a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b22e:	6025      	str	r5, [r4, #0]
 800b230:	6060      	str	r0, [r4, #4]
 800b232:	4276      	negs	r6, r6
 800b234:	e756      	b.n	800b0e4 <__ieee754_rem_pio2f+0x54>
 800b236:	493f      	ldr	r1, [pc, #252]	; (800b334 <__ieee754_rem_pio2f+0x2a4>)
 800b238:	4650      	mov	r0, sl
 800b23a:	f7f5 fd39 	bl	8000cb0 <__aeabi_fmul>
 800b23e:	4605      	mov	r5, r0
 800b240:	4601      	mov	r1, r0
 800b242:	4658      	mov	r0, fp
 800b244:	f7f5 fc2a 	bl	8000a9c <__aeabi_fsub>
 800b248:	4601      	mov	r1, r0
 800b24a:	4680      	mov	r8, r0
 800b24c:	4658      	mov	r0, fp
 800b24e:	f7f5 fc25 	bl	8000a9c <__aeabi_fsub>
 800b252:	4629      	mov	r1, r5
 800b254:	f7f5 fc22 	bl	8000a9c <__aeabi_fsub>
 800b258:	4605      	mov	r5, r0
 800b25a:	4937      	ldr	r1, [pc, #220]	; (800b338 <__ieee754_rem_pio2f+0x2a8>)
 800b25c:	4650      	mov	r0, sl
 800b25e:	f7f5 fd27 	bl	8000cb0 <__aeabi_fmul>
 800b262:	4629      	mov	r1, r5
 800b264:	f7f5 fc1a 	bl	8000a9c <__aeabi_fsub>
 800b268:	4681      	mov	r9, r0
 800b26a:	e79a      	b.n	800b1a2 <__ieee754_rem_pio2f+0x112>
 800b26c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b270:	db05      	blt.n	800b27e <__ieee754_rem_pio2f+0x1ee>
 800b272:	4601      	mov	r1, r0
 800b274:	f7f5 fc12 	bl	8000a9c <__aeabi_fsub>
 800b278:	6060      	str	r0, [r4, #4]
 800b27a:	6020      	str	r0, [r4, #0]
 800b27c:	e715      	b.n	800b0aa <__ieee754_rem_pio2f+0x1a>
 800b27e:	15ee      	asrs	r6, r5, #23
 800b280:	3e86      	subs	r6, #134	; 0x86
 800b282:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800b286:	4628      	mov	r0, r5
 800b288:	f7f5 feee 	bl	8001068 <__aeabi_f2iz>
 800b28c:	f7f5 fcbc 	bl	8000c08 <__aeabi_i2f>
 800b290:	4601      	mov	r1, r0
 800b292:	9003      	str	r0, [sp, #12]
 800b294:	4628      	mov	r0, r5
 800b296:	f7f5 fc01 	bl	8000a9c <__aeabi_fsub>
 800b29a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b29e:	f7f5 fd07 	bl	8000cb0 <__aeabi_fmul>
 800b2a2:	4680      	mov	r8, r0
 800b2a4:	f7f5 fee0 	bl	8001068 <__aeabi_f2iz>
 800b2a8:	f7f5 fcae 	bl	8000c08 <__aeabi_i2f>
 800b2ac:	4601      	mov	r1, r0
 800b2ae:	9004      	str	r0, [sp, #16]
 800b2b0:	4605      	mov	r5, r0
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	f7f5 fbf2 	bl	8000a9c <__aeabi_fsub>
 800b2b8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b2bc:	f7f5 fcf8 	bl	8000cb0 <__aeabi_fmul>
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	9005      	str	r0, [sp, #20]
 800b2c4:	f7f5 fe88 	bl	8000fd8 <__aeabi_fcmpeq>
 800b2c8:	b1e8      	cbz	r0, 800b306 <__ieee754_rem_pio2f+0x276>
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	f7f5 fe83 	bl	8000fd8 <__aeabi_fcmpeq>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	bf14      	ite	ne
 800b2d6:	2301      	movne	r3, #1
 800b2d8:	2302      	moveq	r3, #2
 800b2da:	4a18      	ldr	r2, [pc, #96]	; (800b33c <__ieee754_rem_pio2f+0x2ac>)
 800b2dc:	4621      	mov	r1, r4
 800b2de:	9201      	str	r2, [sp, #4]
 800b2e0:	2202      	movs	r2, #2
 800b2e2:	a803      	add	r0, sp, #12
 800b2e4:	9200      	str	r2, [sp, #0]
 800b2e6:	4632      	mov	r2, r6
 800b2e8:	f000 f910 	bl	800b50c <__kernel_rem_pio2f>
 800b2ec:	2f00      	cmp	r7, #0
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	f6bf aef8 	bge.w	800b0e4 <__ieee754_rem_pio2f+0x54>
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2fa:	6023      	str	r3, [r4, #0]
 800b2fc:	6863      	ldr	r3, [r4, #4]
 800b2fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b302:	6063      	str	r3, [r4, #4]
 800b304:	e795      	b.n	800b232 <__ieee754_rem_pio2f+0x1a2>
 800b306:	2303      	movs	r3, #3
 800b308:	e7e7      	b.n	800b2da <__ieee754_rem_pio2f+0x24a>
 800b30a:	bf00      	nop
 800b30c:	3f490fd8 	.word	0x3f490fd8
 800b310:	4016cbe3 	.word	0x4016cbe3
 800b314:	3fc90f80 	.word	0x3fc90f80
 800b318:	3fc90fd0 	.word	0x3fc90fd0
 800b31c:	37354443 	.word	0x37354443
 800b320:	37354400 	.word	0x37354400
 800b324:	2e85a308 	.word	0x2e85a308
 800b328:	43490f80 	.word	0x43490f80
 800b32c:	3f22f984 	.word	0x3f22f984
 800b330:	0800c0cc 	.word	0x0800c0cc
 800b334:	2e85a300 	.word	0x2e85a300
 800b338:	248d3132 	.word	0x248d3132
 800b33c:	0800c14c 	.word	0x0800c14c

0800b340 <__ieee754_sqrtf>:
 800b340:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b344:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	4603      	mov	r3, r0
 800b34c:	4604      	mov	r4, r0
 800b34e:	d309      	bcc.n	800b364 <__ieee754_sqrtf+0x24>
 800b350:	4601      	mov	r1, r0
 800b352:	f7f5 fcad 	bl	8000cb0 <__aeabi_fmul>
 800b356:	4601      	mov	r1, r0
 800b358:	4620      	mov	r0, r4
 800b35a:	f7f5 fba1 	bl	8000aa0 <__addsf3>
 800b35e:	4604      	mov	r4, r0
 800b360:	4620      	mov	r0, r4
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	2a00      	cmp	r2, #0
 800b366:	d0fb      	beq.n	800b360 <__ieee754_sqrtf+0x20>
 800b368:	2800      	cmp	r0, #0
 800b36a:	da06      	bge.n	800b37a <__ieee754_sqrtf+0x3a>
 800b36c:	4601      	mov	r1, r0
 800b36e:	f7f5 fb95 	bl	8000a9c <__aeabi_fsub>
 800b372:	4601      	mov	r1, r0
 800b374:	f7f5 fd50 	bl	8000e18 <__aeabi_fdiv>
 800b378:	e7f1      	b.n	800b35e <__ieee754_sqrtf+0x1e>
 800b37a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b37e:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800b382:	d204      	bcs.n	800b38e <__ieee754_sqrtf+0x4e>
 800b384:	2200      	movs	r2, #0
 800b386:	0219      	lsls	r1, r3, #8
 800b388:	d529      	bpl.n	800b3de <__ieee754_sqrtf+0x9e>
 800b38a:	3a01      	subs	r2, #1
 800b38c:	1aa4      	subs	r4, r4, r2
 800b38e:	3c7f      	subs	r4, #127	; 0x7f
 800b390:	07e2      	lsls	r2, r4, #31
 800b392:	f04f 0200 	mov.w	r2, #0
 800b396:	ea4f 0164 	mov.w	r1, r4, asr #1
 800b39a:	4616      	mov	r6, r2
 800b39c:	f04f 0419 	mov.w	r4, #25
 800b3a0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b3a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b3a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3ac:	bf48      	it	mi
 800b3ae:	005b      	lslmi	r3, r3, #1
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	1835      	adds	r5, r6, r0
 800b3b4:	429d      	cmp	r5, r3
 800b3b6:	bfde      	ittt	le
 800b3b8:	182e      	addle	r6, r5, r0
 800b3ba:	1b5b      	suble	r3, r3, r5
 800b3bc:	1812      	addle	r2, r2, r0
 800b3be:	3c01      	subs	r4, #1
 800b3c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b3c4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b3c8:	d1f3      	bne.n	800b3b2 <__ieee754_sqrtf+0x72>
 800b3ca:	b113      	cbz	r3, 800b3d2 <__ieee754_sqrtf+0x92>
 800b3cc:	3201      	adds	r2, #1
 800b3ce:	f022 0201 	bic.w	r2, r2, #1
 800b3d2:	1054      	asrs	r4, r2, #1
 800b3d4:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b3d8:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800b3dc:	e7c0      	b.n	800b360 <__ieee754_sqrtf+0x20>
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	3201      	adds	r2, #1
 800b3e2:	e7d0      	b.n	800b386 <__ieee754_sqrtf+0x46>

0800b3e4 <__kernel_cosf>:
 800b3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3e8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b3ec:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	460f      	mov	r7, r1
 800b3f4:	da03      	bge.n	800b3fe <__kernel_cosf+0x1a>
 800b3f6:	f7f5 fe37 	bl	8001068 <__aeabi_f2iz>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d070      	beq.n	800b4e0 <__kernel_cosf+0xfc>
 800b3fe:	4631      	mov	r1, r6
 800b400:	4630      	mov	r0, r6
 800b402:	f7f5 fc55 	bl	8000cb0 <__aeabi_fmul>
 800b406:	4605      	mov	r5, r0
 800b408:	4937      	ldr	r1, [pc, #220]	; (800b4e8 <__kernel_cosf+0x104>)
 800b40a:	f7f5 fc51 	bl	8000cb0 <__aeabi_fmul>
 800b40e:	4937      	ldr	r1, [pc, #220]	; (800b4ec <__kernel_cosf+0x108>)
 800b410:	f7f5 fb46 	bl	8000aa0 <__addsf3>
 800b414:	4629      	mov	r1, r5
 800b416:	f7f5 fc4b 	bl	8000cb0 <__aeabi_fmul>
 800b41a:	4935      	ldr	r1, [pc, #212]	; (800b4f0 <__kernel_cosf+0x10c>)
 800b41c:	f7f5 fb3e 	bl	8000a9c <__aeabi_fsub>
 800b420:	4629      	mov	r1, r5
 800b422:	f7f5 fc45 	bl	8000cb0 <__aeabi_fmul>
 800b426:	4933      	ldr	r1, [pc, #204]	; (800b4f4 <__kernel_cosf+0x110>)
 800b428:	f7f5 fb3a 	bl	8000aa0 <__addsf3>
 800b42c:	4629      	mov	r1, r5
 800b42e:	f7f5 fc3f 	bl	8000cb0 <__aeabi_fmul>
 800b432:	4931      	ldr	r1, [pc, #196]	; (800b4f8 <__kernel_cosf+0x114>)
 800b434:	f7f5 fb32 	bl	8000a9c <__aeabi_fsub>
 800b438:	4629      	mov	r1, r5
 800b43a:	f7f5 fc39 	bl	8000cb0 <__aeabi_fmul>
 800b43e:	492f      	ldr	r1, [pc, #188]	; (800b4fc <__kernel_cosf+0x118>)
 800b440:	f7f5 fb2e 	bl	8000aa0 <__addsf3>
 800b444:	4629      	mov	r1, r5
 800b446:	f7f5 fc33 	bl	8000cb0 <__aeabi_fmul>
 800b44a:	4b2d      	ldr	r3, [pc, #180]	; (800b500 <__kernel_cosf+0x11c>)
 800b44c:	4680      	mov	r8, r0
 800b44e:	429c      	cmp	r4, r3
 800b450:	dc1d      	bgt.n	800b48e <__kernel_cosf+0xaa>
 800b452:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b456:	4628      	mov	r0, r5
 800b458:	f7f5 fc2a 	bl	8000cb0 <__aeabi_fmul>
 800b45c:	4641      	mov	r1, r8
 800b45e:	4604      	mov	r4, r0
 800b460:	4628      	mov	r0, r5
 800b462:	f7f5 fc25 	bl	8000cb0 <__aeabi_fmul>
 800b466:	4639      	mov	r1, r7
 800b468:	4605      	mov	r5, r0
 800b46a:	4630      	mov	r0, r6
 800b46c:	f7f5 fc20 	bl	8000cb0 <__aeabi_fmul>
 800b470:	4601      	mov	r1, r0
 800b472:	4628      	mov	r0, r5
 800b474:	f7f5 fb12 	bl	8000a9c <__aeabi_fsub>
 800b478:	4601      	mov	r1, r0
 800b47a:	4620      	mov	r0, r4
 800b47c:	f7f5 fb0e 	bl	8000a9c <__aeabi_fsub>
 800b480:	4601      	mov	r1, r0
 800b482:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b486:	f7f5 fb09 	bl	8000a9c <__aeabi_fsub>
 800b48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b48e:	4b1d      	ldr	r3, [pc, #116]	; (800b504 <__kernel_cosf+0x120>)
 800b490:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b494:	429c      	cmp	r4, r3
 800b496:	bfcc      	ite	gt
 800b498:	4c1b      	ldrgt	r4, [pc, #108]	; (800b508 <__kernel_cosf+0x124>)
 800b49a:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800b49e:	4621      	mov	r1, r4
 800b4a0:	f7f5 fafc 	bl	8000a9c <__aeabi_fsub>
 800b4a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b4a8:	4681      	mov	r9, r0
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f7f5 fc00 	bl	8000cb0 <__aeabi_fmul>
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	f7f5 faf3 	bl	8000a9c <__aeabi_fsub>
 800b4b6:	4641      	mov	r1, r8
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f7f5 fbf8 	bl	8000cb0 <__aeabi_fmul>
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f7f5 fbf3 	bl	8000cb0 <__aeabi_fmul>
 800b4ca:	4601      	mov	r1, r0
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	f7f5 fae5 	bl	8000a9c <__aeabi_fsub>
 800b4d2:	4601      	mov	r1, r0
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f7f5 fae1 	bl	8000a9c <__aeabi_fsub>
 800b4da:	4601      	mov	r1, r0
 800b4dc:	4648      	mov	r0, r9
 800b4de:	e7d2      	b.n	800b486 <__kernel_cosf+0xa2>
 800b4e0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4e8:	ad47d74e 	.word	0xad47d74e
 800b4ec:	310f74f6 	.word	0x310f74f6
 800b4f0:	3493f27c 	.word	0x3493f27c
 800b4f4:	37d00d01 	.word	0x37d00d01
 800b4f8:	3ab60b61 	.word	0x3ab60b61
 800b4fc:	3d2aaaab 	.word	0x3d2aaaab
 800b500:	3e999999 	.word	0x3e999999
 800b504:	3f480000 	.word	0x3f480000
 800b508:	3e900000 	.word	0x3e900000

0800b50c <__kernel_rem_pio2f>:
 800b50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b510:	b0d9      	sub	sp, #356	; 0x164
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	9101      	str	r1, [sp, #4]
 800b516:	4bb4      	ldr	r3, [pc, #720]	; (800b7e8 <__kernel_rem_pio2f+0x2dc>)
 800b518:	9962      	ldr	r1, [sp, #392]	; 0x188
 800b51a:	1ed4      	subs	r4, r2, #3
 800b51c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b520:	2500      	movs	r5, #0
 800b522:	9302      	str	r3, [sp, #8]
 800b524:	9b04      	ldr	r3, [sp, #16]
 800b526:	f04f 0b00 	mov.w	fp, #0
 800b52a:	3b01      	subs	r3, #1
 800b52c:	9303      	str	r3, [sp, #12]
 800b52e:	2308      	movs	r3, #8
 800b530:	fb94 f4f3 	sdiv	r4, r4, r3
 800b534:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b538:	1c66      	adds	r6, r4, #1
 800b53a:	9b02      	ldr	r3, [sp, #8]
 800b53c:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800b540:	9a03      	ldr	r2, [sp, #12]
 800b542:	9005      	str	r0, [sp, #20]
 800b544:	eb03 0802 	add.w	r8, r3, r2
 800b548:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b54a:	1aa7      	subs	r7, r4, r2
 800b54c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b550:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 800b554:	4545      	cmp	r5, r8
 800b556:	dd10      	ble.n	800b57a <__kernel_rem_pio2f+0x6e>
 800b558:	2500      	movs	r5, #0
 800b55a:	f04f 0b00 	mov.w	fp, #0
 800b55e:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 800b562:	9b02      	ldr	r3, [sp, #8]
 800b564:	429d      	cmp	r5, r3
 800b566:	dc28      	bgt.n	800b5ba <__kernel_rem_pio2f+0xae>
 800b568:	9b04      	ldr	r3, [sp, #16]
 800b56a:	46d9      	mov	r9, fp
 800b56c:	eb03 0805 	add.w	r8, r3, r5
 800b570:	ab1c      	add	r3, sp, #112	; 0x70
 800b572:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800b576:	2700      	movs	r7, #0
 800b578:	e018      	b.n	800b5ac <__kernel_rem_pio2f+0xa0>
 800b57a:	42ef      	cmn	r7, r5
 800b57c:	d407      	bmi.n	800b58e <__kernel_rem_pio2f+0x82>
 800b57e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b582:	f7f5 fb41 	bl	8000c08 <__aeabi_i2f>
 800b586:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 800b58a:	3501      	adds	r5, #1
 800b58c:	e7e2      	b.n	800b554 <__kernel_rem_pio2f+0x48>
 800b58e:	4658      	mov	r0, fp
 800b590:	e7f9      	b.n	800b586 <__kernel_rem_pio2f+0x7a>
 800b592:	9b05      	ldr	r3, [sp, #20]
 800b594:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 800b598:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b59c:	f7f5 fb88 	bl	8000cb0 <__aeabi_fmul>
 800b5a0:	4601      	mov	r1, r0
 800b5a2:	4648      	mov	r0, r9
 800b5a4:	f7f5 fa7c 	bl	8000aa0 <__addsf3>
 800b5a8:	4681      	mov	r9, r0
 800b5aa:	3701      	adds	r7, #1
 800b5ac:	9b03      	ldr	r3, [sp, #12]
 800b5ae:	429f      	cmp	r7, r3
 800b5b0:	ddef      	ble.n	800b592 <__kernel_rem_pio2f+0x86>
 800b5b2:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 800b5b6:	3501      	adds	r5, #1
 800b5b8:	e7d3      	b.n	800b562 <__kernel_rem_pio2f+0x56>
 800b5ba:	9b02      	ldr	r3, [sp, #8]
 800b5bc:	aa08      	add	r2, sp, #32
 800b5be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5c2:	9307      	str	r3, [sp, #28]
 800b5c4:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b5c6:	9f02      	ldr	r7, [sp, #8]
 800b5c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b5cc:	9306      	str	r3, [sp, #24]
 800b5ce:	46ba      	mov	sl, r7
 800b5d0:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800b5d4:	ab58      	add	r3, sp, #352	; 0x160
 800b5d6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b5da:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800b5de:	ad07      	add	r5, sp, #28
 800b5e0:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b5e4:	f1ba 0f00 	cmp.w	sl, #0
 800b5e8:	dc57      	bgt.n	800b69a <__kernel_rem_pio2f+0x18e>
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f000 fba7 	bl	800bd40 <scalbnf>
 800b5f2:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	f7f5 fb5a 	bl	8000cb0 <__aeabi_fmul>
 800b5fc:	f7ff fbca 	bl	800ad94 <floorf>
 800b600:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800b604:	f7f5 fb54 	bl	8000cb0 <__aeabi_fmul>
 800b608:	4601      	mov	r1, r0
 800b60a:	4620      	mov	r0, r4
 800b60c:	f7f5 fa46 	bl	8000a9c <__aeabi_fsub>
 800b610:	4604      	mov	r4, r0
 800b612:	f7f5 fd29 	bl	8001068 <__aeabi_f2iz>
 800b616:	4680      	mov	r8, r0
 800b618:	f7f5 faf6 	bl	8000c08 <__aeabi_i2f>
 800b61c:	4601      	mov	r1, r0
 800b61e:	4620      	mov	r0, r4
 800b620:	f7f5 fa3c 	bl	8000a9c <__aeabi_fsub>
 800b624:	2e00      	cmp	r6, #0
 800b626:	4604      	mov	r4, r0
 800b628:	dd55      	ble.n	800b6d6 <__kernel_rem_pio2f+0x1ca>
 800b62a:	1e7b      	subs	r3, r7, #1
 800b62c:	aa08      	add	r2, sp, #32
 800b62e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b632:	f1c6 0208 	rsb	r2, r6, #8
 800b636:	fa45 f002 	asr.w	r0, r5, r2
 800b63a:	4480      	add	r8, r0
 800b63c:	4090      	lsls	r0, r2
 800b63e:	1a2d      	subs	r5, r5, r0
 800b640:	aa08      	add	r2, sp, #32
 800b642:	f1c6 0007 	rsb	r0, r6, #7
 800b646:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800b64a:	4105      	asrs	r5, r0
 800b64c:	2d00      	cmp	r5, #0
 800b64e:	dd50      	ble.n	800b6f2 <__kernel_rem_pio2f+0x1e6>
 800b650:	2200      	movs	r2, #0
 800b652:	4691      	mov	r9, r2
 800b654:	f108 0801 	add.w	r8, r8, #1
 800b658:	4297      	cmp	r7, r2
 800b65a:	f300 8085 	bgt.w	800b768 <__kernel_rem_pio2f+0x25c>
 800b65e:	2e00      	cmp	r6, #0
 800b660:	dd05      	ble.n	800b66e <__kernel_rem_pio2f+0x162>
 800b662:	2e01      	cmp	r6, #1
 800b664:	f000 8097 	beq.w	800b796 <__kernel_rem_pio2f+0x28a>
 800b668:	2e02      	cmp	r6, #2
 800b66a:	f000 809e 	beq.w	800b7aa <__kernel_rem_pio2f+0x29e>
 800b66e:	2d02      	cmp	r5, #2
 800b670:	d13f      	bne.n	800b6f2 <__kernel_rem_pio2f+0x1e6>
 800b672:	4621      	mov	r1, r4
 800b674:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b678:	f7f5 fa10 	bl	8000a9c <__aeabi_fsub>
 800b67c:	4604      	mov	r4, r0
 800b67e:	f1b9 0f00 	cmp.w	r9, #0
 800b682:	d036      	beq.n	800b6f2 <__kernel_rem_pio2f+0x1e6>
 800b684:	4631      	mov	r1, r6
 800b686:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b68a:	f000 fb59 	bl	800bd40 <scalbnf>
 800b68e:	4601      	mov	r1, r0
 800b690:	4620      	mov	r0, r4
 800b692:	f7f5 fa03 	bl	8000a9c <__aeabi_fsub>
 800b696:	4604      	mov	r4, r0
 800b698:	e02b      	b.n	800b6f2 <__kernel_rem_pio2f+0x1e6>
 800b69a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f7f5 fb06 	bl	8000cb0 <__aeabi_fmul>
 800b6a4:	f7f5 fce0 	bl	8001068 <__aeabi_f2iz>
 800b6a8:	f7f5 faae 	bl	8000c08 <__aeabi_i2f>
 800b6ac:	4641      	mov	r1, r8
 800b6ae:	4683      	mov	fp, r0
 800b6b0:	f7f5 fafe 	bl	8000cb0 <__aeabi_fmul>
 800b6b4:	4601      	mov	r1, r0
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f7f5 f9f0 	bl	8000a9c <__aeabi_fsub>
 800b6bc:	f7f5 fcd4 	bl	8001068 <__aeabi_f2iz>
 800b6c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6c4:	f845 0f04 	str.w	r0, [r5, #4]!
 800b6c8:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800b6cc:	4658      	mov	r0, fp
 800b6ce:	f7f5 f9e7 	bl	8000aa0 <__addsf3>
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	e786      	b.n	800b5e4 <__kernel_rem_pio2f+0xd8>
 800b6d6:	d105      	bne.n	800b6e4 <__kernel_rem_pio2f+0x1d8>
 800b6d8:	1e7b      	subs	r3, r7, #1
 800b6da:	aa08      	add	r2, sp, #32
 800b6dc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b6e0:	122d      	asrs	r5, r5, #8
 800b6e2:	e7b3      	b.n	800b64c <__kernel_rem_pio2f+0x140>
 800b6e4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b6e8:	f7f5 fc94 	bl	8001014 <__aeabi_fcmpge>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d139      	bne.n	800b764 <__kernel_rem_pio2f+0x258>
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f7f5 fc6f 	bl	8000fd8 <__aeabi_fcmpeq>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	f000 8098 	beq.w	800b830 <__kernel_rem_pio2f+0x324>
 800b700:	1e7c      	subs	r4, r7, #1
 800b702:	4623      	mov	r3, r4
 800b704:	2200      	movs	r2, #0
 800b706:	9902      	ldr	r1, [sp, #8]
 800b708:	428b      	cmp	r3, r1
 800b70a:	da55      	bge.n	800b7b8 <__kernel_rem_pio2f+0x2ac>
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	d16e      	bne.n	800b7ee <__kernel_rem_pio2f+0x2e2>
 800b710:	2301      	movs	r3, #1
 800b712:	f06f 0103 	mvn.w	r1, #3
 800b716:	fb01 f203 	mul.w	r2, r1, r3
 800b71a:	9807      	ldr	r0, [sp, #28]
 800b71c:	5882      	ldr	r2, [r0, r2]
 800b71e:	2a00      	cmp	r2, #0
 800b720:	d050      	beq.n	800b7c4 <__kernel_rem_pio2f+0x2b8>
 800b722:	f06f 0803 	mvn.w	r8, #3
 800b726:	9a04      	ldr	r2, [sp, #16]
 800b728:	1c7d      	adds	r5, r7, #1
 800b72a:	19d4      	adds	r4, r2, r7
 800b72c:	aa58      	add	r2, sp, #352	; 0x160
 800b72e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b732:	3cf4      	subs	r4, #244	; 0xf4
 800b734:	441f      	add	r7, r3
 800b736:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b73a:	42bd      	cmp	r5, r7
 800b73c:	f73f af47 	bgt.w	800b5ce <__kernel_rem_pio2f+0xc2>
 800b740:	9b06      	ldr	r3, [sp, #24]
 800b742:	f04f 0a00 	mov.w	sl, #0
 800b746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b74a:	f7f5 fa5d 	bl	8000c08 <__aeabi_i2f>
 800b74e:	f04f 0b00 	mov.w	fp, #0
 800b752:	f844 0f04 	str.w	r0, [r4, #4]!
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	459a      	cmp	sl, r3
 800b75a:	dd35      	ble.n	800b7c8 <__kernel_rem_pio2f+0x2bc>
 800b75c:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800b760:	3501      	adds	r5, #1
 800b762:	e7ea      	b.n	800b73a <__kernel_rem_pio2f+0x22e>
 800b764:	2502      	movs	r5, #2
 800b766:	e773      	b.n	800b650 <__kernel_rem_pio2f+0x144>
 800b768:	ab08      	add	r3, sp, #32
 800b76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76e:	f1b9 0f00 	cmp.w	r9, #0
 800b772:	d109      	bne.n	800b788 <__kernel_rem_pio2f+0x27c>
 800b774:	b12b      	cbz	r3, 800b782 <__kernel_rem_pio2f+0x276>
 800b776:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b77a:	a908      	add	r1, sp, #32
 800b77c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b780:	2301      	movs	r3, #1
 800b782:	3201      	adds	r2, #1
 800b784:	4699      	mov	r9, r3
 800b786:	e767      	b.n	800b658 <__kernel_rem_pio2f+0x14c>
 800b788:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b78c:	a908      	add	r1, sp, #32
 800b78e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b792:	464b      	mov	r3, r9
 800b794:	e7f5      	b.n	800b782 <__kernel_rem_pio2f+0x276>
 800b796:	1e7a      	subs	r2, r7, #1
 800b798:	ab08      	add	r3, sp, #32
 800b79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7a2:	a908      	add	r1, sp, #32
 800b7a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b7a8:	e761      	b.n	800b66e <__kernel_rem_pio2f+0x162>
 800b7aa:	1e7a      	subs	r2, r7, #1
 800b7ac:	ab08      	add	r3, sp, #32
 800b7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7b6:	e7f4      	b.n	800b7a2 <__kernel_rem_pio2f+0x296>
 800b7b8:	a908      	add	r1, sp, #32
 800b7ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	430a      	orrs	r2, r1
 800b7c2:	e7a0      	b.n	800b706 <__kernel_rem_pio2f+0x1fa>
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	e7a6      	b.n	800b716 <__kernel_rem_pio2f+0x20a>
 800b7c8:	fb08 f30a 	mul.w	r3, r8, sl
 800b7cc:	9a05      	ldr	r2, [sp, #20]
 800b7ce:	58e0      	ldr	r0, [r4, r3]
 800b7d0:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800b7d4:	f7f5 fa6c 	bl	8000cb0 <__aeabi_fmul>
 800b7d8:	4601      	mov	r1, r0
 800b7da:	4658      	mov	r0, fp
 800b7dc:	f7f5 f960 	bl	8000aa0 <__addsf3>
 800b7e0:	f10a 0a01 	add.w	sl, sl, #1
 800b7e4:	4683      	mov	fp, r0
 800b7e6:	e7b6      	b.n	800b756 <__kernel_rem_pio2f+0x24a>
 800b7e8:	0800c490 	.word	0x0800c490
 800b7ec:	3c01      	subs	r4, #1
 800b7ee:	ab08      	add	r3, sp, #32
 800b7f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b7f4:	3e08      	subs	r6, #8
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d0f8      	beq.n	800b7ec <__kernel_rem_pio2f+0x2e0>
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b800:	f000 fa9e 	bl	800bd40 <scalbnf>
 800b804:	46a1      	mov	r9, r4
 800b806:	4682      	mov	sl, r0
 800b808:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 800b80c:	ae44      	add	r6, sp, #272	; 0x110
 800b80e:	f1b9 0f00 	cmp.w	r9, #0
 800b812:	da3f      	bge.n	800b894 <__kernel_rem_pio2f+0x388>
 800b814:	2700      	movs	r7, #0
 800b816:	f04f 0b00 	mov.w	fp, #0
 800b81a:	4b82      	ldr	r3, [pc, #520]	; (800ba24 <__kernel_rem_pio2f+0x518>)
 800b81c:	aa30      	add	r2, sp, #192	; 0xc0
 800b81e:	ebb4 0a07 	subs.w	sl, r4, r7
 800b822:	d462      	bmi.n	800b8ea <__kernel_rem_pio2f+0x3de>
 800b824:	a944      	add	r1, sp, #272	; 0x110
 800b826:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 800b82a:	46d9      	mov	r9, fp
 800b82c:	2600      	movs	r6, #0
 800b82e:	e053      	b.n	800b8d8 <__kernel_rem_pio2f+0x3cc>
 800b830:	4271      	negs	r1, r6
 800b832:	4620      	mov	r0, r4
 800b834:	f000 fa84 	bl	800bd40 <scalbnf>
 800b838:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b83c:	4604      	mov	r4, r0
 800b83e:	f7f5 fbe9 	bl	8001014 <__aeabi_fcmpge>
 800b842:	b1f8      	cbz	r0, 800b884 <__kernel_rem_pio2f+0x378>
 800b844:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b848:	4620      	mov	r0, r4
 800b84a:	f7f5 fa31 	bl	8000cb0 <__aeabi_fmul>
 800b84e:	f7f5 fc0b 	bl	8001068 <__aeabi_f2iz>
 800b852:	f7f5 f9d9 	bl	8000c08 <__aeabi_i2f>
 800b856:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b85a:	4681      	mov	r9, r0
 800b85c:	f7f5 fa28 	bl	8000cb0 <__aeabi_fmul>
 800b860:	4601      	mov	r1, r0
 800b862:	4620      	mov	r0, r4
 800b864:	f7f5 f91a 	bl	8000a9c <__aeabi_fsub>
 800b868:	f7f5 fbfe 	bl	8001068 <__aeabi_f2iz>
 800b86c:	ab08      	add	r3, sp, #32
 800b86e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b872:	4648      	mov	r0, r9
 800b874:	f7f5 fbf8 	bl	8001068 <__aeabi_f2iz>
 800b878:	1c7c      	adds	r4, r7, #1
 800b87a:	ab08      	add	r3, sp, #32
 800b87c:	3608      	adds	r6, #8
 800b87e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b882:	e7ba      	b.n	800b7fa <__kernel_rem_pio2f+0x2ee>
 800b884:	4620      	mov	r0, r4
 800b886:	f7f5 fbef 	bl	8001068 <__aeabi_f2iz>
 800b88a:	ab08      	add	r3, sp, #32
 800b88c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b890:	463c      	mov	r4, r7
 800b892:	e7b2      	b.n	800b7fa <__kernel_rem_pio2f+0x2ee>
 800b894:	ab08      	add	r3, sp, #32
 800b896:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800b89a:	f7f5 f9b5 	bl	8000c08 <__aeabi_i2f>
 800b89e:	4651      	mov	r1, sl
 800b8a0:	f7f5 fa06 	bl	8000cb0 <__aeabi_fmul>
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 800b8aa:	4650      	mov	r0, sl
 800b8ac:	f7f5 fa00 	bl	8000cb0 <__aeabi_fmul>
 800b8b0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b8b4:	4682      	mov	sl, r0
 800b8b6:	e7aa      	b.n	800b80e <__kernel_rem_pio2f+0x302>
 800b8b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b8bc:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 800b8c0:	9204      	str	r2, [sp, #16]
 800b8c2:	9303      	str	r3, [sp, #12]
 800b8c4:	f7f5 f9f4 	bl	8000cb0 <__aeabi_fmul>
 800b8c8:	4601      	mov	r1, r0
 800b8ca:	4648      	mov	r0, r9
 800b8cc:	f7f5 f8e8 	bl	8000aa0 <__addsf3>
 800b8d0:	4681      	mov	r9, r0
 800b8d2:	9a04      	ldr	r2, [sp, #16]
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	3601      	adds	r6, #1
 800b8d8:	9902      	ldr	r1, [sp, #8]
 800b8da:	428e      	cmp	r6, r1
 800b8dc:	dc01      	bgt.n	800b8e2 <__kernel_rem_pio2f+0x3d6>
 800b8de:	42be      	cmp	r6, r7
 800b8e0:	ddea      	ble.n	800b8b8 <__kernel_rem_pio2f+0x3ac>
 800b8e2:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 800b8e6:	3701      	adds	r7, #1
 800b8e8:	e799      	b.n	800b81e <__kernel_rem_pio2f+0x312>
 800b8ea:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800b8ec:	2b03      	cmp	r3, #3
 800b8ee:	d826      	bhi.n	800b93e <__kernel_rem_pio2f+0x432>
 800b8f0:	e8df f003 	tbb	[pc, r3]
 800b8f4:	2a02021c 	.word	0x2a02021c
 800b8f8:	4626      	mov	r6, r4
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	af30      	add	r7, sp, #192	; 0xc0
 800b8fe:	2e00      	cmp	r6, #0
 800b900:	da40      	bge.n	800b984 <__kernel_rem_pio2f+0x478>
 800b902:	2d00      	cmp	r5, #0
 800b904:	d044      	beq.n	800b990 <__kernel_rem_pio2f+0x484>
 800b906:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800b90a:	9a01      	ldr	r2, [sp, #4]
 800b90c:	af58      	add	r7, sp, #352	; 0x160
 800b90e:	4601      	mov	r1, r0
 800b910:	6013      	str	r3, [r2, #0]
 800b912:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800b916:	f7f5 f8c1 	bl	8000a9c <__aeabi_fsub>
 800b91a:	2601      	movs	r6, #1
 800b91c:	42b4      	cmp	r4, r6
 800b91e:	da39      	bge.n	800b994 <__kernel_rem_pio2f+0x488>
 800b920:	b10d      	cbz	r5, 800b926 <__kernel_rem_pio2f+0x41a>
 800b922:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b926:	9b01      	ldr	r3, [sp, #4]
 800b928:	6058      	str	r0, [r3, #4]
 800b92a:	e008      	b.n	800b93e <__kernel_rem_pio2f+0x432>
 800b92c:	2000      	movs	r0, #0
 800b92e:	ae30      	add	r6, sp, #192	; 0xc0
 800b930:	2c00      	cmp	r4, #0
 800b932:	da21      	bge.n	800b978 <__kernel_rem_pio2f+0x46c>
 800b934:	b10d      	cbz	r5, 800b93a <__kernel_rem_pio2f+0x42e>
 800b936:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b93a:	9b01      	ldr	r3, [sp, #4]
 800b93c:	6018      	str	r0, [r3, #0]
 800b93e:	f008 0007 	and.w	r0, r8, #7
 800b942:	b059      	add	sp, #356	; 0x164
 800b944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b948:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800b94c:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 800b950:	4637      	mov	r7, r6
 800b952:	46a1      	mov	r9, r4
 800b954:	f1b9 0f00 	cmp.w	r9, #0
 800b958:	dc22      	bgt.n	800b9a0 <__kernel_rem_pio2f+0x494>
 800b95a:	4627      	mov	r7, r4
 800b95c:	2f01      	cmp	r7, #1
 800b95e:	dc38      	bgt.n	800b9d2 <__kernel_rem_pio2f+0x4c6>
 800b960:	2000      	movs	r0, #0
 800b962:	2c01      	cmp	r4, #1
 800b964:	dc4c      	bgt.n	800ba00 <__kernel_rem_pio2f+0x4f4>
 800b966:	2d00      	cmp	r5, #0
 800b968:	d150      	bne.n	800ba0c <__kernel_rem_pio2f+0x500>
 800b96a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b96c:	9a01      	ldr	r2, [sp, #4]
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800b972:	6053      	str	r3, [r2, #4]
 800b974:	6090      	str	r0, [r2, #8]
 800b976:	e7e2      	b.n	800b93e <__kernel_rem_pio2f+0x432>
 800b978:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800b97c:	f7f5 f890 	bl	8000aa0 <__addsf3>
 800b980:	3c01      	subs	r4, #1
 800b982:	e7d5      	b.n	800b930 <__kernel_rem_pio2f+0x424>
 800b984:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800b988:	f7f5 f88a 	bl	8000aa0 <__addsf3>
 800b98c:	3e01      	subs	r6, #1
 800b98e:	e7b6      	b.n	800b8fe <__kernel_rem_pio2f+0x3f2>
 800b990:	4603      	mov	r3, r0
 800b992:	e7ba      	b.n	800b90a <__kernel_rem_pio2f+0x3fe>
 800b994:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800b998:	f7f5 f882 	bl	8000aa0 <__addsf3>
 800b99c:	3601      	adds	r6, #1
 800b99e:	e7bd      	b.n	800b91c <__kernel_rem_pio2f+0x410>
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	9303      	str	r3, [sp, #12]
 800b9ac:	9202      	str	r2, [sp, #8]
 800b9ae:	f7f5 f877 	bl	8000aa0 <__addsf3>
 800b9b2:	9a02      	ldr	r2, [sp, #8]
 800b9b4:	4601      	mov	r1, r0
 800b9b6:	4683      	mov	fp, r0
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	f7f5 f86f 	bl	8000a9c <__aeabi_fsub>
 800b9be:	9b03      	ldr	r3, [sp, #12]
 800b9c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	f7f5 f86b 	bl	8000aa0 <__addsf3>
 800b9ca:	6038      	str	r0, [r7, #0]
 800b9cc:	f847 bd04 	str.w	fp, [r7, #-4]!
 800b9d0:	e7c0      	b.n	800b954 <__kernel_rem_pio2f+0x448>
 800b9d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b9d6:	f8d6 b000 	ldr.w	fp, [r6]
 800b9da:	4618      	mov	r0, r3
 800b9dc:	4659      	mov	r1, fp
 800b9de:	9302      	str	r3, [sp, #8]
 800b9e0:	f7f5 f85e 	bl	8000aa0 <__addsf3>
 800b9e4:	9b02      	ldr	r3, [sp, #8]
 800b9e6:	4601      	mov	r1, r0
 800b9e8:	4681      	mov	r9, r0
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7f5 f856 	bl	8000a9c <__aeabi_fsub>
 800b9f0:	4659      	mov	r1, fp
 800b9f2:	f7f5 f855 	bl	8000aa0 <__addsf3>
 800b9f6:	3f01      	subs	r7, #1
 800b9f8:	6030      	str	r0, [r6, #0]
 800b9fa:	f846 9d04 	str.w	r9, [r6, #-4]!
 800b9fe:	e7ad      	b.n	800b95c <__kernel_rem_pio2f+0x450>
 800ba00:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800ba04:	f7f5 f84c 	bl	8000aa0 <__addsf3>
 800ba08:	3c01      	subs	r4, #1
 800ba0a:	e7aa      	b.n	800b962 <__kernel_rem_pio2f+0x456>
 800ba0c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800ba0e:	9a01      	ldr	r2, [sp, #4]
 800ba10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800ba18:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ba1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba20:	6053      	str	r3, [r2, #4]
 800ba22:	e7a7      	b.n	800b974 <__kernel_rem_pio2f+0x468>
 800ba24:	0800c464 	.word	0x0800c464

0800ba28 <__kernel_sinf>:
 800ba28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba2c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ba30:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ba34:	4604      	mov	r4, r0
 800ba36:	460f      	mov	r7, r1
 800ba38:	4691      	mov	r9, r2
 800ba3a:	da03      	bge.n	800ba44 <__kernel_sinf+0x1c>
 800ba3c:	f7f5 fb14 	bl	8001068 <__aeabi_f2iz>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d035      	beq.n	800bab0 <__kernel_sinf+0x88>
 800ba44:	4621      	mov	r1, r4
 800ba46:	4620      	mov	r0, r4
 800ba48:	f7f5 f932 	bl	8000cb0 <__aeabi_fmul>
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	4601      	mov	r1, r0
 800ba50:	4620      	mov	r0, r4
 800ba52:	f7f5 f92d 	bl	8000cb0 <__aeabi_fmul>
 800ba56:	4929      	ldr	r1, [pc, #164]	; (800bafc <__kernel_sinf+0xd4>)
 800ba58:	4606      	mov	r6, r0
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f7f5 f928 	bl	8000cb0 <__aeabi_fmul>
 800ba60:	4927      	ldr	r1, [pc, #156]	; (800bb00 <__kernel_sinf+0xd8>)
 800ba62:	f7f5 f81b 	bl	8000a9c <__aeabi_fsub>
 800ba66:	4629      	mov	r1, r5
 800ba68:	f7f5 f922 	bl	8000cb0 <__aeabi_fmul>
 800ba6c:	4925      	ldr	r1, [pc, #148]	; (800bb04 <__kernel_sinf+0xdc>)
 800ba6e:	f7f5 f817 	bl	8000aa0 <__addsf3>
 800ba72:	4629      	mov	r1, r5
 800ba74:	f7f5 f91c 	bl	8000cb0 <__aeabi_fmul>
 800ba78:	4923      	ldr	r1, [pc, #140]	; (800bb08 <__kernel_sinf+0xe0>)
 800ba7a:	f7f5 f80f 	bl	8000a9c <__aeabi_fsub>
 800ba7e:	4629      	mov	r1, r5
 800ba80:	f7f5 f916 	bl	8000cb0 <__aeabi_fmul>
 800ba84:	4921      	ldr	r1, [pc, #132]	; (800bb0c <__kernel_sinf+0xe4>)
 800ba86:	f7f5 f80b 	bl	8000aa0 <__addsf3>
 800ba8a:	4680      	mov	r8, r0
 800ba8c:	f1b9 0f00 	cmp.w	r9, #0
 800ba90:	d111      	bne.n	800bab6 <__kernel_sinf+0x8e>
 800ba92:	4601      	mov	r1, r0
 800ba94:	4628      	mov	r0, r5
 800ba96:	f7f5 f90b 	bl	8000cb0 <__aeabi_fmul>
 800ba9a:	491d      	ldr	r1, [pc, #116]	; (800bb10 <__kernel_sinf+0xe8>)
 800ba9c:	f7f4 fffe 	bl	8000a9c <__aeabi_fsub>
 800baa0:	4631      	mov	r1, r6
 800baa2:	f7f5 f905 	bl	8000cb0 <__aeabi_fmul>
 800baa6:	4601      	mov	r1, r0
 800baa8:	4620      	mov	r0, r4
 800baaa:	f7f4 fff9 	bl	8000aa0 <__addsf3>
 800baae:	4604      	mov	r4, r0
 800bab0:	4620      	mov	r0, r4
 800bab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bab6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800baba:	4638      	mov	r0, r7
 800babc:	f7f5 f8f8 	bl	8000cb0 <__aeabi_fmul>
 800bac0:	4641      	mov	r1, r8
 800bac2:	4681      	mov	r9, r0
 800bac4:	4630      	mov	r0, r6
 800bac6:	f7f5 f8f3 	bl	8000cb0 <__aeabi_fmul>
 800baca:	4601      	mov	r1, r0
 800bacc:	4648      	mov	r0, r9
 800bace:	f7f4 ffe5 	bl	8000a9c <__aeabi_fsub>
 800bad2:	4629      	mov	r1, r5
 800bad4:	f7f5 f8ec 	bl	8000cb0 <__aeabi_fmul>
 800bad8:	4639      	mov	r1, r7
 800bada:	f7f4 ffdf 	bl	8000a9c <__aeabi_fsub>
 800bade:	490c      	ldr	r1, [pc, #48]	; (800bb10 <__kernel_sinf+0xe8>)
 800bae0:	4605      	mov	r5, r0
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7f5 f8e4 	bl	8000cb0 <__aeabi_fmul>
 800bae8:	4601      	mov	r1, r0
 800baea:	4628      	mov	r0, r5
 800baec:	f7f4 ffd8 	bl	8000aa0 <__addsf3>
 800baf0:	4601      	mov	r1, r0
 800baf2:	4620      	mov	r0, r4
 800baf4:	f7f4 ffd2 	bl	8000a9c <__aeabi_fsub>
 800baf8:	e7d9      	b.n	800baae <__kernel_sinf+0x86>
 800bafa:	bf00      	nop
 800bafc:	2f2ec9d3 	.word	0x2f2ec9d3
 800bb00:	32d72f34 	.word	0x32d72f34
 800bb04:	3638ef1b 	.word	0x3638ef1b
 800bb08:	39500d01 	.word	0x39500d01
 800bb0c:	3c088889 	.word	0x3c088889
 800bb10:	3e2aaaab 	.word	0x3e2aaaab

0800bb14 <matherr>:
 800bb14:	2000      	movs	r0, #0
 800bb16:	4770      	bx	lr

0800bb18 <atanf>:
 800bb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800bb20:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800bb24:	4604      	mov	r4, r0
 800bb26:	4607      	mov	r7, r0
 800bb28:	db0e      	blt.n	800bb48 <atanf+0x30>
 800bb2a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bb2e:	dd04      	ble.n	800bb3a <atanf+0x22>
 800bb30:	4601      	mov	r1, r0
 800bb32:	f7f4 ffb5 	bl	8000aa0 <__addsf3>
 800bb36:	4604      	mov	r4, r0
 800bb38:	e003      	b.n	800bb42 <atanf+0x2a>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	f300 80d2 	bgt.w	800bce4 <atanf+0x1cc>
 800bb40:	4c69      	ldr	r4, [pc, #420]	; (800bce8 <atanf+0x1d0>)
 800bb42:	4620      	mov	r0, r4
 800bb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb48:	4b68      	ldr	r3, [pc, #416]	; (800bcec <atanf+0x1d4>)
 800bb4a:	429d      	cmp	r5, r3
 800bb4c:	dc0e      	bgt.n	800bb6c <atanf+0x54>
 800bb4e:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800bb52:	da08      	bge.n	800bb66 <atanf+0x4e>
 800bb54:	4966      	ldr	r1, [pc, #408]	; (800bcf0 <atanf+0x1d8>)
 800bb56:	f7f4 ffa3 	bl	8000aa0 <__addsf3>
 800bb5a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb5e:	f7f5 fa63 	bl	8001028 <__aeabi_fcmpgt>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d1ed      	bne.n	800bb42 <atanf+0x2a>
 800bb66:	f04f 36ff 	mov.w	r6, #4294967295
 800bb6a:	e01c      	b.n	800bba6 <atanf+0x8e>
 800bb6c:	f000 f8e4 	bl	800bd38 <fabsf>
 800bb70:	4b60      	ldr	r3, [pc, #384]	; (800bcf4 <atanf+0x1dc>)
 800bb72:	4604      	mov	r4, r0
 800bb74:	429d      	cmp	r5, r3
 800bb76:	dc7c      	bgt.n	800bc72 <atanf+0x15a>
 800bb78:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800bb7c:	429d      	cmp	r5, r3
 800bb7e:	dc67      	bgt.n	800bc50 <atanf+0x138>
 800bb80:	4601      	mov	r1, r0
 800bb82:	f7f4 ff8d 	bl	8000aa0 <__addsf3>
 800bb86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb8a:	f7f4 ff87 	bl	8000a9c <__aeabi_fsub>
 800bb8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bb92:	4605      	mov	r5, r0
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7f4 ff83 	bl	8000aa0 <__addsf3>
 800bb9a:	4601      	mov	r1, r0
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f7f5 f93b 	bl	8000e18 <__aeabi_fdiv>
 800bba2:	2600      	movs	r6, #0
 800bba4:	4604      	mov	r4, r0
 800bba6:	4621      	mov	r1, r4
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7f5 f881 	bl	8000cb0 <__aeabi_fmul>
 800bbae:	4601      	mov	r1, r0
 800bbb0:	4680      	mov	r8, r0
 800bbb2:	f7f5 f87d 	bl	8000cb0 <__aeabi_fmul>
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	494f      	ldr	r1, [pc, #316]	; (800bcf8 <atanf+0x1e0>)
 800bbba:	f7f5 f879 	bl	8000cb0 <__aeabi_fmul>
 800bbbe:	494f      	ldr	r1, [pc, #316]	; (800bcfc <atanf+0x1e4>)
 800bbc0:	f7f4 ff6e 	bl	8000aa0 <__addsf3>
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	f7f5 f873 	bl	8000cb0 <__aeabi_fmul>
 800bbca:	494d      	ldr	r1, [pc, #308]	; (800bd00 <atanf+0x1e8>)
 800bbcc:	f7f4 ff68 	bl	8000aa0 <__addsf3>
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	f7f5 f86d 	bl	8000cb0 <__aeabi_fmul>
 800bbd6:	494b      	ldr	r1, [pc, #300]	; (800bd04 <atanf+0x1ec>)
 800bbd8:	f7f4 ff62 	bl	8000aa0 <__addsf3>
 800bbdc:	4629      	mov	r1, r5
 800bbde:	f7f5 f867 	bl	8000cb0 <__aeabi_fmul>
 800bbe2:	4949      	ldr	r1, [pc, #292]	; (800bd08 <atanf+0x1f0>)
 800bbe4:	f7f4 ff5c 	bl	8000aa0 <__addsf3>
 800bbe8:	4629      	mov	r1, r5
 800bbea:	f7f5 f861 	bl	8000cb0 <__aeabi_fmul>
 800bbee:	4947      	ldr	r1, [pc, #284]	; (800bd0c <atanf+0x1f4>)
 800bbf0:	f7f4 ff56 	bl	8000aa0 <__addsf3>
 800bbf4:	4641      	mov	r1, r8
 800bbf6:	f7f5 f85b 	bl	8000cb0 <__aeabi_fmul>
 800bbfa:	4945      	ldr	r1, [pc, #276]	; (800bd10 <atanf+0x1f8>)
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f7f5 f856 	bl	8000cb0 <__aeabi_fmul>
 800bc04:	4943      	ldr	r1, [pc, #268]	; (800bd14 <atanf+0x1fc>)
 800bc06:	f7f4 ff49 	bl	8000a9c <__aeabi_fsub>
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	f7f5 f850 	bl	8000cb0 <__aeabi_fmul>
 800bc10:	4941      	ldr	r1, [pc, #260]	; (800bd18 <atanf+0x200>)
 800bc12:	f7f4 ff43 	bl	8000a9c <__aeabi_fsub>
 800bc16:	4629      	mov	r1, r5
 800bc18:	f7f5 f84a 	bl	8000cb0 <__aeabi_fmul>
 800bc1c:	493f      	ldr	r1, [pc, #252]	; (800bd1c <atanf+0x204>)
 800bc1e:	f7f4 ff3d 	bl	8000a9c <__aeabi_fsub>
 800bc22:	4629      	mov	r1, r5
 800bc24:	f7f5 f844 	bl	8000cb0 <__aeabi_fmul>
 800bc28:	493d      	ldr	r1, [pc, #244]	; (800bd20 <atanf+0x208>)
 800bc2a:	f7f4 ff37 	bl	8000a9c <__aeabi_fsub>
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f7f5 f83e 	bl	8000cb0 <__aeabi_fmul>
 800bc34:	1c73      	adds	r3, r6, #1
 800bc36:	4601      	mov	r1, r0
 800bc38:	4640      	mov	r0, r8
 800bc3a:	d139      	bne.n	800bcb0 <atanf+0x198>
 800bc3c:	f7f4 ff30 	bl	8000aa0 <__addsf3>
 800bc40:	4621      	mov	r1, r4
 800bc42:	f7f5 f835 	bl	8000cb0 <__aeabi_fmul>
 800bc46:	4601      	mov	r1, r0
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f7f4 ff27 	bl	8000a9c <__aeabi_fsub>
 800bc4e:	e772      	b.n	800bb36 <atanf+0x1e>
 800bc50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc54:	f7f4 ff22 	bl	8000a9c <__aeabi_fsub>
 800bc58:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f7f4 ff1e 	bl	8000aa0 <__addsf3>
 800bc64:	4601      	mov	r1, r0
 800bc66:	4628      	mov	r0, r5
 800bc68:	f7f5 f8d6 	bl	8000e18 <__aeabi_fdiv>
 800bc6c:	2601      	movs	r6, #1
 800bc6e:	4604      	mov	r4, r0
 800bc70:	e799      	b.n	800bba6 <atanf+0x8e>
 800bc72:	4b2c      	ldr	r3, [pc, #176]	; (800bd24 <atanf+0x20c>)
 800bc74:	429d      	cmp	r5, r3
 800bc76:	dc14      	bgt.n	800bca2 <atanf+0x18a>
 800bc78:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bc7c:	f7f4 ff0e 	bl	8000a9c <__aeabi_fsub>
 800bc80:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bc84:	4605      	mov	r5, r0
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7f5 f812 	bl	8000cb0 <__aeabi_fmul>
 800bc8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc90:	f7f4 ff06 	bl	8000aa0 <__addsf3>
 800bc94:	4601      	mov	r1, r0
 800bc96:	4628      	mov	r0, r5
 800bc98:	f7f5 f8be 	bl	8000e18 <__aeabi_fdiv>
 800bc9c:	2602      	movs	r6, #2
 800bc9e:	4604      	mov	r4, r0
 800bca0:	e781      	b.n	800bba6 <atanf+0x8e>
 800bca2:	4601      	mov	r1, r0
 800bca4:	4820      	ldr	r0, [pc, #128]	; (800bd28 <atanf+0x210>)
 800bca6:	f7f5 f8b7 	bl	8000e18 <__aeabi_fdiv>
 800bcaa:	2603      	movs	r6, #3
 800bcac:	4604      	mov	r4, r0
 800bcae:	e77a      	b.n	800bba6 <atanf+0x8e>
 800bcb0:	f7f4 fef6 	bl	8000aa0 <__addsf3>
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	f7f4 fffb 	bl	8000cb0 <__aeabi_fmul>
 800bcba:	4b1c      	ldr	r3, [pc, #112]	; (800bd2c <atanf+0x214>)
 800bcbc:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800bcc0:	f7f4 feec 	bl	8000a9c <__aeabi_fsub>
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	f7f4 fee9 	bl	8000a9c <__aeabi_fsub>
 800bcca:	4b19      	ldr	r3, [pc, #100]	; (800bd30 <atanf+0x218>)
 800bccc:	4601      	mov	r1, r0
 800bcce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bcd2:	f7f4 fee3 	bl	8000a9c <__aeabi_fsub>
 800bcd6:	2f00      	cmp	r7, #0
 800bcd8:	4604      	mov	r4, r0
 800bcda:	f6bf af32 	bge.w	800bb42 <atanf+0x2a>
 800bcde:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800bce2:	e72e      	b.n	800bb42 <atanf+0x2a>
 800bce4:	4c13      	ldr	r4, [pc, #76]	; (800bd34 <atanf+0x21c>)
 800bce6:	e72c      	b.n	800bb42 <atanf+0x2a>
 800bce8:	bfc90fdb 	.word	0xbfc90fdb
 800bcec:	3edfffff 	.word	0x3edfffff
 800bcf0:	7149f2ca 	.word	0x7149f2ca
 800bcf4:	3f97ffff 	.word	0x3f97ffff
 800bcf8:	3c8569d7 	.word	0x3c8569d7
 800bcfc:	3d4bda59 	.word	0x3d4bda59
 800bd00:	3d886b35 	.word	0x3d886b35
 800bd04:	3dba2e6e 	.word	0x3dba2e6e
 800bd08:	3e124925 	.word	0x3e124925
 800bd0c:	3eaaaaab 	.word	0x3eaaaaab
 800bd10:	bd15a221 	.word	0xbd15a221
 800bd14:	3d6ef16b 	.word	0x3d6ef16b
 800bd18:	3d9d8795 	.word	0x3d9d8795
 800bd1c:	3de38e38 	.word	0x3de38e38
 800bd20:	3e4ccccd 	.word	0x3e4ccccd
 800bd24:	401bffff 	.word	0x401bffff
 800bd28:	bf800000 	.word	0xbf800000
 800bd2c:	0800c4ac 	.word	0x0800c4ac
 800bd30:	0800c49c 	.word	0x0800c49c
 800bd34:	3fc90fdb 	.word	0x3fc90fdb

0800bd38 <fabsf>:
 800bd38:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bd3c:	4770      	bx	lr
	...

0800bd40 <scalbnf>:
 800bd40:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800bd44:	b510      	push	{r4, lr}
 800bd46:	4602      	mov	r2, r0
 800bd48:	460c      	mov	r4, r1
 800bd4a:	d028      	beq.n	800bd9e <scalbnf+0x5e>
 800bd4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bd50:	d304      	bcc.n	800bd5c <scalbnf+0x1c>
 800bd52:	4601      	mov	r1, r0
 800bd54:	f7f4 fea4 	bl	8000aa0 <__addsf3>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	e020      	b.n	800bd9e <scalbnf+0x5e>
 800bd5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd60:	d215      	bcs.n	800bd8e <scalbnf+0x4e>
 800bd62:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800bd66:	f7f4 ffa3 	bl	8000cb0 <__aeabi_fmul>
 800bd6a:	4b18      	ldr	r3, [pc, #96]	; (800bdcc <scalbnf+0x8c>)
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	429c      	cmp	r4, r3
 800bd70:	db22      	blt.n	800bdb8 <scalbnf+0x78>
 800bd72:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bd76:	3b19      	subs	r3, #25
 800bd78:	4423      	add	r3, r4
 800bd7a:	2bfe      	cmp	r3, #254	; 0xfe
 800bd7c:	dd09      	ble.n	800bd92 <scalbnf+0x52>
 800bd7e:	4611      	mov	r1, r2
 800bd80:	4813      	ldr	r0, [pc, #76]	; (800bdd0 <scalbnf+0x90>)
 800bd82:	f000 f829 	bl	800bdd8 <copysignf>
 800bd86:	4912      	ldr	r1, [pc, #72]	; (800bdd0 <scalbnf+0x90>)
 800bd88:	f7f4 ff92 	bl	8000cb0 <__aeabi_fmul>
 800bd8c:	e7e4      	b.n	800bd58 <scalbnf+0x18>
 800bd8e:	0ddb      	lsrs	r3, r3, #23
 800bd90:	e7f2      	b.n	800bd78 <scalbnf+0x38>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	dd05      	ble.n	800bda2 <scalbnf+0x62>
 800bd96:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800bd9a:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800bd9e:	4610      	mov	r0, r2
 800bda0:	bd10      	pop	{r4, pc}
 800bda2:	f113 0f16 	cmn.w	r3, #22
 800bda6:	da09      	bge.n	800bdbc <scalbnf+0x7c>
 800bda8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bdac:	429c      	cmp	r4, r3
 800bdae:	4611      	mov	r1, r2
 800bdb0:	dce6      	bgt.n	800bd80 <scalbnf+0x40>
 800bdb2:	4808      	ldr	r0, [pc, #32]	; (800bdd4 <scalbnf+0x94>)
 800bdb4:	f000 f810 	bl	800bdd8 <copysignf>
 800bdb8:	4906      	ldr	r1, [pc, #24]	; (800bdd4 <scalbnf+0x94>)
 800bdba:	e7e5      	b.n	800bd88 <scalbnf+0x48>
 800bdbc:	3319      	adds	r3, #25
 800bdbe:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800bdc2:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800bdc6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bdca:	e7dd      	b.n	800bd88 <scalbnf+0x48>
 800bdcc:	ffff3cb0 	.word	0xffff3cb0
 800bdd0:	7149f2ca 	.word	0x7149f2ca
 800bdd4:	0da24260 	.word	0x0da24260

0800bdd8 <copysignf>:
 800bdd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bddc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bde0:	4308      	orrs	r0, r1
 800bde2:	4770      	bx	lr

0800bde4 <__errno>:
 800bde4:	4b01      	ldr	r3, [pc, #4]	; (800bdec <__errno+0x8>)
 800bde6:	6818      	ldr	r0, [r3, #0]
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	200000f0 	.word	0x200000f0

0800bdf0 <_init>:
 800bdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf2:	bf00      	nop
 800bdf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf6:	bc08      	pop	{r3}
 800bdf8:	469e      	mov	lr, r3
 800bdfa:	4770      	bx	lr

0800bdfc <_fini>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	bf00      	nop
 800be00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be02:	bc08      	pop	{r3}
 800be04:	469e      	mov	lr, r3
 800be06:	4770      	bx	lr
>>>>>>> STM32GRBL/master
